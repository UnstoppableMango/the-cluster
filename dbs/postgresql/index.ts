import * as pulumi from '@pulumi/pulumi';
import * as random from '@pulumi/random';
import * as k8s from '@pulumi/kubernetes';
import { provider } from '@unmango/thecluster/cluster/from-stack';
import { rbdStorageClass } from '@unmango/thecluster/storage';
import { keepers, username, database, versions } from './config';

const ns = new k8s.core.v1.Namespace('postgresql', {
  metadata: { name: 'postgresql' },
}, { provider });

const adminPassword = new random.RandomPassword('admin', {
  length: 48,
  keepers: {
    // Manual password reset with `./scripts/reset-password.sh`
    manual: keepers.admin,
  },
});

const userPassword = new random.RandomPassword('user', {
  length: 48,
  keepers: {
    // Manual password reset with `./scripts/reset-password.sh`
    manual: keepers.user,
  },
});

const replicationPassword = new random.RandomPassword('replication', {
  length: 48,
  keepers: {
    // Manual password reset with `./scripts/reset-password.sh`
    manual: keepers.replication,
  },
});

const credSecert = new k8s.core.v1.Secret('credentials', {
  metadata: {
    name: 'credentials',
    namespace: ns.metadata.name,
  },
  stringData: {
    admin: adminPassword.result,
    user: userPassword.result,
    replication: replicationPassword.result,
  },
}, { provider });

const chart = new k8s.helm.v3.Chart('postgresql', {
  path: './',
  namespace: ns.metadata.name,
  values: {
    // https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
    postgresql: {
      global: {
        storageClass: rbdStorageClass,
        postgresql: {
          auth: {
            username,
            database,
            existingSecret: credSecert.metadata.name,
            secretKeys: {
              adminPasswordKey: 'admin',
              userPasswordKey: 'user',
              replicationPasswordKey: 'replication',
            },
          },
        },
      },
    },
    kubeVersion: versions.k8s,
    // TODO: See if one of these can make things prettier
    // nameOverride: '',
    // fullnameOverride: '',
    image: {
      tag: versions.bitnami.postgres,
    },
    auth: {
      enablePostgresUser: true,
    },
    architecture: 'replication',
    replication: {
      applicationName: 'THECLUSTER',
    },
    audit: {
      logConnections: true,
    },
    tls: {
      enabled: true,
      autoGenerated: false,
    },
  },
}, { provider });

export const credentials = {
  admin: adminPassword.result,
  user: userPassword.result,
  replication: replicationPassword.result,
};
