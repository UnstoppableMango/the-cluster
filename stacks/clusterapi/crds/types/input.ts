// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace bootstrap {
    export namespace v1alpha2 {
        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigSpecArgs {
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
        }

        /**
         * TalosConfigStatus defines the observed state of TalosConfig
         */
        export interface TalosConfigStatusArgs {
            /**
             * BootstrapData will be a slice of bootstrap data
             */
            bootstrapData?: pulumi.Input<string>;
            /**
             * ErrorMessage will be set on non-retryable errors
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * ErrorReason will be set on non-retryable errors
             */
            errorReason?: pulumi.Input<string>;
            /**
             * Ready indicates the BootstrapData field is ready to be consumed
             */
            ready?: pulumi.Input<boolean>;
            /**
             * Talos config will be a string containing the config for download
             */
            talosConfig?: pulumi.Input<string>;
        }

        /**
         * TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
         */
        export interface TalosConfigTemplateSpecArgs {
            /**
             * TalosConfigTemplateResource defines the Template structure
             */
            template: pulumi.Input<inputs.bootstrap.v1alpha2.TalosConfigTemplateSpecTemplateArgs>;
        }

        /**
         * TalosConfigTemplateResource defines the Template structure
         */
        export interface TalosConfigTemplateSpecTemplateArgs {
            /**
             * TalosConfigSpec defines the desired state of TalosConfig
             */
            spec?: pulumi.Input<inputs.bootstrap.v1alpha2.TalosConfigTemplateSpecTemplateSpecArgs>;
        }

        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigTemplateSpecTemplateSpecArgs {
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
        }
    }

    export namespace v1alpha3 {
        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigSpecArgs {
            configPatches?: pulumi.Input<pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigSpecConfigPatchesArgs>[]>;
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigSpecHostnameArgs>;
            talosVersion?: pulumi.Input<string>;
        }

        export interface TalosConfigSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosConfigSpecHostnameArgs {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: pulumi.Input<string>;
        }

        /**
         * TalosConfigStatus defines the observed state of TalosConfig
         */
        export interface TalosConfigStatusArgs {
            /**
             * Conditions defines current service state of the TalosConfig.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigStatusConditionsArgs>[]>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script.
             */
            dataSecretName?: pulumi.Input<string>;
            /**
             * FailureMessage will be set on non-retryable errors
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason will be set on non-retryable errors
             */
            failureReason?: pulumi.Input<string>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Ready indicates the BootstrapData field is ready to be consumed
             */
            ready?: pulumi.Input<boolean>;
            /**
             * Talos config will be a string containing the config for download. 
             *  Deprecated: please use `<cluster>-talosconfig` secret.
             */
            talosConfig?: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface TalosConfigStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
         */
        export interface TalosConfigTemplateSpecArgs {
            /**
             * TalosConfigTemplateResource defines the Template structure
             */
            template: pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateArgs>;
        }

        /**
         * TalosConfigTemplateResource defines the Template structure
         */
        export interface TalosConfigTemplateSpecTemplateArgs {
            /**
             * TalosConfigSpec defines the desired state of TalosConfig
             */
            spec?: pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpecArgs>;
        }

        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigTemplateSpecTemplateSpecArgs {
            configPatches?: pulumi.Input<pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs>[]>;
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpecHostnameArgs>;
            talosVersion?: pulumi.Input<string>;
        }

        export interface TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosConfigTemplateSpecTemplateSpecHostnameArgs {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: pulumi.Input<string>;
        }
    }
}

export namespace infrastructure {
    export namespace v1alpha2 {
        /**
         * MetalClusterSpec defines the desired state of MetalCluster.
         */
        export interface MetalClusterSpecArgs {
            apiEndpoints?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha2.MetalClusterSpecApiEndpointsArgs>[]>;
        }

        export interface MetalClusterSpecApiEndpointsArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * MetalClusterStatus defines the observed state of MetalCluster.
         */
        export interface MetalClusterStatusArgs {
            /**
             * APIEndpoints represents the endpoints to communicate with the control plane.
             */
            apiEndpoints?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha2.MetalClusterStatusApiEndpointsArgs>[]>;
            ready: pulumi.Input<boolean>;
        }

        export interface MetalClusterStatusApiEndpointsArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * MetalMachineSpec defines the desired state of MetalMachine.
         */
        export interface MetalMachineSpecArgs {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: pulumi.Input<inputs.infrastructure.v1alpha2.MetalMachineSpecServerRefArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MetalMachineStatus defines the observed state of MetalMachine.
         */
        export interface MetalMachineStatusArgs {
            /**
             * ErrorMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * ErrorReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            errorReason?: pulumi.Input<string>;
            ready: pulumi.Input<boolean>;
        }

        /**
         * MetalMachineTemplateSpec defines the desired state of MetalMachineTemplate.
         */
        export interface MetalMachineTemplateSpecArgs {
            template: pulumi.Input<inputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplateArgs>;
        }

        export interface MetalMachineTemplateSpecTemplateArgs {
            /**
             * Spec is the specification of the desired behavior of the machine.
             */
            spec: pulumi.Input<inputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplateSpecArgs>;
        }

        /**
         * Spec is the specification of the desired behavior of the machine.
         */
        export interface MetalMachineTemplateSpecTemplateSpecArgs {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: pulumi.Input<inputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplateSpecServerRefArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

    }

    export namespace v1alpha3 {
        /**
         * MetalClusterSpec defines the desired state of MetalCluster.
         */
        export interface MetalClusterSpecArgs {
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalClusterSpecControlPlaneEndpointArgs>;
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface MetalClusterSpecControlPlaneEndpointArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * MetalClusterStatus defines the observed state of MetalCluster.
         */
        export interface MetalClusterStatusArgs {
            ready: pulumi.Input<boolean>;
        }

        /**
         * MetalMachineSpec defines the desired state of MetalMachine.
         */
        export interface MetalMachineSpecArgs {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineSpecServerClassRefArgs>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineSpecServerRefArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerClassRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MetalMachineStatus defines the observed state of MetalMachine.
         */
        export interface MetalMachineStatusArgs {
            /**
             * Addresses contains the Metal machine associated addresses.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineStatusAddressesArgs>[]>;
            /**
             * Conditions defines current state of the MetalMachine.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineStatusConditionsArgs>[]>;
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: pulumi.Input<string>;
            ready?: pulumi.Input<boolean>;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MetalMachineStatusAddressesArgs {
            /**
             * The machine address.
             */
            address: pulumi.Input<string>;
            /**
             * Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MetalMachineStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * MetalMachineTemplateSpec defines the desired state of MetalMachineTemplate.
         */
        export interface MetalMachineTemplateSpecArgs {
            template: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateArgs>;
        }

        export interface MetalMachineTemplateSpecTemplateArgs {
            /**
             * Spec is the specification of the desired behavior of the machine.
             */
            spec: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpecArgs>;
        }

        /**
         * Spec is the specification of the desired behavior of the machine.
         */
        export interface MetalMachineTemplateSpecTemplateSpecArgs {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpecServerClassRefArgs>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpecServerRefArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerClassRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ServerBindingSpec defines the spec of the ServerBinding object.
         */
        export interface ServerBindingSpecArgs {
            /**
             * Addresses describes node addresses for the server.
             */
            addresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Hostname describes node hostname for the server.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            metalMachineRef: pulumi.Input<inputs.infrastructure.v1alpha3.ServerBindingSpecMetalMachineRefArgs>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: pulumi.Input<inputs.infrastructure.v1alpha3.ServerBindingSpecServerClassRefArgs>;
            /**
             * SideroLink describes state of the SideroLink tunnel.
             */
            siderolink?: pulumi.Input<inputs.infrastructure.v1alpha3.ServerBindingSpecSiderolinkArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerBindingSpecMetalMachineRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerBindingSpecServerClassRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * SideroLink describes state of the SideroLink tunnel.
         */
        export interface ServerBindingSpecSiderolinkArgs {
            /**
             * NodeAddress is the tunnel address of the node.
             */
            address: pulumi.Input<string>;
            /**
             * NodePublicKey is the Wireguard public key of the node.
             */
            publicKey: pulumi.Input<string>;
        }

        /**
         * ServerBindingState defines the observed state of ServerBinding.
         */
        export interface ServerBindingStatusArgs {
            /**
             * Conditions defines current state of the ServerBinding.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha3.ServerBindingStatusConditionsArgs>[]>;
            /**
             * Ready is true when matching server is found.
             */
            ready?: pulumi.Input<boolean>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerBindingStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }
}

export namespace metal {
    export namespace v1alpha1 {
        /**
         * EnvironmentSpec defines the desired state of Environment.
         */
        export interface EnvironmentSpecArgs {
            initrd?: pulumi.Input<inputs.metal.v1alpha1.EnvironmentSpecInitrdArgs>;
            kernel?: pulumi.Input<inputs.metal.v1alpha1.EnvironmentSpecKernelArgs>;
        }

        export interface EnvironmentSpecInitrdArgs {
            sha512?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        export interface EnvironmentSpecKernelArgs {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            sha512?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * EnvironmentStatus defines the observed state of Environment.
         */
        export interface EnvironmentStatusArgs {
            conditions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.EnvironmentStatusConditionsArgs>[]>;
        }

        export interface EnvironmentStatusConditionsArgs {
            sha512?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * ServerClassSpec defines the desired state of ServerClass.
         */
        export interface ServerClassSpecArgs {
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: pulumi.Input<string>;
            /**
             * Set of config patches to apply to the machine configuration to the servers provisioned via this server class.
             */
            configPatches?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecConfigPatchesArgs>[]>;
            /**
             * Reference to the environment which should be used to provision the servers via this server class.
             */
            environmentRef?: pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecEnvironmentRefArgs>;
            /**
             * Qualifiers to match on the server spec. 
             *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
             */
            qualifiers?: pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecQualifiersArgs>;
            /**
             * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecSelectorArgs>;
        }

        export interface ServerClassSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Reference to the environment which should be used to provision the servers via this server class.
         */
        export interface ServerClassSpecEnvironmentRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Qualifiers to match on the server spec. 
         *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
         */
        export interface ServerClassSpecQualifiersArgs {
            cpu?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecQualifiersCpuArgs>[]>;
            labelSelectors?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
            systemInformation?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecQualifiersSystemInformationArgs>[]>;
        }

        export interface ServerClassSpecQualifiersCpuArgs {
            manufacturer?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersSystemInformationArgs {
            family?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            skuNumber?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ServerClassSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ServerClassSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerClassStatus defines the observed state of ServerClass.
         */
        export interface ServerClassStatusArgs {
            serversAvailable: pulumi.Input<pulumi.Input<string>[]>;
            serversInUse: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerSpec defines the desired state of Server.
         */
        export interface ServerSpecArgs {
            accepted: pulumi.Input<boolean>;
            /**
             * BMC defines data about how to talk to the node via ipmitool.
             */
            bmc?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcArgs>;
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: pulumi.Input<string>;
            configPatches?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerSpecConfigPatchesArgs>[]>;
            cordoned?: pulumi.Input<boolean>;
            cpu?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecCpuArgs>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            environmentRef?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecEnvironmentRefArgs>;
            hostname?: pulumi.Input<string>;
            /**
             * ManagementAPI defines data about how to talk to the node via simple HTTP API.
             */
            managementApi?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecManagementApiArgs>;
            pxeBootAlways?: pulumi.Input<boolean>;
            /**
             * PXEMode specifies the method to trigger PXE boot via IPMI. 
             *  If not set, controller default is used. Valid values: uefi, bios.
             */
            pxeMode?: pulumi.Input<string>;
            system?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecSystemArgs>;
        }

        /**
         * BMC defines data about how to talk to the node via ipmitool.
         */
        export interface ServerSpecBmcArgs {
            /**
             * BMC endpoint.
             */
            endpoint: pulumi.Input<string>;
            /**
             * BMC Interface Type. Defaults to lanplus.
             */
            interface?: pulumi.Input<string>;
            /**
             * BMC password value.
             */
            pass?: pulumi.Input<string>;
            /**
             * Source for the password value. Cannot be used if Pass is not empty.
             */
            passFrom?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcPassFromArgs>;
            /**
             * BMC port. Defaults to 623.
             */
            port?: pulumi.Input<number>;
            /**
             * BMC user value.
             */
            user?: pulumi.Input<string>;
            /**
             * Source for the user value. Cannot be used if User is not empty.
             */
            userFrom?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcUserFromArgs>;
        }

        /**
         * Source for the password value. Cannot be used if Pass is not empty.
         */
        export interface ServerSpecBmcPassFromArgs {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcPassFromSecretKeyRefArgs>;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcPassFromSecretKeyRefArgs {
            /**
             * Key to select
             */
            key: pulumi.Input<string>;
            name: pulumi.Input<string>;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: pulumi.Input<string>;
        }

        /**
         * Source for the user value. Cannot be used if User is not empty.
         */
        export interface ServerSpecBmcUserFromArgs {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcUserFromSecretKeyRefArgs>;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcUserFromSecretKeyRefArgs {
            /**
             * Key to select
             */
            key: pulumi.Input<string>;
            name: pulumi.Input<string>;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: pulumi.Input<string>;
        }

        export interface ServerSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServerSpecCpuArgs {
            manufacturer?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerSpecEnvironmentRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ManagementAPI defines data about how to talk to the node via simple HTTP API.
         */
        export interface ServerSpecManagementApiArgs {
            endpoint: pulumi.Input<string>;
        }

        export interface ServerSpecSystemArgs {
            family?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            skuNumber?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * ServerStatus defines the observed state of Server.
         */
        export interface ServerStatusArgs {
            /**
             * Addresses lists discovered node IPs.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerStatusAddressesArgs>[]>;
            /**
             * Conditions defines current service state of the Server.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerStatusConditionsArgs>[]>;
            /**
             * InUse is true when server is assigned to some MetalMachine.
             */
            inUse?: pulumi.Input<boolean>;
            /**
             * IsClean is true when server disks are wiped.
             */
            isClean?: pulumi.Input<boolean>;
            /**
             * Power is the current power state of the server: "on", "off" or "unknown".
             */
            power?: pulumi.Input<string>;
            /**
             * Ready is true when server is accepted and in use.
             */
            ready?: pulumi.Input<boolean>;
        }

        /**
         * NodeAddress contains information for the node's address.
         */
        export interface ServerStatusAddressesArgs {
            /**
             * The node address.
             */
            address: pulumi.Input<string>;
            /**
             * Node address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }

    export namespace v1alpha2 {
        /**
         * EnvironmentSpec defines the desired state of Environment.
         */
        export interface EnvironmentSpecArgs {
            initrd?: pulumi.Input<inputs.metal.v1alpha2.EnvironmentSpecInitrdArgs>;
            kernel?: pulumi.Input<inputs.metal.v1alpha2.EnvironmentSpecKernelArgs>;
        }

        export interface EnvironmentSpecInitrdArgs {
            sha512?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        export interface EnvironmentSpecKernelArgs {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            sha512?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * EnvironmentStatus defines the observed state of Environment.
         */
        export interface EnvironmentStatusArgs {
            conditions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.EnvironmentStatusConditionsArgs>[]>;
        }

        export interface EnvironmentStatusConditionsArgs {
            sha512?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * ServerClassSpec defines the desired state of ServerClass.
         */
        export interface ServerClassSpecArgs {
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: pulumi.Input<string>;
            /**
             * Set of config patches to apply to the machine configuration to the servers provisioned via this server class.
             */
            configPatches?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecConfigPatchesArgs>[]>;
            /**
             * Reference to the environment which should be used to provision the servers via this server class.
             */
            environmentRef?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecEnvironmentRefArgs>;
            /**
             * Qualifiers to match on the server spec. 
             *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
             */
            qualifiers?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersArgs>;
            /**
             * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecSelectorArgs>;
        }

        export interface ServerClassSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Reference to the environment which should be used to provision the servers via this server class.
         */
        export interface ServerClassSpecEnvironmentRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Qualifiers to match on the server spec. 
         *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
         */
        export interface ServerClassSpecQualifiersArgs {
            hardware?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareArgs>[]>;
            labelSelectors?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
        }

        export interface ServerClassSpecQualifiersHardwareArgs {
            compute?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareComputeArgs>;
            memory?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareMemoryArgs>;
            network?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareNetworkArgs>;
            storage?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareStorageArgs>;
            system?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareSystemArgs>;
        }

        export interface ServerClassSpecQualifiersHardwareComputeArgs {
            processorCount?: pulumi.Input<number>;
            processors?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareComputeProcessorsArgs>[]>;
            totalCoreCount?: pulumi.Input<number>;
            totalThreadCount?: pulumi.Input<number>;
        }

        export interface ServerClassSpecQualifiersHardwareComputeProcessorsArgs {
            coreCount?: pulumi.Input<number>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Speed is in megahertz (Mhz)
             */
            speed?: pulumi.Input<number>;
            threadCount?: pulumi.Input<number>;
        }

        export interface ServerClassSpecQualifiersHardwareMemoryArgs {
            moduleCount?: pulumi.Input<number>;
            modules?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareMemoryModulesArgs>[]>;
            totalSize?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareMemoryModulesArgs {
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Size is in megabytes (MB)
             */
            size?: pulumi.Input<number>;
            /**
             * Speed is in megatransfers per second (MT/S)
             */
            speed?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareNetworkArgs {
            interfaceCount?: pulumi.Input<number>;
            interfaces?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareNetworkInterfacesArgs>[]>;
        }

        export interface ServerClassSpecQualifiersHardwareNetworkInterfacesArgs {
            addresses?: pulumi.Input<pulumi.Input<string>[]>;
            flags?: pulumi.Input<string>;
            index?: pulumi.Input<number>;
            mac?: pulumi.Input<string>;
            mtu?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareStorageArgs {
            deviceCount?: pulumi.Input<number>;
            devices?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareStorageDevicesArgs>[]>;
            totalSize?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareStorageDevicesArgs {
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Size is in bytes
             */
            size?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
            uuid?: pulumi.Input<string>;
            wwid?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareSystemArgs {
            family?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            skuNumber?: pulumi.Input<string>;
            uuid?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ServerClassSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ServerClassSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerClassStatus defines the observed state of ServerClass.
         */
        export interface ServerClassStatusArgs {
            serversAvailable: pulumi.Input<pulumi.Input<string>[]>;
            serversInUse: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerSpec defines the desired state of Server.
         */
        export interface ServerSpecArgs {
            accepted: pulumi.Input<boolean>;
            /**
             * BMC defines data about how to talk to the node via ipmitool.
             */
            bmc?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcArgs>;
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: pulumi.Input<string>;
            configPatches?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecConfigPatchesArgs>[]>;
            cordoned?: pulumi.Input<boolean>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            environmentRef?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecEnvironmentRefArgs>;
            hardware?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareArgs>;
            hostname?: pulumi.Input<string>;
            /**
             * ManagementAPI defines data about how to talk to the node via simple HTTP API.
             */
            managementApi?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecManagementApiArgs>;
            pxeBootAlways?: pulumi.Input<boolean>;
            /**
             * PXEMode specifies the method to trigger PXE boot via IPMI. 
             *  If not set, controller default is used. Valid values: uefi, bios.
             */
            pxeMode?: pulumi.Input<string>;
        }

        /**
         * BMC defines data about how to talk to the node via ipmitool.
         */
        export interface ServerSpecBmcArgs {
            /**
             * BMC endpoint.
             */
            endpoint: pulumi.Input<string>;
            /**
             * BMC Interface Type. Defaults to lanplus.
             */
            interface?: pulumi.Input<string>;
            /**
             * BMC password value.
             */
            pass?: pulumi.Input<string>;
            /**
             * Source for the password value. Cannot be used if Pass is not empty.
             */
            passFrom?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcPassFromArgs>;
            /**
             * BMC port. Defaults to 623.
             */
            port?: pulumi.Input<number>;
            /**
             * BMC user value.
             */
            user?: pulumi.Input<string>;
            /**
             * Source for the user value. Cannot be used if User is not empty.
             */
            userFrom?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcUserFromArgs>;
        }

        /**
         * Source for the password value. Cannot be used if Pass is not empty.
         */
        export interface ServerSpecBmcPassFromArgs {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcPassFromSecretKeyRefArgs>;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcPassFromSecretKeyRefArgs {
            /**
             * Key to select
             */
            key: pulumi.Input<string>;
            name: pulumi.Input<string>;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: pulumi.Input<string>;
        }

        /**
         * Source for the user value. Cannot be used if User is not empty.
         */
        export interface ServerSpecBmcUserFromArgs {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcUserFromSecretKeyRefArgs>;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcUserFromSecretKeyRefArgs {
            /**
             * Key to select
             */
            key: pulumi.Input<string>;
            name: pulumi.Input<string>;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: pulumi.Input<string>;
        }

        export interface ServerSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerSpecEnvironmentRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareArgs {
            compute?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareComputeArgs>;
            memory?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareMemoryArgs>;
            network?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareNetworkArgs>;
            storage?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareStorageArgs>;
            system?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareSystemArgs>;
        }

        export interface ServerSpecHardwareComputeArgs {
            processorCount?: pulumi.Input<number>;
            processors?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareComputeProcessorsArgs>[]>;
            totalCoreCount?: pulumi.Input<number>;
            totalThreadCount?: pulumi.Input<number>;
        }

        export interface ServerSpecHardwareComputeProcessorsArgs {
            coreCount?: pulumi.Input<number>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Speed is in megahertz (Mhz)
             */
            speed?: pulumi.Input<number>;
            threadCount?: pulumi.Input<number>;
        }

        export interface ServerSpecHardwareMemoryArgs {
            moduleCount?: pulumi.Input<number>;
            modules?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareMemoryModulesArgs>[]>;
            totalSize?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareMemoryModulesArgs {
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Size is in megabytes (MB)
             */
            size?: pulumi.Input<number>;
            /**
             * Speed is in megatransfers per second (MT/S)
             */
            speed?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareNetworkArgs {
            interfaceCount?: pulumi.Input<number>;
            interfaces?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareNetworkInterfacesArgs>[]>;
        }

        export interface ServerSpecHardwareNetworkInterfacesArgs {
            addresses?: pulumi.Input<pulumi.Input<string>[]>;
            flags?: pulumi.Input<string>;
            index?: pulumi.Input<number>;
            mac?: pulumi.Input<string>;
            mtu?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareStorageArgs {
            deviceCount?: pulumi.Input<number>;
            devices?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareStorageDevicesArgs>[]>;
            totalSize?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareStorageDevicesArgs {
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Size is in bytes
             */
            size?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
            uuid?: pulumi.Input<string>;
            wwid?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareSystemArgs {
            family?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            skuNumber?: pulumi.Input<string>;
            uuid?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * ManagementAPI defines data about how to talk to the node via simple HTTP API.
         */
        export interface ServerSpecManagementApiArgs {
            endpoint: pulumi.Input<string>;
        }

        /**
         * ServerStatus defines the observed state of Server.
         */
        export interface ServerStatusArgs {
            /**
             * Addresses lists discovered node IPs.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerStatusAddressesArgs>[]>;
            /**
             * Conditions defines current service state of the Server.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerStatusConditionsArgs>[]>;
            /**
             * InUse is true when server is assigned to some MetalMachine.
             */
            inUse?: pulumi.Input<boolean>;
            /**
             * IsClean is true when server disks are wiped.
             */
            isClean?: pulumi.Input<boolean>;
            /**
             * Power is the current power state of the server: "on", "off" or "unknown".
             */
            power?: pulumi.Input<string>;
            /**
             * Ready is true when server is accepted and in use.
             */
            ready?: pulumi.Input<boolean>;
        }

        /**
         * NodeAddress contains information for the node's address.
         */
        export interface ServerStatusAddressesArgs {
            /**
             * The node address.
             */
            address: pulumi.Input<string>;
            /**
             * Node address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }
}
