// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateRequestArgs } from "./certificateRequest";
export type CertificateRequest = import("./certificateRequest").CertificateRequest;
export const CertificateRequest: typeof import("./certificateRequest").CertificateRequest = null as any;
utilities.lazyLoad(exports, ["CertificateRequest"], () => require("./certificateRequest"));

export { ClusterIssuerArgs } from "./clusterIssuer";
export type ClusterIssuer = import("./clusterIssuer").ClusterIssuer;
export const ClusterIssuer: typeof import("./clusterIssuer").ClusterIssuer = null as any;
utilities.lazyLoad(exports, ["ClusterIssuer"], () => require("./clusterIssuer"));

export { IssuerArgs } from "./issuer";
export type Issuer = import("./issuer").Issuer;
export const Issuer: typeof import("./issuer").Issuer = null as any;
utilities.lazyLoad(exports, ["Issuer"], () => require("./issuer"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:cert-manager.io/v1:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "kubernetes:cert-manager.io/v1:CertificateRequest":
                return new CertificateRequest(name, <any>undefined, { urn })
            case "kubernetes:cert-manager.io/v1:ClusterIssuer":
                return new ClusterIssuer(name, <any>undefined, { urn })
            case "kubernetes:cert-manager.io/v1:Issuer":
                return new Issuer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "cert-manager.io/v1", _module)
