// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta, ObjectMetaPatch} from "../meta/v1";

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue: string;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount: number;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
        }

    }
}

export namespace vpn {
    export namespace v1alpha1 {
        /**
         * Wireguard is the Schema for the wireguards API
         */
        export interface Wireguard {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "vpn.wireguard-operator.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Wireguard";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: ObjectMeta;
            spec: outputs.vpn.v1alpha1.WireguardSpec;
            status: outputs.vpn.v1alpha1.WireguardStatus;
        }

        /**
         * WireguardPeer is the Schema for the wireguardpeers API
         */
        export interface WireguardPeer {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "vpn.wireguard-operator.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "WireguardPeer";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: ObjectMeta;
            spec: outputs.vpn.v1alpha1.WireguardPeerSpec;
            status: outputs.vpn.v1alpha1.WireguardPeerStatus;
        }

        /**
         * The desired state of the peer.
         */
        export interface WireguardPeerSpec {
            PrivateKeyRef: outputs.vpn.v1alpha1.WireguardPeerSpecPrivateKeyRef;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file The address of the peer.
             */
            address: string;
            /**
             * Set to true to temporarily disable the peer.
             */
            disabled: boolean;
            /**
             * The DNS configuration for the peer.
             */
            dns: string;
            downloadSpeed: outputs.vpn.v1alpha1.WireguardPeerSpecDownloadSpeed;
            /**
             * Egress network policies for the peer.
             */
            egressNetworkPolicies: outputs.vpn.v1alpha1.WireguardPeerSpecEgressNetworkPolicies[];
            /**
             * The key used by the peer to authenticate with the wg server.
             */
            publicKey: string;
            uploadSpeed: outputs.vpn.v1alpha1.WireguardPeerSpecUploadSpeed;
            /**
             * The name of the Wireguard instance in k8s that the peer belongs to. The wg instance should be in the same namespace as the peer.
             */
            wireguardRef: string;
        }

        export interface WireguardPeerSpecDownloadSpeed {
            config: number;
            unit: string;
        }

        export interface WireguardPeerSpecDownloadSpeedPatch {
            config: number;
            unit: string;
        }

        export interface WireguardPeerSpecEgressNetworkPolicies {
            /**
             * Specifies the action to take when outgoing traffic from a Wireguard peer matches the policy. This could be 'Accept' or 'Reject'.
             */
            action: string;
            /**
             * Specifies the protocol to match for this policy. This could be TCP, UDP, or ICMP.
             */
            protocol: string;
            to: outputs.vpn.v1alpha1.WireguardPeerSpecEgressNetworkPoliciesTo;
        }

        export interface WireguardPeerSpecEgressNetworkPoliciesPatch {
            /**
             * Specifies the action to take when outgoing traffic from a Wireguard peer matches the policy. This could be 'Accept' or 'Reject'.
             */
            action: string;
            /**
             * Specifies the protocol to match for this policy. This could be TCP, UDP, or ICMP.
             */
            protocol: string;
            to: outputs.vpn.v1alpha1.WireguardPeerSpecEgressNetworkPoliciesToPatch;
        }

        /**
         * A struct that specifies the destination address and port for the traffic. This could include IP addresses or hostnames, as well as specific port numbers or port ranges.
         */
        export interface WireguardPeerSpecEgressNetworkPoliciesTo {
            /**
             * A string field that specifies the destination IP address for traffic that matches the policy.
             */
            ip: string;
            /**
             * An integer field that specifies the destination port number for traffic that matches the policy.
             */
            port: number;
        }

        /**
         * A struct that specifies the destination address and port for the traffic. This could include IP addresses or hostnames, as well as specific port numbers or port ranges.
         */
        export interface WireguardPeerSpecEgressNetworkPoliciesToPatch {
            /**
             * A string field that specifies the destination IP address for traffic that matches the policy.
             */
            ip: string;
            /**
             * An integer field that specifies the destination port number for traffic that matches the policy.
             */
            port: number;
        }

        /**
         * The desired state of the peer.
         */
        export interface WireguardPeerSpecPatch {
            PrivateKeyRef: outputs.vpn.v1alpha1.WireguardPeerSpecPrivateKeyRefPatch;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file The address of the peer.
             */
            address: string;
            /**
             * Set to true to temporarily disable the peer.
             */
            disabled: boolean;
            /**
             * The DNS configuration for the peer.
             */
            dns: string;
            downloadSpeed: outputs.vpn.v1alpha1.WireguardPeerSpecDownloadSpeedPatch;
            /**
             * Egress network policies for the peer.
             */
            egressNetworkPolicies: outputs.vpn.v1alpha1.WireguardPeerSpecEgressNetworkPoliciesPatch[];
            /**
             * The key used by the peer to authenticate with the wg server.
             */
            publicKey: string;
            uploadSpeed: outputs.vpn.v1alpha1.WireguardPeerSpecUploadSpeedPatch;
            /**
             * The name of the Wireguard instance in k8s that the peer belongs to. The wg instance should be in the same namespace as the peer.
             */
            wireguardRef: string;
        }

        /**
         * The private key of the peer
         */
        export interface WireguardPeerSpecPrivateKeyRef {
            secretKeyRef: outputs.vpn.v1alpha1.WireguardPeerSpecPrivateKeyRefSecretKeyRef;
        }

        /**
         * The private key of the peer
         */
        export interface WireguardPeerSpecPrivateKeyRefPatch {
            secretKeyRef: outputs.vpn.v1alpha1.WireguardPeerSpecPrivateKeyRefSecretKeyRefPatch;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface WireguardPeerSpecPrivateKeyRefSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface WireguardPeerSpecPrivateKeyRefSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        export interface WireguardPeerSpecUploadSpeed {
            config: number;
            unit: string;
        }

        export interface WireguardPeerSpecUploadSpeedPatch {
            config: number;
            unit: string;
        }

        /**
         * A field that defines the observed state of the Wireguard peer. This includes fields like the current configuration and status of the peer.
         */
        export interface WireguardPeerStatus {
            /**
             * INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file A string field that contains the current configuration for the Wireguard peer.
             */
            config: string;
            /**
             * A string field that provides additional information about the status of the Wireguard peer. This could include error messages or other information that helps to diagnose issues with the peer.
             */
            message: string;
            /**
             * A string field that represents the current status of the Wireguard peer. This could include values like ready, pending, or error.
             */
            status: string;
        }

        /**
         * A field that defines the observed state of the Wireguard peer. This includes fields like the current configuration and status of the peer.
         */
        export interface WireguardPeerStatusPatch {
            /**
             * INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file A string field that contains the current configuration for the Wireguard peer.
             */
            config: string;
            /**
             * A string field that provides additional information about the status of the Wireguard peer. This could include error messages or other information that helps to diagnose issues with the peer.
             */
            message: string;
            /**
             * A string field that represents the current status of the Wireguard peer. This could include values like ready, pending, or error.
             */
            status: string;
        }

        /**
         * WireguardSpec defines the desired state of Wireguard
         */
        export interface WireguardSpec {
            /**
             * A string field that specifies the address for the Wireguard VPN server. This is the public IP address or hostname that peers will use to connect to the VPN.
             */
            address: string;
            /**
             * A string field that specifies the DNS server(s) to be used by the peers.
             */
            dns: string;
            /**
             * A boolean field that specifies whether IP forwarding should be enabled on the Wireguard VPN pod at startup. This can be useful to enable if the peers are having problems with sending traffic to the internet.
             */
            enableIpForwardOnPodInit: boolean;
            /**
             * A string field that specifies the maximum transmission unit (MTU) size for Wireguard packets for all peers.
             */
            mtu: string;
            /**
             * A field that specifies the value to use for a nodePort ServiceType
             */
            port: number;
            /**
             * A map of key value strings for service annotations
             */
            serviceAnnotations: {[key: string]: string};
            /**
             * A field that specifies the type of Kubernetes service that should be used for the Wireguard VPN. This could be NodePort or LoadBalancer, depending on the needs of the deployment.
             */
            serviceType: string;
            /**
             * A boolean field that specifies whether to use the userspace implementation of Wireguard instead of the kernel one.
             */
            useWgUserspaceImplementation: boolean;
        }

        /**
         * WireguardSpec defines the desired state of Wireguard
         */
        export interface WireguardSpecPatch {
            /**
             * A string field that specifies the address for the Wireguard VPN server. This is the public IP address or hostname that peers will use to connect to the VPN.
             */
            address: string;
            /**
             * A string field that specifies the DNS server(s) to be used by the peers.
             */
            dns: string;
            /**
             * A boolean field that specifies whether IP forwarding should be enabled on the Wireguard VPN pod at startup. This can be useful to enable if the peers are having problems with sending traffic to the internet.
             */
            enableIpForwardOnPodInit: boolean;
            /**
             * A string field that specifies the maximum transmission unit (MTU) size for Wireguard packets for all peers.
             */
            mtu: string;
            /**
             * A field that specifies the value to use for a nodePort ServiceType
             */
            port: number;
            /**
             * A map of key value strings for service annotations
             */
            serviceAnnotations: {[key: string]: string};
            /**
             * A field that specifies the type of Kubernetes service that should be used for the Wireguard VPN. This could be NodePort or LoadBalancer, depending on the needs of the deployment.
             */
            serviceType: string;
            /**
             * A boolean field that specifies whether to use the userspace implementation of Wireguard instead of the kernel one.
             */
            useWgUserspaceImplementation: boolean;
        }

        /**
         * WireguardStatus defines the observed state of Wireguard
         */
        export interface WireguardStatus {
            /**
             * A string field that specifies the address for the Wireguard VPN server that is currently being used.
             */
            address: string;
            dns: string;
            /**
             * A string field that provides additional information about the status of Wireguard. This could include error messages or other information that helps to diagnose issues with the wg instance.
             */
            message: string;
            /**
             * A string field that specifies the port for the Wireguard VPN server that is currently being used.
             */
            port: string;
            /**
             * A string field that represents the current status of Wireguard. This could include values like ready, pending, or error.
             */
            status: string;
        }

        /**
         * WireguardStatus defines the observed state of Wireguard
         */
        export interface WireguardStatusPatch {
            /**
             * A string field that specifies the address for the Wireguard VPN server that is currently being used.
             */
            address: string;
            dns: string;
            /**
             * A string field that provides additional information about the status of Wireguard. This could include error messages or other information that helps to diagnose issues with the wg instance.
             */
            message: string;
            /**
             * A string field that specifies the port for the Wireguard VPN server that is currently being used.
             */
            port: string;
            /**
             * A string field that represents the current status of Wireguard. This could include values like ready, pending, or error.
             */
            status: string;
        }

    }
}
