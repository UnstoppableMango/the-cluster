// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CephBlockPoolArgs } from "./cephBlockPool";
export type CephBlockPool = import("./cephBlockPool").CephBlockPool;
export const CephBlockPool: typeof import("./cephBlockPool").CephBlockPool = null as any;
utilities.lazyLoad(exports, ["CephBlockPool"], () => require("./cephBlockPool"));

export { CephBlockPoolListArgs } from "./cephBlockPoolList";
export type CephBlockPoolList = import("./cephBlockPoolList").CephBlockPoolList;
export const CephBlockPoolList: typeof import("./cephBlockPoolList").CephBlockPoolList = null as any;
utilities.lazyLoad(exports, ["CephBlockPoolList"], () => require("./cephBlockPoolList"));

export { CephBlockPoolPatchArgs } from "./cephBlockPoolPatch";
export type CephBlockPoolPatch = import("./cephBlockPoolPatch").CephBlockPoolPatch;
export const CephBlockPoolPatch: typeof import("./cephBlockPoolPatch").CephBlockPoolPatch = null as any;
utilities.lazyLoad(exports, ["CephBlockPoolPatch"], () => require("./cephBlockPoolPatch"));

export { CephBlockPoolRadosNamespaceArgs } from "./cephBlockPoolRadosNamespace";
export type CephBlockPoolRadosNamespace = import("./cephBlockPoolRadosNamespace").CephBlockPoolRadosNamespace;
export const CephBlockPoolRadosNamespace: typeof import("./cephBlockPoolRadosNamespace").CephBlockPoolRadosNamespace = null as any;
utilities.lazyLoad(exports, ["CephBlockPoolRadosNamespace"], () => require("./cephBlockPoolRadosNamespace"));

export { CephBlockPoolRadosNamespaceListArgs } from "./cephBlockPoolRadosNamespaceList";
export type CephBlockPoolRadosNamespaceList = import("./cephBlockPoolRadosNamespaceList").CephBlockPoolRadosNamespaceList;
export const CephBlockPoolRadosNamespaceList: typeof import("./cephBlockPoolRadosNamespaceList").CephBlockPoolRadosNamespaceList = null as any;
utilities.lazyLoad(exports, ["CephBlockPoolRadosNamespaceList"], () => require("./cephBlockPoolRadosNamespaceList"));

export { CephBlockPoolRadosNamespacePatchArgs } from "./cephBlockPoolRadosNamespacePatch";
export type CephBlockPoolRadosNamespacePatch = import("./cephBlockPoolRadosNamespacePatch").CephBlockPoolRadosNamespacePatch;
export const CephBlockPoolRadosNamespacePatch: typeof import("./cephBlockPoolRadosNamespacePatch").CephBlockPoolRadosNamespacePatch = null as any;
utilities.lazyLoad(exports, ["CephBlockPoolRadosNamespacePatch"], () => require("./cephBlockPoolRadosNamespacePatch"));

export { CephBucketNotificationArgs } from "./cephBucketNotification";
export type CephBucketNotification = import("./cephBucketNotification").CephBucketNotification;
export const CephBucketNotification: typeof import("./cephBucketNotification").CephBucketNotification = null as any;
utilities.lazyLoad(exports, ["CephBucketNotification"], () => require("./cephBucketNotification"));

export { CephBucketNotificationListArgs } from "./cephBucketNotificationList";
export type CephBucketNotificationList = import("./cephBucketNotificationList").CephBucketNotificationList;
export const CephBucketNotificationList: typeof import("./cephBucketNotificationList").CephBucketNotificationList = null as any;
utilities.lazyLoad(exports, ["CephBucketNotificationList"], () => require("./cephBucketNotificationList"));

export { CephBucketNotificationPatchArgs } from "./cephBucketNotificationPatch";
export type CephBucketNotificationPatch = import("./cephBucketNotificationPatch").CephBucketNotificationPatch;
export const CephBucketNotificationPatch: typeof import("./cephBucketNotificationPatch").CephBucketNotificationPatch = null as any;
utilities.lazyLoad(exports, ["CephBucketNotificationPatch"], () => require("./cephBucketNotificationPatch"));

export { CephBucketTopicArgs } from "./cephBucketTopic";
export type CephBucketTopic = import("./cephBucketTopic").CephBucketTopic;
export const CephBucketTopic: typeof import("./cephBucketTopic").CephBucketTopic = null as any;
utilities.lazyLoad(exports, ["CephBucketTopic"], () => require("./cephBucketTopic"));

export { CephBucketTopicListArgs } from "./cephBucketTopicList";
export type CephBucketTopicList = import("./cephBucketTopicList").CephBucketTopicList;
export const CephBucketTopicList: typeof import("./cephBucketTopicList").CephBucketTopicList = null as any;
utilities.lazyLoad(exports, ["CephBucketTopicList"], () => require("./cephBucketTopicList"));

export { CephBucketTopicPatchArgs } from "./cephBucketTopicPatch";
export type CephBucketTopicPatch = import("./cephBucketTopicPatch").CephBucketTopicPatch;
export const CephBucketTopicPatch: typeof import("./cephBucketTopicPatch").CephBucketTopicPatch = null as any;
utilities.lazyLoad(exports, ["CephBucketTopicPatch"], () => require("./cephBucketTopicPatch"));

export { CephCOSIDriverArgs } from "./cephCOSIDriver";
export type CephCOSIDriver = import("./cephCOSIDriver").CephCOSIDriver;
export const CephCOSIDriver: typeof import("./cephCOSIDriver").CephCOSIDriver = null as any;
utilities.lazyLoad(exports, ["CephCOSIDriver"], () => require("./cephCOSIDriver"));

export { CephCOSIDriverListArgs } from "./cephCOSIDriverList";
export type CephCOSIDriverList = import("./cephCOSIDriverList").CephCOSIDriverList;
export const CephCOSIDriverList: typeof import("./cephCOSIDriverList").CephCOSIDriverList = null as any;
utilities.lazyLoad(exports, ["CephCOSIDriverList"], () => require("./cephCOSIDriverList"));

export { CephCOSIDriverPatchArgs } from "./cephCOSIDriverPatch";
export type CephCOSIDriverPatch = import("./cephCOSIDriverPatch").CephCOSIDriverPatch;
export const CephCOSIDriverPatch: typeof import("./cephCOSIDriverPatch").CephCOSIDriverPatch = null as any;
utilities.lazyLoad(exports, ["CephCOSIDriverPatch"], () => require("./cephCOSIDriverPatch"));

export { CephClientArgs } from "./cephClient";
export type CephClient = import("./cephClient").CephClient;
export const CephClient: typeof import("./cephClient").CephClient = null as any;
utilities.lazyLoad(exports, ["CephClient"], () => require("./cephClient"));

export { CephClientListArgs } from "./cephClientList";
export type CephClientList = import("./cephClientList").CephClientList;
export const CephClientList: typeof import("./cephClientList").CephClientList = null as any;
utilities.lazyLoad(exports, ["CephClientList"], () => require("./cephClientList"));

export { CephClientPatchArgs } from "./cephClientPatch";
export type CephClientPatch = import("./cephClientPatch").CephClientPatch;
export const CephClientPatch: typeof import("./cephClientPatch").CephClientPatch = null as any;
utilities.lazyLoad(exports, ["CephClientPatch"], () => require("./cephClientPatch"));

export { CephClusterArgs } from "./cephCluster";
export type CephCluster = import("./cephCluster").CephCluster;
export const CephCluster: typeof import("./cephCluster").CephCluster = null as any;
utilities.lazyLoad(exports, ["CephCluster"], () => require("./cephCluster"));

export { CephClusterListArgs } from "./cephClusterList";
export type CephClusterList = import("./cephClusterList").CephClusterList;
export const CephClusterList: typeof import("./cephClusterList").CephClusterList = null as any;
utilities.lazyLoad(exports, ["CephClusterList"], () => require("./cephClusterList"));

export { CephClusterPatchArgs } from "./cephClusterPatch";
export type CephClusterPatch = import("./cephClusterPatch").CephClusterPatch;
export const CephClusterPatch: typeof import("./cephClusterPatch").CephClusterPatch = null as any;
utilities.lazyLoad(exports, ["CephClusterPatch"], () => require("./cephClusterPatch"));

export { CephFilesystemArgs } from "./cephFilesystem";
export type CephFilesystem = import("./cephFilesystem").CephFilesystem;
export const CephFilesystem: typeof import("./cephFilesystem").CephFilesystem = null as any;
utilities.lazyLoad(exports, ["CephFilesystem"], () => require("./cephFilesystem"));

export { CephFilesystemListArgs } from "./cephFilesystemList";
export type CephFilesystemList = import("./cephFilesystemList").CephFilesystemList;
export const CephFilesystemList: typeof import("./cephFilesystemList").CephFilesystemList = null as any;
utilities.lazyLoad(exports, ["CephFilesystemList"], () => require("./cephFilesystemList"));

export { CephFilesystemMirrorArgs } from "./cephFilesystemMirror";
export type CephFilesystemMirror = import("./cephFilesystemMirror").CephFilesystemMirror;
export const CephFilesystemMirror: typeof import("./cephFilesystemMirror").CephFilesystemMirror = null as any;
utilities.lazyLoad(exports, ["CephFilesystemMirror"], () => require("./cephFilesystemMirror"));

export { CephFilesystemMirrorListArgs } from "./cephFilesystemMirrorList";
export type CephFilesystemMirrorList = import("./cephFilesystemMirrorList").CephFilesystemMirrorList;
export const CephFilesystemMirrorList: typeof import("./cephFilesystemMirrorList").CephFilesystemMirrorList = null as any;
utilities.lazyLoad(exports, ["CephFilesystemMirrorList"], () => require("./cephFilesystemMirrorList"));

export { CephFilesystemMirrorPatchArgs } from "./cephFilesystemMirrorPatch";
export type CephFilesystemMirrorPatch = import("./cephFilesystemMirrorPatch").CephFilesystemMirrorPatch;
export const CephFilesystemMirrorPatch: typeof import("./cephFilesystemMirrorPatch").CephFilesystemMirrorPatch = null as any;
utilities.lazyLoad(exports, ["CephFilesystemMirrorPatch"], () => require("./cephFilesystemMirrorPatch"));

export { CephFilesystemPatchArgs } from "./cephFilesystemPatch";
export type CephFilesystemPatch = import("./cephFilesystemPatch").CephFilesystemPatch;
export const CephFilesystemPatch: typeof import("./cephFilesystemPatch").CephFilesystemPatch = null as any;
utilities.lazyLoad(exports, ["CephFilesystemPatch"], () => require("./cephFilesystemPatch"));

export { CephFilesystemSubVolumeGroupArgs } from "./cephFilesystemSubVolumeGroup";
export type CephFilesystemSubVolumeGroup = import("./cephFilesystemSubVolumeGroup").CephFilesystemSubVolumeGroup;
export const CephFilesystemSubVolumeGroup: typeof import("./cephFilesystemSubVolumeGroup").CephFilesystemSubVolumeGroup = null as any;
utilities.lazyLoad(exports, ["CephFilesystemSubVolumeGroup"], () => require("./cephFilesystemSubVolumeGroup"));

export { CephFilesystemSubVolumeGroupListArgs } from "./cephFilesystemSubVolumeGroupList";
export type CephFilesystemSubVolumeGroupList = import("./cephFilesystemSubVolumeGroupList").CephFilesystemSubVolumeGroupList;
export const CephFilesystemSubVolumeGroupList: typeof import("./cephFilesystemSubVolumeGroupList").CephFilesystemSubVolumeGroupList = null as any;
utilities.lazyLoad(exports, ["CephFilesystemSubVolumeGroupList"], () => require("./cephFilesystemSubVolumeGroupList"));

export { CephFilesystemSubVolumeGroupPatchArgs } from "./cephFilesystemSubVolumeGroupPatch";
export type CephFilesystemSubVolumeGroupPatch = import("./cephFilesystemSubVolumeGroupPatch").CephFilesystemSubVolumeGroupPatch;
export const CephFilesystemSubVolumeGroupPatch: typeof import("./cephFilesystemSubVolumeGroupPatch").CephFilesystemSubVolumeGroupPatch = null as any;
utilities.lazyLoad(exports, ["CephFilesystemSubVolumeGroupPatch"], () => require("./cephFilesystemSubVolumeGroupPatch"));

export { CephNFSArgs } from "./cephNFS";
export type CephNFS = import("./cephNFS").CephNFS;
export const CephNFS: typeof import("./cephNFS").CephNFS = null as any;
utilities.lazyLoad(exports, ["CephNFS"], () => require("./cephNFS"));

export { CephNFSListArgs } from "./cephNFSList";
export type CephNFSList = import("./cephNFSList").CephNFSList;
export const CephNFSList: typeof import("./cephNFSList").CephNFSList = null as any;
utilities.lazyLoad(exports, ["CephNFSList"], () => require("./cephNFSList"));

export { CephNFSPatchArgs } from "./cephNFSPatch";
export type CephNFSPatch = import("./cephNFSPatch").CephNFSPatch;
export const CephNFSPatch: typeof import("./cephNFSPatch").CephNFSPatch = null as any;
utilities.lazyLoad(exports, ["CephNFSPatch"], () => require("./cephNFSPatch"));

export { CephObjectRealmArgs } from "./cephObjectRealm";
export type CephObjectRealm = import("./cephObjectRealm").CephObjectRealm;
export const CephObjectRealm: typeof import("./cephObjectRealm").CephObjectRealm = null as any;
utilities.lazyLoad(exports, ["CephObjectRealm"], () => require("./cephObjectRealm"));

export { CephObjectRealmListArgs } from "./cephObjectRealmList";
export type CephObjectRealmList = import("./cephObjectRealmList").CephObjectRealmList;
export const CephObjectRealmList: typeof import("./cephObjectRealmList").CephObjectRealmList = null as any;
utilities.lazyLoad(exports, ["CephObjectRealmList"], () => require("./cephObjectRealmList"));

export { CephObjectRealmPatchArgs } from "./cephObjectRealmPatch";
export type CephObjectRealmPatch = import("./cephObjectRealmPatch").CephObjectRealmPatch;
export const CephObjectRealmPatch: typeof import("./cephObjectRealmPatch").CephObjectRealmPatch = null as any;
utilities.lazyLoad(exports, ["CephObjectRealmPatch"], () => require("./cephObjectRealmPatch"));

export { CephObjectStoreArgs } from "./cephObjectStore";
export type CephObjectStore = import("./cephObjectStore").CephObjectStore;
export const CephObjectStore: typeof import("./cephObjectStore").CephObjectStore = null as any;
utilities.lazyLoad(exports, ["CephObjectStore"], () => require("./cephObjectStore"));

export { CephObjectStoreListArgs } from "./cephObjectStoreList";
export type CephObjectStoreList = import("./cephObjectStoreList").CephObjectStoreList;
export const CephObjectStoreList: typeof import("./cephObjectStoreList").CephObjectStoreList = null as any;
utilities.lazyLoad(exports, ["CephObjectStoreList"], () => require("./cephObjectStoreList"));

export { CephObjectStorePatchArgs } from "./cephObjectStorePatch";
export type CephObjectStorePatch = import("./cephObjectStorePatch").CephObjectStorePatch;
export const CephObjectStorePatch: typeof import("./cephObjectStorePatch").CephObjectStorePatch = null as any;
utilities.lazyLoad(exports, ["CephObjectStorePatch"], () => require("./cephObjectStorePatch"));

export { CephObjectStoreUserArgs } from "./cephObjectStoreUser";
export type CephObjectStoreUser = import("./cephObjectStoreUser").CephObjectStoreUser;
export const CephObjectStoreUser: typeof import("./cephObjectStoreUser").CephObjectStoreUser = null as any;
utilities.lazyLoad(exports, ["CephObjectStoreUser"], () => require("./cephObjectStoreUser"));

export { CephObjectStoreUserListArgs } from "./cephObjectStoreUserList";
export type CephObjectStoreUserList = import("./cephObjectStoreUserList").CephObjectStoreUserList;
export const CephObjectStoreUserList: typeof import("./cephObjectStoreUserList").CephObjectStoreUserList = null as any;
utilities.lazyLoad(exports, ["CephObjectStoreUserList"], () => require("./cephObjectStoreUserList"));

export { CephObjectStoreUserPatchArgs } from "./cephObjectStoreUserPatch";
export type CephObjectStoreUserPatch = import("./cephObjectStoreUserPatch").CephObjectStoreUserPatch;
export const CephObjectStoreUserPatch: typeof import("./cephObjectStoreUserPatch").CephObjectStoreUserPatch = null as any;
utilities.lazyLoad(exports, ["CephObjectStoreUserPatch"], () => require("./cephObjectStoreUserPatch"));

export { CephObjectZoneArgs } from "./cephObjectZone";
export type CephObjectZone = import("./cephObjectZone").CephObjectZone;
export const CephObjectZone: typeof import("./cephObjectZone").CephObjectZone = null as any;
utilities.lazyLoad(exports, ["CephObjectZone"], () => require("./cephObjectZone"));

export { CephObjectZoneGroupArgs } from "./cephObjectZoneGroup";
export type CephObjectZoneGroup = import("./cephObjectZoneGroup").CephObjectZoneGroup;
export const CephObjectZoneGroup: typeof import("./cephObjectZoneGroup").CephObjectZoneGroup = null as any;
utilities.lazyLoad(exports, ["CephObjectZoneGroup"], () => require("./cephObjectZoneGroup"));

export { CephObjectZoneGroupListArgs } from "./cephObjectZoneGroupList";
export type CephObjectZoneGroupList = import("./cephObjectZoneGroupList").CephObjectZoneGroupList;
export const CephObjectZoneGroupList: typeof import("./cephObjectZoneGroupList").CephObjectZoneGroupList = null as any;
utilities.lazyLoad(exports, ["CephObjectZoneGroupList"], () => require("./cephObjectZoneGroupList"));

export { CephObjectZoneGroupPatchArgs } from "./cephObjectZoneGroupPatch";
export type CephObjectZoneGroupPatch = import("./cephObjectZoneGroupPatch").CephObjectZoneGroupPatch;
export const CephObjectZoneGroupPatch: typeof import("./cephObjectZoneGroupPatch").CephObjectZoneGroupPatch = null as any;
utilities.lazyLoad(exports, ["CephObjectZoneGroupPatch"], () => require("./cephObjectZoneGroupPatch"));

export { CephObjectZoneListArgs } from "./cephObjectZoneList";
export type CephObjectZoneList = import("./cephObjectZoneList").CephObjectZoneList;
export const CephObjectZoneList: typeof import("./cephObjectZoneList").CephObjectZoneList = null as any;
utilities.lazyLoad(exports, ["CephObjectZoneList"], () => require("./cephObjectZoneList"));

export { CephObjectZonePatchArgs } from "./cephObjectZonePatch";
export type CephObjectZonePatch = import("./cephObjectZonePatch").CephObjectZonePatch;
export const CephObjectZonePatch: typeof import("./cephObjectZonePatch").CephObjectZonePatch = null as any;
utilities.lazyLoad(exports, ["CephObjectZonePatch"], () => require("./cephObjectZonePatch"));

export { CephRBDMirrorArgs } from "./cephRBDMirror";
export type CephRBDMirror = import("./cephRBDMirror").CephRBDMirror;
export const CephRBDMirror: typeof import("./cephRBDMirror").CephRBDMirror = null as any;
utilities.lazyLoad(exports, ["CephRBDMirror"], () => require("./cephRBDMirror"));

export { CephRBDMirrorListArgs } from "./cephRBDMirrorList";
export type CephRBDMirrorList = import("./cephRBDMirrorList").CephRBDMirrorList;
export const CephRBDMirrorList: typeof import("./cephRBDMirrorList").CephRBDMirrorList = null as any;
utilities.lazyLoad(exports, ["CephRBDMirrorList"], () => require("./cephRBDMirrorList"));

export { CephRBDMirrorPatchArgs } from "./cephRBDMirrorPatch";
export type CephRBDMirrorPatch = import("./cephRBDMirrorPatch").CephRBDMirrorPatch;
export const CephRBDMirrorPatch: typeof import("./cephRBDMirrorPatch").CephRBDMirrorPatch = null as any;
utilities.lazyLoad(exports, ["CephRBDMirrorPatch"], () => require("./cephRBDMirrorPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:ceph.rook.io/v1:CephBlockPool":
                return new CephBlockPool(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBlockPoolList":
                return new CephBlockPoolList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBlockPoolPatch":
                return new CephBlockPoolPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBlockPoolRadosNamespace":
                return new CephBlockPoolRadosNamespace(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBlockPoolRadosNamespaceList":
                return new CephBlockPoolRadosNamespaceList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBlockPoolRadosNamespacePatch":
                return new CephBlockPoolRadosNamespacePatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBucketNotification":
                return new CephBucketNotification(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBucketNotificationList":
                return new CephBucketNotificationList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBucketNotificationPatch":
                return new CephBucketNotificationPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBucketTopic":
                return new CephBucketTopic(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBucketTopicList":
                return new CephBucketTopicList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBucketTopicPatch":
                return new CephBucketTopicPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephCOSIDriver":
                return new CephCOSIDriver(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephCOSIDriverList":
                return new CephCOSIDriverList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephCOSIDriverPatch":
                return new CephCOSIDriverPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephClient":
                return new CephClient(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephClientList":
                return new CephClientList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephClientPatch":
                return new CephClientPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephCluster":
                return new CephCluster(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephClusterList":
                return new CephClusterList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephClusterPatch":
                return new CephClusterPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystem":
                return new CephFilesystem(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemList":
                return new CephFilesystemList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemMirror":
                return new CephFilesystemMirror(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemMirrorList":
                return new CephFilesystemMirrorList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemMirrorPatch":
                return new CephFilesystemMirrorPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemPatch":
                return new CephFilesystemPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemSubVolumeGroup":
                return new CephFilesystemSubVolumeGroup(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemSubVolumeGroupList":
                return new CephFilesystemSubVolumeGroupList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemSubVolumeGroupPatch":
                return new CephFilesystemSubVolumeGroupPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephNFS":
                return new CephNFS(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephNFSList":
                return new CephNFSList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephNFSPatch":
                return new CephNFSPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectRealm":
                return new CephObjectRealm(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectRealmList":
                return new CephObjectRealmList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectRealmPatch":
                return new CephObjectRealmPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectStore":
                return new CephObjectStore(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectStoreList":
                return new CephObjectStoreList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectStorePatch":
                return new CephObjectStorePatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectStoreUser":
                return new CephObjectStoreUser(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectStoreUserList":
                return new CephObjectStoreUserList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectStoreUserPatch":
                return new CephObjectStoreUserPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectZone":
                return new CephObjectZone(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectZoneGroup":
                return new CephObjectZoneGroup(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectZoneGroupList":
                return new CephObjectZoneGroupList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectZoneGroupPatch":
                return new CephObjectZoneGroupPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectZoneList":
                return new CephObjectZoneList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephObjectZonePatch":
                return new CephObjectZonePatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephRBDMirror":
                return new CephRBDMirror(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephRBDMirrorList":
                return new CephRBDMirrorList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephRBDMirrorPatch":
                return new CephRBDMirrorPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "ceph.rook.io/v1", _module)
