// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace auto {
    export namespace v1alpha1 {
        /**
         * Update is the Schema for the updates API
         */
        export interface Update {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "auto.pulumi.com/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Update";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.auto.v1alpha1.UpdateSpec;
            status: outputs.auto.v1alpha1.UpdateStatus;
        }

        /**
         * UpdateSpec defines the desired state of Update
         */
        export interface UpdateSpec {
            /**
             * ContinueOnError will continue to perform the update operation despite the
             * occurrence of errors.
             */
            continueOnError: boolean;
            /**
             * Return an error if any changes occur during this update
             */
            expectNoChanges: boolean;
            /**
             * Message (optional) to associate with the preview operation
             */
            message: string;
            /**
             * Parallel is the number of resource operations to run in parallel at once
             * (1 for no parallelism). Defaults to unbounded.
             */
            parallel: number;
            /**
             * refresh will run a refresh before the update.
             */
            refresh: boolean;
            /**
             * Remove the stack and its configuration after all resources in the stack
             * have been deleted.
             */
            remove: boolean;
            /**
             * Specify resources to replace
             */
            replace: string[];
            /**
             * Specify the Pulumi stack to select for the update.
             */
            stackName: string;
            /**
             * Specify an exclusive list of resource URNs to update
             */
            target: string[];
            /**
             * TargetDependents allows updating of dependent targets discovered but not
             * specified in the Target list
             */
            targetDependents: boolean;
            /**
             * TTL for a completed update object.
             */
            ttlAfterCompleted: string;
            /**
             * Type of the update to perform.
             */
            type: string;
            /**
             * WorkspaceName is the workspace to update.
             */
            workspaceName: string;
        }

        /**
         * UpdateSpec defines the desired state of Update
         */
        export interface UpdateSpecPatch {
            /**
             * ContinueOnError will continue to perform the update operation despite the
             * occurrence of errors.
             */
            continueOnError: boolean;
            /**
             * Return an error if any changes occur during this update
             */
            expectNoChanges: boolean;
            /**
             * Message (optional) to associate with the preview operation
             */
            message: string;
            /**
             * Parallel is the number of resource operations to run in parallel at once
             * (1 for no parallelism). Defaults to unbounded.
             */
            parallel: number;
            /**
             * refresh will run a refresh before the update.
             */
            refresh: boolean;
            /**
             * Remove the stack and its configuration after all resources in the stack
             * have been deleted.
             */
            remove: boolean;
            /**
             * Specify resources to replace
             */
            replace: string[];
            /**
             * Specify the Pulumi stack to select for the update.
             */
            stackName: string;
            /**
             * Specify an exclusive list of resource URNs to update
             */
            target: string[];
            /**
             * TargetDependents allows updating of dependent targets discovered but not
             * specified in the Target list
             */
            targetDependents: boolean;
            /**
             * TTL for a completed update object.
             */
            ttlAfterCompleted: string;
            /**
             * Type of the update to perform.
             */
            type: string;
            /**
             * WorkspaceName is the workspace to update.
             */
            workspaceName: string;
        }

        /**
         * UpdateStatus defines the observed state of Update
         */
        export interface UpdateStatus {
            /**
             * Represents the observations of an update's current state.
             * Known .status.conditions.type are: "Complete", "Failed", and "Progressing"
             */
            conditions: outputs.auto.v1alpha1.UpdateStatusConditions[];
            /**
             * The end time of the operation.
             */
            endTime: string;
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the status was set based upon.
             */
            observedGeneration: number;
            /**
             * Outputs names a secret containing the outputs for this update.
             */
            outputs: string;
            /**
             * Represents the permalink URL in the Pulumi Console for the operation. Not available for DIY backends.
             */
            permalink: string;
            /**
             * The start time of the operation.
             */
            startTime: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface UpdateStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface UpdateStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * UpdateStatus defines the observed state of Update
         */
        export interface UpdateStatusPatch {
            /**
             * Represents the observations of an update's current state.
             * Known .status.conditions.type are: "Complete", "Failed", and "Progressing"
             */
            conditions: outputs.auto.v1alpha1.UpdateStatusConditionsPatch[];
            /**
             * The end time of the operation.
             */
            endTime: string;
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the status was set based upon.
             */
            observedGeneration: number;
            /**
             * Outputs names a secret containing the outputs for this update.
             */
            outputs: string;
            /**
             * Represents the permalink URL in the Pulumi Console for the operation. Not available for DIY backends.
             */
            permalink: string;
            /**
             * The start time of the operation.
             */
            startTime: string;
        }

        /**
         * Workspace is the Schema for the workspaces API
         * A Workspace is an execution context containing a single Pulumi project, a program, and multiple stacks.
         */
        export interface Workspace {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "auto.pulumi.com/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Workspace";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.auto.v1alpha1.WorkspaceSpec;
            status: outputs.auto.v1alpha1.WorkspaceStatus;
        }

        /**
         * WorkspaceSpec defines the desired state of Workspace
         */
        export interface WorkspaceSpec {
            /**
             * List of environment variables to set in the container.
             */
            env: outputs.auto.v1alpha1.WorkspaceSpecEnv[];
            /**
             * List of sources to populate environment variables in the workspace.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             */
            envFrom: outputs.auto.v1alpha1.WorkspaceSpecEnvFrom[];
            flux: outputs.auto.v1alpha1.WorkspaceSpecFlux;
            git: outputs.auto.v1alpha1.WorkspaceSpecGit;
            /**
             * Image is the container image containing the 'pulumi' executable. If no image is provided,
             * the default image is used based on the securityProfile:
             * for 'baseline', it defaults to 'pulumi/pulumi:latest';
             * for 'restricted', it defaults to 'pulumi/pulumi:latest-nonroot'.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            local: outputs.auto.v1alpha1.WorkspaceSpecLocal;
            podTemplate: outputs.auto.v1alpha1.WorkspaceSpecPodTemplate;
            /**
             * PulumiLogVerbosity is the log verbosity level to use for the Pulumi CLI.
             * If unset,verbose logging is disabled.
             * See: https://www.pulumi.com/docs/iac/support/troubleshooting/#verbose-logging
             * for more information about log levels.
             */
            pulumiLogLevel: number;
            resources: outputs.auto.v1alpha1.WorkspaceSpecResources;
            /**
             * SecurityProfile applies a security profile to the workspace.
             * The restricted profile (default) runs the pod as a non-root user and with a security context that conforms with
             * the Restricted policy of the Pod Security Standards.
             * The baseline profile runs the pod as the root user and with a security context that conforms with
             * the Baseline policy of the Pod Security Standards.
             */
            securityProfile: string;
            /**
             * ServiceAccountName is the Kubernetes service account identity of the workspace.
             */
            serviceAccountName: string;
            /**
             * List of stacks this workspace manages.
             */
            stacks: outputs.auto.v1alpha1.WorkspaceSpecStacks[];
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface WorkspaceSpecEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface WorkspaceSpecEnvFrom {
            configMapRef: outputs.auto.v1alpha1.WorkspaceSpecEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface WorkspaceSpecEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface WorkspaceSpecEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface WorkspaceSpecEnvFromPatch {
            configMapRef: outputs.auto.v1alpha1.WorkspaceSpecEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface WorkspaceSpecEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface WorkspaceSpecEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface WorkspaceSpecEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface WorkspaceSpecEnvValueFrom {
            configMapKeyRef: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromFieldRef;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface WorkspaceSpecEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface WorkspaceSpecEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface WorkspaceSpecEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface WorkspaceSpecEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface WorkspaceSpecEnvValueFromPatch {
            configMapKeyRef: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.auto.v1alpha1.WorkspaceSpecEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface WorkspaceSpecEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface WorkspaceSpecEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface WorkspaceSpecEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface WorkspaceSpecEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Flux is the flux source containing the Pulumi program.
         */
        export interface WorkspaceSpecFlux {
            /**
             * Digest is the digest of the artifact to fetch.
             */
            digest: string;
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of
             * interest, within the fetched artifact.
             */
            dir: string;
            /**
             * URL is the URL of the artifact to fetch.
             */
            url: string;
        }

        /**
         * Flux is the flux source containing the Pulumi program.
         */
        export interface WorkspaceSpecFluxPatch {
            /**
             * Digest is the digest of the artifact to fetch.
             */
            digest: string;
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of
             * interest, within the fetched artifact.
             */
            dir: string;
            /**
             * URL is the URL of the artifact to fetch.
             */
            url: string;
        }

        /**
         * Git is the git source containing the Pulumi program.
         */
        export interface WorkspaceSpecGit {
            auth: outputs.auto.v1alpha1.WorkspaceSpecGitAuth;
            /**
             * Dir is the directory to work from in the project's source repository
             * where Pulumi.yaml is located. It is used in case Pulumi.yaml is not
             * in the project source root.
             */
            dir: string;
            /**
             * Ref is the git ref (tag, branch, or commit SHA) to fetch.
             */
            ref: string;
            /**
             * Shallow controls whether the workspace uses a shallow clone or whether
             * all history is cloned.
             */
            shallow: boolean;
            /**
             * URL is the git source control repository from which we fetch the project
             * code and configuration.
             */
            url: string;
        }

        /**
         * Auth contains optional authentication information to use when cloning
         * the repository.
         */
        export interface WorkspaceSpecGitAuth {
            password: outputs.auto.v1alpha1.WorkspaceSpecGitAuthPassword;
            sshPrivateKey: outputs.auto.v1alpha1.WorkspaceSpecGitAuthSshPrivateKey;
            token: outputs.auto.v1alpha1.WorkspaceSpecGitAuthToken;
            username: outputs.auto.v1alpha1.WorkspaceSpecGitAuthUsername;
        }

        /**
         * The password that pairs with a username or as part of an SSH Private Key.
         */
        export interface WorkspaceSpecGitAuthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * The password that pairs with a username or as part of an SSH Private Key.
         */
        export interface WorkspaceSpecGitAuthPasswordPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Auth contains optional authentication information to use when cloning
         * the repository.
         */
        export interface WorkspaceSpecGitAuthPatch {
            password: outputs.auto.v1alpha1.WorkspaceSpecGitAuthPasswordPatch;
            sshPrivateKey: outputs.auto.v1alpha1.WorkspaceSpecGitAuthSshPrivateKeyPatch;
            token: outputs.auto.v1alpha1.WorkspaceSpecGitAuthTokenPatch;
            username: outputs.auto.v1alpha1.WorkspaceSpecGitAuthUsernamePatch;
        }

        /**
         * SSHPrivateKey should contain a private key for access to the git repo.
         * When using `SSHPrivateKey`, the URL of the repository must be in the
         * format git@github.com:org/repository.git.
         */
        export interface WorkspaceSpecGitAuthSshPrivateKey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SSHPrivateKey should contain a private key for access to the git repo.
         * When using `SSHPrivateKey`, the URL of the repository must be in the
         * format git@github.com:org/repository.git.
         */
        export interface WorkspaceSpecGitAuthSshPrivateKeyPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Token is a Git personal access token in replacement of
         * your password.
         */
        export interface WorkspaceSpecGitAuthToken {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Token is a Git personal access token in replacement of
         * your password.
         */
        export interface WorkspaceSpecGitAuthTokenPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Username is the username to use when authenticating to a git repository.
         */
        export interface WorkspaceSpecGitAuthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Username is the username to use when authenticating to a git repository.
         */
        export interface WorkspaceSpecGitAuthUsernamePatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Git is the git source containing the Pulumi program.
         */
        export interface WorkspaceSpecGitPatch {
            auth: outputs.auto.v1alpha1.WorkspaceSpecGitAuthPatch;
            /**
             * Dir is the directory to work from in the project's source repository
             * where Pulumi.yaml is located. It is used in case Pulumi.yaml is not
             * in the project source root.
             */
            dir: string;
            /**
             * Ref is the git ref (tag, branch, or commit SHA) to fetch.
             */
            ref: string;
            /**
             * Shallow controls whether the workspace uses a shallow clone or whether
             * all history is cloned.
             */
            shallow: boolean;
            /**
             * URL is the git source control repository from which we fetch the project
             * code and configuration.
             */
            url: string;
        }

        /**
         * Local is the local source containing the Pulumi program.
         */
        export interface WorkspaceSpecLocal {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of
             * interest, within the workspace image.
             */
            dir: string;
        }

        /**
         * Local is the local source containing the Pulumi program.
         */
        export interface WorkspaceSpecLocalPatch {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of
             * interest, within the workspace image.
             */
            dir: string;
        }

        /**
         * WorkspaceSpec defines the desired state of Workspace
         */
        export interface WorkspaceSpecPatch {
            /**
             * List of environment variables to set in the container.
             */
            env: outputs.auto.v1alpha1.WorkspaceSpecEnvPatch[];
            /**
             * List of sources to populate environment variables in the workspace.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             */
            envFrom: outputs.auto.v1alpha1.WorkspaceSpecEnvFromPatch[];
            flux: outputs.auto.v1alpha1.WorkspaceSpecFluxPatch;
            git: outputs.auto.v1alpha1.WorkspaceSpecGitPatch;
            /**
             * Image is the container image containing the 'pulumi' executable. If no image is provided,
             * the default image is used based on the securityProfile:
             * for 'baseline', it defaults to 'pulumi/pulumi:latest';
             * for 'restricted', it defaults to 'pulumi/pulumi:latest-nonroot'.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            local: outputs.auto.v1alpha1.WorkspaceSpecLocalPatch;
            podTemplate: outputs.auto.v1alpha1.WorkspaceSpecPodTemplatePatch;
            /**
             * PulumiLogVerbosity is the log verbosity level to use for the Pulumi CLI.
             * If unset,verbose logging is disabled.
             * See: https://www.pulumi.com/docs/iac/support/troubleshooting/#verbose-logging
             * for more information about log levels.
             */
            pulumiLogLevel: number;
            resources: outputs.auto.v1alpha1.WorkspaceSpecResourcesPatch;
            /**
             * SecurityProfile applies a security profile to the workspace.
             * The restricted profile (default) runs the pod as a non-root user and with a security context that conforms with
             * the Restricted policy of the Pod Security Standards.
             * The baseline profile runs the pod as the root user and with a security context that conforms with
             * the Baseline policy of the Pod Security Standards.
             */
            securityProfile: string;
            /**
             * ServiceAccountName is the Kubernetes service account identity of the workspace.
             */
            serviceAccountName: string;
            /**
             * List of stacks this workspace manages.
             */
            stacks: outputs.auto.v1alpha1.WorkspaceSpecStacksPatch[];
        }

        /**
         * PodTemplate defines a PodTemplateSpec for Workspace's pods.
         */
        export interface WorkspaceSpecPodTemplate {
            metadata: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateMetadata;
            spec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpec;
        }

        /**
         * EmbeddedMetadata contains metadata relevant to an embedded resource.
         */
        export interface WorkspaceSpecPodTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
        }

        /**
         * EmbeddedMetadata contains metadata relevant to an embedded resource.
         */
        export interface WorkspaceSpecPodTemplateMetadataPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
        }

        /**
         * PodTemplate defines a PodTemplateSpec for Workspace's pods.
         */
        export interface WorkspaceSpecPodTemplatePatch {
            metadata: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateMetadataPatch;
            spec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecPatch;
        }

        /**
         * Specification of the desired behavior of the pod.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface WorkspaceSpecPodTemplateSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to
             * StartTime before the system will actively try to mark it failed and kill associated containers.
             * Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod.
             * Containers cannot currently be added or removed.
             * There must be at least one container in a Pod.
             * Cannot be updated.
             */
            containers: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainers[];
            dnsConfig: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecDnsConfig;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's
             * environment variables, matching the syntax of Docker links.
             * Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
             * pod to perform user-initiated actions such as debugging. This list cannot be specified when
             * creating a pod, and it cannot be modified by updating the pod spec. In order to add an
             * ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
             * file if specified.
             */
            hostAliases: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecHostAliases[];
            /**
             * Use the host's ipc namespace.
             * Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace.
             * If this option is set, the ports that will be used must be specified.
             * Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace.
             * Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace.
             * Optional: Default to true.
             * If set to true or not present, the pod will be run in the host user namespace, useful
             * for when the pod needs a feature only available to the host user namespace, such as
             * loading a kernel module with CAP_SYS_MODULE.
             * When set to false, a new userns is created for the pod. Setting false is useful for
             * mitigating container breakout vulnerabilities even allowing users to run their
             * containers as root without actually having root privileges on the host.
             * This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod
             * If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod.
             * Init containers are executed in order prior to containers being started. If any
             * init container fails, the pod is considered to have failed and is handled according
             * to its restartPolicy. The name for an init container or normal container must be
             * unique among all containers.
             * Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
             * The resourceRequirements of an init container are taken into account during scheduling
             * by finding the highest request/limit for each resource type, and then using the max of
             * of that value or the sum of the normal containers. Limits are applied to init containers
             * in a similar fashion.
             * Init containers cannot currently be added or removed.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainers[];
            /**
             * NodeName indicates in which node this pod is scheduled.
             * If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName.
             * Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod.
             * This field should not be used to express a desire for the pod to be scheduled on a specific node.
             * https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            os: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
             * This field will be autopopulated at admission time by the RuntimeClass admission controller. If
             * the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
             * The RuntimeClass admission controller will reject Pod create requests which have the overhead already
             * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
             * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {[key: string]: number | string};
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority.
             * One of Never, PreemptLowerPriority.
             * Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the
             * priority of the pod. When Priority Admission Controller is enabled, it
             * prevents users from setting this field. The admission controller populates
             * this field from PriorityClassName.
             * The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and
             * "system-cluster-critical" are two special keywords which indicate the
             * highest priorities with the former being the highest priority. Any other
             * name must be defined by creating a PriorityClass object with that name.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness.
             * A pod is ready when all its containers are ready AND
             * all conditions specified in the readiness gates have status equal to "True"
             * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated
             * and reserved before the Pod is allowed to start. The resources
             * will be made available to those containers which consume them
             * by name.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable.
             */
            resourceClaims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecResourceClaims[];
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecResources;
            /**
             * Restart policy for all containers within the pod.
             * One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
             * Default to Always.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
             * to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
             * If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
             * empty definition that uses the default runtime handler.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler.
             * If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
             * If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
             * scheduler will not attempt to schedule the pod.
             *
             * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
             */
            schedulingGates: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSchedulingGates[];
            securityContext: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.
             * Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
             * In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
             * In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
             * If a pod does not have FQDN, this has no effect.
             * Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod.
             * When this is set containers will be able to view and signal processes from other containers
             * in the same pod, and the first process in each container will not be assigned PID 1.
             * HostPID and ShareProcessNamespace cannot both be set.
             * Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * If this value is nil, the default grace period will be used instead.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumes[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface WorkspaceSpecPodTemplateSpecAffinity {
            nodeAffinity: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface WorkspaceSpecPodTemplateSpecContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecycle;
            livenessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersPorts[];
            readinessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersResizePolicy[];
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContext;
            startupProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvFrom {
            configMapRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvFromPatch {
            configMapRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface WorkspaceSpecPodTemplateSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecycle {
            postStart: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStart;
            preStop: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStop;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePatch {
            postStart: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartPatch;
            preStop: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStart {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartExec;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartHttpGet;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartSleep;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartPatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStop {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopExec;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopHttpGet;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopSleep;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopPatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLifecyclePatch;
            livenessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersPortsPatch[];
            readinessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersResizePolicyPatch[];
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersResourcesPatch;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextPatch;
            startupProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface WorkspaceSpecPodTemplateSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface WorkspaceSpecPodTemplateSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextAppArmorProfile;
            capabilities: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface WorkspaceSpecPodTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches: string[];
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface WorkspaceSpecPodTemplateSpecDnsConfigOptions {
            /**
             * Name is this DNS resolver option's name.
             * Required.
             */
            name: string;
            /**
             * Value is this DNS resolver option's value.
             */
            value: string;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface WorkspaceSpecPodTemplateSpecDnsConfigOptionsPatch {
            /**
             * Name is this DNS resolver option's name.
             * Required.
             */
            name: string;
            /**
             * Value is this DNS resolver option's value.
             */
            value: string;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface WorkspaceSpecPodTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches: string[];
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for
         * user-initiated activities such as debugging. Ephemeral containers have no resource or
         * scheduling guarantees, and they will not be restarted when they exit or when a Pod is
         * removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
         * Pod to exceed its resource allocation.
         *
         * To add an ephemeral container, use the ephemeralcontainers subresource of an existing
         * Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint.
             * The image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL.
             * This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersPorts[];
            readinessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersResizePolicy[];
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersResources;
            /**
             * Restart policy for the container to manage the restart behavior of each
             * container within a pod.
             * This may only be set for init containers. You cannot set this field on
             * ephemeral containers.
             */
            restartPolicy: string;
            securityContext: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets.
             * The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
             * If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *
             * The container runtime must implement support for this feature. If the runtime does not
             * support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
             * Cannot be updated.
             */
            volumeMounts: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecycle {
            postStart: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStop;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleep;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleep;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for
         * user-initiated activities such as debugging. Ephemeral containers have no resource or
         * scheduling guarantees, and they will not be restarted when they exit or when a Pod is
         * removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
         * Pod to exceed its resource allocation.
         *
         * To add an ephemeral container, use the ephemeralcontainers subresource of an existing
         * Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL.
             * This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersResizePolicyPatch[];
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersResourcesPatch;
            /**
             * Restart policy for the container to manage the restart behavior of each
             * container within a pod.
             * This may only be set for init containers. You cannot set this field on
             * ephemeral containers.
             */
            restartPolicy: string;
            securityContext: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets.
             * The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
             * If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *
             * The container runtime must implement support for this feature. If the runtime does not
             * support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
             * Cannot be updated.
             */
            volumeMounts: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
         * already allocated to the pod.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
         * already allocated to the pod.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfile;
            capabilities: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
         * pod's hosts file.
         */
        export interface WorkspaceSpecPodTemplateSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
         * pod's hosts file.
         */
        export interface WorkspaceSpecPodTemplateSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface WorkspaceSpecPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface WorkspaceSpecPodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecycle;
            livenessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersPorts[];
            readinessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersResizePolicy[];
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContext;
            startupProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvFrom {
            configMapRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvFromPatch {
            configMapRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecycle {
            postStart: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStart;
            preStop: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStop;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePatch {
            postStart: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStart {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGet;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartSleep;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStop {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGet;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopSleep;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersPortsPatch[];
            readinessProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersResizePolicyPatch[];
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersResourcesPatch;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfile;
            capabilities: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbe {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbePatch {
            exec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface WorkspaceSpecPodTemplateSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Specifies the OS of the containers in the pod.
         * Some pod and container fields are restricted if this is set.
         *
         * If the OS field is set to linux, the following fields must be unset:
         * -securityContext.windowsOptions
         *
         * If the OS field is set to windows, following fields must be unset:
         * - spec.hostPID
         * - spec.hostIPC
         * - spec.hostUsers
         * - spec.securityContext.appArmorProfile
         * - spec.securityContext.seLinuxOptions
         * - spec.securityContext.seccompProfile
         * - spec.securityContext.fsGroup
         * - spec.securityContext.fsGroupChangePolicy
         * - spec.securityContext.sysctls
         * - spec.shareProcessNamespace
         * - spec.securityContext.runAsUser
         * - spec.securityContext.runAsGroup
         * - spec.securityContext.supplementalGroups
         * - spec.securityContext.supplementalGroupsPolicy
         * - spec.containers[*].securityContext.appArmorProfile
         * - spec.containers[*].securityContext.seLinuxOptions
         * - spec.containers[*].securityContext.seccompProfile
         * - spec.containers[*].securityContext.capabilities
         * - spec.containers[*].securityContext.readOnlyRootFilesystem
         * - spec.containers[*].securityContext.privileged
         * - spec.containers[*].securityContext.allowPrivilegeEscalation
         * - spec.containers[*].securityContext.procMount
         * - spec.containers[*].securityContext.runAsUser
         * - spec.containers[*].securityContext.runAsGroup
         */
        export interface WorkspaceSpecPodTemplateSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows.
             * Additional value may be defined in future and can be one of:
             * https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
             * Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }

        /**
         * Specifies the OS of the containers in the pod.
         * Some pod and container fields are restricted if this is set.
         *
         * If the OS field is set to linux, the following fields must be unset:
         * -securityContext.windowsOptions
         *
         * If the OS field is set to windows, following fields must be unset:
         * - spec.hostPID
         * - spec.hostIPC
         * - spec.hostUsers
         * - spec.securityContext.appArmorProfile
         * - spec.securityContext.seLinuxOptions
         * - spec.securityContext.seccompProfile
         * - spec.securityContext.fsGroup
         * - spec.securityContext.fsGroupChangePolicy
         * - spec.securityContext.sysctls
         * - spec.shareProcessNamespace
         * - spec.securityContext.runAsUser
         * - spec.securityContext.runAsGroup
         * - spec.securityContext.supplementalGroups
         * - spec.securityContext.supplementalGroupsPolicy
         * - spec.containers[*].securityContext.appArmorProfile
         * - spec.containers[*].securityContext.seLinuxOptions
         * - spec.containers[*].securityContext.seccompProfile
         * - spec.containers[*].securityContext.capabilities
         * - spec.containers[*].securityContext.readOnlyRootFilesystem
         * - spec.containers[*].securityContext.privileged
         * - spec.containers[*].securityContext.allowPrivilegeEscalation
         * - spec.containers[*].securityContext.procMount
         * - spec.containers[*].securityContext.runAsUser
         * - spec.containers[*].securityContext.runAsGroup
         */
        export interface WorkspaceSpecPodTemplateSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows.
             * Additional value may be defined in future and can be one of:
             * https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
             * Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }

        /**
         * Specification of the desired behavior of the pod.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface WorkspaceSpecPodTemplateSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to
             * StartTime before the system will actively try to mark it failed and kill associated containers.
             * Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod.
             * Containers cannot currently be added or removed.
             * There must be at least one container in a Pod.
             * Cannot be updated.
             */
            containers: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecContainersPatch[];
            dnsConfig: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's
             * environment variables, matching the syntax of Docker links.
             * Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
             * pod to perform user-initiated actions such as debugging. This list cannot be specified when
             * creating a pod, and it cannot be modified by updating the pod spec. In order to add an
             * ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
             * file if specified.
             */
            hostAliases: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace.
             * Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace.
             * If this option is set, the ports that will be used must be specified.
             * Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace.
             * Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace.
             * Optional: Default to true.
             * If set to true or not present, the pod will be run in the host user namespace, useful
             * for when the pod needs a feature only available to the host user namespace, such as
             * loading a kernel module with CAP_SYS_MODULE.
             * When set to false, a new userns is created for the pod. Setting false is useful for
             * mitigating container breakout vulnerabilities even allowing users to run their
             * containers as root without actually having root privileges on the host.
             * This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod
             * If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod.
             * Init containers are executed in order prior to containers being started. If any
             * init container fails, the pod is considered to have failed and is handled according
             * to its restartPolicy. The name for an init container or normal container must be
             * unique among all containers.
             * Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
             * The resourceRequirements of an init container are taken into account during scheduling
             * by finding the highest request/limit for each resource type, and then using the max of
             * of that value or the sum of the normal containers. Limits are applied to init containers
             * in a similar fashion.
             * Init containers cannot currently be added or removed.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecInitContainersPatch[];
            /**
             * NodeName indicates in which node this pod is scheduled.
             * If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName.
             * Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod.
             * This field should not be used to express a desire for the pod to be scheduled on a specific node.
             * https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            os: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
             * This field will be autopopulated at admission time by the RuntimeClass admission controller. If
             * the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
             * The RuntimeClass admission controller will reject Pod create requests which have the overhead already
             * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
             * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {[key: string]: number | string};
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority.
             * One of Never, PreemptLowerPriority.
             * Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the
             * priority of the pod. When Priority Admission Controller is enabled, it
             * prevents users from setting this field. The admission controller populates
             * this field from PriorityClassName.
             * The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and
             * "system-cluster-critical" are two special keywords which indicate the
             * highest priorities with the former being the highest priority. Any other
             * name must be defined by creating a PriorityClass object with that name.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness.
             * A pod is ready when all its containers are ready AND
             * all conditions specified in the readiness gates have status equal to "True"
             * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated
             * and reserved before the Pod is allowed to start. The resources
             * will be made available to those containers which consume them
             * by name.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable.
             */
            resourceClaims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecResourceClaimsPatch[];
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecResourcesPatch;
            /**
             * Restart policy for all containers within the pod.
             * One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
             * Default to Always.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
             * to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
             * If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
             * empty definition that uses the default runtime handler.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler.
             * If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
             * If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
             * scheduler will not attempt to schedule the pod.
             *
             * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
             */
            schedulingGates: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSchedulingGatesPatch[];
            securityContext: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.
             * Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
             * In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
             * In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
             * If a pod does not have FQDN, this has no effect.
             * Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod.
             * When this is set containers will be able to view and signal processes from other containers
             * in the same pod, and the first process in each container will not be assigned PID 1.
             * HostPID and ShareProcessNamespace cannot both be set.
             * Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * If this value is nil, the default grace period will be used instead.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesPatch[];
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface WorkspaceSpecPodTemplateSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface WorkspaceSpecPodTemplateSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim, either directly
         * or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim
         * for the pod.
         *
         * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
         * Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface WorkspaceSpecPodTemplateSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod.
             * This must be a DNS_LABEL.
             */
            name: string;
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same
             * namespace as this pod.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate
             * object in the same namespace as this pod.
             *
             * The template will be used to create a new ResourceClaim, which will
             * be bound to this pod. When this pod is deleted, the ResourceClaim
             * will also be deleted. The pod name and resource name, along with a
             * generated component, will be used to form a unique name for the
             * ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
             *
             * This field is immutable and no changes will be made to the
             * corresponding ResourceClaim by the control plane after creating the
             * ResourceClaim.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimTemplateName: string;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim, either directly
         * or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim
         * for the pod.
         *
         * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
         * Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface WorkspaceSpecPodTemplateSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod.
             * This must be a DNS_LABEL.
             */
            name: string;
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same
             * namespace as this pod.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate
             * object in the same namespace as this pod.
             *
             * The template will be used to create a new ResourceClaim, which will
             * be bound to this pod. When this pod is deleted, the ResourceClaim
             * will also be deleted. The pod name and resource name, along with a
             * generated component, will be used to form a unique name for the
             * ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
             *
             * This field is immutable and no changes will be made to the
             * corresponding ResourceClaim by the control plane after creating the
             * ResourceClaim.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimTemplateName: string;
        }

        /**
         * Resources is the total amount of CPU and Memory resources required by all
         * containers in the pod. It supports specifying Requests and Limits for
         * "cpu" and "memory" resource names only. ResourceClaims are not supported.
         *
         * This field enables fine-grained control over resource allocation for the
         * entire pod, allowing resource sharing among containers in a pod.
         *
         * This is an alpha field and requires enabling the PodLevelResources feature
         * gate.
         */
        export interface WorkspaceSpecPodTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecPodTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecPodTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources is the total amount of CPU and Memory resources required by all
         * containers in the pod. It supports specifying Requests and Limits for
         * "cpu" and "memory" resource names only. ResourceClaims are not supported.
         *
         * This field enables fine-grained control over resource allocation for the
         * entire pod, allowing resource sharing among containers in a pod.
         *
         * This is an alpha field and requires enabling the PodLevelResources feature
         * gate.
         */
        export interface WorkspaceSpecPodTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface WorkspaceSpecPodTemplateSpecSchedulingGates {
            /**
             * Name of the scheduling gate.
             * Each scheduling gate must have a unique name field.
             */
            name: string;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface WorkspaceSpecPodTemplateSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate.
             * Each scheduling gate must have a unique name field.
             */
            name: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContext {
            appArmorProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextAppArmorProfile;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            /**
             * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
             * It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
             * Valid values are "MountOption" and "Recursive".
             *
             * "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
             * This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
             *
             * "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
             * This requires all Pods that share the same volume to use the same SELinux label.
             * It is not possible to share the same volume among privileged and unprivileged Pods.
             * Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
             * whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
             * CSIDriver instance. Other volumes are always re-labelled recursively.
             * "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
             *
             * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
             * If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
             * and "Recursive" for all other volumes.
             *
             * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
             *
             * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxChangePolicy: string;
            seLinuxOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in
             * addition to the container's primary GID and fsGroup (if specified).  If
             * the SupplementalGroupsPolicy feature is enabled, the
             * supplementalGroupsPolicy field determines whether these are in addition
             * to or instead of any group memberships defined in the container image.
             * If unspecified, no additional groups are added, though group memberships
             * defined in the container image may still be used, depending on the
             * supplementalGroupsPolicy field.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Defines how supplemental groups of the first container processes are calculated.
             * Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
             * (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
             * and the container runtime must implement support for this feature.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroupsPolicy: string;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextSysctls[];
            windowsOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextPatch {
            appArmorProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextAppArmorProfilePatch;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            /**
             * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
             * It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
             * Valid values are "MountOption" and "Recursive".
             *
             * "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
             * This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
             *
             * "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
             * This requires all Pods that share the same volume to use the same SELinux label.
             * It is not possible to share the same volume among privileged and unprivileged Pods.
             * Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
             * whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
             * CSIDriver instance. Other volumes are always re-labelled recursively.
             * "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
             *
             * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
             * If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
             * and "Recursive" for all other volumes.
             *
             * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
             *
             * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxChangePolicy: string;
            seLinuxOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in
             * addition to the container's primary GID and fsGroup (if specified).  If
             * the SupplementalGroupsPolicy feature is enabled, the
             * supplementalGroupsPolicy field determines whether these are in addition
             * to or instead of any group memberships defined in the container image.
             * If unspecified, no additional groups are added, though group memberships
             * defined in the container image may still be used, depending on the
             * supplementalGroupsPolicy field.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Defines how supplemental groups of the first container processes are calculated.
             * Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
             * (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
             * and the container runtime must implement support for this feature.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroupsPolicy: string;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface WorkspaceSpecPodTemplateSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface WorkspaceSpecPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface WorkspaceSpecPodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface WorkspaceSpecPodTemplateSpecTopologySpreadConstraints {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumes {
            awsElasticBlockStore: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesAzureDisk;
            azureFile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesAzureFile;
            cephfs: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCephfs;
            cinder: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCinder;
            configMap: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesConfigMap;
            csi: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCsi;
            downwardAPI: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesDownwardAPI;
            emptyDir: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEmptyDir;
            ephemeral: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeral;
            fc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesFc;
            flexVolume: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesFlexVolume;
            flocker: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesFlocker;
            gcePersistentDisk: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesGcePersistentDisk;
            gitRepo: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesGitRepo;
            glusterfs: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesGlusterfs;
            hostPath: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesHostPath;
            image: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesImage;
            iscsi: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesIscsi;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesNfs;
            persistentVolumeClaim: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesPortworxVolume;
            projected: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjected;
            quobyte: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesQuobyte;
            rbd: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesRbd;
            scaleIO: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesScaleIO;
            secret: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesSecret;
            storageos: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesStorageos;
            vsphereVolume: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesVsphereVolume;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
         * awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
         * awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
         * are redirected to the disk.csi.azure.com CSI driver.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
         * are redirected to the disk.csi.azure.com CSI driver.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
         * are redirected to the file.csi.azure.com CSI driver.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
         * are redirected to the file.csi.azure.com CSI driver.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
         * Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
         * Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
         * are redirected to the cinder.csi.openstack.org CSI driver.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
         * are redirected to the cinder.csi.openstack.org CSI driver.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCinderSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItems {
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesDownwardAPIItemsPatch[];
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplate;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         * Required, must not be nil.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplate {
            metadata: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata;
            spec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC
         * when creating it. No other fields are allowed and will be rejected during
         * validation.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC
         * when creating it. No other fields are allowed and will be rejected during
         * validation.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         * Required, must not be nil.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch;
            spec: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         * Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesFlexVolumeSecretRef;
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         * Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesFlexVolumeSecretRefPatch;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
         * Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
         * Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
         * gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
         * gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesGitRepo {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesHostPath {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
         * The volume is resolved at pod startup depending on which PullPolicy value is provided:
         *
         * - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
         * - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
         * - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
         *
         * The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
         * A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
         * The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
         * The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
         * The volume will be mounted read-only (ro) and non-executable files (noexec).
         * Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
         * The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesImage {
            /**
             * Policy for pulling OCI objects. Possible values are:
             * Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
             * Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
             * IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             */
            pullPolicy: string;
            /**
             * Required: Image or artifact reference to be used.
             * Behaves in the same way as pod.spec.containers[*].image.
             * Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            reference: string;
        }

        /**
         * image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
         * The volume is resolved at pod startup depending on which PullPolicy value is provided:
         *
         * - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
         * - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
         * - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
         *
         * The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
         * A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
         * The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
         * The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
         * The volume will be mounted read-only (ro) and non-executable files (noexec).
         * Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
         * The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesImagePatch {
            /**
             * Policy for pulling OCI objects. Possible values are:
             * Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
             * Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
             * IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             */
            pullPolicy: string;
            /**
             * Required: Image or artifact reference to be used.
             * Behaves in the same way as pod.spec.containers[*].image.
             * Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            reference: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesNfs {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesPatch {
            awsElasticBlockStore: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesAzureDiskPatch;
            azureFile: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesAzureFilePatch;
            cephfs: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCephfsPatch;
            cinder: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCinderPatch;
            configMap: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesConfigMapPatch;
            csi: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesCsiPatch;
            downwardAPI: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEmptyDirPatch;
            ephemeral: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesEphemeralPatch;
            fc: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesFcPatch;
            flexVolume: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesFlexVolumePatch;
            flocker: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesGitRepoPatch;
            glusterfs: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesGlusterfsPatch;
            hostPath: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesHostPathPatch;
            image: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesImagePatch;
            iscsi: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesIscsiPatch;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesPortworxVolumePatch;
            projected: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedPatch;
            quobyte: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesQuobytePatch;
            rbd: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesRbdPatch;
            scaleIO: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesScaleIOPatch;
            secret: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesSecretPatch;
            storageos: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesStorageosPatch;
            vsphereVolume: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesVsphereVolumePatch;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
         * Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
         * Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
         * Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
         * are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
         * is on.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
         * Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
         * are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
         * is on.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections. Each entry in this list
             * handles one source.
             */
            sources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSources[];
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections. Each entry in this list
             * handles one source.
             */
            sources: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types.
         * Exactly one of these fields must be set.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSources {
            clusterTrustBundle: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundle;
            configMap: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountToken;
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types.
         * Exactly one of these fields must be set.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesPatch {
            clusterTrustBundle: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }

        /**
         * secret information about the secret data to project
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret information about the secret data to project
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
         * Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesQuobyte {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
         * Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesQuobytePatch {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesRbdSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         * Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         * Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.auto.v1alpha1.WorkspaceSpecPodTemplateSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
         * Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
         * are redirected to the csi.vsphere.vmware.com CSI driver.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
         * Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
         * are redirected to the csi.vsphere.vmware.com CSI driver.
         */
        export interface WorkspaceSpecPodTemplateSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * Compute Resources required by this workspace.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface WorkspaceSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface WorkspaceSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Compute Resources required by this workspace.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface WorkspaceSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.auto.v1alpha1.WorkspaceSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        export interface WorkspaceSpecStacks {
            /**
             * Config is a list of confguration values to set on the stack.
             */
            config: outputs.auto.v1alpha1.WorkspaceSpecStacksConfig[];
            /**
             * Create the stack if it does not exist.
             */
            create: boolean;
            /**
             * Environment is a list of Pulumi ESC environments to import into the stack.
             */
            environment: string[];
            name: string;
            /**
             * SecretsProvider is the name of the secret provider to use for the stack.
             */
            secretsProvider: string;
        }

        export interface WorkspaceSpecStacksConfig {
            /**
             * Key is the configuration key or path to set.
             */
            key: string;
            /**
             * The key contains a path to a property in a map or list to set
             */
            path: boolean;
            /**
             * Secret marks the configuration value as a secret.
             */
            secret: boolean;
            /**
             * Value is the configuration value to set.
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecStacksConfigValueFrom;
        }

        export interface WorkspaceSpecStacksConfigPatch {
            /**
             * Key is the configuration key or path to set.
             */
            key: string;
            /**
             * The key contains a path to a property in a map or list to set
             */
            path: boolean;
            /**
             * Secret marks the configuration value as a secret.
             */
            secret: boolean;
            /**
             * Value is the configuration value to set.
             */
            value: string;
            valueFrom: outputs.auto.v1alpha1.WorkspaceSpecStacksConfigValueFromPatch;
        }

        /**
         * ValueFrom is a reference to a value from the environment or from a file.
         */
        export interface WorkspaceSpecStacksConfigValueFrom {
            /**
             * Env is an environment variable in the pulumi container to use as the value.
             */
            env: string;
            /**
             * Path is a path to a file in the pulumi container containing the value.
             */
            path: string;
        }

        /**
         * ValueFrom is a reference to a value from the environment or from a file.
         */
        export interface WorkspaceSpecStacksConfigValueFromPatch {
            /**
             * Env is an environment variable in the pulumi container to use as the value.
             */
            env: string;
            /**
             * Path is a path to a file in the pulumi container containing the value.
             */
            path: string;
        }

        export interface WorkspaceSpecStacksPatch {
            /**
             * Config is a list of confguration values to set on the stack.
             */
            config: outputs.auto.v1alpha1.WorkspaceSpecStacksConfigPatch[];
            /**
             * Create the stack if it does not exist.
             */
            create: boolean;
            /**
             * Environment is a list of Pulumi ESC environments to import into the stack.
             */
            environment: string[];
            name: string;
            /**
             * SecretsProvider is the name of the secret provider to use for the stack.
             */
            secretsProvider: string;
        }

        /**
         * WorkspaceStatus defines the observed state of Workspace
         */
        export interface WorkspaceStatus {
            address: string;
            /**
             * Represents the observations of a workspace's current state.
             * Known .status.conditions.type are: "Ready"
             */
            conditions: outputs.auto.v1alpha1.WorkspaceStatusConditions[];
            /**
             * observedGeneration represents the .metadata.generation that the status was set based upon.
             */
            observedGeneration: number;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface WorkspaceStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface WorkspaceStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * WorkspaceStatus defines the observed state of Workspace
         */
        export interface WorkspaceStatusPatch {
            address: string;
            /**
             * Represents the observations of a workspace's current state.
             * Known .status.conditions.type are: "Ready"
             */
            conditions: outputs.auto.v1alpha1.WorkspaceStatusConditionsPatch[];
            /**
             * observedGeneration represents the .metadata.generation that the status was set based upon.
             */
            observedGeneration: number;
        }

    }
}

export namespace ceph {
    export namespace v1 {
        /**
         * CephBlockPool represents a Ceph Storage Pool
         */
        export interface CephBlockPool {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephBlockPool";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephBlockPoolSpec;
            /**
             * CephBlockPoolStatus represents the mirroring status of Ceph Storage Pool
             */
            status: {[key: string]: any};
        }

        /**
         * CephBlockPoolRadosNamespace represents a Ceph BlockPool Rados Namespace
         */
        export interface CephBlockPoolRadosNamespace {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephBlockPoolRadosNamespace";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephBlockPoolRadosNamespaceSpec;
            /**
             * Status represents the status of a CephBlockPool Rados Namespace
             */
            status: {[key: string]: any};
        }

        /**
         * Spec represents the specification of a Ceph BlockPool Rados Namespace
         */
        export interface CephBlockPoolRadosNamespaceSpec {
            /**
             * BlockPoolName is the name of Ceph BlockPool. Typically it's the name of
             * the CephBlockPool CR.
             */
            blockPoolName: string;
            mirroring: outputs.ceph.v1.CephBlockPoolRadosNamespaceSpecMirroring;
            /**
             * The name of the CephBlockPoolRadosNamespaceSpec namespace. If not set, the default is the name of the CR.
             */
            name: string;
        }

        /**
         * Mirroring configuration of CephBlockPoolRadosNamespace
         */
        export interface CephBlockPoolRadosNamespaceSpecMirroring {
            /**
             * Mode is the mirroring mode; either pool or image
             */
            mode: string;
            /**
             * RemoteNamespace is the name of the CephBlockPoolRadosNamespace on the secondary cluster CephBlockPool
             */
            remoteNamespace: string;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images
             */
            snapshotSchedules: outputs.ceph.v1.CephBlockPoolRadosNamespaceSpecMirroringSnapshotSchedules[];
        }

        /**
         * Mirroring configuration of CephBlockPoolRadosNamespace
         */
        export interface CephBlockPoolRadosNamespaceSpecMirroringPatch {
            /**
             * Mode is the mirroring mode; either pool or image
             */
            mode: string;
            /**
             * RemoteNamespace is the name of the CephBlockPoolRadosNamespace on the secondary cluster CephBlockPool
             */
            remoteNamespace: string;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images
             */
            snapshotSchedules: outputs.ceph.v1.CephBlockPoolRadosNamespaceSpecMirroringSnapshotSchedulesPatch[];
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephBlockPoolRadosNamespaceSpecMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephBlockPoolRadosNamespaceSpecMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * Spec represents the specification of a Ceph BlockPool Rados Namespace
         */
        export interface CephBlockPoolRadosNamespaceSpecPatch {
            /**
             * BlockPoolName is the name of Ceph BlockPool. Typically it's the name of
             * the CephBlockPool CR.
             */
            blockPoolName: string;
            mirroring: outputs.ceph.v1.CephBlockPoolRadosNamespaceSpecMirroringPatch;
            /**
             * The name of the CephBlockPoolRadosNamespaceSpec namespace. If not set, the default is the name of the CR.
             */
            name: string;
        }

        /**
         * NamedBlockPoolSpec allows a block pool to be created with a non-default name.
         * This is more specific than the NamedPoolSpec so we get schema validation on the
         * allowed pool names that can be specified.
         */
        export interface CephBlockPoolSpec {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephBlockPoolSpecErasureCoded;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephBlockPoolSpecMirroring;
            /**
             * The desired name of the pool if different from the CephBlockPool CR name.
             */
            name: string;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephBlockPoolSpecQuotas;
            replicated: outputs.ceph.v1.CephBlockPoolSpecReplicated;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The erasure code settings
         */
        export interface CephBlockPoolSpecErasureCoded {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The erasure code settings
         */
        export interface CephBlockPoolSpecErasureCodedPatch {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The mirroring settings
         */
        export interface CephBlockPoolSpecMirroring {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephBlockPoolSpecMirroringPeers;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephBlockPoolSpecMirroringSnapshotSchedules[];
        }

        /**
         * The mirroring settings
         */
        export interface CephBlockPoolSpecMirroringPatch {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephBlockPoolSpecMirroringPeersPatch;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephBlockPoolSpecMirroringSnapshotSchedulesPatch[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephBlockPoolSpecMirroringPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephBlockPoolSpecMirroringPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephBlockPoolSpecMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephBlockPoolSpecMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * NamedBlockPoolSpec allows a block pool to be created with a non-default name.
         * This is more specific than the NamedPoolSpec so we get schema validation on the
         * allowed pool names that can be specified.
         */
        export interface CephBlockPoolSpecPatch {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephBlockPoolSpecErasureCodedPatch;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephBlockPoolSpecMirroringPatch;
            /**
             * The desired name of the pool if different from the CephBlockPool CR name.
             */
            name: string;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephBlockPoolSpecQuotasPatch;
            replicated: outputs.ceph.v1.CephBlockPoolSpecReplicatedPatch;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The quota settings
         */
        export interface CephBlockPoolSpecQuotas {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The quota settings
         */
        export interface CephBlockPoolSpecQuotasPatch {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The replication settings
         */
        export interface CephBlockPoolSpecReplicated {
            hybridStorage: outputs.ceph.v1.CephBlockPoolSpecReplicatedHybridStorage;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephBlockPoolSpecReplicatedHybridStorage {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephBlockPoolSpecReplicatedHybridStoragePatch {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * The replication settings
         */
        export interface CephBlockPoolSpecReplicatedPatch {
            hybridStorage: outputs.ceph.v1.CephBlockPoolSpecReplicatedHybridStoragePatch;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * CephBucketNotification represents a Bucket Notifications
         */
        export interface CephBucketNotification {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephBucketNotification";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephBucketNotificationSpec;
            /**
             * Status represents the status of an object
             */
            status: {[key: string]: any};
        }

        /**
         * BucketNotificationSpec represent the spec of a Bucket Notification
         */
        export interface CephBucketNotificationSpec {
            /**
             * List of events that should trigger the notification
             */
            events: string[];
            filter: outputs.ceph.v1.CephBucketNotificationSpecFilter;
            /**
             * The name of the topic associated with this notification
             */
            topic: string;
        }

        /**
         * Spec of notification filter
         */
        export interface CephBucketNotificationSpecFilter {
            /**
             * Filters based on the object's key
             */
            keyFilters: outputs.ceph.v1.CephBucketNotificationSpecFilterKeyFilters[];
            /**
             * Filters based on the object's metadata
             */
            metadataFilters: outputs.ceph.v1.CephBucketNotificationSpecFilterMetadataFilters[];
            /**
             * Filters based on the object's tags
             */
            tagFilters: outputs.ceph.v1.CephBucketNotificationSpecFilterTagFilters[];
        }

        /**
         * NotificationKeyFilterRule represent a single key rule in the Notification Filter spec
         */
        export interface CephBucketNotificationSpecFilterKeyFilters {
            /**
             * Name of the filter - prefix/suffix/regex
             */
            name: string;
            /**
             * Value to filter on
             */
            value: string;
        }

        /**
         * NotificationKeyFilterRule represent a single key rule in the Notification Filter spec
         */
        export interface CephBucketNotificationSpecFilterKeyFiltersPatch {
            /**
             * Name of the filter - prefix/suffix/regex
             */
            name: string;
            /**
             * Value to filter on
             */
            value: string;
        }

        /**
         * NotificationFilterRule represent a single rule in the Notification Filter spec
         */
        export interface CephBucketNotificationSpecFilterMetadataFilters {
            /**
             * Name of the metadata or tag
             */
            name: string;
            /**
             * Value to filter on
             */
            value: string;
        }

        /**
         * NotificationFilterRule represent a single rule in the Notification Filter spec
         */
        export interface CephBucketNotificationSpecFilterMetadataFiltersPatch {
            /**
             * Name of the metadata or tag
             */
            name: string;
            /**
             * Value to filter on
             */
            value: string;
        }

        /**
         * Spec of notification filter
         */
        export interface CephBucketNotificationSpecFilterPatch {
            /**
             * Filters based on the object's key
             */
            keyFilters: outputs.ceph.v1.CephBucketNotificationSpecFilterKeyFiltersPatch[];
            /**
             * Filters based on the object's metadata
             */
            metadataFilters: outputs.ceph.v1.CephBucketNotificationSpecFilterMetadataFiltersPatch[];
            /**
             * Filters based on the object's tags
             */
            tagFilters: outputs.ceph.v1.CephBucketNotificationSpecFilterTagFiltersPatch[];
        }

        /**
         * NotificationFilterRule represent a single rule in the Notification Filter spec
         */
        export interface CephBucketNotificationSpecFilterTagFilters {
            /**
             * Name of the metadata or tag
             */
            name: string;
            /**
             * Value to filter on
             */
            value: string;
        }

        /**
         * NotificationFilterRule represent a single rule in the Notification Filter spec
         */
        export interface CephBucketNotificationSpecFilterTagFiltersPatch {
            /**
             * Name of the metadata or tag
             */
            name: string;
            /**
             * Value to filter on
             */
            value: string;
        }

        /**
         * BucketNotificationSpec represent the spec of a Bucket Notification
         */
        export interface CephBucketNotificationSpecPatch {
            /**
             * List of events that should trigger the notification
             */
            events: string[];
            filter: outputs.ceph.v1.CephBucketNotificationSpecFilterPatch;
            /**
             * The name of the topic associated with this notification
             */
            topic: string;
        }

        /**
         * CephBucketTopic represents a Ceph Object Topic for Bucket Notifications
         */
        export interface CephBucketTopic {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephBucketTopic";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephBucketTopicSpec;
            /**
             * BucketTopicStatus represents the Status of a CephBucketTopic
             */
            status: {[key: string]: any};
        }

        /**
         * BucketTopicSpec represent the spec of a Bucket Topic
         */
        export interface CephBucketTopicSpec {
            endpoint: outputs.ceph.v1.CephBucketTopicSpecEndpoint;
            /**
             * The name of the object store on which to define the topic
             */
            objectStoreName: string;
            /**
             * The namespace of the object store on which to define the topic
             */
            objectStoreNamespace: string;
            /**
             * Data which is sent in each event
             */
            opaqueData: string;
            /**
             * Indication whether notifications to this endpoint are persistent or not
             */
            persistent: boolean;
        }

        /**
         * Contains the endpoint spec of the topic
         */
        export interface CephBucketTopicSpecEndpoint {
            amqp: outputs.ceph.v1.CephBucketTopicSpecEndpointAmqp;
            http: outputs.ceph.v1.CephBucketTopicSpecEndpointHttp;
            kafka: outputs.ceph.v1.CephBucketTopicSpecEndpointKafka;
        }

        /**
         * Spec of AMQP endpoint
         */
        export interface CephBucketTopicSpecEndpointAmqp {
            /**
             * The ack level required for this topic (none/broker/routeable)
             */
            ackLevel: string;
            /**
             * Indicate whether the server certificate is validated by the client or not
             */
            disableVerifySSL: boolean;
            /**
             * Name of the exchange that is used to route messages based on topics
             */
            exchange: string;
            /**
             * The URI of the AMQP endpoint to push notification to
             */
            uri: string;
        }

        /**
         * Spec of AMQP endpoint
         */
        export interface CephBucketTopicSpecEndpointAmqpPatch {
            /**
             * The ack level required for this topic (none/broker/routeable)
             */
            ackLevel: string;
            /**
             * Indicate whether the server certificate is validated by the client or not
             */
            disableVerifySSL: boolean;
            /**
             * Name of the exchange that is used to route messages based on topics
             */
            exchange: string;
            /**
             * The URI of the AMQP endpoint to push notification to
             */
            uri: string;
        }

        /**
         * Spec of HTTP endpoint
         */
        export interface CephBucketTopicSpecEndpointHttp {
            /**
             * Indicate whether the server certificate is validated by the client or not
             */
            disableVerifySSL: boolean;
            /**
             * Send the notifications with the CloudEvents header: https://github.com/cloudevents/spec/blob/main/cloudevents/adapters/aws-s3.md
             */
            sendCloudEvents: boolean;
            /**
             * The URI of the HTTP endpoint to push notification to
             */
            uri: string;
        }

        /**
         * Spec of HTTP endpoint
         */
        export interface CephBucketTopicSpecEndpointHttpPatch {
            /**
             * Indicate whether the server certificate is validated by the client or not
             */
            disableVerifySSL: boolean;
            /**
             * Send the notifications with the CloudEvents header: https://github.com/cloudevents/spec/blob/main/cloudevents/adapters/aws-s3.md
             */
            sendCloudEvents: boolean;
            /**
             * The URI of the HTTP endpoint to push notification to
             */
            uri: string;
        }

        /**
         * Spec of Kafka endpoint
         */
        export interface CephBucketTopicSpecEndpointKafka {
            /**
             * The ack level required for this topic (none/broker)
             */
            ackLevel: string;
            /**
             * Indicate whether the server certificate is validated by the client or not
             */
            disableVerifySSL: boolean;
            /**
             * The URI of the Kafka endpoint to push notification to
             */
            uri: string;
            /**
             * Indicate whether to use SSL when communicating with the broker
             */
            useSSL: boolean;
        }

        /**
         * Spec of Kafka endpoint
         */
        export interface CephBucketTopicSpecEndpointKafkaPatch {
            /**
             * The ack level required for this topic (none/broker)
             */
            ackLevel: string;
            /**
             * Indicate whether the server certificate is validated by the client or not
             */
            disableVerifySSL: boolean;
            /**
             * The URI of the Kafka endpoint to push notification to
             */
            uri: string;
            /**
             * Indicate whether to use SSL when communicating with the broker
             */
            useSSL: boolean;
        }

        /**
         * Contains the endpoint spec of the topic
         */
        export interface CephBucketTopicSpecEndpointPatch {
            amqp: outputs.ceph.v1.CephBucketTopicSpecEndpointAmqpPatch;
            http: outputs.ceph.v1.CephBucketTopicSpecEndpointHttpPatch;
            kafka: outputs.ceph.v1.CephBucketTopicSpecEndpointKafkaPatch;
        }

        /**
         * BucketTopicSpec represent the spec of a Bucket Topic
         */
        export interface CephBucketTopicSpecPatch {
            endpoint: outputs.ceph.v1.CephBucketTopicSpecEndpointPatch;
            /**
             * The name of the object store on which to define the topic
             */
            objectStoreName: string;
            /**
             * The namespace of the object store on which to define the topic
             */
            objectStoreNamespace: string;
            /**
             * Data which is sent in each event
             */
            opaqueData: string;
            /**
             * Indication whether notifications to this endpoint are persistent or not
             */
            persistent: boolean;
        }

        /**
         * CephCOSIDriver represents the CRD for the Ceph COSI Driver Deployment
         */
        export interface CephCOSIDriver {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephCOSIDriver";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephCOSIDriverSpec;
        }

        /**
         * Spec represents the specification of a Ceph COSI Driver
         */
        export interface CephCOSIDriverSpec {
            /**
             * DeploymentStrategy is the strategy to use to deploy the COSI driver.
             */
            deploymentStrategy: string;
            /**
             * Image is the container image to run the Ceph COSI driver
             */
            image: string;
            /**
             * ObjectProvisionerImage is the container image to run the COSI driver sidecar
             */
            objectProvisionerImage: string;
            placement: outputs.ceph.v1.CephCOSIDriverSpecPlacement;
            resources: outputs.ceph.v1.CephCOSIDriverSpecResources;
        }

        /**
         * Spec represents the specification of a Ceph COSI Driver
         */
        export interface CephCOSIDriverSpecPatch {
            /**
             * DeploymentStrategy is the strategy to use to deploy the COSI driver.
             */
            deploymentStrategy: string;
            /**
             * Image is the container image to run the Ceph COSI driver
             */
            image: string;
            /**
             * ObjectProvisionerImage is the container image to run the COSI driver sidecar
             */
            objectProvisionerImage: string;
            placement: outputs.ceph.v1.CephCOSIDriverSpecPlacementPatch;
            resources: outputs.ceph.v1.CephCOSIDriverSpecResourcesPatch;
        }

        export interface CephCOSIDriverSpecPlacement {
            nodeAffinity: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinity;
            podAffinity: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinity;
            podAntiAffinity: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinity;
            tolerations: outputs.ceph.v1.CephCOSIDriverSpecPlacementTolerations[];
            topologySpreadConstraints: outputs.ceph.v1.CephCOSIDriverSpecPlacementTopologySpreadConstraints[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            weight: number;
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            matchFields: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            matchFields: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        export interface CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        export interface CephCOSIDriverSpecPlacementPatch {
            nodeAffinity: outputs.ceph.v1.CephCOSIDriverSpecPlacementNodeAffinityPatch;
            podAffinity: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPatch;
            podAntiAffinity: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPatch;
            tolerations: outputs.ceph.v1.CephCOSIDriverSpecPlacementTolerationsPatch[];
            topologySpreadConstraints: outputs.ceph.v1.CephCOSIDriverSpecPlacementTopologySpreadConstraintsPatch[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            weight: number;
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            weight: number;
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephCOSIDriverSpecPlacementTolerations {
            effect: string;
            key: string;
            operator: string;
            tolerationSeconds: number;
            value: string;
        }

        export interface CephCOSIDriverSpecPlacementTolerationsPatch {
            effect: string;
            key: string;
            operator: string;
            tolerationSeconds: number;
            value: string;
        }

        export interface CephCOSIDriverSpecPlacementTopologySpreadConstraints {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementTopologySpreadConstraintsLabelSelector;
            matchLabelKeys: string[];
            maxSkew: number;
            minDomains: number;
            nodeAffinityPolicy: string;
            nodeTaintsPolicy: string;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        export interface CephCOSIDriverSpecPlacementTopologySpreadConstraintsLabelSelector {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementTopologySpreadConstraintsLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephCOSIDriverSpecPlacementTopologySpreadConstraintsLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephCOSIDriverSpecPlacementTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephCOSIDriverSpecPlacementTopologySpreadConstraintsPatch {
            labelSelector: outputs.ceph.v1.CephCOSIDriverSpecPlacementTopologySpreadConstraintsLabelSelectorPatch;
            matchLabelKeys: string[];
            maxSkew: number;
            minDomains: number;
            nodeAffinityPolicy: string;
            nodeTaintsPolicy: string;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        /**
         * Resources is the resource requirements for the COSI driver
         */
        export interface CephCOSIDriverSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.ceph.v1.CephCOSIDriverSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface CephCOSIDriverSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface CephCOSIDriverSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources is the resource requirements for the COSI driver
         */
        export interface CephCOSIDriverSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.ceph.v1.CephCOSIDriverSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * CephClient represents a Ceph Client
         */
        export interface CephClient {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephClient";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephClientSpec;
            /**
             * Status represents the status of a Ceph Client
             */
            status: {[key: string]: any};
        }

        /**
         * Spec represents the specification of a Ceph Client
         */
        export interface CephClientSpec {
            caps: {[key: string]: any};
            name: string;
        }

        /**
         * Spec represents the specification of a Ceph Client
         */
        export interface CephClientSpecPatch {
            caps: {[key: string]: any};
            name: string;
        }

        /**
         * CephCluster is a Ceph storage cluster
         */
        export interface CephCluster {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephCluster";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephClusterSpec;
            /**
             * ClusterStatus represents the status of a Ceph cluster
             */
            status: {[key: string]: any};
        }

        /**
         * ClusterSpec represents the specification of Ceph Cluster
         */
        export interface CephClusterSpec {
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * Ceph Config options
             */
            cephConfig: {[key: string]: {[key: string]: string}};
            cephVersion: outputs.ceph.v1.CephClusterSpecCephVersion;
            cleanupPolicy: outputs.ceph.v1.CephClusterSpecCleanupPolicy;
            /**
             * ContinueUpgradeAfterChecksEvenIfNotHealthy defines if an upgrade should continue even if PGs are not clean
             */
            continueUpgradeAfterChecksEvenIfNotHealthy: boolean;
            crashCollector: outputs.ceph.v1.CephClusterSpecCrashCollector;
            csi: outputs.ceph.v1.CephClusterSpecCsi;
            dashboard: outputs.ceph.v1.CephClusterSpecDashboard;
            /**
             * The path on the host where config and data can be persisted
             */
            dataDirHostPath: string;
            disruptionManagement: outputs.ceph.v1.CephClusterSpecDisruptionManagement;
            /**
             * Whether the Ceph Cluster is running external to this Kubernetes cluster
             * mon, mgr, osd, mds, and discover daemons will not be created for external clusters.
             */
            external: {[key: string]: any};
            healthCheck: outputs.ceph.v1.CephClusterSpecHealthCheck;
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            logCollector: outputs.ceph.v1.CephClusterSpecLogCollector;
            mgr: outputs.ceph.v1.CephClusterSpecMgr;
            mon: outputs.ceph.v1.CephClusterSpecMon;
            monitoring: outputs.ceph.v1.CephClusterSpecMonitoring;
            /**
             * Network related configuration
             */
            network: {[key: string]: any};
            placement: {[key: string]: any};
            /**
             * PriorityClassNames sets priority classes on components
             */
            priorityClassNames: {[key: string]: any};
            /**
             * Remove the OSD that is out and safe to remove only if this option is true
             */
            removeOSDsIfOutAndSafeToRemove: boolean;
            /**
             * Resources set resource requests and limits
             */
            resources: {[key: string]: any};
            security: outputs.ceph.v1.CephClusterSpecSecurity;
            /**
             * SkipUpgradeChecks defines if an upgrade should be forced even if one of the check fails
             */
            skipUpgradeChecks: boolean;
            storage: outputs.ceph.v1.CephClusterSpecStorage;
            /**
             * UpgradeOSDRequiresHealthyPGs defines if OSD upgrade requires PGs are clean. If set to `true` OSD upgrade process won't start until PGs are healthy.
             * This configuration will be ignored if `skipUpgradeChecks` is `true`.
             * Default is false.
             */
            upgradeOSDRequiresHealthyPGs: boolean;
            /**
             * WaitTimeoutForHealthyOSDInMinutes defines the time the operator would wait before an OSD can be stopped for upgrade or restart.
             * If the timeout exceeds and OSD is not ok to stop, then the operator would skip upgrade for the current OSD and proceed with the next one
             * if `continueUpgradeAfterChecksEvenIfNotHealthy` is `false`. If `continueUpgradeAfterChecksEvenIfNotHealthy` is `true`, then operator would
             * continue with the upgrade of an OSD even if its not ok to stop after the timeout. This timeout won't be applied if `skipUpgradeChecks` is `true`.
             * The default wait timeout is 10 minutes.
             */
            waitTimeoutForHealthyOSDInMinutes: number;
        }

        /**
         * The version information that instructs Rook to orchestrate a particular version of Ceph.
         */
        export interface CephClusterSpecCephVersion {
            /**
             * Whether to allow unsupported versions (do not set to true in production)
             */
            allowUnsupported: boolean;
            /**
             * Image is the container image used to launch the ceph daemons, such as quay.io/ceph/ceph:<tag>
             * The full list of images can be found at https://quay.io/repository/ceph/ceph?tab=tags
             */
            image: string;
            /**
             * ImagePullPolicy describes a policy for if/when to pull a container image
             * One of Always, Never, IfNotPresent.
             */
            imagePullPolicy: string;
        }

        /**
         * The version information that instructs Rook to orchestrate a particular version of Ceph.
         */
        export interface CephClusterSpecCephVersionPatch {
            /**
             * Whether to allow unsupported versions (do not set to true in production)
             */
            allowUnsupported: boolean;
            /**
             * Image is the container image used to launch the ceph daemons, such as quay.io/ceph/ceph:<tag>
             * The full list of images can be found at https://quay.io/repository/ceph/ceph?tab=tags
             */
            image: string;
            /**
             * ImagePullPolicy describes a policy for if/when to pull a container image
             * One of Always, Never, IfNotPresent.
             */
            imagePullPolicy: string;
        }

        /**
         * Indicates user intent when deleting a cluster; blocks orchestration and should not be set if cluster
         * deletion is not imminent.
         */
        export interface CephClusterSpecCleanupPolicy {
            /**
             * AllowUninstallWithVolumes defines whether we can proceed with the uninstall if they are RBD images still present
             */
            allowUninstallWithVolumes: boolean;
            /**
             * Confirmation represents the cleanup confirmation
             */
            confirmation: string;
            sanitizeDisks: outputs.ceph.v1.CephClusterSpecCleanupPolicySanitizeDisks;
        }

        /**
         * Indicates user intent when deleting a cluster; blocks orchestration and should not be set if cluster
         * deletion is not imminent.
         */
        export interface CephClusterSpecCleanupPolicyPatch {
            /**
             * AllowUninstallWithVolumes defines whether we can proceed with the uninstall if they are RBD images still present
             */
            allowUninstallWithVolumes: boolean;
            /**
             * Confirmation represents the cleanup confirmation
             */
            confirmation: string;
            sanitizeDisks: outputs.ceph.v1.CephClusterSpecCleanupPolicySanitizeDisksPatch;
        }

        /**
         * SanitizeDisks represents way we sanitize disks
         */
        export interface CephClusterSpecCleanupPolicySanitizeDisks {
            /**
             * DataSource is the data source to use to sanitize the disk with
             */
            dataSource: string;
            /**
             * Iteration is the number of pass to apply the sanitizing
             */
            iteration: number;
            /**
             * Method is the method we use to sanitize disks
             */
            method: string;
        }

        /**
         * SanitizeDisks represents way we sanitize disks
         */
        export interface CephClusterSpecCleanupPolicySanitizeDisksPatch {
            /**
             * DataSource is the data source to use to sanitize the disk with
             */
            dataSource: string;
            /**
             * Iteration is the number of pass to apply the sanitizing
             */
            iteration: number;
            /**
             * Method is the method we use to sanitize disks
             */
            method: string;
        }

        /**
         * A spec for the crash controller
         */
        export interface CephClusterSpecCrashCollector {
            /**
             * DaysToRetain represents the number of days to retain crash until they get pruned
             */
            daysToRetain: number;
            /**
             * Disable determines whether we should enable the crash collector
             */
            disable: boolean;
        }

        /**
         * A spec for the crash controller
         */
        export interface CephClusterSpecCrashCollectorPatch {
            /**
             * DaysToRetain represents the number of days to retain crash until they get pruned
             */
            daysToRetain: number;
            /**
             * Disable determines whether we should enable the crash collector
             */
            disable: boolean;
        }

        /**
         * CSI Driver Options applied per cluster.
         */
        export interface CephClusterSpecCsi {
            cephfs: outputs.ceph.v1.CephClusterSpecCsiCephfs;
            readAffinity: outputs.ceph.v1.CephClusterSpecCsiReadAffinity;
        }

        /**
         * CephFS defines CSI Driver settings for CephFS driver.
         */
        export interface CephClusterSpecCsiCephfs {
            /**
             * FuseMountOptions defines the mount options for ceph fuse mounter.
             */
            fuseMountOptions: string;
            /**
             * KernelMountOptions defines the mount options for kernel mounter.
             */
            kernelMountOptions: string;
        }

        /**
         * CephFS defines CSI Driver settings for CephFS driver.
         */
        export interface CephClusterSpecCsiCephfsPatch {
            /**
             * FuseMountOptions defines the mount options for ceph fuse mounter.
             */
            fuseMountOptions: string;
            /**
             * KernelMountOptions defines the mount options for kernel mounter.
             */
            kernelMountOptions: string;
        }

        /**
         * CSI Driver Options applied per cluster.
         */
        export interface CephClusterSpecCsiPatch {
            cephfs: outputs.ceph.v1.CephClusterSpecCsiCephfsPatch;
            readAffinity: outputs.ceph.v1.CephClusterSpecCsiReadAffinityPatch;
        }

        /**
         * ReadAffinity defines the read affinity settings for CSI driver.
         */
        export interface CephClusterSpecCsiReadAffinity {
            /**
             * CrushLocationLabels defines which node labels to use
             * as CRUSH location. This should correspond to the values set in
             * the CRUSH map.
             */
            crushLocationLabels: string[];
            /**
             * Enables read affinity for CSI driver.
             */
            enabled: boolean;
        }

        /**
         * ReadAffinity defines the read affinity settings for CSI driver.
         */
        export interface CephClusterSpecCsiReadAffinityPatch {
            /**
             * CrushLocationLabels defines which node labels to use
             * as CRUSH location. This should correspond to the values set in
             * the CRUSH map.
             */
            crushLocationLabels: string[];
            /**
             * Enables read affinity for CSI driver.
             */
            enabled: boolean;
        }

        /**
         * Dashboard settings
         */
        export interface CephClusterSpecDashboard {
            /**
             * Enabled determines whether to enable the dashboard
             */
            enabled: boolean;
            /**
             * Port is the dashboard webserver port
             */
            port: number;
            /**
             * Endpoint for the Prometheus host
             */
            prometheusEndpoint: string;
            /**
             * Whether to verify the ssl endpoint for prometheus. Set to false for a self-signed cert.
             */
            prometheusEndpointSSLVerify: boolean;
            /**
             * SSL determines whether SSL should be used
             */
            ssl: boolean;
            /**
             * URLPrefix is a prefix for all URLs to use the dashboard with a reverse proxy
             */
            urlPrefix: string;
        }

        /**
         * Dashboard settings
         */
        export interface CephClusterSpecDashboardPatch {
            /**
             * Enabled determines whether to enable the dashboard
             */
            enabled: boolean;
            /**
             * Port is the dashboard webserver port
             */
            port: number;
            /**
             * Endpoint for the Prometheus host
             */
            prometheusEndpoint: string;
            /**
             * Whether to verify the ssl endpoint for prometheus. Set to false for a self-signed cert.
             */
            prometheusEndpointSSLVerify: boolean;
            /**
             * SSL determines whether SSL should be used
             */
            ssl: boolean;
            /**
             * URLPrefix is a prefix for all URLs to use the dashboard with a reverse proxy
             */
            urlPrefix: string;
        }

        /**
         * A spec for configuring disruption management.
         */
        export interface CephClusterSpecDisruptionManagement {
            /**
             * Deprecated. Namespace to look for MDBs by the machineDisruptionBudgetController
             */
            machineDisruptionBudgetNamespace: string;
            /**
             * Deprecated. This enables management of machinedisruptionbudgets.
             */
            manageMachineDisruptionBudgets: boolean;
            /**
             * This enables management of poddisruptionbudgets
             */
            managePodBudgets: boolean;
            /**
             * OSDMaintenanceTimeout sets how many additional minutes the DOWN/OUT interval is for drained failure domains
             * it only works if managePodBudgets is true.
             * the default is 30 minutes
             */
            osdMaintenanceTimeout: number;
            /**
             * PGHealthCheckTimeout is the time (in minutes) that the operator will wait for the placement groups to become
             * healthy (active+clean) after a drain was completed and OSDs came back up. Rook will continue with the next drain
             * if the timeout exceeds. It only works if managePodBudgets is true.
             * No values or 0 means that the operator will wait until the placement groups are healthy before unblocking the next drain.
             */
            pgHealthCheckTimeout: number;
            /**
             * PgHealthyRegex is the regular expression that is used to determine which PG states should be considered healthy.
             * The default is `^(active\+clean|active\+clean\+scrubbing|active\+clean\+scrubbing\+deep)$`
             */
            pgHealthyRegex: string;
        }

        /**
         * A spec for configuring disruption management.
         */
        export interface CephClusterSpecDisruptionManagementPatch {
            /**
             * Deprecated. Namespace to look for MDBs by the machineDisruptionBudgetController
             */
            machineDisruptionBudgetNamespace: string;
            /**
             * Deprecated. This enables management of machinedisruptionbudgets.
             */
            manageMachineDisruptionBudgets: boolean;
            /**
             * This enables management of poddisruptionbudgets
             */
            managePodBudgets: boolean;
            /**
             * OSDMaintenanceTimeout sets how many additional minutes the DOWN/OUT interval is for drained failure domains
             * it only works if managePodBudgets is true.
             * the default is 30 minutes
             */
            osdMaintenanceTimeout: number;
            /**
             * PGHealthCheckTimeout is the time (in minutes) that the operator will wait for the placement groups to become
             * healthy (active+clean) after a drain was completed and OSDs came back up. Rook will continue with the next drain
             * if the timeout exceeds. It only works if managePodBudgets is true.
             * No values or 0 means that the operator will wait until the placement groups are healthy before unblocking the next drain.
             */
            pgHealthCheckTimeout: number;
            /**
             * PgHealthyRegex is the regular expression that is used to determine which PG states should be considered healthy.
             * The default is `^(active\+clean|active\+clean\+scrubbing|active\+clean\+scrubbing\+deep)$`
             */
            pgHealthyRegex: string;
        }

        /**
         * Internal daemon healthchecks and liveness probe
         */
        export interface CephClusterSpecHealthCheck {
            daemonHealth: outputs.ceph.v1.CephClusterSpecHealthCheckDaemonHealth;
            /**
             * LivenessProbe allows changing the livenessProbe configuration for a given daemon
             */
            livenessProbe: {[key: string]: {[key: string]: string}};
            /**
             * StartupProbe allows changing the startupProbe configuration for a given daemon
             */
            startupProbe: {[key: string]: {[key: string]: string}};
        }

        /**
         * DaemonHealth is the health check for a given daemon
         */
        export interface CephClusterSpecHealthCheckDaemonHealth {
            mon: outputs.ceph.v1.CephClusterSpecHealthCheckDaemonHealthMon;
            osd: outputs.ceph.v1.CephClusterSpecHealthCheckDaemonHealthOsd;
            status: outputs.ceph.v1.CephClusterSpecHealthCheckDaemonHealthStatus;
        }

        /**
         * Monitor represents the health check settings for the Ceph monitor
         */
        export interface CephClusterSpecHealthCheckDaemonHealthMon {
            disabled: boolean;
            /**
             * Interval is the internal in second or minute for the health check to run like 60s for 60 seconds
             */
            interval: string;
            timeout: string;
        }

        /**
         * Monitor represents the health check settings for the Ceph monitor
         */
        export interface CephClusterSpecHealthCheckDaemonHealthMonPatch {
            disabled: boolean;
            /**
             * Interval is the internal in second or minute for the health check to run like 60s for 60 seconds
             */
            interval: string;
            timeout: string;
        }

        /**
         * ObjectStorageDaemon represents the health check settings for the Ceph OSDs
         */
        export interface CephClusterSpecHealthCheckDaemonHealthOsd {
            disabled: boolean;
            /**
             * Interval is the internal in second or minute for the health check to run like 60s for 60 seconds
             */
            interval: string;
            timeout: string;
        }

        /**
         * ObjectStorageDaemon represents the health check settings for the Ceph OSDs
         */
        export interface CephClusterSpecHealthCheckDaemonHealthOsdPatch {
            disabled: boolean;
            /**
             * Interval is the internal in second or minute for the health check to run like 60s for 60 seconds
             */
            interval: string;
            timeout: string;
        }

        /**
         * DaemonHealth is the health check for a given daemon
         */
        export interface CephClusterSpecHealthCheckDaemonHealthPatch {
            mon: outputs.ceph.v1.CephClusterSpecHealthCheckDaemonHealthMonPatch;
            osd: outputs.ceph.v1.CephClusterSpecHealthCheckDaemonHealthOsdPatch;
            status: outputs.ceph.v1.CephClusterSpecHealthCheckDaemonHealthStatusPatch;
        }

        /**
         * Status represents the health check settings for the Ceph health
         */
        export interface CephClusterSpecHealthCheckDaemonHealthStatus {
            disabled: boolean;
            /**
             * Interval is the internal in second or minute for the health check to run like 60s for 60 seconds
             */
            interval: string;
            timeout: string;
        }

        /**
         * Status represents the health check settings for the Ceph health
         */
        export interface CephClusterSpecHealthCheckDaemonHealthStatusPatch {
            disabled: boolean;
            /**
             * Interval is the internal in second or minute for the health check to run like 60s for 60 seconds
             */
            interval: string;
            timeout: string;
        }

        /**
         * Internal daemon healthchecks and liveness probe
         */
        export interface CephClusterSpecHealthCheckPatch {
            daemonHealth: outputs.ceph.v1.CephClusterSpecHealthCheckDaemonHealthPatch;
            /**
             * LivenessProbe allows changing the livenessProbe configuration for a given daemon
             */
            livenessProbe: {[key: string]: {[key: string]: string}};
            /**
             * StartupProbe allows changing the startupProbe configuration for a given daemon
             */
            startupProbe: {[key: string]: {[key: string]: string}};
        }

        /**
         * Logging represents loggings settings
         */
        export interface CephClusterSpecLogCollector {
            /**
             * Enabled represents whether the log collector is enabled
             */
            enabled: boolean;
            /**
             * MaxLogSize is the maximum size of the log per ceph daemons. Must be at least 1M.
             */
            maxLogSize: number | string;
            /**
             * Periodicity is the periodicity of the log rotation.
             */
            periodicity: string;
        }

        /**
         * Logging represents loggings settings
         */
        export interface CephClusterSpecLogCollectorPatch {
            /**
             * Enabled represents whether the log collector is enabled
             */
            enabled: boolean;
            /**
             * MaxLogSize is the maximum size of the log per ceph daemons. Must be at least 1M.
             */
            maxLogSize: number | string;
            /**
             * Periodicity is the periodicity of the log rotation.
             */
            periodicity: string;
        }

        /**
         * A spec for mgr related options
         */
        export interface CephClusterSpecMgr {
            /**
             * AllowMultiplePerNode allows to run multiple managers on the same node (not recommended)
             */
            allowMultiplePerNode: boolean;
            /**
             * Count is the number of manager daemons to run
             */
            count: number;
            /**
             * Modules is the list of ceph manager modules to enable/disable
             */
            modules: outputs.ceph.v1.CephClusterSpecMgrModules[];
        }

        /**
         * Module represents mgr modules that the user wants to enable or disable
         */
        export interface CephClusterSpecMgrModules {
            /**
             * Enabled determines whether a module should be enabled or not
             */
            enabled: boolean;
            /**
             * Name is the name of the ceph manager module
             */
            name: string;
            settings: outputs.ceph.v1.CephClusterSpecMgrModulesSettings;
        }

        /**
         * Module represents mgr modules that the user wants to enable or disable
         */
        export interface CephClusterSpecMgrModulesPatch {
            /**
             * Enabled determines whether a module should be enabled or not
             */
            enabled: boolean;
            /**
             * Name is the name of the ceph manager module
             */
            name: string;
            settings: outputs.ceph.v1.CephClusterSpecMgrModulesSettingsPatch;
        }

        /**
         * Settings to further configure the module
         */
        export interface CephClusterSpecMgrModulesSettings {
            /**
             * BalancerMode sets the `balancer` module with different modes like `upmap`, `crush-compact` etc
             */
            balancerMode: string;
        }

        /**
         * Settings to further configure the module
         */
        export interface CephClusterSpecMgrModulesSettingsPatch {
            /**
             * BalancerMode sets the `balancer` module with different modes like `upmap`, `crush-compact` etc
             */
            balancerMode: string;
        }

        /**
         * A spec for mgr related options
         */
        export interface CephClusterSpecMgrPatch {
            /**
             * AllowMultiplePerNode allows to run multiple managers on the same node (not recommended)
             */
            allowMultiplePerNode: boolean;
            /**
             * Count is the number of manager daemons to run
             */
            count: number;
            /**
             * Modules is the list of ceph manager modules to enable/disable
             */
            modules: outputs.ceph.v1.CephClusterSpecMgrModulesPatch[];
        }

        /**
         * A spec for mon related options
         */
        export interface CephClusterSpecMon {
            /**
             * AllowMultiplePerNode determines if we can run multiple monitors on the same node (not recommended)
             */
            allowMultiplePerNode: boolean;
            /**
             * Count is the number of Ceph monitors
             */
            count: number;
            failureDomainLabel: string;
            stretchCluster: outputs.ceph.v1.CephClusterSpecMonStretchCluster;
            /**
             * VolumeClaimTemplate is the PVC definition
             */
            volumeClaimTemplate: {[key: string]: any};
            /**
             * Zones are specified when we want to provide zonal awareness to mons
             */
            zones: outputs.ceph.v1.CephClusterSpecMonZones[];
        }

        /**
         * A spec for mon related options
         */
        export interface CephClusterSpecMonPatch {
            /**
             * AllowMultiplePerNode determines if we can run multiple monitors on the same node (not recommended)
             */
            allowMultiplePerNode: boolean;
            /**
             * Count is the number of Ceph monitors
             */
            count: number;
            failureDomainLabel: string;
            stretchCluster: outputs.ceph.v1.CephClusterSpecMonStretchClusterPatch;
            /**
             * VolumeClaimTemplate is the PVC definition
             */
            volumeClaimTemplate: {[key: string]: any};
            /**
             * Zones are specified when we want to provide zonal awareness to mons
             */
            zones: outputs.ceph.v1.CephClusterSpecMonZonesPatch[];
        }

        /**
         * StretchCluster is the stretch cluster specification
         */
        export interface CephClusterSpecMonStretchCluster {
            /**
             * FailureDomainLabel the failure domain name (e,g: zone)
             */
            failureDomainLabel: string;
            /**
             * SubFailureDomain is the failure domain within a zone
             */
            subFailureDomain: string;
            /**
             * Zones is the list of zones
             */
            zones: outputs.ceph.v1.CephClusterSpecMonStretchClusterZones[];
        }

        /**
         * StretchCluster is the stretch cluster specification
         */
        export interface CephClusterSpecMonStretchClusterPatch {
            /**
             * FailureDomainLabel the failure domain name (e,g: zone)
             */
            failureDomainLabel: string;
            /**
             * SubFailureDomain is the failure domain within a zone
             */
            subFailureDomain: string;
            /**
             * Zones is the list of zones
             */
            zones: outputs.ceph.v1.CephClusterSpecMonStretchClusterZonesPatch[];
        }

        /**
         * MonZoneSpec represents the specification of a zone in a Ceph Cluster
         */
        export interface CephClusterSpecMonStretchClusterZones {
            /**
             * Arbiter determines if the zone contains the arbiter used for stretch cluster mode
             */
            arbiter: boolean;
            /**
             * Name is the name of the zone
             */
            name: string;
            /**
             * VolumeClaimTemplate is the PVC template
             */
            volumeClaimTemplate: {[key: string]: any};
        }

        /**
         * MonZoneSpec represents the specification of a zone in a Ceph Cluster
         */
        export interface CephClusterSpecMonStretchClusterZonesPatch {
            /**
             * Arbiter determines if the zone contains the arbiter used for stretch cluster mode
             */
            arbiter: boolean;
            /**
             * Name is the name of the zone
             */
            name: string;
            /**
             * VolumeClaimTemplate is the PVC template
             */
            volumeClaimTemplate: {[key: string]: any};
        }

        /**
         * MonZoneSpec represents the specification of a zone in a Ceph Cluster
         */
        export interface CephClusterSpecMonZones {
            /**
             * Arbiter determines if the zone contains the arbiter used for stretch cluster mode
             */
            arbiter: boolean;
            /**
             * Name is the name of the zone
             */
            name: string;
            /**
             * VolumeClaimTemplate is the PVC template
             */
            volumeClaimTemplate: {[key: string]: any};
        }

        /**
         * MonZoneSpec represents the specification of a zone in a Ceph Cluster
         */
        export interface CephClusterSpecMonZonesPatch {
            /**
             * Arbiter determines if the zone contains the arbiter used for stretch cluster mode
             */
            arbiter: boolean;
            /**
             * Name is the name of the zone
             */
            name: string;
            /**
             * VolumeClaimTemplate is the PVC template
             */
            volumeClaimTemplate: {[key: string]: any};
        }

        /**
         * Prometheus based Monitoring settings
         */
        export interface CephClusterSpecMonitoring {
            /**
             * Enabled determines whether to create the prometheus rules for the ceph cluster. If true, the prometheus
             * types must exist or the creation will fail. Default is false.
             */
            enabled: boolean;
            exporter: outputs.ceph.v1.CephClusterSpecMonitoringExporter;
            /**
             * ExternalMgrEndpoints points to an existing Ceph prometheus exporter endpoint
             */
            externalMgrEndpoints: outputs.ceph.v1.CephClusterSpecMonitoringExternalMgrEndpoints[];
            /**
             * ExternalMgrPrometheusPort Prometheus exporter port
             */
            externalMgrPrometheusPort: number;
            /**
             * Interval determines prometheus scrape interval
             */
            interval: string;
            /**
             * Whether to disable the metrics reported by Ceph. If false, the prometheus mgr module and Ceph exporter are enabled.
             * If true, the prometheus mgr module and Ceph exporter are both disabled. Default is false.
             */
            metricsDisabled: boolean;
            /**
             * Port is the prometheus server port
             */
            port: number;
        }

        /**
         * Ceph exporter configuration
         */
        export interface CephClusterSpecMonitoringExporter {
            /**
             * Only performance counters greater than or equal to this option are fetched
             */
            perfCountersPrioLimit: number;
            /**
             * Time to wait before sending requests again to exporter server (seconds)
             */
            statsPeriodSeconds: number;
        }

        /**
         * Ceph exporter configuration
         */
        export interface CephClusterSpecMonitoringExporterPatch {
            /**
             * Only performance counters greater than or equal to this option are fetched
             */
            perfCountersPrioLimit: number;
            /**
             * Time to wait before sending requests again to exporter server (seconds)
             */
            statsPeriodSeconds: number;
        }

        /**
         * EndpointAddress is a tuple that describes single IP address.
         */
        export interface CephClusterSpecMonitoringExternalMgrEndpoints {
            /**
             * The Hostname of this endpoint
             */
            hostname: string;
            /**
             * The IP of this endpoint.
             * May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10),
             * or link-local multicast (224.0.0.0/24 or ff02::/16).
             */
            ip: string;
            /**
             * Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
             */
            nodeName: string;
            targetRef: outputs.ceph.v1.CephClusterSpecMonitoringExternalMgrEndpointsTargetRef;
        }

        /**
         * EndpointAddress is a tuple that describes single IP address.
         */
        export interface CephClusterSpecMonitoringExternalMgrEndpointsPatch {
            /**
             * The Hostname of this endpoint
             */
            hostname: string;
            /**
             * The IP of this endpoint.
             * May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10),
             * or link-local multicast (224.0.0.0/24 or ff02::/16).
             */
            ip: string;
            /**
             * Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
             */
            nodeName: string;
            targetRef: outputs.ceph.v1.CephClusterSpecMonitoringExternalMgrEndpointsTargetRefPatch;
        }

        /**
         * Reference to object providing the endpoint.
         */
        export interface CephClusterSpecMonitoringExternalMgrEndpointsTargetRef {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * Reference to object providing the endpoint.
         */
        export interface CephClusterSpecMonitoringExternalMgrEndpointsTargetRefPatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * Prometheus based Monitoring settings
         */
        export interface CephClusterSpecMonitoringPatch {
            /**
             * Enabled determines whether to create the prometheus rules for the ceph cluster. If true, the prometheus
             * types must exist or the creation will fail. Default is false.
             */
            enabled: boolean;
            exporter: outputs.ceph.v1.CephClusterSpecMonitoringExporterPatch;
            /**
             * ExternalMgrEndpoints points to an existing Ceph prometheus exporter endpoint
             */
            externalMgrEndpoints: outputs.ceph.v1.CephClusterSpecMonitoringExternalMgrEndpointsPatch[];
            /**
             * ExternalMgrPrometheusPort Prometheus exporter port
             */
            externalMgrPrometheusPort: number;
            /**
             * Interval determines prometheus scrape interval
             */
            interval: string;
            /**
             * Whether to disable the metrics reported by Ceph. If false, the prometheus mgr module and Ceph exporter are enabled.
             * If true, the prometheus mgr module and Ceph exporter are both disabled. Default is false.
             */
            metricsDisabled: boolean;
            /**
             * Port is the prometheus server port
             */
            port: number;
        }

        /**
         * ClusterSpec represents the specification of Ceph Cluster
         */
        export interface CephClusterSpecPatch {
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * Ceph Config options
             */
            cephConfig: {[key: string]: {[key: string]: string}};
            cephVersion: outputs.ceph.v1.CephClusterSpecCephVersionPatch;
            cleanupPolicy: outputs.ceph.v1.CephClusterSpecCleanupPolicyPatch;
            /**
             * ContinueUpgradeAfterChecksEvenIfNotHealthy defines if an upgrade should continue even if PGs are not clean
             */
            continueUpgradeAfterChecksEvenIfNotHealthy: boolean;
            crashCollector: outputs.ceph.v1.CephClusterSpecCrashCollectorPatch;
            csi: outputs.ceph.v1.CephClusterSpecCsiPatch;
            dashboard: outputs.ceph.v1.CephClusterSpecDashboardPatch;
            /**
             * The path on the host where config and data can be persisted
             */
            dataDirHostPath: string;
            disruptionManagement: outputs.ceph.v1.CephClusterSpecDisruptionManagementPatch;
            /**
             * Whether the Ceph Cluster is running external to this Kubernetes cluster
             * mon, mgr, osd, mds, and discover daemons will not be created for external clusters.
             */
            external: {[key: string]: any};
            healthCheck: outputs.ceph.v1.CephClusterSpecHealthCheckPatch;
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            logCollector: outputs.ceph.v1.CephClusterSpecLogCollectorPatch;
            mgr: outputs.ceph.v1.CephClusterSpecMgrPatch;
            mon: outputs.ceph.v1.CephClusterSpecMonPatch;
            monitoring: outputs.ceph.v1.CephClusterSpecMonitoringPatch;
            /**
             * Network related configuration
             */
            network: {[key: string]: any};
            placement: {[key: string]: any};
            /**
             * PriorityClassNames sets priority classes on components
             */
            priorityClassNames: {[key: string]: any};
            /**
             * Remove the OSD that is out and safe to remove only if this option is true
             */
            removeOSDsIfOutAndSafeToRemove: boolean;
            /**
             * Resources set resource requests and limits
             */
            resources: {[key: string]: any};
            security: outputs.ceph.v1.CephClusterSpecSecurityPatch;
            /**
             * SkipUpgradeChecks defines if an upgrade should be forced even if one of the check fails
             */
            skipUpgradeChecks: boolean;
            storage: outputs.ceph.v1.CephClusterSpecStoragePatch;
            /**
             * UpgradeOSDRequiresHealthyPGs defines if OSD upgrade requires PGs are clean. If set to `true` OSD upgrade process won't start until PGs are healthy.
             * This configuration will be ignored if `skipUpgradeChecks` is `true`.
             * Default is false.
             */
            upgradeOSDRequiresHealthyPGs: boolean;
            /**
             * WaitTimeoutForHealthyOSDInMinutes defines the time the operator would wait before an OSD can be stopped for upgrade or restart.
             * If the timeout exceeds and OSD is not ok to stop, then the operator would skip upgrade for the current OSD and proceed with the next one
             * if `continueUpgradeAfterChecksEvenIfNotHealthy` is `false`. If `continueUpgradeAfterChecksEvenIfNotHealthy` is `true`, then operator would
             * continue with the upgrade of an OSD even if its not ok to stop after the timeout. This timeout won't be applied if `skipUpgradeChecks` is `true`.
             * The default wait timeout is 10 minutes.
             */
            waitTimeoutForHealthyOSDInMinutes: number;
        }

        /**
         * Security represents security settings
         */
        export interface CephClusterSpecSecurity {
            keyRotation: outputs.ceph.v1.CephClusterSpecSecurityKeyRotation;
            kms: outputs.ceph.v1.CephClusterSpecSecurityKms;
        }

        /**
         * KeyRotation defines options for Key Rotation.
         */
        export interface CephClusterSpecSecurityKeyRotation {
            /**
             * Enabled represents whether the key rotation is enabled.
             */
            enabled: boolean;
            /**
             * Schedule represents the cron schedule for key rotation.
             */
            schedule: string;
        }

        /**
         * KeyRotation defines options for Key Rotation.
         */
        export interface CephClusterSpecSecurityKeyRotationPatch {
            /**
             * Enabled represents whether the key rotation is enabled.
             */
            enabled: boolean;
            /**
             * Schedule represents the cron schedule for key rotation.
             */
            schedule: string;
        }

        /**
         * KeyManagementService is the main Key Management option
         */
        export interface CephClusterSpecSecurityKms {
            /**
             * ConnectionDetails contains the KMS connection details (address, port etc)
             */
            connectionDetails: {[key: string]: any};
            /**
             * TokenSecretName is the kubernetes secret containing the KMS token
             */
            tokenSecretName: string;
        }

        /**
         * KeyManagementService is the main Key Management option
         */
        export interface CephClusterSpecSecurityKmsPatch {
            /**
             * ConnectionDetails contains the KMS connection details (address, port etc)
             */
            connectionDetails: {[key: string]: any};
            /**
             * TokenSecretName is the kubernetes secret containing the KMS token
             */
            tokenSecretName: string;
        }

        /**
         * Security represents security settings
         */
        export interface CephClusterSpecSecurityPatch {
            keyRotation: outputs.ceph.v1.CephClusterSpecSecurityKeyRotationPatch;
            kms: outputs.ceph.v1.CephClusterSpecSecurityKmsPatch;
        }

        /**
         * A spec for available storage in the cluster and how it should be used
         */
        export interface CephClusterSpecStorage {
            /**
             * Whether to allow updating the device class after the OSD is initially provisioned
             */
            allowDeviceClassUpdate: boolean;
            /**
             * Whether Rook will resize the OSD CRUSH weight when the OSD PVC size is increased.
             * This allows cluster data to be rebalanced to make most effective use of new OSD space.
             * The default is false since data rebalancing can cause temporary cluster slowdown.
             */
            allowOsdCrushWeightUpdate: boolean;
            /**
             * BackfillFullRatio is the ratio at which the cluster is too full for backfill. Backfill will be disabled if above this threshold. Default is 0.90.
             */
            backfillFullRatio: number;
            config: {[key: string]: any};
            /**
             * A regular expression to allow more fine-grained selection of devices on nodes across the cluster
             */
            deviceFilter: string;
            /**
             * A regular expression to allow more fine-grained selection of devices with path names
             */
            devicePathFilter: string;
            /**
             * List of devices to use as storage devices
             */
            devices: {[key: string]: any};
            /**
             * FlappingRestartIntervalHours defines the time for which the OSD pods, that failed with zero exit code, will sleep before restarting.
             * This is needed for OSD flapping where OSD daemons are marked down more than 5 times in 600 seconds by Ceph.
             * Preventing the OSD pods to restart immediately in such scenarios will prevent Rook from marking OSD as `up` and thus
             * peering of the PGs mapped to the OSD.
             * User needs to manually restart the OSD pod if they manage to fix the underlying OSD flapping issue before the restart interval.
             * The sleep will be disabled if this interval is set to 0.
             */
            flappingRestartIntervalHours: number;
            /**
             * FullRatio is the ratio at which the cluster is considered full and ceph will stop accepting writes. Default is 0.95.
             */
            fullRatio: number;
            migration: outputs.ceph.v1.CephClusterSpecStorageMigration;
            /**
             * NearFullRatio is the ratio at which the cluster is considered nearly full and will raise a ceph health warning. Default is 0.85.
             */
            nearFullRatio: number;
            nodes: outputs.ceph.v1.CephClusterSpecStorageNodes[];
            onlyApplyOSDPlacement: boolean;
            /**
             * Whether to always schedule OSDs on a node even if the node is not currently scheduleable or ready
             */
            scheduleAlways: boolean;
            storageClassDeviceSets: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSets[];
            store: outputs.ceph.v1.CephClusterSpecStorageStore;
            /**
             * Whether to consume all the storage devices found on a machine
             */
            useAllDevices: boolean;
            useAllNodes: boolean;
            /**
             * PersistentVolumeClaims to use as storage
             */
            volumeClaimTemplates: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplates[];
        }

        /**
         * Migration handles the OSD migration
         */
        export interface CephClusterSpecStorageMigration {
            /**
             * A user confirmation to migrate the OSDs. It destroys each OSD one at a time, cleans up the backing disk
             * and prepares OSD with same ID on that disk
             */
            confirmation: string;
        }

        /**
         * Migration handles the OSD migration
         */
        export interface CephClusterSpecStorageMigrationPatch {
            /**
             * A user confirmation to migrate the OSDs. It destroys each OSD one at a time, cleans up the backing disk
             * and prepares OSD with same ID on that disk
             */
            confirmation: string;
        }

        /**
         * Node is a storage nodes
         */
        export interface CephClusterSpecStorageNodes {
            config: {[key: string]: any};
            /**
             * A regular expression to allow more fine-grained selection of devices on nodes across the cluster
             */
            deviceFilter: string;
            /**
             * A regular expression to allow more fine-grained selection of devices with path names
             */
            devicePathFilter: string;
            /**
             * List of devices to use as storage devices
             */
            devices: {[key: string]: any};
            name: string;
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            resources: {[key: string]: any};
            /**
             * Whether to consume all the storage devices found on a machine
             */
            useAllDevices: boolean;
            /**
             * PersistentVolumeClaims to use as storage
             */
            volumeClaimTemplates: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplates[];
        }

        /**
         * Node is a storage nodes
         */
        export interface CephClusterSpecStorageNodesPatch {
            config: {[key: string]: any};
            /**
             * A regular expression to allow more fine-grained selection of devices on nodes across the cluster
             */
            deviceFilter: string;
            /**
             * A regular expression to allow more fine-grained selection of devices with path names
             */
            devicePathFilter: string;
            /**
             * List of devices to use as storage devices
             */
            devices: {[key: string]: any};
            name: string;
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            resources: {[key: string]: any};
            /**
             * Whether to consume all the storage devices found on a machine
             */
            useAllDevices: boolean;
            /**
             * PersistentVolumeClaims to use as storage
             */
            volumeClaimTemplates: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesPatch[];
        }

        /**
         * VolumeClaimTemplate is a simplified version of K8s corev1's PVC. It has no type meta or status.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplates {
            metadata: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesMetadata;
            spec: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpec;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesMetadata {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesMetadataPatch {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * VolumeClaimTemplate is a simplified version of K8s corev1's PVC. It has no type meta or status.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesPatch {
            metadata: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesMetadataPatch;
            spec: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecPatch;
        }

        /**
         * spec defines the desired characteristics of a volume requested by a pod author.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecDataSource;
            dataSourceRef: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecDataSourceRef;
            resources: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecResources;
            selector: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * spec defines the desired characteristics of a volume requested by a pod author.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecDataSourcePatch;
            dataSourceRef: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecDataSourceRefPatch;
            resources: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecResourcesPatch;
            selector: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface CephClusterSpecStorageNodesVolumeClaimTemplatesSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.ceph.v1.CephClusterSpecStorageNodesVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A spec for available storage in the cluster and how it should be used
         */
        export interface CephClusterSpecStoragePatch {
            /**
             * Whether to allow updating the device class after the OSD is initially provisioned
             */
            allowDeviceClassUpdate: boolean;
            /**
             * Whether Rook will resize the OSD CRUSH weight when the OSD PVC size is increased.
             * This allows cluster data to be rebalanced to make most effective use of new OSD space.
             * The default is false since data rebalancing can cause temporary cluster slowdown.
             */
            allowOsdCrushWeightUpdate: boolean;
            /**
             * BackfillFullRatio is the ratio at which the cluster is too full for backfill. Backfill will be disabled if above this threshold. Default is 0.90.
             */
            backfillFullRatio: number;
            config: {[key: string]: any};
            /**
             * A regular expression to allow more fine-grained selection of devices on nodes across the cluster
             */
            deviceFilter: string;
            /**
             * A regular expression to allow more fine-grained selection of devices with path names
             */
            devicePathFilter: string;
            /**
             * List of devices to use as storage devices
             */
            devices: {[key: string]: any};
            /**
             * FlappingRestartIntervalHours defines the time for which the OSD pods, that failed with zero exit code, will sleep before restarting.
             * This is needed for OSD flapping where OSD daemons are marked down more than 5 times in 600 seconds by Ceph.
             * Preventing the OSD pods to restart immediately in such scenarios will prevent Rook from marking OSD as `up` and thus
             * peering of the PGs mapped to the OSD.
             * User needs to manually restart the OSD pod if they manage to fix the underlying OSD flapping issue before the restart interval.
             * The sleep will be disabled if this interval is set to 0.
             */
            flappingRestartIntervalHours: number;
            /**
             * FullRatio is the ratio at which the cluster is considered full and ceph will stop accepting writes. Default is 0.95.
             */
            fullRatio: number;
            migration: outputs.ceph.v1.CephClusterSpecStorageMigrationPatch;
            /**
             * NearFullRatio is the ratio at which the cluster is considered nearly full and will raise a ceph health warning. Default is 0.85.
             */
            nearFullRatio: number;
            nodes: outputs.ceph.v1.CephClusterSpecStorageNodesPatch[];
            onlyApplyOSDPlacement: boolean;
            /**
             * Whether to always schedule OSDs on a node even if the node is not currently scheduleable or ready
             */
            scheduleAlways: boolean;
            storageClassDeviceSets: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsPatch[];
            store: outputs.ceph.v1.CephClusterSpecStorageStorePatch;
            /**
             * Whether to consume all the storage devices found on a machine
             */
            useAllDevices: boolean;
            useAllNodes: boolean;
            /**
             * PersistentVolumeClaims to use as storage
             */
            volumeClaimTemplates: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesPatch[];
        }

        /**
         * StorageClassDeviceSet is a storage class device set
         */
        export interface CephClusterSpecStorageStorageClassDeviceSets {
            /**
             * Provider-specific device configuration
             */
            config: {[key: string]: any};
            /**
             * Count is the number of devices in this set
             */
            count: number;
            /**
             * Whether to encrypt the deviceSet
             */
            encrypted: boolean;
            /**
             * Name is a unique identifier for the set
             */
            name: string;
            placement: {[key: string]: any};
            /**
             * Portable represents OSD portability across the hosts
             */
            portable: boolean;
            preparePlacement: {[key: string]: any};
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            resources: {[key: string]: any};
            /**
             * Scheduler name for OSD pod placement
             */
            schedulerName: string;
            /**
             * TuneSlowDeviceClass Tune the OSD when running on a slow Device Class
             */
            tuneDeviceClass: boolean;
            /**
             * TuneFastDeviceClass Tune the OSD when running on a fast Device Class
             */
            tuneFastDeviceClass: boolean;
            /**
             * VolumeClaimTemplates is a list of PVC templates for the underlying storage devices
             */
            volumeClaimTemplates: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplates[];
        }

        /**
         * StorageClassDeviceSet is a storage class device set
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsPatch {
            /**
             * Provider-specific device configuration
             */
            config: {[key: string]: any};
            /**
             * Count is the number of devices in this set
             */
            count: number;
            /**
             * Whether to encrypt the deviceSet
             */
            encrypted: boolean;
            /**
             * Name is a unique identifier for the set
             */
            name: string;
            placement: {[key: string]: any};
            /**
             * Portable represents OSD portability across the hosts
             */
            portable: boolean;
            preparePlacement: {[key: string]: any};
            /**
             * ResourceRequirements describes the compute resource requirements.
             */
            resources: {[key: string]: any};
            /**
             * Scheduler name for OSD pod placement
             */
            schedulerName: string;
            /**
             * TuneSlowDeviceClass Tune the OSD when running on a slow Device Class
             */
            tuneDeviceClass: boolean;
            /**
             * TuneFastDeviceClass Tune the OSD when running on a fast Device Class
             */
            tuneFastDeviceClass: boolean;
            /**
             * VolumeClaimTemplates is a list of PVC templates for the underlying storage devices
             */
            volumeClaimTemplates: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesPatch[];
        }

        /**
         * VolumeClaimTemplate is a simplified version of K8s corev1's PVC. It has no type meta or status.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplates {
            metadata: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesMetadata;
            spec: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpec;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesMetadata {
            annotations: {[key: string]: any};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesMetadataPatch {
            annotations: {[key: string]: any};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * VolumeClaimTemplate is a simplified version of K8s corev1's PVC. It has no type meta or status.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesPatch {
            metadata: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesMetadataPatch;
            spec: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecPatch;
        }

        /**
         * spec defines the desired characteristics of a volume requested by a pod author.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecDataSource;
            dataSourceRef: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecDataSourceRef;
            resources: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecResources;
            selector: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * spec defines the desired characteristics of a volume requested by a pod author.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecDataSourcePatch;
            dataSourceRef: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecDataSourceRefPatch;
            resources: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecResourcesPatch;
            selector: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.ceph.v1.CephClusterSpecStorageStorageClassDeviceSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * OSDStore is the backend storage type used for creating the OSDs
         */
        export interface CephClusterSpecStorageStore {
            /**
             * Type of backend storage to be used while creating OSDs. If empty, then bluestore will be used
             */
            type: string;
            /**
             * UpdateStore updates the backend store for existing OSDs. It destroys each OSD one at a time, cleans up the backing disk
             * and prepares same OSD on that disk
             */
            updateStore: string;
        }

        /**
         * OSDStore is the backend storage type used for creating the OSDs
         */
        export interface CephClusterSpecStorageStorePatch {
            /**
             * Type of backend storage to be used while creating OSDs. If empty, then bluestore will be used
             */
            type: string;
            /**
             * UpdateStore updates the backend store for existing OSDs. It destroys each OSD one at a time, cleans up the backing disk
             * and prepares same OSD on that disk
             */
            updateStore: string;
        }

        /**
         * VolumeClaimTemplate is a simplified version of K8s corev1's PVC. It has no type meta or status.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplates {
            metadata: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesMetadata;
            spec: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpec;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesMetadata {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesMetadataPatch {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * VolumeClaimTemplate is a simplified version of K8s corev1's PVC. It has no type meta or status.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesPatch {
            metadata: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesMetadataPatch;
            spec: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecPatch;
        }

        /**
         * spec defines the desired characteristics of a volume requested by a pod author.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecDataSource;
            dataSourceRef: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecDataSourceRef;
            resources: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecResources;
            selector: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * spec defines the desired characteristics of a volume requested by a pod author.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecDataSourcePatch;
            dataSourceRef: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecDataSourceRefPatch;
            resources: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecResourcesPatch;
            selector: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface CephClusterSpecStorageVolumeClaimTemplatesSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.ceph.v1.CephClusterSpecStorageVolumeClaimTemplatesSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * CephFilesystem represents a Ceph Filesystem
         */
        export interface CephFilesystem {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephFilesystem";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephFilesystemSpec;
            /**
             * CephFilesystemStatus represents the status of a Ceph Filesystem
             */
            status: {[key: string]: any};
        }

        /**
         * CephFilesystemMirror is the Ceph Filesystem Mirror object definition
         */
        export interface CephFilesystemMirror {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephFilesystemMirror";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephFilesystemMirrorSpec;
            status: outputs.ceph.v1.CephFilesystemMirrorStatus;
        }

        /**
         * FilesystemMirroringSpec is the filesystem mirroring specification
         */
        export interface CephFilesystemMirrorSpec {
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: string};
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: string};
            placement: outputs.ceph.v1.CephFilesystemMirrorSpecPlacement;
            /**
             * PriorityClassName sets priority class on the cephfs-mirror pods
             */
            priorityClassName: string;
            resources: outputs.ceph.v1.CephFilesystemMirrorSpecResources;
        }

        /**
         * FilesystemMirroringSpec is the filesystem mirroring specification
         */
        export interface CephFilesystemMirrorSpecPatch {
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: string};
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: string};
            placement: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPatch;
            /**
             * PriorityClassName sets priority class on the cephfs-mirror pods
             */
            priorityClassName: string;
            resources: outputs.ceph.v1.CephFilesystemMirrorSpecResourcesPatch;
        }

        export interface CephFilesystemMirrorSpecPlacement {
            nodeAffinity: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinity;
            podAffinity: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinity;
            podAntiAffinity: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinity;
            tolerations: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementTolerations[];
            topologySpreadConstraints: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementTopologySpreadConstraints[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            weight: number;
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            matchFields: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            matchFields: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        export interface CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        export interface CephFilesystemMirrorSpecPlacementPatch {
            nodeAffinity: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementNodeAffinityPatch;
            podAffinity: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPatch;
            podAntiAffinity: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPatch;
            tolerations: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementTolerationsPatch[];
            topologySpreadConstraints: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsPatch[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            weight: number;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            weight: number;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            matchLabelKeys: string[];
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            namespaces: string[];
            topologyKey: string;
        }

        export interface CephFilesystemMirrorSpecPlacementTolerations {
            effect: string;
            key: string;
            operator: string;
            tolerationSeconds: number;
            value: string;
        }

        export interface CephFilesystemMirrorSpecPlacementTolerationsPatch {
            effect: string;
            key: string;
            operator: string;
            tolerationSeconds: number;
            value: string;
        }

        export interface CephFilesystemMirrorSpecPlacementTopologySpreadConstraints {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsLabelSelector;
            matchLabelKeys: string[];
            maxSkew: number;
            minDomains: number;
            nodeAffinityPolicy: string;
            nodeTaintsPolicy: string;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        export interface CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsLabelSelector {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsPatch {
            labelSelector: outputs.ceph.v1.CephFilesystemMirrorSpecPlacementTopologySpreadConstraintsLabelSelectorPatch;
            matchLabelKeys: string[];
            maxSkew: number;
            minDomains: number;
            nodeAffinityPolicy: string;
            nodeTaintsPolicy: string;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        /**
         * The resource requirements for the cephfs-mirror pods
         */
        export interface CephFilesystemMirrorSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.ceph.v1.CephFilesystemMirrorSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface CephFilesystemMirrorSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface CephFilesystemMirrorSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * The resource requirements for the cephfs-mirror pods
         */
        export interface CephFilesystemMirrorSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.ceph.v1.CephFilesystemMirrorSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * Status represents the status of an object
         */
        export interface CephFilesystemMirrorStatus {
            conditions: outputs.ceph.v1.CephFilesystemMirrorStatusConditions[];
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration: number;
            phase: string;
        }

        /**
         * Condition represents a status condition on any Rook-Ceph Custom Resource.
         */
        export interface CephFilesystemMirrorStatusConditions {
            lastHeartbeatTime: string;
            lastTransitionTime: string;
            message: string;
            /**
             * ConditionReason is a reason for a condition
             */
            reason: string;
            status: string;
            /**
             * ConditionType represent a resource's status
             */
            type: string;
        }

        /**
         * Condition represents a status condition on any Rook-Ceph Custom Resource.
         */
        export interface CephFilesystemMirrorStatusConditionsPatch {
            lastHeartbeatTime: string;
            lastTransitionTime: string;
            message: string;
            /**
             * ConditionReason is a reason for a condition
             */
            reason: string;
            status: string;
            /**
             * ConditionType represent a resource's status
             */
            type: string;
        }

        /**
         * Status represents the status of an object
         */
        export interface CephFilesystemMirrorStatusPatch {
            conditions: outputs.ceph.v1.CephFilesystemMirrorStatusConditionsPatch[];
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration: number;
            phase: string;
        }

        /**
         * FilesystemSpec represents the spec of a file system
         */
        export interface CephFilesystemSpec {
            /**
             * The data pool settings, with optional predefined pool name.
             */
            dataPools: outputs.ceph.v1.CephFilesystemSpecDataPools[];
            metadataPool: outputs.ceph.v1.CephFilesystemSpecMetadataPool;
            metadataServer: outputs.ceph.v1.CephFilesystemSpecMetadataServer;
            mirroring: outputs.ceph.v1.CephFilesystemSpecMirroring;
            /**
             * Preserve the fs in the cluster on CephFilesystem CR deletion. Setting this to true automatically implies PreservePoolsOnDelete is true.
             */
            preserveFilesystemOnDelete: boolean;
            /**
             * Preserve pool names as specified
             */
            preservePoolNames: boolean;
            /**
             * Preserve pools on filesystem deletion
             */
            preservePoolsOnDelete: boolean;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * NamedPoolSpec represents the named ceph pool spec
         */
        export interface CephFilesystemSpecDataPools {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephFilesystemSpecDataPoolsErasureCoded;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephFilesystemSpecDataPoolsMirroring;
            /**
             * Name of the pool
             */
            name: string;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephFilesystemSpecDataPoolsQuotas;
            replicated: outputs.ceph.v1.CephFilesystemSpecDataPoolsReplicated;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The erasure code settings
         */
        export interface CephFilesystemSpecDataPoolsErasureCoded {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The erasure code settings
         */
        export interface CephFilesystemSpecDataPoolsErasureCodedPatch {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The mirroring settings
         */
        export interface CephFilesystemSpecDataPoolsMirroring {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephFilesystemSpecDataPoolsMirroringPeers;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephFilesystemSpecDataPoolsMirroringSnapshotSchedules[];
        }

        /**
         * The mirroring settings
         */
        export interface CephFilesystemSpecDataPoolsMirroringPatch {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephFilesystemSpecDataPoolsMirroringPeersPatch;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephFilesystemSpecDataPoolsMirroringSnapshotSchedulesPatch[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephFilesystemSpecDataPoolsMirroringPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephFilesystemSpecDataPoolsMirroringPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephFilesystemSpecDataPoolsMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephFilesystemSpecDataPoolsMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * NamedPoolSpec represents the named ceph pool spec
         */
        export interface CephFilesystemSpecDataPoolsPatch {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephFilesystemSpecDataPoolsErasureCodedPatch;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephFilesystemSpecDataPoolsMirroringPatch;
            /**
             * Name of the pool
             */
            name: string;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephFilesystemSpecDataPoolsQuotasPatch;
            replicated: outputs.ceph.v1.CephFilesystemSpecDataPoolsReplicatedPatch;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The quota settings
         */
        export interface CephFilesystemSpecDataPoolsQuotas {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The quota settings
         */
        export interface CephFilesystemSpecDataPoolsQuotasPatch {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The replication settings
         */
        export interface CephFilesystemSpecDataPoolsReplicated {
            hybridStorage: outputs.ceph.v1.CephFilesystemSpecDataPoolsReplicatedHybridStorage;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephFilesystemSpecDataPoolsReplicatedHybridStorage {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephFilesystemSpecDataPoolsReplicatedHybridStoragePatch {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * The replication settings
         */
        export interface CephFilesystemSpecDataPoolsReplicatedPatch {
            hybridStorage: outputs.ceph.v1.CephFilesystemSpecDataPoolsReplicatedHybridStoragePatch;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * The metadata pool settings
         */
        export interface CephFilesystemSpecMetadataPool {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephFilesystemSpecMetadataPoolErasureCoded;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephFilesystemSpecMetadataPoolMirroring;
            /**
             * Name of the pool
             */
            name: string;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephFilesystemSpecMetadataPoolQuotas;
            replicated: outputs.ceph.v1.CephFilesystemSpecMetadataPoolReplicated;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The erasure code settings
         */
        export interface CephFilesystemSpecMetadataPoolErasureCoded {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The erasure code settings
         */
        export interface CephFilesystemSpecMetadataPoolErasureCodedPatch {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The mirroring settings
         */
        export interface CephFilesystemSpecMetadataPoolMirroring {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephFilesystemSpecMetadataPoolMirroringPeers;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephFilesystemSpecMetadataPoolMirroringSnapshotSchedules[];
        }

        /**
         * The mirroring settings
         */
        export interface CephFilesystemSpecMetadataPoolMirroringPatch {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephFilesystemSpecMetadataPoolMirroringPeersPatch;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephFilesystemSpecMetadataPoolMirroringSnapshotSchedulesPatch[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephFilesystemSpecMetadataPoolMirroringPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephFilesystemSpecMetadataPoolMirroringPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephFilesystemSpecMetadataPoolMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephFilesystemSpecMetadataPoolMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * The metadata pool settings
         */
        export interface CephFilesystemSpecMetadataPoolPatch {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephFilesystemSpecMetadataPoolErasureCodedPatch;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephFilesystemSpecMetadataPoolMirroringPatch;
            /**
             * Name of the pool
             */
            name: string;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephFilesystemSpecMetadataPoolQuotasPatch;
            replicated: outputs.ceph.v1.CephFilesystemSpecMetadataPoolReplicatedPatch;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The quota settings
         */
        export interface CephFilesystemSpecMetadataPoolQuotas {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The quota settings
         */
        export interface CephFilesystemSpecMetadataPoolQuotasPatch {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The replication settings
         */
        export interface CephFilesystemSpecMetadataPoolReplicated {
            hybridStorage: outputs.ceph.v1.CephFilesystemSpecMetadataPoolReplicatedHybridStorage;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephFilesystemSpecMetadataPoolReplicatedHybridStorage {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephFilesystemSpecMetadataPoolReplicatedHybridStoragePatch {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * The replication settings
         */
        export interface CephFilesystemSpecMetadataPoolReplicatedPatch {
            hybridStorage: outputs.ceph.v1.CephFilesystemSpecMetadataPoolReplicatedHybridStoragePatch;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * The mds pod info
         */
        export interface CephFilesystemSpecMetadataServer {
            /**
             * The number of metadata servers that are active. The remaining servers in the cluster will be in standby mode.
             */
            activeCount: number;
            /**
             * Whether each active MDS instance will have an active standby with a warm metadata cache for faster failover.
             * If false, standbys will still be available, but will not have a warm metadata cache.
             */
            activeStandby: boolean;
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            livenessProbe: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbe;
            placement: {[key: string]: any};
            /**
             * PriorityClassName sets priority classes on components
             */
            priorityClassName: string;
            /**
             * The resource requirements for the mds pods
             */
            resources: {[key: string]: any};
            startupProbe: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbe;
        }

        /**
         * ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbe {
            /**
             * Disabled determines whether probe is disable or not
             */
            disabled: boolean;
            probe: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbe;
        }

        /**
         * ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbePatch {
            /**
             * Disabled determines whether probe is disable or not
             */
            disabled: boolean;
            probe: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbePatch;
        }

        /**
         * Probe describes a health check to be performed against a container to determine whether it is
         * alive or ready to receive traffic.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbe {
            exec: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeGrpc;
            httpGet: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeTcpSocket;
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probe describes a health check to be performed against a container to determine whether it is
         * alive or ready to receive traffic.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbePatch {
            exec: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeGrpcPatch;
            httpGet: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbeProbeTcpSocketPatch;
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface CephFilesystemSpecMetadataServerLivenessProbeProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * The mds pod info
         */
        export interface CephFilesystemSpecMetadataServerPatch {
            /**
             * The number of metadata servers that are active. The remaining servers in the cluster will be in standby mode.
             */
            activeCount: number;
            /**
             * Whether each active MDS instance will have an active standby with a warm metadata cache for faster failover.
             * If false, standbys will still be available, but will not have a warm metadata cache.
             */
            activeStandby: boolean;
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            livenessProbe: outputs.ceph.v1.CephFilesystemSpecMetadataServerLivenessProbePatch;
            placement: {[key: string]: any};
            /**
             * PriorityClassName sets priority classes on components
             */
            priorityClassName: string;
            /**
             * The resource requirements for the mds pods
             */
            resources: {[key: string]: any};
            startupProbe: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbePatch;
        }

        /**
         * ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon
         */
        export interface CephFilesystemSpecMetadataServerStartupProbe {
            /**
             * Disabled determines whether probe is disable or not
             */
            disabled: boolean;
            probe: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbe;
        }

        /**
         * ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon
         */
        export interface CephFilesystemSpecMetadataServerStartupProbePatch {
            /**
             * Disabled determines whether probe is disable or not
             */
            disabled: boolean;
            probe: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbePatch;
        }

        /**
         * Probe describes a health check to be performed against a container to determine whether it is
         * alive or ready to receive traffic.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbe {
            exec: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeGrpc;
            httpGet: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeTcpSocket;
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probe describes a health check to be performed against a container to determine whether it is
         * alive or ready to receive traffic.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbePatch {
            exec: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeGrpcPatch;
            httpGet: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.ceph.v1.CephFilesystemSpecMetadataServerStartupProbeProbeTcpSocketPatch;
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface CephFilesystemSpecMetadataServerStartupProbeProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * The mirroring settings
         */
        export interface CephFilesystemSpecMirroring {
            /**
             * Enabled whether this filesystem is mirrored or not
             */
            enabled: boolean;
            peers: outputs.ceph.v1.CephFilesystemSpecMirroringPeers;
            /**
             * Retention is the retention policy for a snapshot schedule
             * One path has exactly one retention policy.
             * A policy can however contain multiple count-time period pairs in order to specify complex retention policies
             */
            snapshotRetention: outputs.ceph.v1.CephFilesystemSpecMirroringSnapshotRetention[];
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored filesystems
             */
            snapshotSchedules: outputs.ceph.v1.CephFilesystemSpecMirroringSnapshotSchedules[];
        }

        /**
         * The mirroring settings
         */
        export interface CephFilesystemSpecMirroringPatch {
            /**
             * Enabled whether this filesystem is mirrored or not
             */
            enabled: boolean;
            peers: outputs.ceph.v1.CephFilesystemSpecMirroringPeersPatch;
            /**
             * Retention is the retention policy for a snapshot schedule
             * One path has exactly one retention policy.
             * A policy can however contain multiple count-time period pairs in order to specify complex retention policies
             */
            snapshotRetention: outputs.ceph.v1.CephFilesystemSpecMirroringSnapshotRetentionPatch[];
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored filesystems
             */
            snapshotSchedules: outputs.ceph.v1.CephFilesystemSpecMirroringSnapshotSchedulesPatch[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephFilesystemSpecMirroringPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephFilesystemSpecMirroringPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * SnapshotScheduleRetentionSpec is a retention policy
         */
        export interface CephFilesystemSpecMirroringSnapshotRetention {
            /**
             * Duration represents the retention duration for a snapshot
             */
            duration: string;
            /**
             * Path is the path to snapshot
             */
            path: string;
        }

        /**
         * SnapshotScheduleRetentionSpec is a retention policy
         */
        export interface CephFilesystemSpecMirroringSnapshotRetentionPatch {
            /**
             * Duration represents the retention duration for a snapshot
             */
            duration: string;
            /**
             * Path is the path to snapshot
             */
            path: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephFilesystemSpecMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephFilesystemSpecMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * FilesystemSpec represents the spec of a file system
         */
        export interface CephFilesystemSpecPatch {
            /**
             * The data pool settings, with optional predefined pool name.
             */
            dataPools: outputs.ceph.v1.CephFilesystemSpecDataPoolsPatch[];
            metadataPool: outputs.ceph.v1.CephFilesystemSpecMetadataPoolPatch;
            metadataServer: outputs.ceph.v1.CephFilesystemSpecMetadataServerPatch;
            mirroring: outputs.ceph.v1.CephFilesystemSpecMirroringPatch;
            /**
             * Preserve the fs in the cluster on CephFilesystem CR deletion. Setting this to true automatically implies PreservePoolsOnDelete is true.
             */
            preserveFilesystemOnDelete: boolean;
            /**
             * Preserve pool names as specified
             */
            preservePoolNames: boolean;
            /**
             * Preserve pools on filesystem deletion
             */
            preservePoolsOnDelete: boolean;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * CephFilesystemSubVolumeGroup represents a Ceph Filesystem SubVolumeGroup
         */
        export interface CephFilesystemSubVolumeGroup {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephFilesystemSubVolumeGroup";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephFilesystemSubVolumeGroupSpec;
            /**
             * Status represents the status of a CephFilesystem SubvolumeGroup
             */
            status: {[key: string]: any};
        }

        /**
         * Spec represents the specification of a Ceph Filesystem SubVolumeGroup
         */
        export interface CephFilesystemSubVolumeGroupSpec {
            /**
             * The data pool name for the Ceph Filesystem subvolume group layout, if the default CephFS pool is not desired.
             */
            dataPoolName: string;
            /**
             * FilesystemName is the name of Ceph Filesystem SubVolumeGroup volume name. Typically it's the name of
             * the CephFilesystem CR. If not coming from the CephFilesystem CR, it can be retrieved from the
             * list of Ceph Filesystem volumes with `ceph fs volume ls`. To learn more about Ceph Filesystem
             * abstractions see https://docs.ceph.com/en/latest/cephfs/fs-volumes/#fs-volumes-and-subvolumes
             */
            filesystemName: string;
            /**
             * The name of the subvolume group. If not set, the default is the name of the subvolumeGroup CR.
             */
            name: string;
            pinning: outputs.ceph.v1.CephFilesystemSubVolumeGroupSpecPinning;
            /**
             * Quota size of the Ceph Filesystem subvolume group.
             */
            quota: number | string;
        }

        /**
         * Spec represents the specification of a Ceph Filesystem SubVolumeGroup
         */
        export interface CephFilesystemSubVolumeGroupSpecPatch {
            /**
             * The data pool name for the Ceph Filesystem subvolume group layout, if the default CephFS pool is not desired.
             */
            dataPoolName: string;
            /**
             * FilesystemName is the name of Ceph Filesystem SubVolumeGroup volume name. Typically it's the name of
             * the CephFilesystem CR. If not coming from the CephFilesystem CR, it can be retrieved from the
             * list of Ceph Filesystem volumes with `ceph fs volume ls`. To learn more about Ceph Filesystem
             * abstractions see https://docs.ceph.com/en/latest/cephfs/fs-volumes/#fs-volumes-and-subvolumes
             */
            filesystemName: string;
            /**
             * The name of the subvolume group. If not set, the default is the name of the subvolumeGroup CR.
             */
            name: string;
            pinning: outputs.ceph.v1.CephFilesystemSubVolumeGroupSpecPinningPatch;
            /**
             * Quota size of the Ceph Filesystem subvolume group.
             */
            quota: number | string;
        }

        /**
         * Pinning configuration of CephFilesystemSubVolumeGroup,
         * reference https://docs.ceph.com/en/latest/cephfs/fs-volumes/#pinning-subvolumes-and-subvolume-groups
         * only one out of (export, distributed, random) can be set at a time
         */
        export interface CephFilesystemSubVolumeGroupSpecPinning {
            distributed: number;
            export: number;
            random: number;
        }

        /**
         * Pinning configuration of CephFilesystemSubVolumeGroup,
         * reference https://docs.ceph.com/en/latest/cephfs/fs-volumes/#pinning-subvolumes-and-subvolume-groups
         * only one out of (export, distributed, random) can be set at a time
         */
        export interface CephFilesystemSubVolumeGroupSpecPinningPatch {
            distributed: number;
            export: number;
            random: number;
        }

        /**
         * CephNFS represents a Ceph NFS
         */
        export interface CephNFS {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephNFS";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephNFSSpec;
            /**
             * Status represents the status of an object
             */
            status: {[key: string]: any};
        }

        /**
         * NFSGaneshaSpec represents the spec of an nfs ganesha server
         */
        export interface CephNFSSpec {
            rados: outputs.ceph.v1.CephNFSSpecRados;
            security: outputs.ceph.v1.CephNFSSpecSecurity;
            server: outputs.ceph.v1.CephNFSSpecServer;
        }

        /**
         * NFSGaneshaSpec represents the spec of an nfs ganesha server
         */
        export interface CephNFSSpecPatch {
            rados: outputs.ceph.v1.CephNFSSpecRadosPatch;
            security: outputs.ceph.v1.CephNFSSpecSecurityPatch;
            server: outputs.ceph.v1.CephNFSSpecServerPatch;
        }

        /**
         * RADOS is the Ganesha RADOS specification
         */
        export interface CephNFSSpecRados {
            /**
             * The namespace inside the Ceph pool (set by 'pool') where shared NFS-Ganesha config is stored.
             * This setting is deprecated as it is internally set to the name of the CephNFS.
             */
            namespace: string;
            /**
             * The Ceph pool used store the shared configuration for NFS-Ganesha daemons.
             * This setting is deprecated, as it is internally required to be ".nfs".
             */
            pool: string;
        }

        /**
         * RADOS is the Ganesha RADOS specification
         */
        export interface CephNFSSpecRadosPatch {
            /**
             * The namespace inside the Ceph pool (set by 'pool') where shared NFS-Ganesha config is stored.
             * This setting is deprecated as it is internally set to the name of the CephNFS.
             */
            namespace: string;
            /**
             * The Ceph pool used store the shared configuration for NFS-Ganesha daemons.
             * This setting is deprecated, as it is internally required to be ".nfs".
             */
            pool: string;
        }

        /**
         * Security allows specifying security configurations for the NFS cluster
         */
        export interface CephNFSSpecSecurity {
            kerberos: outputs.ceph.v1.CephNFSSpecSecurityKerberos;
            sssd: outputs.ceph.v1.CephNFSSpecSecuritySssd;
        }

        /**
         * Kerberos configures NFS-Ganesha to secure NFS client connections with Kerberos.
         */
        export interface CephNFSSpecSecurityKerberos {
            configFiles: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFiles;
            /**
             * DomainName should be set to the Kerberos Realm.
             */
            domainName: string;
            keytabFile: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFile;
            /**
             * PrincipalName corresponds directly to NFS-Ganesha's NFS_KRB5:PrincipalName config. In
             * practice, this is the service prefix of the principal name. The default is "nfs".
             * This value is combined with (a) the namespace and name of the CephNFS (with a hyphen between)
             * and (b) the Realm configured in the user-provided krb5.conf to determine the full principal
             * name: <principalName>/<namespace>-<name>@<realm>. e.g., nfs/rook-ceph-my-nfs@example.net.
             * See https://github.com/nfs-ganesha/nfs-ganesha/wiki/RPCSEC_GSS for more detail.
             */
            principalName: string;
        }

        /**
         * ConfigFiles defines where the Kerberos configuration should be sourced from. Config files
         * will be placed into the `/etc/krb5.conf.rook/` directory.
         *
         * If this is left empty, Rook will not add any files. This allows you to manage the files
         * yourself however you wish. For example, you may build them into your custom Ceph container
         * image or use the Vault agent injector to securely add the files via annotations on the
         * CephNFS spec (passed to the NFS server pods).
         *
         * Rook configures Kerberos to log to stderr. We suggest removing logging sections from config
         * files to avoid consuming unnecessary disk space from logging to files.
         */
        export interface CephNFSSpecSecurityKerberosConfigFiles {
            volumeSource: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSource;
        }

        /**
         * ConfigFiles defines where the Kerberos configuration should be sourced from. Config files
         * will be placed into the `/etc/krb5.conf.rook/` directory.
         *
         * If this is left empty, Rook will not add any files. This allows you to manage the files
         * yourself however you wish. For example, you may build them into your custom Ceph container
         * image or use the Vault agent injector to securely add the files via annotations on the
         * CephNFS spec (passed to the NFS server pods).
         *
         * Rook configures Kerberos to log to stderr. We suggest removing logging sections from config
         * files to avoid consuming unnecessary disk space from logging to files.
         */
        export interface CephNFSSpecSecurityKerberosConfigFilesPatch {
            volumeSource: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourcePatch;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSource {
            configMap: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceConfigMap;
            emptyDir: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceEmptyDir;
            hostPath: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceHostPath;
            persistentVolumeClaim: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourcePersistentVolumeClaim;
            projected: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjected;
            secret: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceSecret;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceConfigMap {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceConfigMapPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceEmptyDir {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceEmptyDirPatch {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceHostPath {
            path: string;
            type: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceHostPathPatch {
            path: string;
            type: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourcePatch {
            configMap: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceConfigMapPatch;
            emptyDir: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceEmptyDirPatch;
            hostPath: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceHostPathPatch;
            persistentVolumeClaim: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourcePersistentVolumeClaimPatch;
            projected: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedPatch;
            secret: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceSecretPatch;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourcePersistentVolumeClaim {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourcePersistentVolumeClaimPatch {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjected {
            defaultMode: number;
            sources: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSources[];
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedPatch {
            defaultMode: number;
            sources: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesPatch[];
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSources {
            clusterTrustBundle: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundle;
            configMap: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesConfigMap;
            downwardAPI: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPI;
            secret: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesSecret;
            serviceAccountToken: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesServiceAccountToken;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector {
            matchExpressions: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesConfigMap {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesConfigMapPatch {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPI {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItems[];
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIPatch {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIItemsPatch[];
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesPatch {
            clusterTrustBundle: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesDownwardAPIPatch;
            secret: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesServiceAccountTokenPatch;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesSecret {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesSecretItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesSecretPatch {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesSecretItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesServiceAccountToken {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceProjectedSourcesServiceAccountTokenPatch {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceSecret {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceSecretItems[];
            optional: boolean;
            secretName: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosConfigFilesVolumeSourceSecretPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesVolumeSourceSecretItemsPatch[];
            optional: boolean;
            secretName: string;
        }

        /**
         * KeytabFile defines where the Kerberos keytab should be sourced from. The keytab file will be
         * placed into `/etc/krb5.keytab`. If this is left empty, Rook will not add the file.
         * This allows you to manage the `krb5.keytab` file yourself however you wish. For example, you
         * may build it into your custom Ceph container image or use the Vault agent injector to
         * securely add the file via annotations on the CephNFS spec (passed to the NFS server pods).
         */
        export interface CephNFSSpecSecurityKerberosKeytabFile {
            volumeSource: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSource;
        }

        /**
         * KeytabFile defines where the Kerberos keytab should be sourced from. The keytab file will be
         * placed into `/etc/krb5.keytab`. If this is left empty, Rook will not add the file.
         * This allows you to manage the `krb5.keytab` file yourself however you wish. For example, you
         * may build it into your custom Ceph container image or use the Vault agent injector to
         * securely add the file via annotations on the CephNFS spec (passed to the NFS server pods).
         */
        export interface CephNFSSpecSecurityKerberosKeytabFilePatch {
            volumeSource: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourcePatch;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSource {
            configMap: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceConfigMap;
            emptyDir: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceEmptyDir;
            hostPath: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceHostPath;
            persistentVolumeClaim: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourcePersistentVolumeClaim;
            projected: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjected;
            secret: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceSecret;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceConfigMap {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceConfigMapPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceEmptyDir {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceEmptyDirPatch {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceHostPath {
            path: string;
            type: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceHostPathPatch {
            path: string;
            type: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourcePatch {
            configMap: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceConfigMapPatch;
            emptyDir: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceEmptyDirPatch;
            hostPath: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceHostPathPatch;
            persistentVolumeClaim: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourcePersistentVolumeClaimPatch;
            projected: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedPatch;
            secret: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceSecretPatch;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourcePersistentVolumeClaim {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourcePersistentVolumeClaimPatch {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjected {
            defaultMode: number;
            sources: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSources[];
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedPatch {
            defaultMode: number;
            sources: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesPatch[];
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSources {
            clusterTrustBundle: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundle;
            configMap: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesConfigMap;
            downwardAPI: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPI;
            secret: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesSecret;
            serviceAccountToken: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesServiceAccountToken;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector {
            matchExpressions: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesConfigMap {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesConfigMapPatch {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPI {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItems[];
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIPatch {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIItemsPatch[];
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesPatch {
            clusterTrustBundle: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesDownwardAPIPatch;
            secret: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesServiceAccountTokenPatch;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesSecret {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesSecretItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesSecretPatch {
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesSecretItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesServiceAccountToken {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceProjectedSourcesServiceAccountTokenPatch {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceSecret {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceSecretItems[];
            optional: boolean;
            secretName: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecurityKerberosKeytabFileVolumeSourceSecretPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFileVolumeSourceSecretItemsPatch[];
            optional: boolean;
            secretName: string;
        }

        /**
         * Kerberos configures NFS-Ganesha to secure NFS client connections with Kerberos.
         */
        export interface CephNFSSpecSecurityKerberosPatch {
            configFiles: outputs.ceph.v1.CephNFSSpecSecurityKerberosConfigFilesPatch;
            /**
             * DomainName should be set to the Kerberos Realm.
             */
            domainName: string;
            keytabFile: outputs.ceph.v1.CephNFSSpecSecurityKerberosKeytabFilePatch;
            /**
             * PrincipalName corresponds directly to NFS-Ganesha's NFS_KRB5:PrincipalName config. In
             * practice, this is the service prefix of the principal name. The default is "nfs".
             * This value is combined with (a) the namespace and name of the CephNFS (with a hyphen between)
             * and (b) the Realm configured in the user-provided krb5.conf to determine the full principal
             * name: <principalName>/<namespace>-<name>@<realm>. e.g., nfs/rook-ceph-my-nfs@example.net.
             * See https://github.com/nfs-ganesha/nfs-ganesha/wiki/RPCSEC_GSS for more detail.
             */
            principalName: string;
        }

        /**
         * Security allows specifying security configurations for the NFS cluster
         */
        export interface CephNFSSpecSecurityPatch {
            kerberos: outputs.ceph.v1.CephNFSSpecSecurityKerberosPatch;
            sssd: outputs.ceph.v1.CephNFSSpecSecuritySssdPatch;
        }

        /**
         * SSSD enables integration with System Security Services Daemon (SSSD). SSSD can be used to
         * provide user ID mapping from a number of sources. See https://sssd.io for more information
         * about the SSSD project.
         */
        export interface CephNFSSpecSecuritySssd {
            sidecar: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecar;
        }

        /**
         * SSSD enables integration with System Security Services Daemon (SSSD). SSSD can be used to
         * provide user ID mapping from a number of sources. See https://sssd.io for more information
         * about the SSSD project.
         */
        export interface CephNFSSpecSecuritySssdPatch {
            sidecar: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarPatch;
        }

        /**
         * Sidecar tells Rook to run SSSD in a sidecar alongside the NFS-Ganesha server in each NFS pod.
         */
        export interface CephNFSSpecSecuritySssdSidecar {
            /**
             * AdditionalFiles defines any number of additional files that should be mounted into the SSSD
             * sidecar with a directory root of `/etc/sssd/rook-additional/`.
             * These files may be referenced by the sssd.conf config file.
             */
            additionalFiles: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFiles[];
            /**
             * DebugLevel sets the debug level for SSSD. If unset or set to 0, Rook does nothing. Otherwise,
             * this may be a value between 1 and 10. See SSSD docs for more info:
             * https://sssd.io/troubleshooting/basics.html#sssd-debug-logs
             */
            debugLevel: number;
            /**
             * Image defines the container image that should be used for the SSSD sidecar.
             */
            image: string;
            resources: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarResources;
            sssdConfigFile: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFile;
        }

        /**
         * AdditionalVolumeMount represents the source from where additional files in pod containers
         * should come from and what subdirectory they are made available in.
         */
        export interface CephNFSSpecSecuritySssdSidecarAdditionalFiles {
            /**
             * SubPath defines the sub-path (subdirectory) of the directory root where the volumeSource will
             * be mounted. All files/keys in the volume source's volume will be mounted to the subdirectory.
             * This is not the same as the Kubernetes `subPath` volume mount option.
             * Each subPath definition must be unique and must not contain ':'.
             */
            subPath: string;
            volumeSource: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSource;
        }

        /**
         * AdditionalVolumeMount represents the source from where additional files in pod containers
         * should come from and what subdirectory they are made available in.
         */
        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesPatch {
            /**
             * SubPath defines the sub-path (subdirectory) of the directory root where the volumeSource will
             * be mounted. All files/keys in the volume source's volume will be mounted to the subdirectory.
             * This is not the same as the Kubernetes `subPath` volume mount option.
             * Each subPath definition must be unique and must not contain ':'.
             */
            subPath: string;
            volumeSource: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourcePatch;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSource {
            configMap: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceConfigMap;
            emptyDir: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceEmptyDir;
            hostPath: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceHostPath;
            persistentVolumeClaim: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourcePersistentVolumeClaim;
            projected: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjected;
            secret: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceSecret;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceConfigMap {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceConfigMapPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceEmptyDir {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceEmptyDirPatch {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceHostPath {
            path: string;
            type: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceHostPathPatch {
            path: string;
            type: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourcePatch {
            configMap: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceConfigMapPatch;
            emptyDir: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceEmptyDirPatch;
            hostPath: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceHostPathPatch;
            persistentVolumeClaim: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourcePersistentVolumeClaimPatch;
            projected: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedPatch;
            secret: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceSecretPatch;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourcePersistentVolumeClaim {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourcePersistentVolumeClaimPatch {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjected {
            defaultMode: number;
            sources: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSources[];
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedPatch {
            defaultMode: number;
            sources: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesPatch[];
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSources {
            clusterTrustBundle: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundle;
            configMap: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesConfigMap;
            downwardAPI: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPI;
            secret: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesSecret;
            serviceAccountToken: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesServiceAccountToken;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector {
            matchExpressions: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesConfigMap {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesConfigMapPatch {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPI {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItems[];
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIPatch {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIItemsPatch[];
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesPatch {
            clusterTrustBundle: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesDownwardAPIPatch;
            secret: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesServiceAccountTokenPatch;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesSecret {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesSecretItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesSecretPatch {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesSecretItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesServiceAccountToken {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceProjectedSourcesServiceAccountTokenPatch {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceSecret {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceSecretItems[];
            optional: boolean;
            secretName: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceSecretPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesVolumeSourceSecretItemsPatch[];
            optional: boolean;
            secretName: string;
        }

        /**
         * Sidecar tells Rook to run SSSD in a sidecar alongside the NFS-Ganesha server in each NFS pod.
         */
        export interface CephNFSSpecSecuritySssdSidecarPatch {
            /**
             * AdditionalFiles defines any number of additional files that should be mounted into the SSSD
             * sidecar with a directory root of `/etc/sssd/rook-additional/`.
             * These files may be referenced by the sssd.conf config file.
             */
            additionalFiles: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarAdditionalFilesPatch[];
            /**
             * DebugLevel sets the debug level for SSSD. If unset or set to 0, Rook does nothing. Otherwise,
             * this may be a value between 1 and 10. See SSSD docs for more info:
             * https://sssd.io/troubleshooting/basics.html#sssd-debug-logs
             */
            debugLevel: number;
            /**
             * Image defines the container image that should be used for the SSSD sidecar.
             */
            image: string;
            resources: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarResourcesPatch;
            sssdConfigFile: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFilePatch;
        }

        /**
         * Resources allow specifying resource requests/limits on the SSSD sidecar container.
         */
        export interface CephNFSSpecSecuritySssdSidecarResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface CephNFSSpecSecuritySssdSidecarResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface CephNFSSpecSecuritySssdSidecarResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources allow specifying resource requests/limits on the SSSD sidecar container.
         */
        export interface CephNFSSpecSecuritySssdSidecarResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SSSDConfigFile defines where the SSSD configuration should be sourced from. The config file
         * will be placed into `/etc/sssd/sssd.conf`. If this is left empty, Rook will not add the file.
         * This allows you to manage the `sssd.conf` file yourself however you wish. For example, you
         * may build it into your custom Ceph container image or use the Vault agent injector to
         * securely add the file via annotations on the CephNFS spec (passed to the NFS server pods).
         */
        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFile {
            volumeSource: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSource;
        }

        /**
         * SSSDConfigFile defines where the SSSD configuration should be sourced from. The config file
         * will be placed into `/etc/sssd/sssd.conf`. If this is left empty, Rook will not add the file.
         * This allows you to manage the `sssd.conf` file yourself however you wish. For example, you
         * may build it into your custom Ceph container image or use the Vault agent injector to
         * securely add the file via annotations on the CephNFS spec (passed to the NFS server pods).
         */
        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFilePatch {
            volumeSource: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourcePatch;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSource {
            configMap: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceConfigMap;
            emptyDir: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceEmptyDir;
            hostPath: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceHostPath;
            persistentVolumeClaim: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourcePersistentVolumeClaim;
            projected: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjected;
            secret: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceSecret;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceConfigMap {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceConfigMapPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceEmptyDir {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceEmptyDirPatch {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceHostPath {
            path: string;
            type: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceHostPathPatch {
            path: string;
            type: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourcePatch {
            configMap: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceConfigMapPatch;
            emptyDir: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceEmptyDirPatch;
            hostPath: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceHostPathPatch;
            persistentVolumeClaim: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourcePersistentVolumeClaimPatch;
            projected: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedPatch;
            secret: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceSecretPatch;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourcePersistentVolumeClaim {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourcePersistentVolumeClaimPatch {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjected {
            defaultMode: number;
            sources: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSources[];
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedPatch {
            defaultMode: number;
            sources: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesPatch[];
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSources {
            clusterTrustBundle: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundle;
            configMap: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesConfigMap;
            downwardAPI: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPI;
            secret: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesSecret;
            serviceAccountToken: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesServiceAccountToken;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector {
            matchExpressions: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesConfigMap {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesConfigMapPatch {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPI {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItems[];
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIPatch {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIItemsPatch[];
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesPatch {
            clusterTrustBundle: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesDownwardAPIPatch;
            secret: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesServiceAccountTokenPatch;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesSecret {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesSecretItems[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesSecretPatch {
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesSecretItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesServiceAccountToken {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceProjectedSourcesServiceAccountTokenPatch {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceSecret {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceSecretItems[];
            optional: boolean;
            secretName: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceSecretPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephNFSSpecSecuritySssdSidecarSssdConfigFileVolumeSourceSecretItemsPatch[];
            optional: boolean;
            secretName: string;
        }

        /**
         * Server is the Ganesha Server specification
         */
        export interface CephNFSSpecServer {
            /**
             * The number of active Ganesha servers
             */
            active: number;
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * Whether host networking is enabled for the Ganesha server. If not set, the network settings from the cluster CR will be applied.
             */
            hostNetwork: boolean;
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            livenessProbe: outputs.ceph.v1.CephNFSSpecServerLivenessProbe;
            /**
             * LogLevel set logging level
             */
            logLevel: string;
            placement: {[key: string]: any};
            /**
             * PriorityClassName sets the priority class on the pods
             */
            priorityClassName: string;
            /**
             * Resources set resource requests and limits
             */
            resources: {[key: string]: any};
        }

        /**
         * A liveness-probe to verify that Ganesha server has valid run-time state.
         * If LivenessProbe.Disabled is false and LivenessProbe.Probe is nil uses default probe.
         */
        export interface CephNFSSpecServerLivenessProbe {
            /**
             * Disabled determines whether probe is disable or not
             */
            disabled: boolean;
            probe: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbe;
        }

        /**
         * A liveness-probe to verify that Ganesha server has valid run-time state.
         * If LivenessProbe.Disabled is false and LivenessProbe.Probe is nil uses default probe.
         */
        export interface CephNFSSpecServerLivenessProbePatch {
            /**
             * Disabled determines whether probe is disable or not
             */
            disabled: boolean;
            probe: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbePatch;
        }

        /**
         * Probe describes a health check to be performed against a container to determine whether it is
         * alive or ready to receive traffic.
         */
        export interface CephNFSSpecServerLivenessProbeProbe {
            exec: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeGrpc;
            httpGet: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeTcpSocket;
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface CephNFSSpecServerLivenessProbeProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface CephNFSSpecServerLivenessProbeProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface CephNFSSpecServerLivenessProbeProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface CephNFSSpecServerLivenessProbeProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface CephNFSSpecServerLivenessProbeProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface CephNFSSpecServerLivenessProbeProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface CephNFSSpecServerLivenessProbeProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface CephNFSSpecServerLivenessProbeProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probe describes a health check to be performed against a container to determine whether it is
         * alive or ready to receive traffic.
         */
        export interface CephNFSSpecServerLivenessProbeProbePatch {
            exec: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeGrpcPatch;
            httpGet: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.ceph.v1.CephNFSSpecServerLivenessProbeProbeTcpSocketPatch;
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface CephNFSSpecServerLivenessProbeProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface CephNFSSpecServerLivenessProbeProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Server is the Ganesha Server specification
         */
        export interface CephNFSSpecServerPatch {
            /**
             * The number of active Ganesha servers
             */
            active: number;
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * Whether host networking is enabled for the Ganesha server. If not set, the network settings from the cluster CR will be applied.
             */
            hostNetwork: boolean;
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            livenessProbe: outputs.ceph.v1.CephNFSSpecServerLivenessProbePatch;
            /**
             * LogLevel set logging level
             */
            logLevel: string;
            placement: {[key: string]: any};
            /**
             * PriorityClassName sets the priority class on the pods
             */
            priorityClassName: string;
            /**
             * Resources set resource requests and limits
             */
            resources: {[key: string]: any};
        }

        /**
         * CephObjectRealm represents a Ceph Object Store Gateway Realm
         */
        export interface CephObjectRealm {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephObjectRealm";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephObjectRealmSpec;
            /**
             * Status represents the status of an object
             */
            status: {[key: string]: any};
        }

        /**
         * ObjectRealmSpec represent the spec of an ObjectRealm
         */
        export interface CephObjectRealmSpec {
            pull: outputs.ceph.v1.CephObjectRealmSpecPull;
        }

        /**
         * ObjectRealmSpec represent the spec of an ObjectRealm
         */
        export interface CephObjectRealmSpecPatch {
            pull: outputs.ceph.v1.CephObjectRealmSpecPullPatch;
        }

        /**
         * PullSpec represents the pulling specification of a Ceph Object Storage Gateway Realm
         */
        export interface CephObjectRealmSpecPull {
            endpoint: string;
        }

        /**
         * PullSpec represents the pulling specification of a Ceph Object Storage Gateway Realm
         */
        export interface CephObjectRealmSpecPullPatch {
            endpoint: string;
        }

        /**
         * CephObjectStore represents a Ceph Object Store Gateway
         */
        export interface CephObjectStore {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephObjectStore";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephObjectStoreSpec;
            /**
             * ObjectStoreStatus represents the status of a Ceph Object Store resource
             */
            status: {[key: string]: any};
        }

        /**
         * ObjectStoreSpec represent the spec of a pool
         */
        export interface CephObjectStoreSpec {
            /**
             * The list of allowed namespaces in addition to the object store namespace
             * where ceph object store users may be created. Specify "*" to allow all
             * namespaces, otherwise list individual namespaces that are to be allowed.
             * This is useful for applications that need object store credentials
             * to be created in their own namespace, where neither OBCs nor COSI
             * is being used to create buckets. The default is empty.
             */
            allowUsersInNamespaces: string[];
            auth: outputs.ceph.v1.CephObjectStoreSpecAuth;
            dataPool: outputs.ceph.v1.CephObjectStoreSpecDataPool;
            gateway: outputs.ceph.v1.CephObjectStoreSpecGateway;
            healthCheck: outputs.ceph.v1.CephObjectStoreSpecHealthCheck;
            hosting: outputs.ceph.v1.CephObjectStoreSpecHosting;
            metadataPool: outputs.ceph.v1.CephObjectStoreSpecMetadataPool;
            /**
             * Preserve pools on object store deletion
             */
            preservePoolsOnDelete: boolean;
            protocols: outputs.ceph.v1.CephObjectStoreSpecProtocols;
            security: outputs.ceph.v1.CephObjectStoreSpecSecurity;
            sharedPools: outputs.ceph.v1.CephObjectStoreSpecSharedPools;
            zone: outputs.ceph.v1.CephObjectStoreSpecZone;
        }

        /**
         * The authentication configuration
         */
        export interface CephObjectStoreSpecAuth {
            keystone: outputs.ceph.v1.CephObjectStoreSpecAuthKeystone;
        }

        /**
         * The spec for Keystone
         */
        export interface CephObjectStoreSpecAuthKeystone {
            /**
             * The roles requires to serve requests.
             */
            acceptedRoles: string[];
            /**
             * Create new users in their own tenants of the same name. Possible values are true, false, swift and s3. The latter have the effect of splitting the identity space such that only the indicated protocol will use implicit tenants.
             */
            implicitTenants: string;
            /**
             * The number of seconds between token revocation checks.
             */
            revocationInterval: number;
            /**
             * The name of the secret containing the credentials for the service user account used by RGW. It has to be in the same namespace as the object store resource.
             */
            serviceUserSecretName: string;
            /**
             * The maximum number of entries in each Keystone token cache.
             */
            tokenCacheSize: number;
            /**
             * The URL for the Keystone server.
             */
            url: string;
        }

        /**
         * The spec for Keystone
         */
        export interface CephObjectStoreSpecAuthKeystonePatch {
            /**
             * The roles requires to serve requests.
             */
            acceptedRoles: string[];
            /**
             * Create new users in their own tenants of the same name. Possible values are true, false, swift and s3. The latter have the effect of splitting the identity space such that only the indicated protocol will use implicit tenants.
             */
            implicitTenants: string;
            /**
             * The number of seconds between token revocation checks.
             */
            revocationInterval: number;
            /**
             * The name of the secret containing the credentials for the service user account used by RGW. It has to be in the same namespace as the object store resource.
             */
            serviceUserSecretName: string;
            /**
             * The maximum number of entries in each Keystone token cache.
             */
            tokenCacheSize: number;
            /**
             * The URL for the Keystone server.
             */
            url: string;
        }

        /**
         * The authentication configuration
         */
        export interface CephObjectStoreSpecAuthPatch {
            keystone: outputs.ceph.v1.CephObjectStoreSpecAuthKeystonePatch;
        }

        /**
         * The data pool settings
         */
        export interface CephObjectStoreSpecDataPool {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephObjectStoreSpecDataPoolErasureCoded;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephObjectStoreSpecDataPoolMirroring;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephObjectStoreSpecDataPoolQuotas;
            replicated: outputs.ceph.v1.CephObjectStoreSpecDataPoolReplicated;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The erasure code settings
         */
        export interface CephObjectStoreSpecDataPoolErasureCoded {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The erasure code settings
         */
        export interface CephObjectStoreSpecDataPoolErasureCodedPatch {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The mirroring settings
         */
        export interface CephObjectStoreSpecDataPoolMirroring {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephObjectStoreSpecDataPoolMirroringPeers;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephObjectStoreSpecDataPoolMirroringSnapshotSchedules[];
        }

        /**
         * The mirroring settings
         */
        export interface CephObjectStoreSpecDataPoolMirroringPatch {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephObjectStoreSpecDataPoolMirroringPeersPatch;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephObjectStoreSpecDataPoolMirroringSnapshotSchedulesPatch[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephObjectStoreSpecDataPoolMirroringPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephObjectStoreSpecDataPoolMirroringPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephObjectStoreSpecDataPoolMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephObjectStoreSpecDataPoolMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * The data pool settings
         */
        export interface CephObjectStoreSpecDataPoolPatch {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephObjectStoreSpecDataPoolErasureCodedPatch;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephObjectStoreSpecDataPoolMirroringPatch;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephObjectStoreSpecDataPoolQuotasPatch;
            replicated: outputs.ceph.v1.CephObjectStoreSpecDataPoolReplicatedPatch;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The quota settings
         */
        export interface CephObjectStoreSpecDataPoolQuotas {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The quota settings
         */
        export interface CephObjectStoreSpecDataPoolQuotasPatch {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The replication settings
         */
        export interface CephObjectStoreSpecDataPoolReplicated {
            hybridStorage: outputs.ceph.v1.CephObjectStoreSpecDataPoolReplicatedHybridStorage;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephObjectStoreSpecDataPoolReplicatedHybridStorage {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephObjectStoreSpecDataPoolReplicatedHybridStoragePatch {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * The replication settings
         */
        export interface CephObjectStoreSpecDataPoolReplicatedPatch {
            hybridStorage: outputs.ceph.v1.CephObjectStoreSpecDataPoolReplicatedHybridStoragePatch;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * The rgw pod info
         */
        export interface CephObjectStoreSpecGateway {
            /**
             * AdditionalVolumeMounts allows additional volumes to be mounted to the RGW pod.
             * The root directory for each additional volume mount is `/var/rgw`.
             * Example: for an additional mount at subPath `ldap`, mounted from a secret that has key
             * `bindpass.secret`, the file would reside at `/var/rgw/ldap/bindpass.secret`.
             */
            additionalVolumeMounts: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMounts[];
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * The name of the secret that stores custom ca-bundle with root and intermediate certificates.
             */
            caBundleRef: string;
            /**
             * Whether rgw dashboard is enabled for the rgw daemon. If not set, the rgw dashboard will be enabled.
             */
            dashboardEnabled: boolean;
            /**
             * DisableMultisiteSyncTraffic, when true, prevents this object store's gateways from
             * transmitting multisite replication data. Note that this value does not affect whether
             * gateways receive multisite replication traffic: see ObjectZone.spec.customEndpoints for that.
             * If false or unset, this object store's gateways will be able to transmit multisite
             * replication data.
             */
            disableMultisiteSyncTraffic: boolean;
            /**
             * ExternalRgwEndpoints points to external RGW endpoint(s). Multiple endpoints can be given, but
             * for stability of ObjectBucketClaims, we highly recommend that users give only a single
             * external RGW endpoint that is a load balancer that sends requests to the multiple RGWs.
             */
            externalRgwEndpoints: outputs.ceph.v1.CephObjectStoreSpecGatewayExternalRgwEndpoints[];
            /**
             * Whether host networking is enabled for the rgw daemon. If not set, the network settings from the cluster CR will be applied.
             */
            hostNetwork: boolean;
            /**
             * The number of pods in the rgw replicaset.
             */
            instances: number;
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            opsLogSidecar: outputs.ceph.v1.CephObjectStoreSpecGatewayOpsLogSidecar;
            placement: {[key: string]: any};
            /**
             * The port the rgw service will be listening on (http)
             */
            port: number;
            /**
             * PriorityClassName sets priority classes on the rgw pods
             */
            priorityClassName: string;
            /**
             * The resource requirements for the rgw pods
             */
            resources: {[key: string]: any};
            /**
             * RgwCommandFlags sets Ceph RGW config values for the gateway clients that serve this object
             * store. Values are modified at RGW startup, resulting in RGW pod restarts.
             * This feature is intended for advanced users. It allows breaking configurations to be easily
             * applied. Use with caution.
             */
            rgwCommandFlags: {[key: string]: string};
            /**
             * RgwConfig sets Ceph RGW config values for the gateway clients that serve this object store.
             * Values are modified at runtime without RGW restart.
             * This feature is intended for advanced users. It allows breaking configurations to be easily
             * applied. Use with caution.
             */
            rgwConfig: {[key: string]: string};
            /**
             * The port the rgw service will be listening on (https)
             */
            securePort: number;
            service: outputs.ceph.v1.CephObjectStoreSpecGatewayService;
            /**
             * The name of the secret that stores the ssl certificate for secure rgw connections
             */
            sslCertificateRef: string;
        }

        /**
         * AdditionalVolumeMount represents the source from where additional files in pod containers
         * should come from and what subdirectory they are made available in.
         */
        export interface CephObjectStoreSpecGatewayAdditionalVolumeMounts {
            /**
             * SubPath defines the sub-path (subdirectory) of the directory root where the volumeSource will
             * be mounted. All files/keys in the volume source's volume will be mounted to the subdirectory.
             * This is not the same as the Kubernetes `subPath` volume mount option.
             * Each subPath definition must be unique and must not contain ':'.
             */
            subPath: string;
            volumeSource: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSource;
        }

        /**
         * AdditionalVolumeMount represents the source from where additional files in pod containers
         * should come from and what subdirectory they are made available in.
         */
        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsPatch {
            /**
             * SubPath defines the sub-path (subdirectory) of the directory root where the volumeSource will
             * be mounted. All files/keys in the volume source's volume will be mounted to the subdirectory.
             * This is not the same as the Kubernetes `subPath` volume mount option.
             * Each subPath definition must be unique and must not contain ':'.
             */
            subPath: string;
            volumeSource: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourcePatch;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSource {
            configMap: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceConfigMap;
            emptyDir: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceEmptyDir;
            hostPath: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceHostPath;
            persistentVolumeClaim: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourcePersistentVolumeClaim;
            projected: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjected;
            secret: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceSecret;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceConfigMap {
            defaultMode: number;
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceConfigMapPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceEmptyDir {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceEmptyDirPatch {
            medium: string;
            sizeLimit: number | string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceHostPath {
            path: string;
            type: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceHostPathPatch {
            path: string;
            type: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourcePatch {
            configMap: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceConfigMapPatch;
            emptyDir: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceEmptyDirPatch;
            hostPath: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceHostPathPatch;
            persistentVolumeClaim: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourcePersistentVolumeClaimPatch;
            projected: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedPatch;
            secret: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceSecretPatch;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourcePersistentVolumeClaim {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourcePersistentVolumeClaimPatch {
            claimName: string;
            readOnly: boolean;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjected {
            defaultMode: number;
            sources: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSources[];
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedPatch {
            defaultMode: number;
            sources: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesPatch[];
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSources {
            clusterTrustBundle: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundle;
            configMap: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesConfigMap;
            downwardAPI: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPI;
            secret: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesSecret;
            serviceAccountToken: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesServiceAccountToken;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundleLabelSelector {
            matchExpressions: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            matchLabels: {[key: string]: string};
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            key: string;
            operator: string;
            values: string[];
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            matchExpressions: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            matchLabels: {[key: string]: string};
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            name: string;
            optional: boolean;
            path: string;
            signerName: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesConfigMap {
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesConfigMapItems[];
            name: string;
            optional: boolean;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesConfigMapItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesConfigMapItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesConfigMapPatch {
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesConfigMapItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPI {
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItems[];
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion: string;
            fieldPath: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsFieldRefPatch;
            mode: number;
            path: string;
            resourceFieldRef: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName: string;
            divisor: number | string;
            resource: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIPatch {
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIItemsPatch[];
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesPatch {
            clusterTrustBundle: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesDownwardAPIPatch;
            secret: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesServiceAccountTokenPatch;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesSecret {
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesSecretItems[];
            name: string;
            optional: boolean;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesSecretPatch {
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesSecretItemsPatch[];
            name: string;
            optional: boolean;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesServiceAccountToken {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceProjectedSourcesServiceAccountTokenPatch {
            audience: string;
            expirationSeconds: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceSecret {
            defaultMode: number;
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceSecretItems[];
            optional: boolean;
            secretName: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceSecretItems {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceSecretItemsPatch {
            key: string;
            mode: number;
            path: string;
        }

        export interface CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceSecretPatch {
            defaultMode: number;
            items: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsVolumeSourceSecretItemsPatch[];
            optional: boolean;
            secretName: string;
        }

        /**
         * EndpointAddress is a tuple that describes a single IP address or host name. This is a subset of
         * Kubernetes's v1.EndpointAddress.
         */
        export interface CephObjectStoreSpecGatewayExternalRgwEndpoints {
            /**
             * The DNS-addressable Hostname of this endpoint. This field will be preferred over IP if both are given.
             */
            hostname: string;
            /**
             * The IP of this endpoint. As a legacy behavior, this supports being given a DNS-addressable hostname as well.
             */
            ip: string;
        }

        /**
         * EndpointAddress is a tuple that describes a single IP address or host name. This is a subset of
         * Kubernetes's v1.EndpointAddress.
         */
        export interface CephObjectStoreSpecGatewayExternalRgwEndpointsPatch {
            /**
             * The DNS-addressable Hostname of this endpoint. This field will be preferred over IP if both are given.
             */
            hostname: string;
            /**
             * The IP of this endpoint. As a legacy behavior, this supports being given a DNS-addressable hostname as well.
             */
            ip: string;
        }

        /**
         * Enable enhanced operation Logs for S3 in a sidecar named ops-log
         */
        export interface CephObjectStoreSpecGatewayOpsLogSidecar {
            resources: outputs.ceph.v1.CephObjectStoreSpecGatewayOpsLogSidecarResources;
        }

        /**
         * Enable enhanced operation Logs for S3 in a sidecar named ops-log
         */
        export interface CephObjectStoreSpecGatewayOpsLogSidecarPatch {
            resources: outputs.ceph.v1.CephObjectStoreSpecGatewayOpsLogSidecarResourcesPatch;
        }

        /**
         * Resources represents the way to specify resource requirements for the ops-log sidecar
         */
        export interface CephObjectStoreSpecGatewayOpsLogSidecarResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.ceph.v1.CephObjectStoreSpecGatewayOpsLogSidecarResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface CephObjectStoreSpecGatewayOpsLogSidecarResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface CephObjectStoreSpecGatewayOpsLogSidecarResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources represents the way to specify resource requirements for the ops-log sidecar
         */
        export interface CephObjectStoreSpecGatewayOpsLogSidecarResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.ceph.v1.CephObjectStoreSpecGatewayOpsLogSidecarResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * The rgw pod info
         */
        export interface CephObjectStoreSpecGatewayPatch {
            /**
             * AdditionalVolumeMounts allows additional volumes to be mounted to the RGW pod.
             * The root directory for each additional volume mount is `/var/rgw`.
             * Example: for an additional mount at subPath `ldap`, mounted from a secret that has key
             * `bindpass.secret`, the file would reside at `/var/rgw/ldap/bindpass.secret`.
             */
            additionalVolumeMounts: outputs.ceph.v1.CephObjectStoreSpecGatewayAdditionalVolumeMountsPatch[];
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * The name of the secret that stores custom ca-bundle with root and intermediate certificates.
             */
            caBundleRef: string;
            /**
             * Whether rgw dashboard is enabled for the rgw daemon. If not set, the rgw dashboard will be enabled.
             */
            dashboardEnabled: boolean;
            /**
             * DisableMultisiteSyncTraffic, when true, prevents this object store's gateways from
             * transmitting multisite replication data. Note that this value does not affect whether
             * gateways receive multisite replication traffic: see ObjectZone.spec.customEndpoints for that.
             * If false or unset, this object store's gateways will be able to transmit multisite
             * replication data.
             */
            disableMultisiteSyncTraffic: boolean;
            /**
             * ExternalRgwEndpoints points to external RGW endpoint(s). Multiple endpoints can be given, but
             * for stability of ObjectBucketClaims, we highly recommend that users give only a single
             * external RGW endpoint that is a load balancer that sends requests to the multiple RGWs.
             */
            externalRgwEndpoints: outputs.ceph.v1.CephObjectStoreSpecGatewayExternalRgwEndpointsPatch[];
            /**
             * Whether host networking is enabled for the rgw daemon. If not set, the network settings from the cluster CR will be applied.
             */
            hostNetwork: boolean;
            /**
             * The number of pods in the rgw replicaset.
             */
            instances: number;
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            opsLogSidecar: outputs.ceph.v1.CephObjectStoreSpecGatewayOpsLogSidecarPatch;
            placement: {[key: string]: any};
            /**
             * The port the rgw service will be listening on (http)
             */
            port: number;
            /**
             * PriorityClassName sets priority classes on the rgw pods
             */
            priorityClassName: string;
            /**
             * The resource requirements for the rgw pods
             */
            resources: {[key: string]: any};
            /**
             * RgwCommandFlags sets Ceph RGW config values for the gateway clients that serve this object
             * store. Values are modified at RGW startup, resulting in RGW pod restarts.
             * This feature is intended for advanced users. It allows breaking configurations to be easily
             * applied. Use with caution.
             */
            rgwCommandFlags: {[key: string]: string};
            /**
             * RgwConfig sets Ceph RGW config values for the gateway clients that serve this object store.
             * Values are modified at runtime without RGW restart.
             * This feature is intended for advanced users. It allows breaking configurations to be easily
             * applied. Use with caution.
             */
            rgwConfig: {[key: string]: string};
            /**
             * The port the rgw service will be listening on (https)
             */
            securePort: number;
            service: outputs.ceph.v1.CephObjectStoreSpecGatewayServicePatch;
            /**
             * The name of the secret that stores the ssl certificate for secure rgw connections
             */
            sslCertificateRef: string;
        }

        /**
         * The configuration related to add/set on each rgw service.
         */
        export interface CephObjectStoreSpecGatewayService {
            /**
             * The annotations-related configuration to add/set on each rgw service.
             * nullable
             * optional
             */
            annotations: {[key: string]: string};
        }

        /**
         * The configuration related to add/set on each rgw service.
         */
        export interface CephObjectStoreSpecGatewayServicePatch {
            /**
             * The annotations-related configuration to add/set on each rgw service.
             * nullable
             * optional
             */
            annotations: {[key: string]: string};
        }

        /**
         * The RGW health probes
         */
        export interface CephObjectStoreSpecHealthCheck {
            /**
             * ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon
             */
            readinessProbe: {[key: string]: any};
            startupProbe: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbe;
        }

        /**
         * The RGW health probes
         */
        export interface CephObjectStoreSpecHealthCheckPatch {
            /**
             * ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon
             */
            readinessProbe: {[key: string]: any};
            startupProbe: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbePatch;
        }

        /**
         * ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbe {
            /**
             * Disabled determines whether probe is disable or not
             */
            disabled: boolean;
            probe: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbe;
        }

        /**
         * ProbeSpec is a wrapper around Probe so it can be enabled or disabled for a Ceph daemon
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbePatch {
            /**
             * Disabled determines whether probe is disable or not
             */
            disabled: boolean;
            probe: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbePatch;
        }

        /**
         * Probe describes a health check to be performed against a container to determine whether it is
         * alive or ready to receive traffic.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbe {
            exec: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeGrpc;
            httpGet: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeTcpSocket;
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probe describes a health check to be performed against a container to determine whether it is
         * alive or ready to receive traffic.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbePatch {
            exec: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeGrpcPatch;
            httpGet: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.ceph.v1.CephObjectStoreSpecHealthCheckStartupProbeProbeTcpSocketPatch;
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface CephObjectStoreSpecHealthCheckStartupProbeProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Hosting settings for the object store.
         * A common use case for hosting configuration is to inform Rook of endpoints that support DNS
         * wildcards, which in turn allows virtual host-style bucket addressing.
         */
        export interface CephObjectStoreSpecHosting {
            advertiseEndpoint: outputs.ceph.v1.CephObjectStoreSpecHostingAdvertiseEndpoint;
            /**
             * A list of DNS host names on which object store gateways will accept client S3 connections.
             * When specified, object store gateways will reject client S3 connections to hostnames that are
             * not present in this list, so include all endpoints.
             * The object store's advertiseEndpoint and Kubernetes service endpoint, plus CephObjectZone
             * `customEndpoints` are automatically added to the list but may be set here again if desired.
             * Each DNS name must be valid according RFC-1123.
             * If the DNS name corresponds to an endpoint with DNS wildcard support, do not include the
             * wildcard itself in the list of hostnames.
             * E.g., use "mystore.example.com" instead of "*.mystore.example.com".
             */
            dnsNames: string[];
        }

        /**
         * AdvertiseEndpoint is the default endpoint Rook will return for resources dependent on this
         * object store. This endpoint will be returned to CephObjectStoreUsers, Object Bucket Claims,
         * and COSI Buckets/Accesses.
         * By default, Rook returns the endpoint for the object store's Kubernetes service using HTTPS
         * with `gateway.securePort` if it is defined (otherwise, HTTP with `gateway.port`).
         */
        export interface CephObjectStoreSpecHostingAdvertiseEndpoint {
            /**
             * DnsName is the DNS name (in RFC-1123 format) of the endpoint.
             * If the DNS name corresponds to an endpoint with DNS wildcard support, do not include the
             * wildcard itself in the list of hostnames.
             * E.g., use "mystore.example.com" instead of "*.mystore.example.com".
             */
            dnsName: string;
            /**
             * Port is the port on which S3 connections can be made for this endpoint.
             */
            port: number;
            /**
             * UseTls defines whether the endpoint uses TLS (HTTPS) or not (HTTP).
             */
            useTls: boolean;
        }

        /**
         * AdvertiseEndpoint is the default endpoint Rook will return for resources dependent on this
         * object store. This endpoint will be returned to CephObjectStoreUsers, Object Bucket Claims,
         * and COSI Buckets/Accesses.
         * By default, Rook returns the endpoint for the object store's Kubernetes service using HTTPS
         * with `gateway.securePort` if it is defined (otherwise, HTTP with `gateway.port`).
         */
        export interface CephObjectStoreSpecHostingAdvertiseEndpointPatch {
            /**
             * DnsName is the DNS name (in RFC-1123 format) of the endpoint.
             * If the DNS name corresponds to an endpoint with DNS wildcard support, do not include the
             * wildcard itself in the list of hostnames.
             * E.g., use "mystore.example.com" instead of "*.mystore.example.com".
             */
            dnsName: string;
            /**
             * Port is the port on which S3 connections can be made for this endpoint.
             */
            port: number;
            /**
             * UseTls defines whether the endpoint uses TLS (HTTPS) or not (HTTP).
             */
            useTls: boolean;
        }

        /**
         * Hosting settings for the object store.
         * A common use case for hosting configuration is to inform Rook of endpoints that support DNS
         * wildcards, which in turn allows virtual host-style bucket addressing.
         */
        export interface CephObjectStoreSpecHostingPatch {
            advertiseEndpoint: outputs.ceph.v1.CephObjectStoreSpecHostingAdvertiseEndpointPatch;
            /**
             * A list of DNS host names on which object store gateways will accept client S3 connections.
             * When specified, object store gateways will reject client S3 connections to hostnames that are
             * not present in this list, so include all endpoints.
             * The object store's advertiseEndpoint and Kubernetes service endpoint, plus CephObjectZone
             * `customEndpoints` are automatically added to the list but may be set here again if desired.
             * Each DNS name must be valid according RFC-1123.
             * If the DNS name corresponds to an endpoint with DNS wildcard support, do not include the
             * wildcard itself in the list of hostnames.
             * E.g., use "mystore.example.com" instead of "*.mystore.example.com".
             */
            dnsNames: string[];
        }

        /**
         * The metadata pool settings
         */
        export interface CephObjectStoreSpecMetadataPool {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolErasureCoded;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolMirroring;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolQuotas;
            replicated: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolReplicated;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The erasure code settings
         */
        export interface CephObjectStoreSpecMetadataPoolErasureCoded {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The erasure code settings
         */
        export interface CephObjectStoreSpecMetadataPoolErasureCodedPatch {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The mirroring settings
         */
        export interface CephObjectStoreSpecMetadataPoolMirroring {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolMirroringPeers;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolMirroringSnapshotSchedules[];
        }

        /**
         * The mirroring settings
         */
        export interface CephObjectStoreSpecMetadataPoolMirroringPatch {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolMirroringPeersPatch;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolMirroringSnapshotSchedulesPatch[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephObjectStoreSpecMetadataPoolMirroringPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephObjectStoreSpecMetadataPoolMirroringPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephObjectStoreSpecMetadataPoolMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephObjectStoreSpecMetadataPoolMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * The metadata pool settings
         */
        export interface CephObjectStoreSpecMetadataPoolPatch {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolErasureCodedPatch;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolMirroringPatch;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolQuotasPatch;
            replicated: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolReplicatedPatch;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The quota settings
         */
        export interface CephObjectStoreSpecMetadataPoolQuotas {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The quota settings
         */
        export interface CephObjectStoreSpecMetadataPoolQuotasPatch {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The replication settings
         */
        export interface CephObjectStoreSpecMetadataPoolReplicated {
            hybridStorage: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolReplicatedHybridStorage;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephObjectStoreSpecMetadataPoolReplicatedHybridStorage {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephObjectStoreSpecMetadataPoolReplicatedHybridStoragePatch {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * The replication settings
         */
        export interface CephObjectStoreSpecMetadataPoolReplicatedPatch {
            hybridStorage: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolReplicatedHybridStoragePatch;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * ObjectStoreSpec represent the spec of a pool
         */
        export interface CephObjectStoreSpecPatch {
            /**
             * The list of allowed namespaces in addition to the object store namespace
             * where ceph object store users may be created. Specify "*" to allow all
             * namespaces, otherwise list individual namespaces that are to be allowed.
             * This is useful for applications that need object store credentials
             * to be created in their own namespace, where neither OBCs nor COSI
             * is being used to create buckets. The default is empty.
             */
            allowUsersInNamespaces: string[];
            auth: outputs.ceph.v1.CephObjectStoreSpecAuthPatch;
            dataPool: outputs.ceph.v1.CephObjectStoreSpecDataPoolPatch;
            gateway: outputs.ceph.v1.CephObjectStoreSpecGatewayPatch;
            healthCheck: outputs.ceph.v1.CephObjectStoreSpecHealthCheckPatch;
            hosting: outputs.ceph.v1.CephObjectStoreSpecHostingPatch;
            metadataPool: outputs.ceph.v1.CephObjectStoreSpecMetadataPoolPatch;
            /**
             * Preserve pools on object store deletion
             */
            preservePoolsOnDelete: boolean;
            protocols: outputs.ceph.v1.CephObjectStoreSpecProtocolsPatch;
            security: outputs.ceph.v1.CephObjectStoreSpecSecurityPatch;
            sharedPools: outputs.ceph.v1.CephObjectStoreSpecSharedPoolsPatch;
            zone: outputs.ceph.v1.CephObjectStoreSpecZonePatch;
        }

        /**
         * The protocol specification
         */
        export interface CephObjectStoreSpecProtocols {
            /**
             * Represents RGW 'rgw_enable_apis' config option. See: https://docs.ceph.com/en/reef/radosgw/config-ref/#confval-rgw_enable_apis
             * If no value provided then all APIs will be enabled: s3, s3website, swift, swift_auth, admin, sts, iam, notifications
             * If enabled APIs are set, all remaining APIs will be disabled.
             * This option overrides S3.Enabled value.
             */
            enableAPIs: string[];
            s3: outputs.ceph.v1.CephObjectStoreSpecProtocolsS3;
            swift: outputs.ceph.v1.CephObjectStoreSpecProtocolsSwift;
        }

        /**
         * The protocol specification
         */
        export interface CephObjectStoreSpecProtocolsPatch {
            /**
             * Represents RGW 'rgw_enable_apis' config option. See: https://docs.ceph.com/en/reef/radosgw/config-ref/#confval-rgw_enable_apis
             * If no value provided then all APIs will be enabled: s3, s3website, swift, swift_auth, admin, sts, iam, notifications
             * If enabled APIs are set, all remaining APIs will be disabled.
             * This option overrides S3.Enabled value.
             */
            enableAPIs: string[];
            s3: outputs.ceph.v1.CephObjectStoreSpecProtocolsS3Patch;
            swift: outputs.ceph.v1.CephObjectStoreSpecProtocolsSwiftPatch;
        }

        /**
         * The spec for S3
         */
        export interface CephObjectStoreSpecProtocolsS3 {
            /**
             * Whether to use Keystone for authentication. This option maps directly to the rgw_s3_auth_use_keystone option. Enabling it allows generating S3 credentials via an OpenStack API call, see the docs. If not given, the defaults of the corresponding RGW option apply.
             */
            authUseKeystone: boolean;
            /**
             * Deprecated: use protocol.enableAPIs instead.
             * Whether to enable S3. This defaults to true (even if protocols.s3 is not present in the CRD). This maintains backwards compatibility – by default S3 is enabled.
             */
            enabled: boolean;
        }

        /**
         * The spec for S3
         */
        export interface CephObjectStoreSpecProtocolsS3Patch {
            /**
             * Whether to use Keystone for authentication. This option maps directly to the rgw_s3_auth_use_keystone option. Enabling it allows generating S3 credentials via an OpenStack API call, see the docs. If not given, the defaults of the corresponding RGW option apply.
             */
            authUseKeystone: boolean;
            /**
             * Deprecated: use protocol.enableAPIs instead.
             * Whether to enable S3. This defaults to true (even if protocols.s3 is not present in the CRD). This maintains backwards compatibility – by default S3 is enabled.
             */
            enabled: boolean;
        }

        /**
         * The spec for Swift
         */
        export interface CephObjectStoreSpecProtocolsSwift {
            /**
             * Whether or not the Swift account name should be included in the Swift API URL. If set to false (the default), then the Swift API will listen on a URL formed like http://host:port/<rgw_swift_url_prefix>/v1. If set to true, the Swift API URL will be http://host:port/<rgw_swift_url_prefix>/v1/AUTH_<account_name>. You must set this option to true (and update the Keystone service catalog) if you want radosgw to support publicly-readable containers and temporary URLs.
             */
            accountInUrl: boolean;
            /**
             * The URL prefix for the Swift API, to distinguish it from the S3 API endpoint. The default is swift, which makes the Swift API available at the URL http://host:port/swift/v1 (or http://host:port/swift/v1/AUTH_%(tenant_id)s if rgw swift account in url is enabled).
             */
            urlPrefix: string;
            /**
             * Enables the Object Versioning of OpenStack Object Storage API. This allows clients to put the X-Versions-Location attribute on containers that should be versioned.
             */
            versioningEnabled: boolean;
        }

        /**
         * The spec for Swift
         */
        export interface CephObjectStoreSpecProtocolsSwiftPatch {
            /**
             * Whether or not the Swift account name should be included in the Swift API URL. If set to false (the default), then the Swift API will listen on a URL formed like http://host:port/<rgw_swift_url_prefix>/v1. If set to true, the Swift API URL will be http://host:port/<rgw_swift_url_prefix>/v1/AUTH_<account_name>. You must set this option to true (and update the Keystone service catalog) if you want radosgw to support publicly-readable containers and temporary URLs.
             */
            accountInUrl: boolean;
            /**
             * The URL prefix for the Swift API, to distinguish it from the S3 API endpoint. The default is swift, which makes the Swift API available at the URL http://host:port/swift/v1 (or http://host:port/swift/v1/AUTH_%(tenant_id)s if rgw swift account in url is enabled).
             */
            urlPrefix: string;
            /**
             * Enables the Object Versioning of OpenStack Object Storage API. This allows clients to put the X-Versions-Location attribute on containers that should be versioned.
             */
            versioningEnabled: boolean;
        }

        /**
         * Security represents security settings
         */
        export interface CephObjectStoreSpecSecurity {
            keyRotation: outputs.ceph.v1.CephObjectStoreSpecSecurityKeyRotation;
            kms: outputs.ceph.v1.CephObjectStoreSpecSecurityKms;
            s3: outputs.ceph.v1.CephObjectStoreSpecSecurityS3;
        }

        /**
         * KeyRotation defines options for Key Rotation.
         */
        export interface CephObjectStoreSpecSecurityKeyRotation {
            /**
             * Enabled represents whether the key rotation is enabled.
             */
            enabled: boolean;
            /**
             * Schedule represents the cron schedule for key rotation.
             */
            schedule: string;
        }

        /**
         * KeyRotation defines options for Key Rotation.
         */
        export interface CephObjectStoreSpecSecurityKeyRotationPatch {
            /**
             * Enabled represents whether the key rotation is enabled.
             */
            enabled: boolean;
            /**
             * Schedule represents the cron schedule for key rotation.
             */
            schedule: string;
        }

        /**
         * KeyManagementService is the main Key Management option
         */
        export interface CephObjectStoreSpecSecurityKms {
            /**
             * ConnectionDetails contains the KMS connection details (address, port etc)
             */
            connectionDetails: {[key: string]: any};
            /**
             * TokenSecretName is the kubernetes secret containing the KMS token
             */
            tokenSecretName: string;
        }

        /**
         * KeyManagementService is the main Key Management option
         */
        export interface CephObjectStoreSpecSecurityKmsPatch {
            /**
             * ConnectionDetails contains the KMS connection details (address, port etc)
             */
            connectionDetails: {[key: string]: any};
            /**
             * TokenSecretName is the kubernetes secret containing the KMS token
             */
            tokenSecretName: string;
        }

        /**
         * Security represents security settings
         */
        export interface CephObjectStoreSpecSecurityPatch {
            keyRotation: outputs.ceph.v1.CephObjectStoreSpecSecurityKeyRotationPatch;
            kms: outputs.ceph.v1.CephObjectStoreSpecSecurityKmsPatch;
            s3: outputs.ceph.v1.CephObjectStoreSpecSecurityS3Patch;
        }

        /**
         * The settings for supporting AWS-SSE:S3 with RGW
         */
        export interface CephObjectStoreSpecSecurityS3 {
            /**
             * ConnectionDetails contains the KMS connection details (address, port etc)
             */
            connectionDetails: {[key: string]: any};
            /**
             * TokenSecretName is the kubernetes secret containing the KMS token
             */
            tokenSecretName: string;
        }

        /**
         * The settings for supporting AWS-SSE:S3 with RGW
         */
        export interface CephObjectStoreSpecSecurityS3Patch {
            /**
             * ConnectionDetails contains the KMS connection details (address, port etc)
             */
            connectionDetails: {[key: string]: any};
            /**
             * TokenSecretName is the kubernetes secret containing the KMS token
             */
            tokenSecretName: string;
        }

        /**
         * The pool information when configuring RADOS namespaces in existing pools.
         */
        export interface CephObjectStoreSpecSharedPools {
            /**
             * The data pool used for creating RADOS namespaces in the object store
             */
            dataPoolName: string;
            /**
             * The metadata pool used for creating RADOS namespaces in the object store
             */
            metadataPoolName: string;
            /**
             * PoolPlacements control which Pools are associated with a particular RGW bucket.
             * Once PoolPlacements are defined, RGW client will be able to associate pool
             * with ObjectStore bucket by providing "<LocationConstraint>" during s3 bucket creation
             * or "X-Storage-Policy" header during swift container creation.
             * See: https://docs.ceph.com/en/latest/radosgw/placement/#placement-targets
             * PoolPlacement with name: "default" will be used as a default pool if no option
             * is provided during bucket creation.
             * If default placement is not provided, spec.sharedPools.dataPoolName and spec.sharedPools.MetadataPoolName will be used as default pools.
             * If spec.sharedPools are also empty, then RGW pools (spec.dataPool and spec.metadataPool) will be used as defaults.
             */
            poolPlacements: outputs.ceph.v1.CephObjectStoreSpecSharedPoolsPoolPlacements[];
            /**
             * Whether the RADOS namespaces should be preserved on deletion of the object store
             */
            preserveRadosNamespaceDataOnDelete: boolean;
        }

        /**
         * The pool information when configuring RADOS namespaces in existing pools.
         */
        export interface CephObjectStoreSpecSharedPoolsPatch {
            /**
             * The data pool used for creating RADOS namespaces in the object store
             */
            dataPoolName: string;
            /**
             * The metadata pool used for creating RADOS namespaces in the object store
             */
            metadataPoolName: string;
            /**
             * PoolPlacements control which Pools are associated with a particular RGW bucket.
             * Once PoolPlacements are defined, RGW client will be able to associate pool
             * with ObjectStore bucket by providing "<LocationConstraint>" during s3 bucket creation
             * or "X-Storage-Policy" header during swift container creation.
             * See: https://docs.ceph.com/en/latest/radosgw/placement/#placement-targets
             * PoolPlacement with name: "default" will be used as a default pool if no option
             * is provided during bucket creation.
             * If default placement is not provided, spec.sharedPools.dataPoolName and spec.sharedPools.MetadataPoolName will be used as default pools.
             * If spec.sharedPools are also empty, then RGW pools (spec.dataPool and spec.metadataPool) will be used as defaults.
             */
            poolPlacements: outputs.ceph.v1.CephObjectStoreSpecSharedPoolsPoolPlacementsPatch[];
            /**
             * Whether the RADOS namespaces should be preserved on deletion of the object store
             */
            preserveRadosNamespaceDataOnDelete: boolean;
        }

        export interface CephObjectStoreSpecSharedPoolsPoolPlacements {
            /**
             * The data pool used to store ObjectStore data that cannot use erasure coding (ex: multi-part uploads).
             * If dataPoolName is not erasure coded, then there is no need for dataNonECPoolName.
             */
            dataNonECPoolName: string;
            /**
             * The data pool used to store ObjectStore objects data.
             */
            dataPoolName: string;
            /**
             * Sets given placement as default. Only one placement in the list can be marked as default.
             * Default is false.
             */
            default: boolean;
            /**
             * The metadata pool used to store ObjectStore bucket index.
             */
            metadataPoolName: string;
            /**
             * Pool placement name. Name can be arbitrary. Placement with name "default" will be used as default.
             */
            name: string;
            /**
             * StorageClasses can be selected by user to override dataPoolName during object creation.
             * Each placement has default STANDARD StorageClass pointing to dataPoolName.
             * This list allows defining additional StorageClasses on top of default STANDARD storage class.
             */
            storageClasses: outputs.ceph.v1.CephObjectStoreSpecSharedPoolsPoolPlacementsStorageClasses[];
        }

        export interface CephObjectStoreSpecSharedPoolsPoolPlacementsPatch {
            /**
             * The data pool used to store ObjectStore data that cannot use erasure coding (ex: multi-part uploads).
             * If dataPoolName is not erasure coded, then there is no need for dataNonECPoolName.
             */
            dataNonECPoolName: string;
            /**
             * The data pool used to store ObjectStore objects data.
             */
            dataPoolName: string;
            /**
             * Sets given placement as default. Only one placement in the list can be marked as default.
             * Default is false.
             */
            default: boolean;
            /**
             * The metadata pool used to store ObjectStore bucket index.
             */
            metadataPoolName: string;
            /**
             * Pool placement name. Name can be arbitrary. Placement with name "default" will be used as default.
             */
            name: string;
            /**
             * StorageClasses can be selected by user to override dataPoolName during object creation.
             * Each placement has default STANDARD StorageClass pointing to dataPoolName.
             * This list allows defining additional StorageClasses on top of default STANDARD storage class.
             */
            storageClasses: outputs.ceph.v1.CephObjectStoreSpecSharedPoolsPoolPlacementsStorageClassesPatch[];
        }

        export interface CephObjectStoreSpecSharedPoolsPoolPlacementsStorageClasses {
            /**
             * DataPoolName is the data pool used to store ObjectStore objects data.
             */
            dataPoolName: string;
            /**
             * Name is the StorageClass name. Ceph allows arbitrary name for StorageClasses,
             * however most clients/libs insist on AWS names so it is recommended to use
             * one of the valid x-amz-storage-class values for better compatibility:
             * REDUCED_REDUNDANCY | STANDARD_IA | ONEZONE_IA | INTELLIGENT_TIERING | GLACIER | DEEP_ARCHIVE | OUTPOSTS | GLACIER_IR | SNOW | EXPRESS_ONEZONE
             * See AWS docs: https://aws.amazon.com/de/s3/storage-classes/
             */
            name: string;
        }

        export interface CephObjectStoreSpecSharedPoolsPoolPlacementsStorageClassesPatch {
            /**
             * DataPoolName is the data pool used to store ObjectStore objects data.
             */
            dataPoolName: string;
            /**
             * Name is the StorageClass name. Ceph allows arbitrary name for StorageClasses,
             * however most clients/libs insist on AWS names so it is recommended to use
             * one of the valid x-amz-storage-class values for better compatibility:
             * REDUCED_REDUNDANCY | STANDARD_IA | ONEZONE_IA | INTELLIGENT_TIERING | GLACIER | DEEP_ARCHIVE | OUTPOSTS | GLACIER_IR | SNOW | EXPRESS_ONEZONE
             * See AWS docs: https://aws.amazon.com/de/s3/storage-classes/
             */
            name: string;
        }

        /**
         * The multisite info
         */
        export interface CephObjectStoreSpecZone {
            /**
             * RGW Zone the Object Store is in
             */
            name: string;
        }

        /**
         * The multisite info
         */
        export interface CephObjectStoreSpecZonePatch {
            /**
             * RGW Zone the Object Store is in
             */
            name: string;
        }

        /**
         * CephObjectStoreUser represents a Ceph Object Store Gateway User
         */
        export interface CephObjectStoreUser {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephObjectStoreUser";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephObjectStoreUserSpec;
            /**
             * ObjectStoreUserStatus represents the status Ceph Object Store Gateway User
             */
            status: {[key: string]: any};
        }

        /**
         * ObjectStoreUserSpec represent the spec of an Objectstoreuser
         */
        export interface CephObjectStoreUserSpec {
            capabilities: outputs.ceph.v1.CephObjectStoreUserSpecCapabilities;
            /**
             * The namespace where the parent CephCluster and CephObjectStore are found
             */
            clusterNamespace: string;
            /**
             * The display name for the ceph users
             */
            displayName: string;
            quotas: outputs.ceph.v1.CephObjectStoreUserSpecQuotas;
            /**
             * The store the user will be created in
             */
            store: string;
        }

        /**
         * Additional admin-level capabilities for the Ceph object store user
         */
        export interface CephObjectStoreUserSpecCapabilities {
            /**
             * Add capabilities for user to send request to RGW Cache API header. Documented in https://docs.ceph.com/en/latest/radosgw/rgw-cache/#cache-api
             */
            amz-cache: string;
            /**
             * Add capabilities for user to change bucket index logging. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            bilog: string;
            /**
             * Admin capabilities to read/write Ceph object store buckets. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            bucket: string;
            /**
             * Admin capabilities to read/write Ceph object store buckets. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            buckets: string;
            /**
             * Add capabilities for user to change data logging. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            datalog: string;
            /**
             * Admin capabilities to read/write information about the user. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            info: string;
            /**
             * Add capabilities for user to change metadata logging. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            mdlog: string;
            /**
             * Admin capabilities to read/write Ceph object store metadata. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            metadata: string;
            /**
             * Add capabilities for user to change oidc provider. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            oidc-provider: string;
            /**
             * Add capabilities for user to set rate limiter for user and bucket. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            ratelimit: string;
            /**
             * Admin capabilities to read/write roles for user. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            roles: string;
            /**
             * Admin capabilities to read/write Ceph object store usage. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            usage: string;
            /**
             * Admin capabilities to read/write Ceph object store users. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            user: string;
            /**
             * Add capabilities for user to change user policies. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            user-policy: string;
            /**
             * Admin capabilities to read/write Ceph object store users. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            users: string;
            /**
             * Admin capabilities to read/write Ceph object store zones. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            zone: string;
        }

        /**
         * Additional admin-level capabilities for the Ceph object store user
         */
        export interface CephObjectStoreUserSpecCapabilitiesPatch {
            /**
             * Add capabilities for user to send request to RGW Cache API header. Documented in https://docs.ceph.com/en/latest/radosgw/rgw-cache/#cache-api
             */
            amz-cache: string;
            /**
             * Add capabilities for user to change bucket index logging. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            bilog: string;
            /**
             * Admin capabilities to read/write Ceph object store buckets. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            bucket: string;
            /**
             * Admin capabilities to read/write Ceph object store buckets. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            buckets: string;
            /**
             * Add capabilities for user to change data logging. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            datalog: string;
            /**
             * Admin capabilities to read/write information about the user. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            info: string;
            /**
             * Add capabilities for user to change metadata logging. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            mdlog: string;
            /**
             * Admin capabilities to read/write Ceph object store metadata. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            metadata: string;
            /**
             * Add capabilities for user to change oidc provider. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            oidc-provider: string;
            /**
             * Add capabilities for user to set rate limiter for user and bucket. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            ratelimit: string;
            /**
             * Admin capabilities to read/write roles for user. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            roles: string;
            /**
             * Admin capabilities to read/write Ceph object store usage. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            usage: string;
            /**
             * Admin capabilities to read/write Ceph object store users. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            user: string;
            /**
             * Add capabilities for user to change user policies. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            user-policy: string;
            /**
             * Admin capabilities to read/write Ceph object store users. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            users: string;
            /**
             * Admin capabilities to read/write Ceph object store zones. Documented in https://docs.ceph.com/en/latest/radosgw/admin/?#add-remove-admin-capabilities
             */
            zone: string;
        }

        /**
         * ObjectStoreUserSpec represent the spec of an Objectstoreuser
         */
        export interface CephObjectStoreUserSpecPatch {
            capabilities: outputs.ceph.v1.CephObjectStoreUserSpecCapabilitiesPatch;
            /**
             * The namespace where the parent CephCluster and CephObjectStore are found
             */
            clusterNamespace: string;
            /**
             * The display name for the ceph users
             */
            displayName: string;
            quotas: outputs.ceph.v1.CephObjectStoreUserSpecQuotasPatch;
            /**
             * The store the user will be created in
             */
            store: string;
        }

        /**
         * ObjectUserQuotaSpec can be used to set quotas for the object store user to limit their usage. See the [Ceph docs](https://docs.ceph.com/en/latest/radosgw/admin/?#quota-management) for more
         */
        export interface CephObjectStoreUserSpecQuotas {
            /**
             * Maximum bucket limit for the ceph user
             */
            maxBuckets: number;
            /**
             * Maximum number of objects across all the user's buckets
             */
            maxObjects: number;
            /**
             * Maximum size limit of all objects across all the user's buckets
             * See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info.
             */
            maxSize: number | string;
        }

        /**
         * ObjectUserQuotaSpec can be used to set quotas for the object store user to limit their usage. See the [Ceph docs](https://docs.ceph.com/en/latest/radosgw/admin/?#quota-management) for more
         */
        export interface CephObjectStoreUserSpecQuotasPatch {
            /**
             * Maximum bucket limit for the ceph user
             */
            maxBuckets: number;
            /**
             * Maximum number of objects across all the user's buckets
             */
            maxObjects: number;
            /**
             * Maximum size limit of all objects across all the user's buckets
             * See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info.
             */
            maxSize: number | string;
        }

        /**
         * CephObjectZone represents a Ceph Object Store Gateway Zone
         */
        export interface CephObjectZone {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephObjectZone";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephObjectZoneSpec;
            /**
             * Status represents the status of an object
             */
            status: {[key: string]: any};
        }

        /**
         * CephObjectZoneGroup represents a Ceph Object Store Gateway Zone Group
         */
        export interface CephObjectZoneGroup {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephObjectZoneGroup";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephObjectZoneGroupSpec;
            /**
             * Status represents the status of an object
             */
            status: {[key: string]: any};
        }

        /**
         * ObjectZoneGroupSpec represent the spec of an ObjectZoneGroup
         */
        export interface CephObjectZoneGroupSpec {
            /**
             * The display name for the ceph users
             */
            realm: string;
        }

        /**
         * ObjectZoneGroupSpec represent the spec of an ObjectZoneGroup
         */
        export interface CephObjectZoneGroupSpecPatch {
            /**
             * The display name for the ceph users
             */
            realm: string;
        }

        /**
         * ObjectZoneSpec represent the spec of an ObjectZone
         */
        export interface CephObjectZoneSpec {
            /**
             * If this zone cannot be accessed from other peer Ceph clusters via the ClusterIP Service
             * endpoint created by Rook, you must set this to the externally reachable endpoint(s). You may
             * include the port in the definition. For example: "https://my-object-store.my-domain.net:443".
             * In many cases, you should set this to the endpoint of the ingress resource that makes the
             * CephObjectStore associated with this CephObjectStoreZone reachable to peer clusters.
             * The list can have one or more endpoints pointing to different RGW servers in the zone.
             *
             * If a CephObjectStore endpoint is omitted from this list, that object store's gateways will
             * not receive multisite replication data
             * (see CephObjectStore.spec.gateway.disableMultisiteSyncTraffic).
             */
            customEndpoints: string[];
            dataPool: outputs.ceph.v1.CephObjectZoneSpecDataPool;
            metadataPool: outputs.ceph.v1.CephObjectZoneSpecMetadataPool;
            /**
             * Preserve pools on object zone deletion
             */
            preservePoolsOnDelete: boolean;
            sharedPools: outputs.ceph.v1.CephObjectZoneSpecSharedPools;
            /**
             * The display name for the ceph users
             */
            zoneGroup: string;
        }

        /**
         * The data pool settings
         */
        export interface CephObjectZoneSpecDataPool {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephObjectZoneSpecDataPoolErasureCoded;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephObjectZoneSpecDataPoolMirroring;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephObjectZoneSpecDataPoolQuotas;
            replicated: outputs.ceph.v1.CephObjectZoneSpecDataPoolReplicated;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The erasure code settings
         */
        export interface CephObjectZoneSpecDataPoolErasureCoded {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The erasure code settings
         */
        export interface CephObjectZoneSpecDataPoolErasureCodedPatch {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The mirroring settings
         */
        export interface CephObjectZoneSpecDataPoolMirroring {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephObjectZoneSpecDataPoolMirroringPeers;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephObjectZoneSpecDataPoolMirroringSnapshotSchedules[];
        }

        /**
         * The mirroring settings
         */
        export interface CephObjectZoneSpecDataPoolMirroringPatch {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephObjectZoneSpecDataPoolMirroringPeersPatch;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephObjectZoneSpecDataPoolMirroringSnapshotSchedulesPatch[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephObjectZoneSpecDataPoolMirroringPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephObjectZoneSpecDataPoolMirroringPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephObjectZoneSpecDataPoolMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephObjectZoneSpecDataPoolMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * The data pool settings
         */
        export interface CephObjectZoneSpecDataPoolPatch {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephObjectZoneSpecDataPoolErasureCodedPatch;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephObjectZoneSpecDataPoolMirroringPatch;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephObjectZoneSpecDataPoolQuotasPatch;
            replicated: outputs.ceph.v1.CephObjectZoneSpecDataPoolReplicatedPatch;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The quota settings
         */
        export interface CephObjectZoneSpecDataPoolQuotas {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The quota settings
         */
        export interface CephObjectZoneSpecDataPoolQuotasPatch {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The replication settings
         */
        export interface CephObjectZoneSpecDataPoolReplicated {
            hybridStorage: outputs.ceph.v1.CephObjectZoneSpecDataPoolReplicatedHybridStorage;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephObjectZoneSpecDataPoolReplicatedHybridStorage {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephObjectZoneSpecDataPoolReplicatedHybridStoragePatch {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * The replication settings
         */
        export interface CephObjectZoneSpecDataPoolReplicatedPatch {
            hybridStorage: outputs.ceph.v1.CephObjectZoneSpecDataPoolReplicatedHybridStoragePatch;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * The metadata pool settings
         */
        export interface CephObjectZoneSpecMetadataPool {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolErasureCoded;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolMirroring;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolQuotas;
            replicated: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolReplicated;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The erasure code settings
         */
        export interface CephObjectZoneSpecMetadataPoolErasureCoded {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The erasure code settings
         */
        export interface CephObjectZoneSpecMetadataPoolErasureCodedPatch {
            /**
             * The algorithm for erasure coding
             */
            algorithm: string;
            /**
             * Number of coding chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * This is the number of OSDs that can be lost simultaneously before data cannot be recovered.
             */
            codingChunks: number;
            /**
             * Number of data chunks per object in an erasure coded storage pool (required for erasure-coded pool type).
             * The number of chunks required to recover an object when any single OSD is lost is the same
             * as dataChunks so be aware that the larger the number of data chunks, the higher the cost of recovery.
             */
            dataChunks: number;
        }

        /**
         * The mirroring settings
         */
        export interface CephObjectZoneSpecMetadataPoolMirroring {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolMirroringPeers;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolMirroringSnapshotSchedules[];
        }

        /**
         * The mirroring settings
         */
        export interface CephObjectZoneSpecMetadataPoolMirroringPatch {
            /**
             * Enabled whether this pool is mirrored or not
             */
            enabled: boolean;
            /**
             * Mode is the mirroring mode: either pool or image
             */
            mode: string;
            peers: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolMirroringPeersPatch;
            /**
             * SnapshotSchedules is the scheduling of snapshot for mirrored images/pools
             */
            snapshotSchedules: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolMirroringSnapshotSchedulesPatch[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephObjectZoneSpecMetadataPoolMirroringPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephObjectZoneSpecMetadataPoolMirroringPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephObjectZoneSpecMetadataPoolMirroringSnapshotSchedules {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * SnapshotScheduleSpec represents the snapshot scheduling settings of a mirrored pool
         */
        export interface CephObjectZoneSpecMetadataPoolMirroringSnapshotSchedulesPatch {
            /**
             * Interval represent the periodicity of the snapshot.
             */
            interval: string;
            /**
             * Path is the path to snapshot, only valid for CephFS
             */
            path: string;
            /**
             * StartTime indicates when to start the snapshot
             */
            startTime: string;
        }

        /**
         * The metadata pool settings
         */
        export interface CephObjectZoneSpecMetadataPoolPatch {
            /**
             * The application name to set on the pool. Only expected to be set for rgw pools.
             */
            application: string;
            /**
             * DEPRECATED: use Parameters instead, e.g., Parameters["compression_mode"] = "force"
             * The inline compression mode in Bluestore OSD to set to (options are: none, passive, aggressive, force)
             * Do NOT set a default value for kubebuilder as this will override the Parameters
             */
            compressionMode: string;
            /**
             * The root of the crush hierarchy utilized by the pool
             */
            crushRoot: string;
            /**
             * The device class the OSD should set to for use in the pool
             */
            deviceClass: string;
            /**
             * Allow rook operator to change the pool CRUSH tunables once the pool is created
             */
            enableCrushUpdates: boolean;
            /**
             * EnableRBDStats is used to enable gathering of statistics for all RBD images in the pool
             */
            enableRBDStats: boolean;
            erasureCoded: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolErasureCodedPatch;
            /**
             * The failure domain: osd/host/(region or zone if available) - technically also any type in the crush map
             */
            failureDomain: string;
            mirroring: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolMirroringPatch;
            /**
             * Parameters is a list of properties to enable on a given pool
             */
            parameters: {[key: string]: any};
            quotas: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolQuotasPatch;
            replicated: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolReplicatedPatch;
            /**
             * The mirroring statusCheck
             */
            statusCheck: {[key: string]: any};
        }

        /**
         * The quota settings
         */
        export interface CephObjectZoneSpecMetadataPoolQuotas {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The quota settings
         */
        export interface CephObjectZoneSpecMetadataPoolQuotasPatch {
            /**
             * MaxBytes represents the quota in bytes
             * Deprecated in favor of MaxSize
             */
            maxBytes: number;
            /**
             * MaxObjects represents the quota in objects
             */
            maxObjects: number;
            /**
             * MaxSize represents the quota in bytes as a string
             */
            maxSize: string;
        }

        /**
         * The replication settings
         */
        export interface CephObjectZoneSpecMetadataPoolReplicated {
            hybridStorage: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolReplicatedHybridStorage;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephObjectZoneSpecMetadataPoolReplicatedHybridStorage {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * HybridStorage represents hybrid storage tier settings
         */
        export interface CephObjectZoneSpecMetadataPoolReplicatedHybridStoragePatch {
            /**
             * PrimaryDeviceClass represents high performance tier (for example SSD or NVME) for Primary OSD
             */
            primaryDeviceClass: string;
            /**
             * SecondaryDeviceClass represents low performance tier (for example HDDs) for remaining OSDs
             */
            secondaryDeviceClass: string;
        }

        /**
         * The replication settings
         */
        export interface CephObjectZoneSpecMetadataPoolReplicatedPatch {
            hybridStorage: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolReplicatedHybridStoragePatch;
            /**
             * ReplicasPerFailureDomain the number of replica in the specified failure domain
             */
            replicasPerFailureDomain: number;
            /**
             * RequireSafeReplicaSize if false allows you to set replica 1
             */
            requireSafeReplicaSize: boolean;
            /**
             * Size - Number of copies per object in a replicated storage pool, including the object itself (required for replicated pool type)
             */
            size: number;
            /**
             * SubFailureDomain the name of the sub-failure domain
             */
            subFailureDomain: string;
            /**
             * TargetSizeRatio gives a hint (%) to Ceph in terms of expected consumption of the total cluster capacity
             */
            targetSizeRatio: number;
        }

        /**
         * ObjectZoneSpec represent the spec of an ObjectZone
         */
        export interface CephObjectZoneSpecPatch {
            /**
             * If this zone cannot be accessed from other peer Ceph clusters via the ClusterIP Service
             * endpoint created by Rook, you must set this to the externally reachable endpoint(s). You may
             * include the port in the definition. For example: "https://my-object-store.my-domain.net:443".
             * In many cases, you should set this to the endpoint of the ingress resource that makes the
             * CephObjectStore associated with this CephObjectStoreZone reachable to peer clusters.
             * The list can have one or more endpoints pointing to different RGW servers in the zone.
             *
             * If a CephObjectStore endpoint is omitted from this list, that object store's gateways will
             * not receive multisite replication data
             * (see CephObjectStore.spec.gateway.disableMultisiteSyncTraffic).
             */
            customEndpoints: string[];
            dataPool: outputs.ceph.v1.CephObjectZoneSpecDataPoolPatch;
            metadataPool: outputs.ceph.v1.CephObjectZoneSpecMetadataPoolPatch;
            /**
             * Preserve pools on object zone deletion
             */
            preservePoolsOnDelete: boolean;
            sharedPools: outputs.ceph.v1.CephObjectZoneSpecSharedPoolsPatch;
            /**
             * The display name for the ceph users
             */
            zoneGroup: string;
        }

        /**
         * The pool information when configuring RADOS namespaces in existing pools.
         */
        export interface CephObjectZoneSpecSharedPools {
            /**
             * The data pool used for creating RADOS namespaces in the object store
             */
            dataPoolName: string;
            /**
             * The metadata pool used for creating RADOS namespaces in the object store
             */
            metadataPoolName: string;
            /**
             * PoolPlacements control which Pools are associated with a particular RGW bucket.
             * Once PoolPlacements are defined, RGW client will be able to associate pool
             * with ObjectStore bucket by providing "<LocationConstraint>" during s3 bucket creation
             * or "X-Storage-Policy" header during swift container creation.
             * See: https://docs.ceph.com/en/latest/radosgw/placement/#placement-targets
             * PoolPlacement with name: "default" will be used as a default pool if no option
             * is provided during bucket creation.
             * If default placement is not provided, spec.sharedPools.dataPoolName and spec.sharedPools.MetadataPoolName will be used as default pools.
             * If spec.sharedPools are also empty, then RGW pools (spec.dataPool and spec.metadataPool) will be used as defaults.
             */
            poolPlacements: outputs.ceph.v1.CephObjectZoneSpecSharedPoolsPoolPlacements[];
            /**
             * Whether the RADOS namespaces should be preserved on deletion of the object store
             */
            preserveRadosNamespaceDataOnDelete: boolean;
        }

        /**
         * The pool information when configuring RADOS namespaces in existing pools.
         */
        export interface CephObjectZoneSpecSharedPoolsPatch {
            /**
             * The data pool used for creating RADOS namespaces in the object store
             */
            dataPoolName: string;
            /**
             * The metadata pool used for creating RADOS namespaces in the object store
             */
            metadataPoolName: string;
            /**
             * PoolPlacements control which Pools are associated with a particular RGW bucket.
             * Once PoolPlacements are defined, RGW client will be able to associate pool
             * with ObjectStore bucket by providing "<LocationConstraint>" during s3 bucket creation
             * or "X-Storage-Policy" header during swift container creation.
             * See: https://docs.ceph.com/en/latest/radosgw/placement/#placement-targets
             * PoolPlacement with name: "default" will be used as a default pool if no option
             * is provided during bucket creation.
             * If default placement is not provided, spec.sharedPools.dataPoolName and spec.sharedPools.MetadataPoolName will be used as default pools.
             * If spec.sharedPools are also empty, then RGW pools (spec.dataPool and spec.metadataPool) will be used as defaults.
             */
            poolPlacements: outputs.ceph.v1.CephObjectZoneSpecSharedPoolsPoolPlacementsPatch[];
            /**
             * Whether the RADOS namespaces should be preserved on deletion of the object store
             */
            preserveRadosNamespaceDataOnDelete: boolean;
        }

        export interface CephObjectZoneSpecSharedPoolsPoolPlacements {
            /**
             * The data pool used to store ObjectStore data that cannot use erasure coding (ex: multi-part uploads).
             * If dataPoolName is not erasure coded, then there is no need for dataNonECPoolName.
             */
            dataNonECPoolName: string;
            /**
             * The data pool used to store ObjectStore objects data.
             */
            dataPoolName: string;
            /**
             * Sets given placement as default. Only one placement in the list can be marked as default.
             * Default is false.
             */
            default: boolean;
            /**
             * The metadata pool used to store ObjectStore bucket index.
             */
            metadataPoolName: string;
            /**
             * Pool placement name. Name can be arbitrary. Placement with name "default" will be used as default.
             */
            name: string;
            /**
             * StorageClasses can be selected by user to override dataPoolName during object creation.
             * Each placement has default STANDARD StorageClass pointing to dataPoolName.
             * This list allows defining additional StorageClasses on top of default STANDARD storage class.
             */
            storageClasses: outputs.ceph.v1.CephObjectZoneSpecSharedPoolsPoolPlacementsStorageClasses[];
        }

        export interface CephObjectZoneSpecSharedPoolsPoolPlacementsPatch {
            /**
             * The data pool used to store ObjectStore data that cannot use erasure coding (ex: multi-part uploads).
             * If dataPoolName is not erasure coded, then there is no need for dataNonECPoolName.
             */
            dataNonECPoolName: string;
            /**
             * The data pool used to store ObjectStore objects data.
             */
            dataPoolName: string;
            /**
             * Sets given placement as default. Only one placement in the list can be marked as default.
             * Default is false.
             */
            default: boolean;
            /**
             * The metadata pool used to store ObjectStore bucket index.
             */
            metadataPoolName: string;
            /**
             * Pool placement name. Name can be arbitrary. Placement with name "default" will be used as default.
             */
            name: string;
            /**
             * StorageClasses can be selected by user to override dataPoolName during object creation.
             * Each placement has default STANDARD StorageClass pointing to dataPoolName.
             * This list allows defining additional StorageClasses on top of default STANDARD storage class.
             */
            storageClasses: outputs.ceph.v1.CephObjectZoneSpecSharedPoolsPoolPlacementsStorageClassesPatch[];
        }

        export interface CephObjectZoneSpecSharedPoolsPoolPlacementsStorageClasses {
            /**
             * DataPoolName is the data pool used to store ObjectStore objects data.
             */
            dataPoolName: string;
            /**
             * Name is the StorageClass name. Ceph allows arbitrary name for StorageClasses,
             * however most clients/libs insist on AWS names so it is recommended to use
             * one of the valid x-amz-storage-class values for better compatibility:
             * REDUCED_REDUNDANCY | STANDARD_IA | ONEZONE_IA | INTELLIGENT_TIERING | GLACIER | DEEP_ARCHIVE | OUTPOSTS | GLACIER_IR | SNOW | EXPRESS_ONEZONE
             * See AWS docs: https://aws.amazon.com/de/s3/storage-classes/
             */
            name: string;
        }

        export interface CephObjectZoneSpecSharedPoolsPoolPlacementsStorageClassesPatch {
            /**
             * DataPoolName is the data pool used to store ObjectStore objects data.
             */
            dataPoolName: string;
            /**
             * Name is the StorageClass name. Ceph allows arbitrary name for StorageClasses,
             * however most clients/libs insist on AWS names so it is recommended to use
             * one of the valid x-amz-storage-class values for better compatibility:
             * REDUCED_REDUNDANCY | STANDARD_IA | ONEZONE_IA | INTELLIGENT_TIERING | GLACIER | DEEP_ARCHIVE | OUTPOSTS | GLACIER_IR | SNOW | EXPRESS_ONEZONE
             * See AWS docs: https://aws.amazon.com/de/s3/storage-classes/
             */
            name: string;
        }

        /**
         * CephRBDMirror represents a Ceph RBD Mirror
         */
        export interface CephRBDMirror {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "ceph.rook.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CephRBDMirror";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.ceph.v1.CephRBDMirrorSpec;
            /**
             * Status represents the status of an object
             */
            status: {[key: string]: any};
        }

        /**
         * RBDMirroringSpec represents the specification of an RBD mirror daemon
         */
        export interface CephRBDMirrorSpec {
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * Count represents the number of rbd mirror instance to run
             */
            count: number;
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            peers: outputs.ceph.v1.CephRBDMirrorSpecPeers;
            placement: {[key: string]: any};
            /**
             * PriorityClassName sets priority class on the rbd mirror pods
             */
            priorityClassName: string;
            /**
             * The resource requirements for the rbd mirror pods
             */
            resources: {[key: string]: any};
        }

        /**
         * RBDMirroringSpec represents the specification of an RBD mirror daemon
         */
        export interface CephRBDMirrorSpecPatch {
            /**
             * The annotations-related configuration to add/set on each Pod related object.
             */
            annotations: {[key: string]: any};
            /**
             * Count represents the number of rbd mirror instance to run
             */
            count: number;
            /**
             * The labels-related configuration to add/set on each Pod related object.
             */
            labels: {[key: string]: any};
            peers: outputs.ceph.v1.CephRBDMirrorSpecPeersPatch;
            placement: {[key: string]: any};
            /**
             * PriorityClassName sets priority class on the rbd mirror pods
             */
            priorityClassName: string;
            /**
             * The resource requirements for the rbd mirror pods
             */
            resources: {[key: string]: any};
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephRBDMirrorSpecPeers {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

        /**
         * Peers represents the peers spec
         */
        export interface CephRBDMirrorSpecPeersPatch {
            /**
             * SecretNames represents the Kubernetes Secret names to add rbd-mirror or cephfs-mirror peers
             */
            secretNames: string[];
        }

    }
}

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue: string;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount: number;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {[key: string]: string};
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {[key: string]: string};
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntry[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReference[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {[key: string]: string};
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {[key: string]: string};
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntryPatch[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReferencePatch[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

    }
}

export namespace pulumi {
    export namespace v1 {
        /**
         * Program is the schema for the inline YAML program API.
         */
        export interface Program {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "pulumi.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Program";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            program: outputs.pulumi.v1.ProgramProgram;
            status: outputs.pulumi.v1.ProgramStatus;
        }

        export interface ProgramProgram {
            /**
             * configuration specifies the Pulumi config inputs to the deployment.
             * Either type or default is required.
             */
            configuration: {[key: string]: {[key: string]: string}};
            /**
             * outputs specifies the Pulumi stack outputs of the program and how they are computed from the resources.
             */
            outputs: {[key: string]: {[key: string]: any}};
            /**
             * resources declares the Pulumi resources that will be deployed and managed by the program.
             */
            resources: {[key: string]: {[key: string]: string}};
            /**
             * variables specifies intermediate values of the program; the values of variables are
             * expressions that can be re-used.
             */
            variables: {[key: string]: {[key: string]: any}};
        }

        export interface ProgramProgramPatch {
            /**
             * configuration specifies the Pulumi config inputs to the deployment.
             * Either type or default is required.
             */
            configuration: {[key: string]: {[key: string]: string}};
            /**
             * outputs specifies the Pulumi stack outputs of the program and how they are computed from the resources.
             */
            outputs: {[key: string]: {[key: string]: any}};
            /**
             * resources declares the Pulumi resources that will be deployed and managed by the program.
             */
            resources: {[key: string]: {[key: string]: string}};
            /**
             * variables specifies intermediate values of the program; the values of variables are
             * expressions that can be re-used.
             */
            variables: {[key: string]: {[key: string]: any}};
        }

        /**
         * ProgramStatus defines the observed state of Program.
         */
        export interface ProgramStatus {
            artifact: outputs.pulumi.v1.ProgramStatusArtifact;
            /**
             * ObservedGeneration is the last observed generation of the Program
             * object.
             */
            observedGeneration: number;
        }

        /**
         * Artifact represents the last successful artifact generated by program reconciliation.
         */
        export interface ProgramStatusArtifact {
            /**
             * Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
             */
            digest: string;
            /**
             * LastUpdateTime is the timestamp corresponding to the last update of the
             * Artifact.
             */
            lastUpdateTime: string;
            /**
             * Metadata holds upstream information such as OCI annotations.
             */
            metadata: {[key: string]: string};
            /**
             * Path is the relative file path of the Artifact. It can be used to locate
             * the file in the root of the Artifact storage on the local file system of
             * the controller managing the Source.
             */
            path: string;
            /**
             * Revision is a human-readable identifier traceable in the origin source
             * system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
             */
            revision: string;
            /**
             * Size is the number of bytes in the file.
             */
            size: number;
            /**
             * URL is the HTTP address of the Artifact as exposed by the controller
             * managing the Source. It can be used to retrieve the Artifact for
             * consumption, e.g. by another controller applying the Artifact contents.
             */
            url: string;
        }

        /**
         * Artifact represents the last successful artifact generated by program reconciliation.
         */
        export interface ProgramStatusArtifactPatch {
            /**
             * Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
             */
            digest: string;
            /**
             * LastUpdateTime is the timestamp corresponding to the last update of the
             * Artifact.
             */
            lastUpdateTime: string;
            /**
             * Metadata holds upstream information such as OCI annotations.
             */
            metadata: {[key: string]: string};
            /**
             * Path is the relative file path of the Artifact. It can be used to locate
             * the file in the root of the Artifact storage on the local file system of
             * the controller managing the Source.
             */
            path: string;
            /**
             * Revision is a human-readable identifier traceable in the origin source
             * system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
             */
            revision: string;
            /**
             * Size is the number of bytes in the file.
             */
            size: number;
            /**
             * URL is the HTTP address of the Artifact as exposed by the controller
             * managing the Source. It can be used to retrieve the Artifact for
             * consumption, e.g. by another controller applying the Artifact contents.
             */
            url: string;
        }

        /**
         * ProgramStatus defines the observed state of Program.
         */
        export interface ProgramStatusPatch {
            artifact: outputs.pulumi.v1.ProgramStatusArtifactPatch;
            /**
             * ObservedGeneration is the last observed generation of the Program
             * object.
             */
            observedGeneration: number;
        }

        /**
         * Stack is the Schema for the stacks API
         */
        export interface Stack {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "pulumi.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Stack";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.pulumi.v1.StackSpec;
            status: outputs.pulumi.v1.StackStatus;
        }

        /**
         * StackSpec defines the desired state of Pulumi Stack being managed by this operator.
         */
        export interface StackSpec {
            /**
             * (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
             * Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
             */
            accessTokenSecret: string;
            /**
             * (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/>
             * Examples:<br/>
             *   - Pulumi Service:              "https://app.pulumi.com" (default)<br/>
             *   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/>
             *   - Local:                       "file://./einstein" <br/>
             *   - AWS:                         "s3://<my-pulumi-state-bucket>" <br/>
             *   - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/>
             *   - GCP:                         "gs://<my-pulumi-state-bucket>" <br/>
             * See: https://www.pulumi.com/docs/intro/concepts/state/
             */
            backend: string;
            /**
             * (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This
             * is mutually exclusive with the Commit setting. Either value needs to be specified.
             * When specified, the operator will periodically poll to check if the branch has any new commits.
             * The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
             */
            branch: string;
            /**
             * (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This
             * is mutually exclusive with the Branch setting. Either value needs to be specified.
             */
            commit: string;
            /**
             * (optional) Config is the configuration for this stack, which can be optionally specified inline. If this
             * is omitted, configuration is assumed to be checked in and taken from the source repository.
             */
            config: {[key: string]: string};
            /**
             * (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying
             * to update stacks even if the revision of the source matches. This might be useful in
             * environments where Pulumi programs have dynamic elements for example, calls to internal APIs
             * where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a
             * particular revision is successfully run, the operator will not attempt to rerun the program
             * at that revision again.
             */
            continueResyncOnCommitMatch: boolean;
            /**
             * (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
             */
            destroyOnFinalize: boolean;
            /**
             * (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where
             * the variables' values should be loaded from (one of literal, environment variable, file on the
             * filesystem, or Kubernetes Secret) as values.
             */
            envRefs: {[key: string]: {[key: string]: string}};
            /**
             * (optional) SecretEnvs is an optional array of Secret names containing environment variables to set.
             * Deprecated: use EnvRefs instead.
             */
            envSecrets: string[];
            /**
             * (optional) Environment specifies the Pulumi ESC environment(s) to use for this stack.
             */
            environment: string[];
            /**
             * (optional) Envs is an optional array of config maps containing environment variables to set.
             * Deprecated: use EnvRefs instead.
             */
            envs: string[];
            /**
             * (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have
             * changes during a refresh before the update is run.
             * This could occur, for example, is a resource's state is changing outside of Pulumi
             * (e.g., metadata, timestamps).
             */
            expectNoRefreshChanges: boolean;
            fluxSource: outputs.pulumi.v1.StackSpecFluxSource;
            gitAuth: outputs.pulumi.v1.StackSpecGitAuth;
            /**
             * (optional) GitAuthSecret is the the name of a Secret containing an
             * authentication option for the git repository.
             * There are 3 different authentication options:
             *   * Personal access token
             *   * SSH private key (and it's optional password)
             *   * Basic auth username and password
             * Only one authentication mode will be considered if more than one option is specified,
             * with ssh private key/password preferred first, then personal access token, and finally
             * basic auth credentials.
             * Deprecated. Use GitAuth instead.
             */
            gitAuthSecret: string;
            /**
             * (optional) Prerequisites is a list of references to other stacks, each with a constraint on
             * how long ago it must have succeeded. This can be used to make sure e.g., state is
             * re-evaluated before running a stack that depends on it.
             */
            prerequisites: outputs.pulumi.v1.StackSpecPrerequisites[];
            programRef: outputs.pulumi.v1.StackSpecProgramRef;
            /**
             * ProjectRepo is the git source control repository from which we fetch the project code and configuration.
             */
            projectRepo: string;
            /**
             * (optional) Refresh can be set to true to refresh the stack before it is updated.
             */
            refresh: boolean;
            /**
             * (optional) RepoDir is the directory to work from in the project's source repository
             * where Pulumi.yaml is located. It is used in case Pulumi.yaml is not
             * in the project source root.
             */
            repoDir: string;
            /**
             * (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at
             * the specified frequency even if no changes to the custom resource are detected.
             * If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency.
             * The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
             */
            resyncFrequencySeconds: number;
            /**
             * (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop
             * in the event that the update hits a HTTP 409 conflict due to
             * another update in progress.
             * This is only recommended if you are sure that the stack updates are
             * idempotent, and if you are willing to accept retry loops until
             * all spawned retries succeed. This will also create a more populated,
             * and randomized activity timeline for the stack in the Pulumi Service.
             */
            retryOnUpdateConflict: boolean;
            /**
             * (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this
             * is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             * Deprecated: use SecretRefs instead.
             */
            secrets: {[key: string]: string};
            /**
             * (optional) SecretsProvider is used to initialize a Stack with alternative encryption.
             * Examples:
             *   - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"
             *   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"
             *   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY"
             *   -
             * See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
             */
            secretsProvider: string;
            /**
             * (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef.
             * If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             */
            secretsRef: {[key: string]: {[key: string]: string}};
            /**
             * ServiceAccountName is the Kubernetes service account identity of the stack's workspace.
             */
            serviceAccountName: string;
            /**
             * Shallow controls whether the workspace uses a shallow checkout or
             * whether all history is cloned.
             */
            shallow: boolean;
            /**
             * Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
             */
            stack: string;
            /**
             * TargetDependents indicates that dependent resources should be updated as well, when using Targets.
             */
            targetDependents: boolean;
            /**
             * (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only
             * resources mentioned will be updated.
             */
            targets: string[];
            updateTemplate: outputs.pulumi.v1.StackSpecUpdateTemplate;
            /**
             * (optional) UseLocalStackOnly can be set to true to prevent the operator from
             * creating stacks that do not exist in the tracking git repo.
             * The default behavior is to create a stack if it doesn't exist.
             */
            useLocalStackOnly: boolean;
            /**
             * WorkspaceReclaimPolicy specifies whether the workspace should be deleted or retained after the Stack is successfully updated.
             * The default behavior is to retain the workspace. Valid values are one of "Retain" or "Delete".
             */
            workspaceReclaimPolicy: string;
            workspaceTemplate: outputs.pulumi.v1.StackSpecWorkspaceTemplate;
        }

        /**
         * FluxSource specifies how to fetch source code from a Flux source object.
         */
        export interface StackSpecFluxSource {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of
             * interest, within the fetched source.
             */
            dir: string;
            sourceRef: outputs.pulumi.v1.StackSpecFluxSourceSourceRef;
        }

        /**
         * FluxSource specifies how to fetch source code from a Flux source object.
         */
        export interface StackSpecFluxSourcePatch {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of
             * interest, within the fetched source.
             */
            dir: string;
            sourceRef: outputs.pulumi.v1.StackSpecFluxSourceSourceRefPatch;
        }

        export interface StackSpecFluxSourceSourceRef {
            apiVersion: string;
            kind: string;
            name: string;
        }

        export interface StackSpecFluxSourceSourceRefPatch {
            apiVersion: string;
            kind: string;
            name: string;
        }

        /**
         * (optional) GitAuth allows configuring git authentication options
         * There are 3 different authentication options:
         *   * SSH private key (and its optional password)
         *   * Personal access token
         *   * Basic auth username and password
         * Only one authentication mode will be considered if more than one option is specified,
         * with ssh private key/password preferred first, then personal access token, and finally
         * basic auth credentials.
         */
        export interface StackSpecGitAuth {
            accessToken: outputs.pulumi.v1.StackSpecGitAuthAccessToken;
            basicAuth: outputs.pulumi.v1.StackSpecGitAuthBasicAuth;
            sshAuth: outputs.pulumi.v1.StackSpecGitAuthSshAuth;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthAccessToken {
            env: outputs.pulumi.v1.StackSpecGitAuthAccessTokenEnv;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthAccessTokenFilesystem;
            literal: outputs.pulumi.v1.StackSpecGitAuthAccessTokenLiteral;
            secret: outputs.pulumi.v1.StackSpecGitAuthAccessTokenSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthAccessTokenEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthAccessTokenEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthAccessTokenFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthAccessTokenFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthAccessTokenLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthAccessTokenLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthAccessTokenPatch {
            env: outputs.pulumi.v1.StackSpecGitAuthAccessTokenEnvPatch;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthAccessTokenFilesystemPatch;
            literal: outputs.pulumi.v1.StackSpecGitAuthAccessTokenLiteralPatch;
            secret: outputs.pulumi.v1.StackSpecGitAuthAccessTokenSecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthAccessTokenSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthAccessTokenSecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * BasicAuth configures git authentication through basic auth —
         * i.e. username and password. Both UserName and Password are required.
         */
        export interface StackSpecGitAuthBasicAuth {
            password: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPassword;
            userName: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserName;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthPassword {
            env: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordEnv;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordFilesystem;
            literal: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordLiteral;
            secret: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthPasswordEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthPasswordEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthPasswordFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthPasswordFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthPasswordLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthPasswordLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthPasswordPatch {
            env: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordEnvPatch;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordFilesystemPatch;
            literal: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordLiteralPatch;
            secret: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordSecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthPasswordSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthPasswordSecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * BasicAuth configures git authentication through basic auth —
         * i.e. username and password. Both UserName and Password are required.
         */
        export interface StackSpecGitAuthBasicAuthPatch {
            password: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPasswordPatch;
            userName: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNamePatch;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthUserName {
            env: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNameEnv;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNameFilesystem;
            literal: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNameLiteral;
            secret: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNameSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthUserNameEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthUserNameEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthUserNameFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthUserNameFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthUserNameLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthUserNameLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthUserNamePatch {
            env: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNameEnvPatch;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNameFilesystemPatch;
            literal: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNameLiteralPatch;
            secret: outputs.pulumi.v1.StackSpecGitAuthBasicAuthUserNameSecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthUserNameSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthUserNameSecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * (optional) GitAuth allows configuring git authentication options
         * There are 3 different authentication options:
         *   * SSH private key (and its optional password)
         *   * Personal access token
         *   * Basic auth username and password
         * Only one authentication mode will be considered if more than one option is specified,
         * with ssh private key/password preferred first, then personal access token, and finally
         * basic auth credentials.
         */
        export interface StackSpecGitAuthPatch {
            accessToken: outputs.pulumi.v1.StackSpecGitAuthAccessTokenPatch;
            basicAuth: outputs.pulumi.v1.StackSpecGitAuthBasicAuthPatch;
            sshAuth: outputs.pulumi.v1.StackSpecGitAuthSshAuthPatch;
        }

        /**
         * SSHAuth configures ssh-based auth for git authentication.
         * SSHPrivateKey is required but password is optional.
         */
        export interface StackSpecGitAuthSshAuth {
            password: outputs.pulumi.v1.StackSpecGitAuthSshAuthPassword;
            sshPrivateKey: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKey;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthPassword {
            env: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordEnv;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordFilesystem;
            literal: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordLiteral;
            secret: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthPasswordEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthPasswordEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthPasswordFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthPasswordFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthPasswordLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthPasswordLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthPasswordPatch {
            env: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordEnvPatch;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordFilesystemPatch;
            literal: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordLiteralPatch;
            secret: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordSecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthPasswordSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthPasswordSecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SSHAuth configures ssh-based auth for git authentication.
         * SSHPrivateKey is required but password is optional.
         */
        export interface StackSpecGitAuthSshAuthPatch {
            password: outputs.pulumi.v1.StackSpecGitAuthSshAuthPasswordPatch;
            sshPrivateKey: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeyPatch;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKey {
            env: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeyEnv;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeyFilesystem;
            literal: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeyLiteral;
            secret: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeySecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyPatch {
            env: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeyEnvPatch;
            filesystem: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeyFilesystemPatch;
            literal: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeyLiteralPatch;
            secret: outputs.pulumi.v1.StackSpecGitAuthSshAuthSshPrivateKeySecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeySecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeySecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * StackSpec defines the desired state of Pulumi Stack being managed by this operator.
         */
        export interface StackSpecPatch {
            /**
             * (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
             * Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
             */
            accessTokenSecret: string;
            /**
             * (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/>
             * Examples:<br/>
             *   - Pulumi Service:              "https://app.pulumi.com" (default)<br/>
             *   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/>
             *   - Local:                       "file://./einstein" <br/>
             *   - AWS:                         "s3://<my-pulumi-state-bucket>" <br/>
             *   - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/>
             *   - GCP:                         "gs://<my-pulumi-state-bucket>" <br/>
             * See: https://www.pulumi.com/docs/intro/concepts/state/
             */
            backend: string;
            /**
             * (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This
             * is mutually exclusive with the Commit setting. Either value needs to be specified.
             * When specified, the operator will periodically poll to check if the branch has any new commits.
             * The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
             */
            branch: string;
            /**
             * (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This
             * is mutually exclusive with the Branch setting. Either value needs to be specified.
             */
            commit: string;
            /**
             * (optional) Config is the configuration for this stack, which can be optionally specified inline. If this
             * is omitted, configuration is assumed to be checked in and taken from the source repository.
             */
            config: {[key: string]: string};
            /**
             * (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying
             * to update stacks even if the revision of the source matches. This might be useful in
             * environments where Pulumi programs have dynamic elements for example, calls to internal APIs
             * where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a
             * particular revision is successfully run, the operator will not attempt to rerun the program
             * at that revision again.
             */
            continueResyncOnCommitMatch: boolean;
            /**
             * (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
             */
            destroyOnFinalize: boolean;
            /**
             * (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where
             * the variables' values should be loaded from (one of literal, environment variable, file on the
             * filesystem, or Kubernetes Secret) as values.
             */
            envRefs: {[key: string]: {[key: string]: string}};
            /**
             * (optional) SecretEnvs is an optional array of Secret names containing environment variables to set.
             * Deprecated: use EnvRefs instead.
             */
            envSecrets: string[];
            /**
             * (optional) Environment specifies the Pulumi ESC environment(s) to use for this stack.
             */
            environment: string[];
            /**
             * (optional) Envs is an optional array of config maps containing environment variables to set.
             * Deprecated: use EnvRefs instead.
             */
            envs: string[];
            /**
             * (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have
             * changes during a refresh before the update is run.
             * This could occur, for example, is a resource's state is changing outside of Pulumi
             * (e.g., metadata, timestamps).
             */
            expectNoRefreshChanges: boolean;
            fluxSource: outputs.pulumi.v1.StackSpecFluxSourcePatch;
            gitAuth: outputs.pulumi.v1.StackSpecGitAuthPatch;
            /**
             * (optional) GitAuthSecret is the the name of a Secret containing an
             * authentication option for the git repository.
             * There are 3 different authentication options:
             *   * Personal access token
             *   * SSH private key (and it's optional password)
             *   * Basic auth username and password
             * Only one authentication mode will be considered if more than one option is specified,
             * with ssh private key/password preferred first, then personal access token, and finally
             * basic auth credentials.
             * Deprecated. Use GitAuth instead.
             */
            gitAuthSecret: string;
            /**
             * (optional) Prerequisites is a list of references to other stacks, each with a constraint on
             * how long ago it must have succeeded. This can be used to make sure e.g., state is
             * re-evaluated before running a stack that depends on it.
             */
            prerequisites: outputs.pulumi.v1.StackSpecPrerequisitesPatch[];
            programRef: outputs.pulumi.v1.StackSpecProgramRefPatch;
            /**
             * ProjectRepo is the git source control repository from which we fetch the project code and configuration.
             */
            projectRepo: string;
            /**
             * (optional) Refresh can be set to true to refresh the stack before it is updated.
             */
            refresh: boolean;
            /**
             * (optional) RepoDir is the directory to work from in the project's source repository
             * where Pulumi.yaml is located. It is used in case Pulumi.yaml is not
             * in the project source root.
             */
            repoDir: string;
            /**
             * (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at
             * the specified frequency even if no changes to the custom resource are detected.
             * If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency.
             * The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
             */
            resyncFrequencySeconds: number;
            /**
             * (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop
             * in the event that the update hits a HTTP 409 conflict due to
             * another update in progress.
             * This is only recommended if you are sure that the stack updates are
             * idempotent, and if you are willing to accept retry loops until
             * all spawned retries succeed. This will also create a more populated,
             * and randomized activity timeline for the stack in the Pulumi Service.
             */
            retryOnUpdateConflict: boolean;
            /**
             * (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this
             * is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             * Deprecated: use SecretRefs instead.
             */
            secrets: {[key: string]: string};
            /**
             * (optional) SecretsProvider is used to initialize a Stack with alternative encryption.
             * Examples:
             *   - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"
             *   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"
             *   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY"
             *   -
             * See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
             */
            secretsProvider: string;
            /**
             * (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef.
             * If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             */
            secretsRef: {[key: string]: {[key: string]: string}};
            /**
             * ServiceAccountName is the Kubernetes service account identity of the stack's workspace.
             */
            serviceAccountName: string;
            /**
             * Shallow controls whether the workspace uses a shallow checkout or
             * whether all history is cloned.
             */
            shallow: boolean;
            /**
             * Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
             */
            stack: string;
            /**
             * TargetDependents indicates that dependent resources should be updated as well, when using Targets.
             */
            targetDependents: boolean;
            /**
             * (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only
             * resources mentioned will be updated.
             */
            targets: string[];
            updateTemplate: outputs.pulumi.v1.StackSpecUpdateTemplatePatch;
            /**
             * (optional) UseLocalStackOnly can be set to true to prevent the operator from
             * creating stacks that do not exist in the tracking git repo.
             * The default behavior is to create a stack if it doesn't exist.
             */
            useLocalStackOnly: boolean;
            /**
             * WorkspaceReclaimPolicy specifies whether the workspace should be deleted or retained after the Stack is successfully updated.
             * The default behavior is to retain the workspace. Valid values are one of "Retain" or "Delete".
             */
            workspaceReclaimPolicy: string;
            workspaceTemplate: outputs.pulumi.v1.StackSpecWorkspaceTemplatePatch;
        }

        /**
         * PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be
         * considered satisfied.
         */
        export interface StackSpecPrerequisites {
            /**
             * Name is the name of the Stack resource that is a prerequisite.
             */
            name: string;
            requirement: outputs.pulumi.v1.StackSpecPrerequisitesRequirement;
        }

        /**
         * PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be
         * considered satisfied.
         */
        export interface StackSpecPrerequisitesPatch {
            /**
             * Name is the name of the Stack resource that is a prerequisite.
             */
            name: string;
            requirement: outputs.pulumi.v1.StackSpecPrerequisitesRequirementPatch;
        }

        /**
         * Requirement gives specific requirements for the prerequisite; the base requirement is that
         * the referenced stack is in a successful state.
         */
        export interface StackSpecPrerequisitesRequirement {
            /**
             * SucceededWithinDuration gives a duration within which the prerequisite must have reached a
             * succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in
             * the last hour". Fields (should there ever be more than one) are not intended to be mutually
             * exclusive.
             */
            succeededWithinDuration: string;
        }

        /**
         * Requirement gives specific requirements for the prerequisite; the base requirement is that
         * the referenced stack is in a successful state.
         */
        export interface StackSpecPrerequisitesRequirementPatch {
            /**
             * SucceededWithinDuration gives a duration within which the prerequisite must have reached a
             * succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in
             * the last hour". Fields (should there ever be more than one) are not intended to be mutually
             * exclusive.
             */
            succeededWithinDuration: string;
        }

        /**
         * ProgramRef refers to a Program object, to be used as the source for the stack.
         */
        export interface StackSpecProgramRef {
            name: string;
        }

        /**
         * ProgramRef refers to a Program object, to be used as the source for the stack.
         */
        export interface StackSpecProgramRefPatch {
            name: string;
        }

        /**
         * UpdateTemplate customizes the Updates generated for this Stack. It
         * is applied as a strategic merge patch on top of the underlying
         * Update. Use this to customize the Updates's metadata, retention policy, etc.
         */
        export interface StackSpecUpdateTemplate {
            apiVersion: string;
            kind: string;
            metadata: outputs.pulumi.v1.StackSpecUpdateTemplateMetadata;
            spec: outputs.pulumi.v1.StackSpecUpdateTemplateSpec;
            status: outputs.pulumi.v1.StackSpecUpdateTemplateStatus;
        }

        /**
         * ObjectMetaApplyConfiguration represents a declarative configuration of the ObjectMeta type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateMetadata {
            annotations: {[key: string]: string};
            creationTimestamp: string;
            deletionGracePeriodSeconds: number;
            deletionTimestamp: string;
            finalizers: string[];
            generateName: string;
            generation: number;
            labels: {[key: string]: string};
            name: string;
            namespace: string;
            ownerReferences: outputs.pulumi.v1.StackSpecUpdateTemplateMetadataOwnerReferences[];
            resourceVersion: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * OwnerReferenceApplyConfiguration represents a declarative configuration of the OwnerReference type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateMetadataOwnerReferences {
            apiVersion: string;
            blockOwnerDeletion: boolean;
            controller: boolean;
            kind: string;
            name: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * OwnerReferenceApplyConfiguration represents a declarative configuration of the OwnerReference type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateMetadataOwnerReferencesPatch {
            apiVersion: string;
            blockOwnerDeletion: boolean;
            controller: boolean;
            kind: string;
            name: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * ObjectMetaApplyConfiguration represents a declarative configuration of the ObjectMeta type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateMetadataPatch {
            annotations: {[key: string]: string};
            creationTimestamp: string;
            deletionGracePeriodSeconds: number;
            deletionTimestamp: string;
            finalizers: string[];
            generateName: string;
            generation: number;
            labels: {[key: string]: string};
            name: string;
            namespace: string;
            ownerReferences: outputs.pulumi.v1.StackSpecUpdateTemplateMetadataOwnerReferencesPatch[];
            resourceVersion: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * UpdateTemplate customizes the Updates generated for this Stack. It
         * is applied as a strategic merge patch on top of the underlying
         * Update. Use this to customize the Updates's metadata, retention policy, etc.
         */
        export interface StackSpecUpdateTemplatePatch {
            apiVersion: string;
            kind: string;
            metadata: outputs.pulumi.v1.StackSpecUpdateTemplateMetadataPatch;
            spec: outputs.pulumi.v1.StackSpecUpdateTemplateSpecPatch;
            status: outputs.pulumi.v1.StackSpecUpdateTemplateStatusPatch;
        }

        /**
         * UpdateSpecApplyConfiguration represents a declarative configuration of the UpdateSpec type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateSpec {
            continueOnError: boolean;
            expectNoChanges: boolean;
            message: string;
            parallel: number;
            refresh: boolean;
            remove: boolean;
            replace: string[];
            stackName: string;
            target: string[];
            targetDependents: boolean;
            ttlAfterCompleted: string;
            type: string;
            workspaceName: string;
        }

        /**
         * UpdateSpecApplyConfiguration represents a declarative configuration of the UpdateSpec type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateSpecPatch {
            continueOnError: boolean;
            expectNoChanges: boolean;
            message: string;
            parallel: number;
            refresh: boolean;
            remove: boolean;
            replace: string[];
            stackName: string;
            target: string[];
            targetDependents: boolean;
            ttlAfterCompleted: string;
            type: string;
            workspaceName: string;
        }

        /**
         * UpdateStatusApplyConfiguration represents a declarative configuration of the UpdateStatus type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateStatus {
            conditions: outputs.pulumi.v1.StackSpecUpdateTemplateStatusConditions[];
            endTime: string;
            message: string;
            observedGeneration: number;
            outputs: string;
            permalink: string;
            startTime: string;
        }

        /**
         * ConditionApplyConfiguration represents a declarative configuration of the Condition type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateStatusConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration: number;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * ConditionApplyConfiguration represents a declarative configuration of the Condition type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateStatusConditionsPatch {
            lastTransitionTime: string;
            message: string;
            observedGeneration: number;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * UpdateStatusApplyConfiguration represents a declarative configuration of the UpdateStatus type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateStatusPatch {
            conditions: outputs.pulumi.v1.StackSpecUpdateTemplateStatusConditionsPatch[];
            endTime: string;
            message: string;
            observedGeneration: number;
            outputs: string;
            permalink: string;
            startTime: string;
        }

        /**
         * WorkspaceTemplate customizes the Workspace generated for this Stack. It
         * is applied as a strategic merge patch on top of the underlying
         * Workspace. Use this to customize the Workspace's metadata, image, resources,
         * volumes, etc.
         */
        export interface StackSpecWorkspaceTemplate {
            apiVersion: string;
            kind: string;
            metadata: outputs.pulumi.v1.StackSpecWorkspaceTemplateMetadata;
            spec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpec;
            status: outputs.pulumi.v1.StackSpecWorkspaceTemplateStatus;
        }

        /**
         * ObjectMetaApplyConfiguration represents a declarative configuration of the ObjectMeta type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateMetadata {
            annotations: {[key: string]: string};
            creationTimestamp: string;
            deletionGracePeriodSeconds: number;
            deletionTimestamp: string;
            finalizers: string[];
            generateName: string;
            generation: number;
            labels: {[key: string]: string};
            name: string;
            namespace: string;
            ownerReferences: outputs.pulumi.v1.StackSpecWorkspaceTemplateMetadataOwnerReferences[];
            resourceVersion: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * OwnerReferenceApplyConfiguration represents a declarative configuration of the OwnerReference type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateMetadataOwnerReferences {
            apiVersion: string;
            blockOwnerDeletion: boolean;
            controller: boolean;
            kind: string;
            name: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * OwnerReferenceApplyConfiguration represents a declarative configuration of the OwnerReference type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateMetadataOwnerReferencesPatch {
            apiVersion: string;
            blockOwnerDeletion: boolean;
            controller: boolean;
            kind: string;
            name: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * ObjectMetaApplyConfiguration represents a declarative configuration of the ObjectMeta type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateMetadataPatch {
            annotations: {[key: string]: string};
            creationTimestamp: string;
            deletionGracePeriodSeconds: number;
            deletionTimestamp: string;
            finalizers: string[];
            generateName: string;
            generation: number;
            labels: {[key: string]: string};
            name: string;
            namespace: string;
            ownerReferences: outputs.pulumi.v1.StackSpecWorkspaceTemplateMetadataOwnerReferencesPatch[];
            resourceVersion: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * WorkspaceTemplate customizes the Workspace generated for this Stack. It
         * is applied as a strategic merge patch on top of the underlying
         * Workspace. Use this to customize the Workspace's metadata, image, resources,
         * volumes, etc.
         */
        export interface StackSpecWorkspaceTemplatePatch {
            apiVersion: string;
            kind: string;
            metadata: outputs.pulumi.v1.StackSpecWorkspaceTemplateMetadataPatch;
            spec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPatch;
            status: outputs.pulumi.v1.StackSpecWorkspaceTemplateStatusPatch;
        }

        /**
         * WorkspaceSpecApplyConfiguration represents a declarative configuration of the WorkspaceSpec type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpec {
            env: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnv[];
            envFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvFrom[];
            flux: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecFlux;
            git: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGit;
            image: string;
            /**
             * PullPolicy describes a policy for if/when to pull a container image
             */
            imagePullPolicy: string;
            local: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecLocal;
            podTemplate: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplate;
            pulumiLogLevel: number;
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecResources;
            /**
             * SecurityProfile declares the security profile of the workspace, either baseline or restricted.
             */
            securityProfile: string;
            serviceAccountName: string;
            stacks: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecStacks[];
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFrom {
            configMapRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromPatch {
            configMapRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFrom {
            configMapKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromFieldRef;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromPatch {
            configMapKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * FluxSourceApplyConfiguration represents a declarative configuration of the FluxSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecFlux {
            digest: string;
            dir: string;
            url: string;
        }

        /**
         * FluxSourceApplyConfiguration represents a declarative configuration of the FluxSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecFluxPatch {
            digest: string;
            dir: string;
            url: string;
        }

        /**
         * GitSourceApplyConfiguration represents a declarative configuration of the GitSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecGit {
            auth: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuth;
            dir: string;
            ref: string;
            shallow: boolean;
            url: string;
        }

        /**
         * GitAuthApplyConfiguration represents a declarative configuration of the GitAuth type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuth {
            password: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthPassword;
            sshPrivateKey: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthSshPrivateKey;
            token: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthToken;
            username: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthUsername;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthPasswordPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * GitAuthApplyConfiguration represents a declarative configuration of the GitAuth type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthPatch {
            password: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthPasswordPatch;
            sshPrivateKey: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthSshPrivateKeyPatch;
            token: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthTokenPatch;
            username: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthUsernamePatch;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthSshPrivateKey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthSshPrivateKeyPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthToken {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthTokenPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthUsernamePatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * GitSourceApplyConfiguration represents a declarative configuration of the GitSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecGitPatch {
            auth: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitAuthPatch;
            dir: string;
            ref: string;
            shallow: boolean;
            url: string;
        }

        /**
         * LocalSourceApplyConfiguration represents a declarative configuration of the LocalSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecLocal {
            dir: string;
        }

        /**
         * LocalSourceApplyConfiguration represents a declarative configuration of the LocalSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecLocalPatch {
            dir: string;
        }

        /**
         * WorkspaceSpecApplyConfiguration represents a declarative configuration of the WorkspaceSpec type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPatch {
            env: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvPatch[];
            envFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecEnvFromPatch[];
            flux: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecFluxPatch;
            git: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecGitPatch;
            image: string;
            /**
             * PullPolicy describes a policy for if/when to pull a container image
             */
            imagePullPolicy: string;
            local: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecLocalPatch;
            podTemplate: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplatePatch;
            pulumiLogLevel: number;
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecResourcesPatch;
            /**
             * SecurityProfile declares the security profile of the workspace, either baseline or restricted.
             */
            securityProfile: string;
            serviceAccountName: string;
            stacks: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecStacksPatch[];
        }

        /**
         * EmbeddedPodTemplateSpecApplyConfiguration represents a declarative configuration of the EmbeddedPodTemplateSpec type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplate {
            metadata: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateMetadata;
            spec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpec;
        }

        /**
         * EmbeddedObjectMetaApplyConfiguration represents a declarative configuration of the EmbeddedObjectMeta type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateMetadata {
            annotations: {[key: string]: string};
            labels: {[key: string]: string};
        }

        /**
         * EmbeddedObjectMetaApplyConfiguration represents a declarative configuration of the EmbeddedObjectMeta type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateMetadataPatch {
            annotations: {[key: string]: string};
            labels: {[key: string]: string};
        }

        /**
         * EmbeddedPodTemplateSpecApplyConfiguration represents a declarative configuration of the EmbeddedPodTemplateSpec type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplatePatch {
            metadata: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateMetadataPatch;
            spec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecPatch;
        }

        /**
         * PodSpec is a description of a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to
             * StartTime before the system will actively try to mark it failed and kill associated containers.
             * Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod.
             * Containers cannot currently be added or removed.
             * There must be at least one container in a Pod.
             * Cannot be updated.
             */
            containers: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainers[];
            dnsConfig: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfig;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's
             * environment variables, matching the syntax of Docker links.
             * Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
             * pod to perform user-initiated actions such as debugging. This list cannot be specified when
             * creating a pod, and it cannot be modified by updating the pod spec. In order to add an
             * ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
             * file if specified.
             */
            hostAliases: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecHostAliases[];
            /**
             * Use the host's ipc namespace.
             * Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace.
             * If this option is set, the ports that will be used must be specified.
             * Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace.
             * Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace.
             * Optional: Default to true.
             * If set to true or not present, the pod will be run in the host user namespace, useful
             * for when the pod needs a feature only available to the host user namespace, such as
             * loading a kernel module with CAP_SYS_MODULE.
             * When set to false, a new userns is created for the pod. Setting false is useful for
             * mitigating container breakout vulnerabilities even allowing users to run their
             * containers as root without actually having root privileges on the host.
             * This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod
             * If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod.
             * Init containers are executed in order prior to containers being started. If any
             * init container fails, the pod is considered to have failed and is handled according
             * to its restartPolicy. The name for an init container or normal container must be
             * unique among all containers.
             * Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
             * The resourceRequirements of an init container are taken into account during scheduling
             * by finding the highest request/limit for each resource type, and then using the max of
             * of that value or the sum of the normal containers. Limits are applied to init containers
             * in a similar fashion.
             * Init containers cannot currently be added or removed.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainers[];
            /**
             * NodeName indicates in which node this pod is scheduled.
             * If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName.
             * Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod.
             * This field should not be used to express a desire for the pod to be scheduled on a specific node.
             * https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            os: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
             * This field will be autopopulated at admission time by the RuntimeClass admission controller. If
             * the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
             * The RuntimeClass admission controller will reject Pod create requests which have the overhead already
             * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
             * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {[key: string]: number | string};
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority.
             * One of Never, PreemptLowerPriority.
             * Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the
             * priority of the pod. When Priority Admission Controller is enabled, it
             * prevents users from setting this field. The admission controller populates
             * this field from PriorityClassName.
             * The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and
             * "system-cluster-critical" are two special keywords which indicate the
             * highest priorities with the former being the highest priority. Any other
             * name must be defined by creating a PriorityClass object with that name.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness.
             * A pod is ready when all its containers are ready AND
             * all conditions specified in the readiness gates have status equal to "True"
             * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated
             * and reserved before the Pod is allowed to start. The resources
             * will be made available to those containers which consume them
             * by name.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable.
             */
            resourceClaims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourceClaims[];
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResources;
            /**
             * Restart policy for all containers within the pod.
             * One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
             * Default to Always.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
             * to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
             * If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
             * empty definition that uses the default runtime handler.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler.
             * If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
             * If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
             * scheduler will not attempt to schedule the pod.
             *
             * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
             */
            schedulingGates: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSchedulingGates[];
            securityContext: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.
             * Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
             * In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
             * In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
             * If a pod does not have FQDN, this has no effect.
             * Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod.
             * When this is set containers will be able to view and signal processes from other containers
             * in the same pod, and the first process in each container will not be assigned PID 1.
             * HostPID and ShareProcessNamespace cannot both be set.
             * Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * If this value is nil, the default grace period will be used instead.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumes[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinity {
            nodeAffinity: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecycle;
            livenessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPorts[];
            readinessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResizePolicy[];
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContext;
            startupProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFrom {
            configMapRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromPatch {
            configMapRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecycle {
            postStart: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStart;
            preStop: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStop;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePatch {
            postStart: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartPatch;
            preStop: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStart {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartExec;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGet;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartSleep;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartPatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStop {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopExec;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGet;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopSleep;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopPatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePatch;
            livenessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPortsPatch[];
            readinessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResizePolicyPatch[];
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesPatch;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextPatch;
            startupProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextAppArmorProfile;
            capabilities: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches: string[];
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigOptions {
            /**
             * Name is this DNS resolver option's name.
             * Required.
             */
            name: string;
            /**
             * Value is this DNS resolver option's value.
             */
            value: string;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigOptionsPatch {
            /**
             * Name is this DNS resolver option's name.
             * Required.
             */
            name: string;
            /**
             * Value is this DNS resolver option's value.
             */
            value: string;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches: string[];
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for
         * user-initiated activities such as debugging. Ephemeral containers have no resource or
         * scheduling guarantees, and they will not be restarted when they exit or when a Pod is
         * removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
         * Pod to exceed its resource allocation.
         *
         * To add an ephemeral container, use the ephemeralcontainers subresource of an existing
         * Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint.
             * The image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL.
             * This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPorts[];
            readinessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResizePolicy[];
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResources;
            /**
             * Restart policy for the container to manage the restart behavior of each
             * container within a pod.
             * This may only be set for init containers. You cannot set this field on
             * ephemeral containers.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets.
             * The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
             * If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *
             * The container runtime must implement support for this feature. If the runtime does not
             * support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecycle {
            postStart: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStop;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleep;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleep;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for
         * user-initiated activities such as debugging. Ephemeral containers have no resource or
         * scheduling guarantees, and they will not be restarted when they exit or when a Pod is
         * removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
         * Pod to exceed its resource allocation.
         *
         * To add an ephemeral container, use the ephemeralcontainers subresource of an existing
         * Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL.
             * This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResizePolicyPatch[];
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesPatch;
            /**
             * Restart policy for the container to manage the restart behavior of each
             * container within a pod.
             * This may only be set for init containers. You cannot set this field on
             * ephemeral containers.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets.
             * The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
             * If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *
             * The container runtime must implement support for this feature. If the runtime does not
             * support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
         * already allocated to the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
         * already allocated to the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfile;
            capabilities: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
         * pod's hosts file.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
         * pod's hosts file.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecycle;
            livenessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPorts[];
            readinessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResizePolicy[];
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContext;
            startupProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFrom {
            configMapRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromPatch {
            configMapRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecycle {
            postStart: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStart;
            preStop: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStop;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePatch {
            postStart: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStart {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGet;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartSleep;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStop {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGet;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopSleep;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPortsPatch[];
            readinessProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResizePolicyPatch[];
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesPatch;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfile;
            capabilities: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbe {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbePatch {
            exec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Specifies the OS of the containers in the pod.
         * Some pod and container fields are restricted if this is set.
         *
         * If the OS field is set to linux, the following fields must be unset:
         * -securityContext.windowsOptions
         *
         * If the OS field is set to windows, following fields must be unset:
         * - spec.hostPID
         * - spec.hostIPC
         * - spec.hostUsers
         * - spec.securityContext.appArmorProfile
         * - spec.securityContext.seLinuxOptions
         * - spec.securityContext.seccompProfile
         * - spec.securityContext.fsGroup
         * - spec.securityContext.fsGroupChangePolicy
         * - spec.securityContext.sysctls
         * - spec.shareProcessNamespace
         * - spec.securityContext.runAsUser
         * - spec.securityContext.runAsGroup
         * - spec.securityContext.supplementalGroups
         * - spec.securityContext.supplementalGroupsPolicy
         * - spec.containers[*].securityContext.appArmorProfile
         * - spec.containers[*].securityContext.seLinuxOptions
         * - spec.containers[*].securityContext.seccompProfile
         * - spec.containers[*].securityContext.capabilities
         * - spec.containers[*].securityContext.readOnlyRootFilesystem
         * - spec.containers[*].securityContext.privileged
         * - spec.containers[*].securityContext.allowPrivilegeEscalation
         * - spec.containers[*].securityContext.procMount
         * - spec.containers[*].securityContext.runAsUser
         * - spec.containers[*].securityContext.runAsGroup
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows.
             * Additional value may be defined in future and can be one of:
             * https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
             * Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }

        /**
         * Specifies the OS of the containers in the pod.
         * Some pod and container fields are restricted if this is set.
         *
         * If the OS field is set to linux, the following fields must be unset:
         * -securityContext.windowsOptions
         *
         * If the OS field is set to windows, following fields must be unset:
         * - spec.hostPID
         * - spec.hostIPC
         * - spec.hostUsers
         * - spec.securityContext.appArmorProfile
         * - spec.securityContext.seLinuxOptions
         * - spec.securityContext.seccompProfile
         * - spec.securityContext.fsGroup
         * - spec.securityContext.fsGroupChangePolicy
         * - spec.securityContext.sysctls
         * - spec.shareProcessNamespace
         * - spec.securityContext.runAsUser
         * - spec.securityContext.runAsGroup
         * - spec.securityContext.supplementalGroups
         * - spec.securityContext.supplementalGroupsPolicy
         * - spec.containers[*].securityContext.appArmorProfile
         * - spec.containers[*].securityContext.seLinuxOptions
         * - spec.containers[*].securityContext.seccompProfile
         * - spec.containers[*].securityContext.capabilities
         * - spec.containers[*].securityContext.readOnlyRootFilesystem
         * - spec.containers[*].securityContext.privileged
         * - spec.containers[*].securityContext.allowPrivilegeEscalation
         * - spec.containers[*].securityContext.procMount
         * - spec.containers[*].securityContext.runAsUser
         * - spec.containers[*].securityContext.runAsGroup
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows.
             * Additional value may be defined in future and can be one of:
             * https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
             * Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }

        /**
         * PodSpec is a description of a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to
             * StartTime before the system will actively try to mark it failed and kill associated containers.
             * Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod.
             * Containers cannot currently be added or removed.
             * There must be at least one container in a Pod.
             * Cannot be updated.
             */
            containers: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPatch[];
            dnsConfig: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's
             * environment variables, matching the syntax of Docker links.
             * Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
             * pod to perform user-initiated actions such as debugging. This list cannot be specified when
             * creating a pod, and it cannot be modified by updating the pod spec. In order to add an
             * ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
             * file if specified.
             */
            hostAliases: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace.
             * Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace.
             * If this option is set, the ports that will be used must be specified.
             * Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace.
             * Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace.
             * Optional: Default to true.
             * If set to true or not present, the pod will be run in the host user namespace, useful
             * for when the pod needs a feature only available to the host user namespace, such as
             * loading a kernel module with CAP_SYS_MODULE.
             * When set to false, a new userns is created for the pod. Setting false is useful for
             * mitigating container breakout vulnerabilities even allowing users to run their
             * containers as root without actually having root privileges on the host.
             * This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod
             * If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod.
             * Init containers are executed in order prior to containers being started. If any
             * init container fails, the pod is considered to have failed and is handled according
             * to its restartPolicy. The name for an init container or normal container must be
             * unique among all containers.
             * Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
             * The resourceRequirements of an init container are taken into account during scheduling
             * by finding the highest request/limit for each resource type, and then using the max of
             * of that value or the sum of the normal containers. Limits are applied to init containers
             * in a similar fashion.
             * Init containers cannot currently be added or removed.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPatch[];
            /**
             * NodeName indicates in which node this pod is scheduled.
             * If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName.
             * Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod.
             * This field should not be used to express a desire for the pod to be scheduled on a specific node.
             * https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            os: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
             * This field will be autopopulated at admission time by the RuntimeClass admission controller. If
             * the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
             * The RuntimeClass admission controller will reject Pod create requests which have the overhead already
             * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
             * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {[key: string]: number | string};
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority.
             * One of Never, PreemptLowerPriority.
             * Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the
             * priority of the pod. When Priority Admission Controller is enabled, it
             * prevents users from setting this field. The admission controller populates
             * this field from PriorityClassName.
             * The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and
             * "system-cluster-critical" are two special keywords which indicate the
             * highest priorities with the former being the highest priority. Any other
             * name must be defined by creating a PriorityClass object with that name.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness.
             * A pod is ready when all its containers are ready AND
             * all conditions specified in the readiness gates have status equal to "True"
             * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated
             * and reserved before the Pod is allowed to start. The resources
             * will be made available to those containers which consume them
             * by name.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable.
             */
            resourceClaims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourceClaimsPatch[];
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesPatch;
            /**
             * Restart policy for all containers within the pod.
             * One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
             * Default to Always.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
             * to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
             * If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
             * empty definition that uses the default runtime handler.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler.
             * If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
             * If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
             * scheduler will not attempt to schedule the pod.
             *
             * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
             */
            schedulingGates: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSchedulingGatesPatch[];
            securityContext: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.
             * Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
             * In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
             * In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
             * If a pod does not have FQDN, this has no effect.
             * Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod.
             * When this is set containers will be able to view and signal processes from other containers
             * in the same pod, and the first process in each container will not be assigned PID 1.
             * HostPID and ShareProcessNamespace cannot both be set.
             * Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * If this value is nil, the default grace period will be used instead.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPatch[];
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim, either directly
         * or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim
         * for the pod.
         *
         * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
         * Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod.
             * This must be a DNS_LABEL.
             */
            name: string;
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same
             * namespace as this pod.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate
             * object in the same namespace as this pod.
             *
             * The template will be used to create a new ResourceClaim, which will
             * be bound to this pod. When this pod is deleted, the ResourceClaim
             * will also be deleted. The pod name and resource name, along with a
             * generated component, will be used to form a unique name for the
             * ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
             *
             * This field is immutable and no changes will be made to the
             * corresponding ResourceClaim by the control plane after creating the
             * ResourceClaim.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimTemplateName: string;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim, either directly
         * or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim
         * for the pod.
         *
         * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
         * Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod.
             * This must be a DNS_LABEL.
             */
            name: string;
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same
             * namespace as this pod.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate
             * object in the same namespace as this pod.
             *
             * The template will be used to create a new ResourceClaim, which will
             * be bound to this pod. When this pod is deleted, the ResourceClaim
             * will also be deleted. The pod name and resource name, along with a
             * generated component, will be used to form a unique name for the
             * ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
             *
             * This field is immutable and no changes will be made to the
             * corresponding ResourceClaim by the control plane after creating the
             * ResourceClaim.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimTemplateName: string;
        }

        /**
         * Resources is the total amount of CPU and Memory resources required by all
         * containers in the pod. It supports specifying Requests and Limits for
         * "cpu" and "memory" resource names only. ResourceClaims are not supported.
         *
         * This field enables fine-grained control over resource allocation for the
         * entire pod, allowing resource sharing among containers in a pod.
         *
         * This is an alpha field and requires enabling the PodLevelResources feature
         * gate.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources is the total amount of CPU and Memory resources required by all
         * containers in the pod. It supports specifying Requests and Limits for
         * "cpu" and "memory" resource names only. ResourceClaims are not supported.
         *
         * This field enables fine-grained control over resource allocation for the
         * entire pod, allowing resource sharing among containers in a pod.
         *
         * This is an alpha field and requires enabling the PodLevelResources feature
         * gate.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSchedulingGates {
            /**
             * Name of the scheduling gate.
             * Each scheduling gate must have a unique name field.
             */
            name: string;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate.
             * Each scheduling gate must have a unique name field.
             */
            name: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContext {
            appArmorProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextAppArmorProfile;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            /**
             * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
             * It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
             * Valid values are "MountOption" and "Recursive".
             *
             * "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
             * This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
             *
             * "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
             * This requires all Pods that share the same volume to use the same SELinux label.
             * It is not possible to share the same volume among privileged and unprivileged Pods.
             * Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
             * whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
             * CSIDriver instance. Other volumes are always re-labelled recursively.
             * "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
             *
             * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
             * If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
             * and "Recursive" for all other volumes.
             *
             * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
             *
             * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxChangePolicy: string;
            seLinuxOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in
             * addition to the container's primary GID and fsGroup (if specified).  If
             * the SupplementalGroupsPolicy feature is enabled, the
             * supplementalGroupsPolicy field determines whether these are in addition
             * to or instead of any group memberships defined in the container image.
             * If unspecified, no additional groups are added, though group memberships
             * defined in the container image may still be used, depending on the
             * supplementalGroupsPolicy field.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Defines how supplemental groups of the first container processes are calculated.
             * Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
             * (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
             * and the container runtime must implement support for this feature.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroupsPolicy: string;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSysctls[];
            windowsOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextPatch {
            appArmorProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextAppArmorProfilePatch;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            /**
             * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
             * It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
             * Valid values are "MountOption" and "Recursive".
             *
             * "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
             * This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
             *
             * "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
             * This requires all Pods that share the same volume to use the same SELinux label.
             * It is not possible to share the same volume among privileged and unprivileged Pods.
             * Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
             * whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
             * CSIDriver instance. Other volumes are always re-labelled recursively.
             * "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
             *
             * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
             * If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
             * and "Recursive" for all other volumes.
             *
             * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
             *
             * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxChangePolicy: string;
            seLinuxOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in
             * addition to the container's primary GID and fsGroup (if specified).  If
             * the SupplementalGroupsPolicy feature is enabled, the
             * supplementalGroupsPolicy field determines whether these are in addition
             * to or instead of any group memberships defined in the container image.
             * If unspecified, no additional groups are added, though group memberships
             * defined in the container image may still be used, depending on the
             * supplementalGroupsPolicy field.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Defines how supplemental groups of the first container processes are calculated.
             * Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
             * (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
             * and the container runtime must implement support for this feature.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroupsPolicy: string;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraints {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumes {
            awsElasticBlockStore: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureDisk;
            azureFile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureFile;
            cephfs: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfs;
            cinder: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinder;
            configMap: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMap;
            csi: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsi;
            downwardAPI: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPI;
            emptyDir: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEmptyDir;
            ephemeral: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeral;
            fc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFc;
            flexVolume: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolume;
            flocker: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlocker;
            gcePersistentDisk: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGcePersistentDisk;
            gitRepo: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGitRepo;
            glusterfs: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGlusterfs;
            hostPath: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesHostPath;
            image: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesImage;
            iscsi: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsi;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesNfs;
            persistentVolumeClaim: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPortworxVolume;
            projected: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjected;
            quobyte: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesQuobyte;
            rbd: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbd;
            scaleIO: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIO;
            secret: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecret;
            storageos: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageos;
            vsphereVolume: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesVsphereVolume;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
         * awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
         * awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
         * are redirected to the disk.csi.azure.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
         * are redirected to the disk.csi.azure.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
         * are redirected to the file.csi.azure.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
         * are redirected to the file.csi.azure.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
         * Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
         * Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
         * are redirected to the cinder.csi.openstack.org CSI driver.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
         * are redirected to the cinder.csi.openstack.org CSI driver.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItems {
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsPatch[];
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplate;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         * Required, must not be nil.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplate {
            metadata: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata;
            spec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC
         * when creating it. No other fields are allowed and will be rejected during
         * validation.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC
         * when creating it. No other fields are allowed and will be rejected during
         * validation.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         * Required, must not be nil.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch;
            spec: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         * Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumeSecretRef;
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         * Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumeSecretRefPatch;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
         * Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
         * Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
         * gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
         * gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGitRepo {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesHostPath {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
         * The volume is resolved at pod startup depending on which PullPolicy value is provided:
         *
         * - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
         * - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
         * - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
         *
         * The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
         * A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
         * The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
         * The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
         * The volume will be mounted read-only (ro) and non-executable files (noexec).
         * Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
         * The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesImage {
            /**
             * Policy for pulling OCI objects. Possible values are:
             * Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
             * Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
             * IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             */
            pullPolicy: string;
            /**
             * Required: Image or artifact reference to be used.
             * Behaves in the same way as pod.spec.containers[*].image.
             * Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            reference: string;
        }

        /**
         * image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
         * The volume is resolved at pod startup depending on which PullPolicy value is provided:
         *
         * - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
         * - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
         * - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
         *
         * The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
         * A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
         * The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
         * The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
         * The volume will be mounted read-only (ro) and non-executable files (noexec).
         * Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
         * The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesImagePatch {
            /**
             * Policy for pulling OCI objects. Possible values are:
             * Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
             * Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
             * IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             */
            pullPolicy: string;
            /**
             * Required: Image or artifact reference to be used.
             * Behaves in the same way as pod.spec.containers[*].image.
             * Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            reference: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesNfs {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPatch {
            awsElasticBlockStore: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureDiskPatch;
            azureFile: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureFilePatch;
            cephfs: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsPatch;
            cinder: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderPatch;
            configMap: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapPatch;
            csi: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiPatch;
            downwardAPI: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEmptyDirPatch;
            ephemeral: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralPatch;
            fc: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFcPatch;
            flexVolume: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumePatch;
            flocker: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGitRepoPatch;
            glusterfs: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGlusterfsPatch;
            hostPath: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesHostPathPatch;
            image: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesImagePatch;
            iscsi: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiPatch;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPortworxVolumePatch;
            projected: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedPatch;
            quobyte: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesQuobytePatch;
            rbd: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdPatch;
            scaleIO: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOPatch;
            secret: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretPatch;
            storageos: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosPatch;
            vsphereVolume: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesVsphereVolumePatch;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
         * Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
         * Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
         * Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
         * are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
         * is on.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
         * Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
         * are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
         * is on.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections. Each entry in this list
             * handles one source.
             */
            sources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSources[];
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections. Each entry in this list
             * handles one source.
             */
            sources: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types.
         * Exactly one of these fields must be set.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSources {
            clusterTrustBundle: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundle;
            configMap: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountToken;
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types.
         * Exactly one of these fields must be set.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesPatch {
            clusterTrustBundle: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }

        /**
         * secret information about the secret data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret information about the secret data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
         * Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesQuobyte {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
         * Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesQuobytePatch {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         * Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         * Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
         * Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
         * are redirected to the csi.vsphere.vmware.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
         * Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
         * are redirected to the csi.vsphere.vmware.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface StackSpecWorkspaceTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface StackSpecWorkspaceTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * WorkspaceStackApplyConfiguration represents a declarative configuration of the WorkspaceStack type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacks {
            config: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecStacksConfig[];
            create: boolean;
            environment: string[];
            name: string;
            secretsProvider: string;
        }

        /**
         * ConfigItemApplyConfiguration represents a declarative configuration of the ConfigItem type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksConfig {
            key: string;
            path: boolean;
            secret: boolean;
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecStacksConfigValueFrom;
        }

        /**
         * ConfigItemApplyConfiguration represents a declarative configuration of the ConfigItem type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksConfigPatch {
            key: string;
            path: boolean;
            secret: boolean;
            value: string;
            valueFrom: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecStacksConfigValueFromPatch;
        }

        /**
         * ConfigValueFromApplyConfiguration represents a declarative configuration of the ConfigValueFrom type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksConfigValueFrom {
            env: string;
            path: string;
        }

        /**
         * ConfigValueFromApplyConfiguration represents a declarative configuration of the ConfigValueFrom type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksConfigValueFromPatch {
            env: string;
            path: string;
        }

        /**
         * WorkspaceStackApplyConfiguration represents a declarative configuration of the WorkspaceStack type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksPatch {
            config: outputs.pulumi.v1.StackSpecWorkspaceTemplateSpecStacksConfigPatch[];
            create: boolean;
            environment: string[];
            name: string;
            secretsProvider: string;
        }

        /**
         * WorkspaceStatusApplyConfiguration represents a declarative configuration of the WorkspaceStatus type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateStatus {
            address: string;
            conditions: outputs.pulumi.v1.StackSpecWorkspaceTemplateStatusConditions[];
            observedGeneration: number;
        }

        /**
         * ConditionApplyConfiguration represents a declarative configuration of the Condition type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateStatusConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration: number;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * ConditionApplyConfiguration represents a declarative configuration of the Condition type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateStatusConditionsPatch {
            lastTransitionTime: string;
            message: string;
            observedGeneration: number;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * WorkspaceStatusApplyConfiguration represents a declarative configuration of the WorkspaceStatus type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateStatusPatch {
            address: string;
            conditions: outputs.pulumi.v1.StackSpecWorkspaceTemplateStatusConditionsPatch[];
            observedGeneration: number;
        }

        /**
         * StackStatus defines the observed state of Stack
         */
        export interface StackStatus {
            conditions: outputs.pulumi.v1.StackStatusConditions[];
            currentUpdate: outputs.pulumi.v1.StackStatusCurrentUpdate;
            lastUpdate: outputs.pulumi.v1.StackStatusLastUpdate;
            /**
             * ObservedGeneration records the value of .meta.generation at the point the controller last processed this object
             */
            observedGeneration: number;
            /**
             * ObservedReconcileRequest records the value of the annotation named for
             * `ReconcileRequestAnnotation` when it was last seen.
             */
            observedReconcileRequest: string;
            /**
             * Outputs contains the exported stack output variables resulting from a deployment.
             */
            outputs: {[key: string]: {[key: string]: any}};
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface StackStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface StackStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * CurrentUpdate contains details of the status of the current update, if any.
         */
        export interface StackStatusCurrentUpdate {
            /**
             * Commit is the commit SHA of the planned update.
             */
            commit: string;
            /**
             * Generation is the stack generation associated with the update.
             */
            generation: number;
            /**
             * Name is the name of the update object.
             */
            name: string;
            /**
             * ReconcileRequest is the stack reconcile request associated with the update.
             */
            reconcileRequest: string;
        }

        /**
         * CurrentUpdate contains details of the status of the current update, if any.
         */
        export interface StackStatusCurrentUpdatePatch {
            /**
             * Commit is the commit SHA of the planned update.
             */
            commit: string;
            /**
             * Generation is the stack generation associated with the update.
             */
            generation: number;
            /**
             * Name is the name of the update object.
             */
            name: string;
            /**
             * ReconcileRequest is the stack reconcile request associated with the update.
             */
            reconcileRequest: string;
        }

        /**
         * LastUpdate contains details of the status of the last update.
         */
        export interface StackStatusLastUpdate {
            /**
             * Failures records how many times the update has been attempted and
             * failed. Failed updates are periodically retried with exponential backoff
             * in case the failure was due to transient conditions.
             */
            failures: number;
            /**
             * Generation is the stack generation associated with the update.
             */
            generation: number;
            /**
             * Last commit attempted
             */
            lastAttemptedCommit: string;
            /**
             * LastResyncTime contains a timestamp for the last time a resync of the stack took place.
             */
            lastResyncTime: string;
            /**
             * Last commit successfully applied
             */
            lastSuccessfulCommit: string;
            /**
             * Message is the message surfacing any errors or additional information about the update.
             */
            message: string;
            /**
             * Name is the name of the update object.
             */
            name: string;
            /**
             * Permalink is the Pulumi Console URL of the stack operation.
             */
            permalink: string;
            /**
             * ReconcileRequest is the stack reconcile request associated with the update.
             */
            reconcileRequest: string;
            /**
             * State is the state of the stack update - one of `succeeded` or `failed`
             */
            state: string;
            /**
             * Type is the type of update.
             */
            type: string;
        }

        /**
         * LastUpdate contains details of the status of the last update.
         */
        export interface StackStatusLastUpdatePatch {
            /**
             * Failures records how many times the update has been attempted and
             * failed. Failed updates are periodically retried with exponential backoff
             * in case the failure was due to transient conditions.
             */
            failures: number;
            /**
             * Generation is the stack generation associated with the update.
             */
            generation: number;
            /**
             * Last commit attempted
             */
            lastAttemptedCommit: string;
            /**
             * LastResyncTime contains a timestamp for the last time a resync of the stack took place.
             */
            lastResyncTime: string;
            /**
             * Last commit successfully applied
             */
            lastSuccessfulCommit: string;
            /**
             * Message is the message surfacing any errors or additional information about the update.
             */
            message: string;
            /**
             * Name is the name of the update object.
             */
            name: string;
            /**
             * Permalink is the Pulumi Console URL of the stack operation.
             */
            permalink: string;
            /**
             * ReconcileRequest is the stack reconcile request associated with the update.
             */
            reconcileRequest: string;
            /**
             * State is the state of the stack update - one of `succeeded` or `failed`
             */
            state: string;
            /**
             * Type is the type of update.
             */
            type: string;
        }

        /**
         * StackStatus defines the observed state of Stack
         */
        export interface StackStatusPatch {
            conditions: outputs.pulumi.v1.StackStatusConditionsPatch[];
            currentUpdate: outputs.pulumi.v1.StackStatusCurrentUpdatePatch;
            lastUpdate: outputs.pulumi.v1.StackStatusLastUpdatePatch;
            /**
             * ObservedGeneration records the value of .meta.generation at the point the controller last processed this object
             */
            observedGeneration: number;
            /**
             * ObservedReconcileRequest records the value of the annotation named for
             * `ReconcileRequestAnnotation` when it was last seen.
             */
            observedReconcileRequest: string;
            /**
             * Outputs contains the exported stack output variables resulting from a deployment.
             */
            outputs: {[key: string]: {[key: string]: any}};
        }

    }

    export namespace v1alpha1 {
        /**
         * Stack is the Schema for the stacks API.
         * Deprecated: Note Stacks from pulumi.com/v1alpha1 is deprecated in favor of pulumi.com/v1.
         * It is completely backward compatible. Users are strongly encouraged to switch to pulumi.com/v1.
         */
        export interface Stack {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "pulumi.com/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Stack";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.pulumi.v1alpha1.StackSpec;
            status: outputs.pulumi.v1alpha1.StackStatus;
        }

        /**
         * StackSpec defines the desired state of Pulumi Stack being managed by this operator.
         */
        export interface StackSpec {
            /**
             * (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
             * Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
             */
            accessTokenSecret: string;
            /**
             * (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/>
             * Examples:<br/>
             *   - Pulumi Service:              "https://app.pulumi.com" (default)<br/>
             *   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/>
             *   - Local:                       "file://./einstein" <br/>
             *   - AWS:                         "s3://<my-pulumi-state-bucket>" <br/>
             *   - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/>
             *   - GCP:                         "gs://<my-pulumi-state-bucket>" <br/>
             * See: https://www.pulumi.com/docs/intro/concepts/state/
             */
            backend: string;
            /**
             * (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This
             * is mutually exclusive with the Commit setting. Either value needs to be specified.
             * When specified, the operator will periodically poll to check if the branch has any new commits.
             * The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
             */
            branch: string;
            /**
             * (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This
             * is mutually exclusive with the Branch setting. Either value needs to be specified.
             */
            commit: string;
            /**
             * (optional) Config is the configuration for this stack, which can be optionally specified inline. If this
             * is omitted, configuration is assumed to be checked in and taken from the source repository.
             */
            config: {[key: string]: string};
            /**
             * (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying
             * to update stacks even if the revision of the source matches. This might be useful in
             * environments where Pulumi programs have dynamic elements for example, calls to internal APIs
             * where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a
             * particular revision is successfully run, the operator will not attempt to rerun the program
             * at that revision again.
             */
            continueResyncOnCommitMatch: boolean;
            /**
             * (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
             */
            destroyOnFinalize: boolean;
            /**
             * (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where
             * the variables' values should be loaded from (one of literal, environment variable, file on the
             * filesystem, or Kubernetes Secret) as values.
             */
            envRefs: {[key: string]: {[key: string]: string}};
            /**
             * (optional) SecretEnvs is an optional array of Secret names containing environment variables to set.
             * Deprecated: use EnvRefs instead.
             */
            envSecrets: string[];
            /**
             * (optional) Environment specifies the Pulumi ESC environment(s) to use for this stack.
             */
            environment: string[];
            /**
             * (optional) Envs is an optional array of config maps containing environment variables to set.
             * Deprecated: use EnvRefs instead.
             */
            envs: string[];
            /**
             * (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have
             * changes during a refresh before the update is run.
             * This could occur, for example, is a resource's state is changing outside of Pulumi
             * (e.g., metadata, timestamps).
             */
            expectNoRefreshChanges: boolean;
            fluxSource: outputs.pulumi.v1alpha1.StackSpecFluxSource;
            gitAuth: outputs.pulumi.v1alpha1.StackSpecGitAuth;
            /**
             * (optional) GitAuthSecret is the the name of a Secret containing an
             * authentication option for the git repository.
             * There are 3 different authentication options:
             *   * Personal access token
             *   * SSH private key (and it's optional password)
             *   * Basic auth username and password
             * Only one authentication mode will be considered if more than one option is specified,
             * with ssh private key/password preferred first, then personal access token, and finally
             * basic auth credentials.
             * Deprecated. Use GitAuth instead.
             */
            gitAuthSecret: string;
            /**
             * (optional) Prerequisites is a list of references to other stacks, each with a constraint on
             * how long ago it must have succeeded. This can be used to make sure e.g., state is
             * re-evaluated before running a stack that depends on it.
             */
            prerequisites: outputs.pulumi.v1alpha1.StackSpecPrerequisites[];
            programRef: outputs.pulumi.v1alpha1.StackSpecProgramRef;
            /**
             * ProjectRepo is the git source control repository from which we fetch the project code and configuration.
             */
            projectRepo: string;
            /**
             * (optional) Refresh can be set to true to refresh the stack before it is updated.
             */
            refresh: boolean;
            /**
             * (optional) RepoDir is the directory to work from in the project's source repository
             * where Pulumi.yaml is located. It is used in case Pulumi.yaml is not
             * in the project source root.
             */
            repoDir: string;
            /**
             * (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at
             * the specified frequency even if no changes to the custom resource are detected.
             * If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency.
             * The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
             */
            resyncFrequencySeconds: number;
            /**
             * (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop
             * in the event that the update hits a HTTP 409 conflict due to
             * another update in progress.
             * This is only recommended if you are sure that the stack updates are
             * idempotent, and if you are willing to accept retry loops until
             * all spawned retries succeed. This will also create a more populated,
             * and randomized activity timeline for the stack in the Pulumi Service.
             */
            retryOnUpdateConflict: boolean;
            /**
             * (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this
             * is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             * Deprecated: use SecretRefs instead.
             */
            secrets: {[key: string]: string};
            /**
             * (optional) SecretsProvider is used to initialize a Stack with alternative encryption.
             * Examples:
             *   - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"
             *   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"
             *   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY"
             *   -
             * See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
             */
            secretsProvider: string;
            /**
             * (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef.
             * If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             */
            secretsRef: {[key: string]: {[key: string]: string}};
            /**
             * ServiceAccountName is the Kubernetes service account identity of the stack's workspace.
             */
            serviceAccountName: string;
            /**
             * Shallow controls whether the workspace uses a shallow checkout or
             * whether all history is cloned.
             */
            shallow: boolean;
            /**
             * Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
             */
            stack: string;
            /**
             * TargetDependents indicates that dependent resources should be updated as well, when using Targets.
             */
            targetDependents: boolean;
            /**
             * (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only
             * resources mentioned will be updated.
             */
            targets: string[];
            updateTemplate: outputs.pulumi.v1alpha1.StackSpecUpdateTemplate;
            /**
             * (optional) UseLocalStackOnly can be set to true to prevent the operator from
             * creating stacks that do not exist in the tracking git repo.
             * The default behavior is to create a stack if it doesn't exist.
             */
            useLocalStackOnly: boolean;
            /**
             * WorkspaceReclaimPolicy specifies whether the workspace should be deleted or retained after the Stack is successfully updated.
             * The default behavior is to retain the workspace. Valid values are one of "Retain" or "Delete".
             */
            workspaceReclaimPolicy: string;
            workspaceTemplate: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplate;
        }

        /**
         * FluxSource specifies how to fetch source code from a Flux source object.
         */
        export interface StackSpecFluxSource {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of
             * interest, within the fetched source.
             */
            dir: string;
            sourceRef: outputs.pulumi.v1alpha1.StackSpecFluxSourceSourceRef;
        }

        /**
         * FluxSource specifies how to fetch source code from a Flux source object.
         */
        export interface StackSpecFluxSourcePatch {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of
             * interest, within the fetched source.
             */
            dir: string;
            sourceRef: outputs.pulumi.v1alpha1.StackSpecFluxSourceSourceRefPatch;
        }

        export interface StackSpecFluxSourceSourceRef {
            apiVersion: string;
            kind: string;
            name: string;
        }

        export interface StackSpecFluxSourceSourceRefPatch {
            apiVersion: string;
            kind: string;
            name: string;
        }

        /**
         * (optional) GitAuth allows configuring git authentication options
         * There are 3 different authentication options:
         *   * SSH private key (and its optional password)
         *   * Personal access token
         *   * Basic auth username and password
         * Only one authentication mode will be considered if more than one option is specified,
         * with ssh private key/password preferred first, then personal access token, and finally
         * basic auth credentials.
         */
        export interface StackSpecGitAuth {
            accessToken: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessToken;
            basicAuth: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuth;
            sshAuth: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuth;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthAccessToken {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenEnv;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenFilesystem;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenLiteral;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthAccessTokenEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthAccessTokenEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthAccessTokenFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthAccessTokenFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthAccessTokenLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthAccessTokenLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthAccessTokenPatch {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenEnvPatch;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenFilesystemPatch;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenLiteralPatch;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenSecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthAccessTokenSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthAccessTokenSecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * BasicAuth configures git authentication through basic auth —
         * i.e. username and password. Both UserName and Password are required.
         */
        export interface StackSpecGitAuthBasicAuth {
            password: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPassword;
            userName: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserName;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthPassword {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordEnv;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordFilesystem;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordLiteral;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthPasswordEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthPasswordEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthPasswordFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthPasswordFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthPasswordLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthPasswordLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthPasswordPatch {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordEnvPatch;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordFilesystemPatch;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordLiteralPatch;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordSecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthPasswordSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthPasswordSecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * BasicAuth configures git authentication through basic auth —
         * i.e. username and password. Both UserName and Password are required.
         */
        export interface StackSpecGitAuthBasicAuthPatch {
            password: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPasswordPatch;
            userName: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNamePatch;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthUserName {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNameEnv;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNameFilesystem;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNameLiteral;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNameSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthUserNameEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthUserNameEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthUserNameFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthUserNameFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthUserNameLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthUserNameLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthUserNamePatch {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNameEnvPatch;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNameFilesystemPatch;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNameLiteralPatch;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthUserNameSecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthUserNameSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthUserNameSecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * (optional) GitAuth allows configuring git authentication options
         * There are 3 different authentication options:
         *   * SSH private key (and its optional password)
         *   * Personal access token
         *   * Basic auth username and password
         * Only one authentication mode will be considered if more than one option is specified,
         * with ssh private key/password preferred first, then personal access token, and finally
         * basic auth credentials.
         */
        export interface StackSpecGitAuthPatch {
            accessToken: outputs.pulumi.v1alpha1.StackSpecGitAuthAccessTokenPatch;
            basicAuth: outputs.pulumi.v1alpha1.StackSpecGitAuthBasicAuthPatch;
            sshAuth: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPatch;
        }

        /**
         * SSHAuth configures ssh-based auth for git authentication.
         * SSHPrivateKey is required but password is optional.
         */
        export interface StackSpecGitAuthSshAuth {
            password: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPassword;
            sshPrivateKey: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKey;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthPassword {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordEnv;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordFilesystem;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordLiteral;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordSecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthPasswordEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthPasswordEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthPasswordFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthPasswordFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthPasswordLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthPasswordLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthPasswordPatch {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordEnvPatch;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordFilesystemPatch;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordLiteralPatch;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordSecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthPasswordSecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthPasswordSecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SSHAuth configures ssh-based auth for git authentication.
         * SSHPrivateKey is required but password is optional.
         */
        export interface StackSpecGitAuthSshAuthPatch {
            password: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthPasswordPatch;
            sshPrivateKey: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyPatch;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKey {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyEnv;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyFilesystem;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyLiteral;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeySecret;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyEnv {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyEnvPatch {
            /**
             * Name of the environment variable
             */
            name: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyFilesystem {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyFilesystemPatch {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyLiteral {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyLiteralPatch {
            /**
             * Value to load
             */
            value: string;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded.
         * Environment variables, files on the filesystem, Kubernetes Secrets and literal
         * strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyPatch {
            env: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyEnvPatch;
            filesystem: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyFilesystemPatch;
            literal: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyLiteralPatch;
            secret: outputs.pulumi.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeySecretPatch;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of:
             * Env, FS, Secret, Literal
             */
            type: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeySecret {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeySecretPatch {
            /**
             * Key within the Secret to use.
             */
            key: string;
            /**
             * Name of the Secret
             */
            name: string;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid
             * unless namespace isolation is disabled in the controller.
             */
            namespace: string;
        }

        /**
         * StackSpec defines the desired state of Pulumi Stack being managed by this operator.
         */
        export interface StackSpecPatch {
            /**
             * (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access.
             * Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
             */
            accessTokenSecret: string;
            /**
             * (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/>
             * Examples:<br/>
             *   - Pulumi Service:              "https://app.pulumi.com" (default)<br/>
             *   - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/>
             *   - Local:                       "file://./einstein" <br/>
             *   - AWS:                         "s3://<my-pulumi-state-bucket>" <br/>
             *   - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/>
             *   - GCP:                         "gs://<my-pulumi-state-bucket>" <br/>
             * See: https://www.pulumi.com/docs/intro/concepts/state/
             */
            backend: string;
            /**
             * (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This
             * is mutually exclusive with the Commit setting. Either value needs to be specified.
             * When specified, the operator will periodically poll to check if the branch has any new commits.
             * The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
             */
            branch: string;
            /**
             * (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This
             * is mutually exclusive with the Branch setting. Either value needs to be specified.
             */
            commit: string;
            /**
             * (optional) Config is the configuration for this stack, which can be optionally specified inline. If this
             * is omitted, configuration is assumed to be checked in and taken from the source repository.
             */
            config: {[key: string]: string};
            /**
             * (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying
             * to update stacks even if the revision of the source matches. This might be useful in
             * environments where Pulumi programs have dynamic elements for example, calls to internal APIs
             * where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a
             * particular revision is successfully run, the operator will not attempt to rerun the program
             * at that revision again.
             */
            continueResyncOnCommitMatch: boolean;
            /**
             * (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
             */
            destroyOnFinalize: boolean;
            /**
             * (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where
             * the variables' values should be loaded from (one of literal, environment variable, file on the
             * filesystem, or Kubernetes Secret) as values.
             */
            envRefs: {[key: string]: {[key: string]: string}};
            /**
             * (optional) SecretEnvs is an optional array of Secret names containing environment variables to set.
             * Deprecated: use EnvRefs instead.
             */
            envSecrets: string[];
            /**
             * (optional) Environment specifies the Pulumi ESC environment(s) to use for this stack.
             */
            environment: string[];
            /**
             * (optional) Envs is an optional array of config maps containing environment variables to set.
             * Deprecated: use EnvRefs instead.
             */
            envs: string[];
            /**
             * (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have
             * changes during a refresh before the update is run.
             * This could occur, for example, is a resource's state is changing outside of Pulumi
             * (e.g., metadata, timestamps).
             */
            expectNoRefreshChanges: boolean;
            fluxSource: outputs.pulumi.v1alpha1.StackSpecFluxSourcePatch;
            gitAuth: outputs.pulumi.v1alpha1.StackSpecGitAuthPatch;
            /**
             * (optional) GitAuthSecret is the the name of a Secret containing an
             * authentication option for the git repository.
             * There are 3 different authentication options:
             *   * Personal access token
             *   * SSH private key (and it's optional password)
             *   * Basic auth username and password
             * Only one authentication mode will be considered if more than one option is specified,
             * with ssh private key/password preferred first, then personal access token, and finally
             * basic auth credentials.
             * Deprecated. Use GitAuth instead.
             */
            gitAuthSecret: string;
            /**
             * (optional) Prerequisites is a list of references to other stacks, each with a constraint on
             * how long ago it must have succeeded. This can be used to make sure e.g., state is
             * re-evaluated before running a stack that depends on it.
             */
            prerequisites: outputs.pulumi.v1alpha1.StackSpecPrerequisitesPatch[];
            programRef: outputs.pulumi.v1alpha1.StackSpecProgramRefPatch;
            /**
             * ProjectRepo is the git source control repository from which we fetch the project code and configuration.
             */
            projectRepo: string;
            /**
             * (optional) Refresh can be set to true to refresh the stack before it is updated.
             */
            refresh: boolean;
            /**
             * (optional) RepoDir is the directory to work from in the project's source repository
             * where Pulumi.yaml is located. It is used in case Pulumi.yaml is not
             * in the project source root.
             */
            repoDir: string;
            /**
             * (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at
             * the specified frequency even if no changes to the custom resource are detected.
             * If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency.
             * The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
             */
            resyncFrequencySeconds: number;
            /**
             * (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop
             * in the event that the update hits a HTTP 409 conflict due to
             * another update in progress.
             * This is only recommended if you are sure that the stack updates are
             * idempotent, and if you are willing to accept retry loops until
             * all spawned retries succeed. This will also create a more populated,
             * and randomized activity timeline for the stack in the Pulumi Service.
             */
            retryOnUpdateConflict: boolean;
            /**
             * (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this
             * is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             * Deprecated: use SecretRefs instead.
             */
            secrets: {[key: string]: string};
            /**
             * (optional) SecretsProvider is used to initialize a Stack with alternative encryption.
             * Examples:
             *   - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1"
             *   - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname"
             *   - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY"
             *   -
             * See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
             */
            secretsProvider: string;
            /**
             * (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef.
             * If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             */
            secretsRef: {[key: string]: {[key: string]: string}};
            /**
             * ServiceAccountName is the Kubernetes service account identity of the stack's workspace.
             */
            serviceAccountName: string;
            /**
             * Shallow controls whether the workspace uses a shallow checkout or
             * whether all history is cloned.
             */
            shallow: boolean;
            /**
             * Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
             */
            stack: string;
            /**
             * TargetDependents indicates that dependent resources should be updated as well, when using Targets.
             */
            targetDependents: boolean;
            /**
             * (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only
             * resources mentioned will be updated.
             */
            targets: string[];
            updateTemplate: outputs.pulumi.v1alpha1.StackSpecUpdateTemplatePatch;
            /**
             * (optional) UseLocalStackOnly can be set to true to prevent the operator from
             * creating stacks that do not exist in the tracking git repo.
             * The default behavior is to create a stack if it doesn't exist.
             */
            useLocalStackOnly: boolean;
            /**
             * WorkspaceReclaimPolicy specifies whether the workspace should be deleted or retained after the Stack is successfully updated.
             * The default behavior is to retain the workspace. Valid values are one of "Retain" or "Delete".
             */
            workspaceReclaimPolicy: string;
            workspaceTemplate: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplatePatch;
        }

        /**
         * PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be
         * considered satisfied.
         */
        export interface StackSpecPrerequisites {
            /**
             * Name is the name of the Stack resource that is a prerequisite.
             */
            name: string;
            requirement: outputs.pulumi.v1alpha1.StackSpecPrerequisitesRequirement;
        }

        /**
         * PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be
         * considered satisfied.
         */
        export interface StackSpecPrerequisitesPatch {
            /**
             * Name is the name of the Stack resource that is a prerequisite.
             */
            name: string;
            requirement: outputs.pulumi.v1alpha1.StackSpecPrerequisitesRequirementPatch;
        }

        /**
         * Requirement gives specific requirements for the prerequisite; the base requirement is that
         * the referenced stack is in a successful state.
         */
        export interface StackSpecPrerequisitesRequirement {
            /**
             * SucceededWithinDuration gives a duration within which the prerequisite must have reached a
             * succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in
             * the last hour". Fields (should there ever be more than one) are not intended to be mutually
             * exclusive.
             */
            succeededWithinDuration: string;
        }

        /**
         * Requirement gives specific requirements for the prerequisite; the base requirement is that
         * the referenced stack is in a successful state.
         */
        export interface StackSpecPrerequisitesRequirementPatch {
            /**
             * SucceededWithinDuration gives a duration within which the prerequisite must have reached a
             * succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in
             * the last hour". Fields (should there ever be more than one) are not intended to be mutually
             * exclusive.
             */
            succeededWithinDuration: string;
        }

        /**
         * ProgramRef refers to a Program object, to be used as the source for the stack.
         */
        export interface StackSpecProgramRef {
            name: string;
        }

        /**
         * ProgramRef refers to a Program object, to be used as the source for the stack.
         */
        export interface StackSpecProgramRefPatch {
            name: string;
        }

        /**
         * UpdateTemplate customizes the Updates generated for this Stack. It
         * is applied as a strategic merge patch on top of the underlying
         * Update. Use this to customize the Updates's metadata, retention policy, etc.
         */
        export interface StackSpecUpdateTemplate {
            apiVersion: string;
            kind: string;
            metadata: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateMetadata;
            spec: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateSpec;
            status: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateStatus;
        }

        /**
         * ObjectMetaApplyConfiguration represents a declarative configuration of the ObjectMeta type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateMetadata {
            annotations: {[key: string]: string};
            creationTimestamp: string;
            deletionGracePeriodSeconds: number;
            deletionTimestamp: string;
            finalizers: string[];
            generateName: string;
            generation: number;
            labels: {[key: string]: string};
            name: string;
            namespace: string;
            ownerReferences: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateMetadataOwnerReferences[];
            resourceVersion: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * OwnerReferenceApplyConfiguration represents a declarative configuration of the OwnerReference type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateMetadataOwnerReferences {
            apiVersion: string;
            blockOwnerDeletion: boolean;
            controller: boolean;
            kind: string;
            name: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * OwnerReferenceApplyConfiguration represents a declarative configuration of the OwnerReference type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateMetadataOwnerReferencesPatch {
            apiVersion: string;
            blockOwnerDeletion: boolean;
            controller: boolean;
            kind: string;
            name: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * ObjectMetaApplyConfiguration represents a declarative configuration of the ObjectMeta type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateMetadataPatch {
            annotations: {[key: string]: string};
            creationTimestamp: string;
            deletionGracePeriodSeconds: number;
            deletionTimestamp: string;
            finalizers: string[];
            generateName: string;
            generation: number;
            labels: {[key: string]: string};
            name: string;
            namespace: string;
            ownerReferences: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateMetadataOwnerReferencesPatch[];
            resourceVersion: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * UpdateTemplate customizes the Updates generated for this Stack. It
         * is applied as a strategic merge patch on top of the underlying
         * Update. Use this to customize the Updates's metadata, retention policy, etc.
         */
        export interface StackSpecUpdateTemplatePatch {
            apiVersion: string;
            kind: string;
            metadata: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateMetadataPatch;
            spec: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateSpecPatch;
            status: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateStatusPatch;
        }

        /**
         * UpdateSpecApplyConfiguration represents a declarative configuration of the UpdateSpec type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateSpec {
            continueOnError: boolean;
            expectNoChanges: boolean;
            message: string;
            parallel: number;
            refresh: boolean;
            remove: boolean;
            replace: string[];
            stackName: string;
            target: string[];
            targetDependents: boolean;
            ttlAfterCompleted: string;
            type: string;
            workspaceName: string;
        }

        /**
         * UpdateSpecApplyConfiguration represents a declarative configuration of the UpdateSpec type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateSpecPatch {
            continueOnError: boolean;
            expectNoChanges: boolean;
            message: string;
            parallel: number;
            refresh: boolean;
            remove: boolean;
            replace: string[];
            stackName: string;
            target: string[];
            targetDependents: boolean;
            ttlAfterCompleted: string;
            type: string;
            workspaceName: string;
        }

        /**
         * UpdateStatusApplyConfiguration represents a declarative configuration of the UpdateStatus type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateStatus {
            conditions: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateStatusConditions[];
            endTime: string;
            message: string;
            observedGeneration: number;
            outputs: string;
            permalink: string;
            startTime: string;
        }

        /**
         * ConditionApplyConfiguration represents a declarative configuration of the Condition type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateStatusConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration: number;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * ConditionApplyConfiguration represents a declarative configuration of the Condition type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateStatusConditionsPatch {
            lastTransitionTime: string;
            message: string;
            observedGeneration: number;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * UpdateStatusApplyConfiguration represents a declarative configuration of the UpdateStatus type for use
         * with apply.
         */
        export interface StackSpecUpdateTemplateStatusPatch {
            conditions: outputs.pulumi.v1alpha1.StackSpecUpdateTemplateStatusConditionsPatch[];
            endTime: string;
            message: string;
            observedGeneration: number;
            outputs: string;
            permalink: string;
            startTime: string;
        }

        /**
         * WorkspaceTemplate customizes the Workspace generated for this Stack. It
         * is applied as a strategic merge patch on top of the underlying
         * Workspace. Use this to customize the Workspace's metadata, image, resources,
         * volumes, etc.
         */
        export interface StackSpecWorkspaceTemplate {
            apiVersion: string;
            kind: string;
            metadata: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateMetadata;
            spec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpec;
            status: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateStatus;
        }

        /**
         * ObjectMetaApplyConfiguration represents a declarative configuration of the ObjectMeta type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateMetadata {
            annotations: {[key: string]: string};
            creationTimestamp: string;
            deletionGracePeriodSeconds: number;
            deletionTimestamp: string;
            finalizers: string[];
            generateName: string;
            generation: number;
            labels: {[key: string]: string};
            name: string;
            namespace: string;
            ownerReferences: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateMetadataOwnerReferences[];
            resourceVersion: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * OwnerReferenceApplyConfiguration represents a declarative configuration of the OwnerReference type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateMetadataOwnerReferences {
            apiVersion: string;
            blockOwnerDeletion: boolean;
            controller: boolean;
            kind: string;
            name: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * OwnerReferenceApplyConfiguration represents a declarative configuration of the OwnerReference type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateMetadataOwnerReferencesPatch {
            apiVersion: string;
            blockOwnerDeletion: boolean;
            controller: boolean;
            kind: string;
            name: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * ObjectMetaApplyConfiguration represents a declarative configuration of the ObjectMeta type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateMetadataPatch {
            annotations: {[key: string]: string};
            creationTimestamp: string;
            deletionGracePeriodSeconds: number;
            deletionTimestamp: string;
            finalizers: string[];
            generateName: string;
            generation: number;
            labels: {[key: string]: string};
            name: string;
            namespace: string;
            ownerReferences: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateMetadataOwnerReferencesPatch[];
            resourceVersion: string;
            /**
             * UID is a type that holds unique ID values, including UUIDs.  Because we
             * don't ONLY use UUIDs, this is an alias to string.  Being a type captures
             * intent and helps make sure that UIDs and names do not get conflated.
             */
            uid: string;
        }

        /**
         * WorkspaceTemplate customizes the Workspace generated for this Stack. It
         * is applied as a strategic merge patch on top of the underlying
         * Workspace. Use this to customize the Workspace's metadata, image, resources,
         * volumes, etc.
         */
        export interface StackSpecWorkspaceTemplatePatch {
            apiVersion: string;
            kind: string;
            metadata: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateMetadataPatch;
            spec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPatch;
            status: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateStatusPatch;
        }

        /**
         * WorkspaceSpecApplyConfiguration represents a declarative configuration of the WorkspaceSpec type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpec {
            env: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnv[];
            envFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvFrom[];
            flux: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecFlux;
            git: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGit;
            image: string;
            /**
             * PullPolicy describes a policy for if/when to pull a container image
             */
            imagePullPolicy: string;
            local: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecLocal;
            podTemplate: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplate;
            pulumiLogLevel: number;
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecResources;
            /**
             * SecurityProfile declares the security profile of the workspace, either baseline or restricted.
             */
            securityProfile: string;
            serviceAccountName: string;
            stacks: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecStacks[];
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFrom {
            configMapRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromPatch {
            configMapRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFrom {
            configMapKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromFieldRef;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromPatch {
            configMapKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * FluxSourceApplyConfiguration represents a declarative configuration of the FluxSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecFlux {
            digest: string;
            dir: string;
            url: string;
        }

        /**
         * FluxSourceApplyConfiguration represents a declarative configuration of the FluxSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecFluxPatch {
            digest: string;
            dir: string;
            url: string;
        }

        /**
         * GitSourceApplyConfiguration represents a declarative configuration of the GitSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecGit {
            auth: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuth;
            dir: string;
            ref: string;
            shallow: boolean;
            url: string;
        }

        /**
         * GitAuthApplyConfiguration represents a declarative configuration of the GitAuth type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuth {
            password: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthPassword;
            sshPrivateKey: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthSshPrivateKey;
            token: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthToken;
            username: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthUsername;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthPasswordPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * GitAuthApplyConfiguration represents a declarative configuration of the GitAuth type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthPatch {
            password: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthPasswordPatch;
            sshPrivateKey: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthSshPrivateKeyPatch;
            token: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthTokenPatch;
            username: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthUsernamePatch;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthSshPrivateKey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthSshPrivateKeyPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthToken {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthTokenPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthUsername {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * SecretKeySelector selects a key of a Secret.
         */
        export interface StackSpecWorkspaceTemplateSpecGitAuthUsernamePatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * GitSourceApplyConfiguration represents a declarative configuration of the GitSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecGitPatch {
            auth: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitAuthPatch;
            dir: string;
            ref: string;
            shallow: boolean;
            url: string;
        }

        /**
         * LocalSourceApplyConfiguration represents a declarative configuration of the LocalSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecLocal {
            dir: string;
        }

        /**
         * LocalSourceApplyConfiguration represents a declarative configuration of the LocalSource type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecLocalPatch {
            dir: string;
        }

        /**
         * WorkspaceSpecApplyConfiguration represents a declarative configuration of the WorkspaceSpec type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPatch {
            env: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvPatch[];
            envFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecEnvFromPatch[];
            flux: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecFluxPatch;
            git: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecGitPatch;
            image: string;
            /**
             * PullPolicy describes a policy for if/when to pull a container image
             */
            imagePullPolicy: string;
            local: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecLocalPatch;
            podTemplate: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplatePatch;
            pulumiLogLevel: number;
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecResourcesPatch;
            /**
             * SecurityProfile declares the security profile of the workspace, either baseline or restricted.
             */
            securityProfile: string;
            serviceAccountName: string;
            stacks: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecStacksPatch[];
        }

        /**
         * EmbeddedPodTemplateSpecApplyConfiguration represents a declarative configuration of the EmbeddedPodTemplateSpec type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplate {
            metadata: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateMetadata;
            spec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpec;
        }

        /**
         * EmbeddedObjectMetaApplyConfiguration represents a declarative configuration of the EmbeddedObjectMeta type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateMetadata {
            annotations: {[key: string]: string};
            labels: {[key: string]: string};
        }

        /**
         * EmbeddedObjectMetaApplyConfiguration represents a declarative configuration of the EmbeddedObjectMeta type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateMetadataPatch {
            annotations: {[key: string]: string};
            labels: {[key: string]: string};
        }

        /**
         * EmbeddedPodTemplateSpecApplyConfiguration represents a declarative configuration of the EmbeddedPodTemplateSpec type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplatePatch {
            metadata: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateMetadataPatch;
            spec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecPatch;
        }

        /**
         * PodSpec is a description of a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to
             * StartTime before the system will actively try to mark it failed and kill associated containers.
             * Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod.
             * Containers cannot currently be added or removed.
             * There must be at least one container in a Pod.
             * Cannot be updated.
             */
            containers: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainers[];
            dnsConfig: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfig;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's
             * environment variables, matching the syntax of Docker links.
             * Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
             * pod to perform user-initiated actions such as debugging. This list cannot be specified when
             * creating a pod, and it cannot be modified by updating the pod spec. In order to add an
             * ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
             * file if specified.
             */
            hostAliases: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecHostAliases[];
            /**
             * Use the host's ipc namespace.
             * Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace.
             * If this option is set, the ports that will be used must be specified.
             * Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace.
             * Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace.
             * Optional: Default to true.
             * If set to true or not present, the pod will be run in the host user namespace, useful
             * for when the pod needs a feature only available to the host user namespace, such as
             * loading a kernel module with CAP_SYS_MODULE.
             * When set to false, a new userns is created for the pod. Setting false is useful for
             * mitigating container breakout vulnerabilities even allowing users to run their
             * containers as root without actually having root privileges on the host.
             * This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod
             * If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod.
             * Init containers are executed in order prior to containers being started. If any
             * init container fails, the pod is considered to have failed and is handled according
             * to its restartPolicy. The name for an init container or normal container must be
             * unique among all containers.
             * Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
             * The resourceRequirements of an init container are taken into account during scheduling
             * by finding the highest request/limit for each resource type, and then using the max of
             * of that value or the sum of the normal containers. Limits are applied to init containers
             * in a similar fashion.
             * Init containers cannot currently be added or removed.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainers[];
            /**
             * NodeName indicates in which node this pod is scheduled.
             * If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName.
             * Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod.
             * This field should not be used to express a desire for the pod to be scheduled on a specific node.
             * https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            os: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
             * This field will be autopopulated at admission time by the RuntimeClass admission controller. If
             * the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
             * The RuntimeClass admission controller will reject Pod create requests which have the overhead already
             * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
             * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {[key: string]: number | string};
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority.
             * One of Never, PreemptLowerPriority.
             * Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the
             * priority of the pod. When Priority Admission Controller is enabled, it
             * prevents users from setting this field. The admission controller populates
             * this field from PriorityClassName.
             * The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and
             * "system-cluster-critical" are two special keywords which indicate the
             * highest priorities with the former being the highest priority. Any other
             * name must be defined by creating a PriorityClass object with that name.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness.
             * A pod is ready when all its containers are ready AND
             * all conditions specified in the readiness gates have status equal to "True"
             * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated
             * and reserved before the Pod is allowed to start. The resources
             * will be made available to those containers which consume them
             * by name.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable.
             */
            resourceClaims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourceClaims[];
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResources;
            /**
             * Restart policy for all containers within the pod.
             * One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
             * Default to Always.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
             * to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
             * If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
             * empty definition that uses the default runtime handler.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler.
             * If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
             * If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
             * scheduler will not attempt to schedule the pod.
             *
             * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
             */
            schedulingGates: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSchedulingGates[];
            securityContext: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.
             * Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
             * In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
             * In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
             * If a pod does not have FQDN, this has no effect.
             * Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod.
             * When this is set containers will be able to view and signal processes from other containers
             * in the same pod, and the first process in each container will not be assigned PID 1.
             * HostPID and ShareProcessNamespace cannot both be set.
             * Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * If this value is nil, the default grace period will be used instead.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumes[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinity {
            nodeAffinity: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecycle;
            livenessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPorts[];
            readinessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResizePolicy[];
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContext;
            startupProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFrom {
            configMapRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromPatch {
            configMapRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecycle {
            postStart: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStart;
            preStop: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStop;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePatch {
            postStart: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartPatch;
            preStop: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStart {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartExec;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGet;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartSleep;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartPatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStop {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopExec;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGet;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopSleep;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopPatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLifecyclePatch;
            livenessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPortsPatch[];
            readinessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResizePolicyPatch[];
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesPatch;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextPatch;
            startupProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextAppArmorProfile;
            capabilities: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches: string[];
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigOptions {
            /**
             * Name is this DNS resolver option's name.
             * Required.
             */
            name: string;
            /**
             * Value is this DNS resolver option's value.
             */
            value: string;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigOptionsPatch {
            /**
             * Name is this DNS resolver option's name.
             * Required.
             */
            name: string;
            /**
             * Value is this DNS resolver option's value.
             */
            value: string;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches: string[];
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for
         * user-initiated activities such as debugging. Ephemeral containers have no resource or
         * scheduling guarantees, and they will not be restarted when they exit or when a Pod is
         * removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
         * Pod to exceed its resource allocation.
         *
         * To add an ephemeral container, use the ephemeralcontainers subresource of an existing
         * Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint.
             * The image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL.
             * This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPorts[];
            readinessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResizePolicy[];
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResources;
            /**
             * Restart policy for the container to manage the restart behavior of each
             * container within a pod.
             * This may only be set for init containers. You cannot set this field on
             * ephemeral containers.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets.
             * The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
             * If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *
             * The container runtime must implement support for this feature. If the runtime does not
             * support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecycle {
            postStart: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStop;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleep;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleep;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for
         * user-initiated activities such as debugging. Ephemeral containers have no resource or
         * scheduling guarantees, and they will not be restarted when they exit or when a Pod is
         * removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
         * Pod to exceed its resource allocation.
         *
         * To add an ephemeral container, use the ephemeralcontainers subresource of an existing
         * Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL.
             * This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResizePolicyPatch[];
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesPatch;
            /**
             * Restart policy for the container to manage the restart behavior of each
             * container within a pod.
             * This may only be set for init containers. You cannot set this field on
             * ephemeral containers.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets.
             * The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
             * If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *
             * The container runtime must implement support for this feature. If the runtime does not
             * support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
         * already allocated to the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
         * already allocated to the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfile;
            capabilities: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
         * pod's hosts file.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
         * pod's hosts file.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecycle;
            livenessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPorts[];
            readinessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResizePolicy[];
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContext;
            startupProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFrom {
            configMapRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromPatch {
            configMapRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecycle {
            postStart: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStart;
            preStop: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStop;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePatch {
            postStart: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStart {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGet;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartSleep;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStop {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGet;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopSleep;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents a duration that the container should sleep.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for backward compatibility. There is no validation of this field and
         * lifecycle hooks will fail at runtime when it is specified.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPortsPatch[];
            readinessProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResizePolicyPatch[];
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesPatch;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfile;
            capabilities: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default value is Default which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbe {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies a command to execute in the container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies a GRPC HealthCheckRequest.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies an HTTP GET request to perform.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbePatch {
            exec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies a connection to a TCP port.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Specifies the OS of the containers in the pod.
         * Some pod and container fields are restricted if this is set.
         *
         * If the OS field is set to linux, the following fields must be unset:
         * -securityContext.windowsOptions
         *
         * If the OS field is set to windows, following fields must be unset:
         * - spec.hostPID
         * - spec.hostIPC
         * - spec.hostUsers
         * - spec.securityContext.appArmorProfile
         * - spec.securityContext.seLinuxOptions
         * - spec.securityContext.seccompProfile
         * - spec.securityContext.fsGroup
         * - spec.securityContext.fsGroupChangePolicy
         * - spec.securityContext.sysctls
         * - spec.shareProcessNamespace
         * - spec.securityContext.runAsUser
         * - spec.securityContext.runAsGroup
         * - spec.securityContext.supplementalGroups
         * - spec.securityContext.supplementalGroupsPolicy
         * - spec.containers[*].securityContext.appArmorProfile
         * - spec.containers[*].securityContext.seLinuxOptions
         * - spec.containers[*].securityContext.seccompProfile
         * - spec.containers[*].securityContext.capabilities
         * - spec.containers[*].securityContext.readOnlyRootFilesystem
         * - spec.containers[*].securityContext.privileged
         * - spec.containers[*].securityContext.allowPrivilegeEscalation
         * - spec.containers[*].securityContext.procMount
         * - spec.containers[*].securityContext.runAsUser
         * - spec.containers[*].securityContext.runAsGroup
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows.
             * Additional value may be defined in future and can be one of:
             * https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
             * Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }

        /**
         * Specifies the OS of the containers in the pod.
         * Some pod and container fields are restricted if this is set.
         *
         * If the OS field is set to linux, the following fields must be unset:
         * -securityContext.windowsOptions
         *
         * If the OS field is set to windows, following fields must be unset:
         * - spec.hostPID
         * - spec.hostIPC
         * - spec.hostUsers
         * - spec.securityContext.appArmorProfile
         * - spec.securityContext.seLinuxOptions
         * - spec.securityContext.seccompProfile
         * - spec.securityContext.fsGroup
         * - spec.securityContext.fsGroupChangePolicy
         * - spec.securityContext.sysctls
         * - spec.shareProcessNamespace
         * - spec.securityContext.runAsUser
         * - spec.securityContext.runAsGroup
         * - spec.securityContext.supplementalGroups
         * - spec.securityContext.supplementalGroupsPolicy
         * - spec.containers[*].securityContext.appArmorProfile
         * - spec.containers[*].securityContext.seLinuxOptions
         * - spec.containers[*].securityContext.seccompProfile
         * - spec.containers[*].securityContext.capabilities
         * - spec.containers[*].securityContext.readOnlyRootFilesystem
         * - spec.containers[*].securityContext.privileged
         * - spec.containers[*].securityContext.allowPrivilegeEscalation
         * - spec.containers[*].securityContext.procMount
         * - spec.containers[*].securityContext.runAsUser
         * - spec.containers[*].securityContext.runAsGroup
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows.
             * Additional value may be defined in future and can be one of:
             * https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
             * Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }

        /**
         * PodSpec is a description of a pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to
             * StartTime before the system will actively try to mark it failed and kill associated containers.
             * Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod.
             * Containers cannot currently be added or removed.
             * There must be at least one container in a Pod.
             * Cannot be updated.
             */
            containers: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecContainersPatch[];
            dnsConfig: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's
             * environment variables, matching the syntax of Docker links.
             * Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
             * pod to perform user-initiated actions such as debugging. This list cannot be specified when
             * creating a pod, and it cannot be modified by updating the pod spec. In order to add an
             * ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
             * file if specified.
             */
            hostAliases: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace.
             * Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace.
             * If this option is set, the ports that will be used must be specified.
             * Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace.
             * Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace.
             * Optional: Default to true.
             * If set to true or not present, the pod will be run in the host user namespace, useful
             * for when the pod needs a feature only available to the host user namespace, such as
             * loading a kernel module with CAP_SYS_MODULE.
             * When set to false, a new userns is created for the pod. Setting false is useful for
             * mitigating container breakout vulnerabilities even allowing users to run their
             * containers as root without actually having root privileges on the host.
             * This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod
             * If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod.
             * Init containers are executed in order prior to containers being started. If any
             * init container fails, the pod is considered to have failed and is handled according
             * to its restartPolicy. The name for an init container or normal container must be
             * unique among all containers.
             * Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
             * The resourceRequirements of an init container are taken into account during scheduling
             * by finding the highest request/limit for each resource type, and then using the max of
             * of that value or the sum of the normal containers. Limits are applied to init containers
             * in a similar fashion.
             * Init containers cannot currently be added or removed.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecInitContainersPatch[];
            /**
             * NodeName indicates in which node this pod is scheduled.
             * If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName.
             * Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod.
             * This field should not be used to express a desire for the pod to be scheduled on a specific node.
             * https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            os: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
             * This field will be autopopulated at admission time by the RuntimeClass admission controller. If
             * the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
             * The RuntimeClass admission controller will reject Pod create requests which have the overhead already
             * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
             * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {[key: string]: number | string};
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority.
             * One of Never, PreemptLowerPriority.
             * Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the
             * priority of the pod. When Priority Admission Controller is enabled, it
             * prevents users from setting this field. The admission controller populates
             * this field from PriorityClassName.
             * The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and
             * "system-cluster-critical" are two special keywords which indicate the
             * highest priorities with the former being the highest priority. Any other
             * name must be defined by creating a PriorityClass object with that name.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness.
             * A pod is ready when all its containers are ready AND
             * all conditions specified in the readiness gates have status equal to "True"
             * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated
             * and reserved before the Pod is allowed to start. The resources
             * will be made available to those containers which consume them
             * by name.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable.
             */
            resourceClaims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourceClaimsPatch[];
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesPatch;
            /**
             * Restart policy for all containers within the pod.
             * One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
             * Default to Always.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
             * to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
             * If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
             * empty definition that uses the default runtime handler.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler.
             * If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
             * If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
             * scheduler will not attempt to schedule the pod.
             *
             * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
             */
            schedulingGates: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSchedulingGatesPatch[];
            securityContext: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.
             * Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
             * In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
             * In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
             * If a pod does not have FQDN, this has no effect.
             * Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod.
             * When this is set containers will be able to view and signal processes from other containers
             * in the same pod, and the first process in each container will not be assigned PID 1.
             * HostPID and ShareProcessNamespace cannot both be set.
             * Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * If this value is nil, the default grace period will be used instead.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPatch[];
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim, either directly
         * or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim
         * for the pod.
         *
         * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
         * Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod.
             * This must be a DNS_LABEL.
             */
            name: string;
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same
             * namespace as this pod.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate
             * object in the same namespace as this pod.
             *
             * The template will be used to create a new ResourceClaim, which will
             * be bound to this pod. When this pod is deleted, the ResourceClaim
             * will also be deleted. The pod name and resource name, along with a
             * generated component, will be used to form a unique name for the
             * ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
             *
             * This field is immutable and no changes will be made to the
             * corresponding ResourceClaim by the control plane after creating the
             * ResourceClaim.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimTemplateName: string;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim, either directly
         * or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim
         * for the pod.
         *
         * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
         * Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod.
             * This must be a DNS_LABEL.
             */
            name: string;
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same
             * namespace as this pod.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate
             * object in the same namespace as this pod.
             *
             * The template will be used to create a new ResourceClaim, which will
             * be bound to this pod. When this pod is deleted, the ResourceClaim
             * will also be deleted. The pod name and resource name, along with a
             * generated component, will be used to form a unique name for the
             * ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
             *
             * This field is immutable and no changes will be made to the
             * corresponding ResourceClaim by the control plane after creating the
             * ResourceClaim.
             *
             * Exactly one of ResourceClaimName and ResourceClaimTemplateName must
             * be set.
             */
            resourceClaimTemplateName: string;
        }

        /**
         * Resources is the total amount of CPU and Memory resources required by all
         * containers in the pod. It supports specifying Requests and Limits for
         * "cpu" and "memory" resource names only. ResourceClaims are not supported.
         *
         * This field enables fine-grained control over resource allocation for the
         * entire pod, allowing resource sharing among containers in a pod.
         *
         * This is an alpha field and requires enabling the PodLevelResources feature
         * gate.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * Resources is the total amount of CPU and Memory resources required by all
         * containers in the pod. It supports specifying Requests and Limits for
         * "cpu" and "memory" resource names only. ResourceClaims are not supported.
         *
         * This field enables fine-grained control over resource allocation for the
         * entire pod, allowing resource sharing among containers in a pod.
         *
         * This is an alpha field and requires enabling the PodLevelResources feature
         * gate.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSchedulingGates {
            /**
             * Name of the scheduling gate.
             * Each scheduling gate must have a unique name field.
             */
            name: string;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate.
             * Each scheduling gate must have a unique name field.
             */
            name: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContext {
            appArmorProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextAppArmorProfile;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            /**
             * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
             * It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
             * Valid values are "MountOption" and "Recursive".
             *
             * "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
             * This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
             *
             * "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
             * This requires all Pods that share the same volume to use the same SELinux label.
             * It is not possible to share the same volume among privileged and unprivileged Pods.
             * Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
             * whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
             * CSIDriver instance. Other volumes are always re-labelled recursively.
             * "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
             *
             * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
             * If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
             * and "Recursive" for all other volumes.
             *
             * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
             *
             * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxChangePolicy: string;
            seLinuxOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in
             * addition to the container's primary GID and fsGroup (if specified).  If
             * the SupplementalGroupsPolicy feature is enabled, the
             * supplementalGroupsPolicy field determines whether these are in addition
             * to or instead of any group memberships defined in the container image.
             * If unspecified, no additional groups are added, though group memberships
             * defined in the container image may still be used, depending on the
             * supplementalGroupsPolicy field.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Defines how supplemental groups of the first container processes are calculated.
             * Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
             * (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
             * and the container runtime must implement support for this feature.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroupsPolicy: string;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSysctls[];
            windowsOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextPatch {
            appArmorProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextAppArmorProfilePatch;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            /**
             * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
             * It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
             * Valid values are "MountOption" and "Recursive".
             *
             * "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
             * This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
             *
             * "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
             * This requires all Pods that share the same volume to use the same SELinux label.
             * It is not possible to share the same volume among privileged and unprivileged Pods.
             * Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
             * whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
             * CSIDriver instance. Other volumes are always re-labelled recursively.
             * "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
             *
             * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
             * If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
             * and "Recursive" for all other volumes.
             *
             * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
             *
             * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxChangePolicy: string;
            seLinuxOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in
             * addition to the container's primary GID and fsGroup (if specified).  If
             * the SupplementalGroupsPolicy feature is enabled, the
             * supplementalGroupsPolicy field determines whether these are in addition
             * to or instead of any group memberships defined in the container image.
             * If unspecified, no additional groups are added, though group memberships
             * defined in the container image may still be used, depending on the
             * supplementalGroupsPolicy field.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Defines how supplemental groups of the first container processes are calculated.
             * Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
             * (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
             * and the container runtime must implement support for this feature.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroupsPolicy: string;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraints {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumes {
            awsElasticBlockStore: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureDisk;
            azureFile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureFile;
            cephfs: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfs;
            cinder: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinder;
            configMap: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMap;
            csi: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsi;
            downwardAPI: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPI;
            emptyDir: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEmptyDir;
            ephemeral: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeral;
            fc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFc;
            flexVolume: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolume;
            flocker: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlocker;
            gcePersistentDisk: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGcePersistentDisk;
            gitRepo: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGitRepo;
            glusterfs: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGlusterfs;
            hostPath: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesHostPath;
            image: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesImage;
            iscsi: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsi;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesNfs;
            persistentVolumeClaim: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPortworxVolume;
            projected: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjected;
            quobyte: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesQuobyte;
            rbd: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbd;
            scaleIO: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIO;
            secret: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecret;
            storageos: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageos;
            vsphereVolume: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesVsphereVolume;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
         * awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
         * awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
         * are redirected to the disk.csi.azure.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
         * are redirected to the disk.csi.azure.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
         * are redirected to the file.csi.azure.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
         * are redirected to the file.csi.azure.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
         * Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
         * Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
         * are redirected to the cinder.csi.openstack.org CSI driver.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
         * are redirected to the cinder.csi.openstack.org CSI driver.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItems {
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIItemsPatch[];
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplate;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         * Required, must not be nil.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplate {
            metadata: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata;
            spec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC
         * when creating it. No other fields are allowed and will be rejected during
         * validation.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC
         * when creating it. No other fields are allowed and will be rejected during
         * validation.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations: {[key: string]: string};
            finalizers: string[];
            labels: {[key: string]: string};
            name: string;
            namespace: string;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         * Required, must not be nil.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch;
            spec: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         * Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumeSecretRef;
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         * Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumeSecretRefPatch;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
         * Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
         * Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
         * gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
         * gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGitRepo {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesHostPath {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
         * The volume is resolved at pod startup depending on which PullPolicy value is provided:
         *
         * - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
         * - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
         * - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
         *
         * The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
         * A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
         * The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
         * The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
         * The volume will be mounted read-only (ro) and non-executable files (noexec).
         * Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
         * The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesImage {
            /**
             * Policy for pulling OCI objects. Possible values are:
             * Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
             * Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
             * IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             */
            pullPolicy: string;
            /**
             * Required: Image or artifact reference to be used.
             * Behaves in the same way as pod.spec.containers[*].image.
             * Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            reference: string;
        }

        /**
         * image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
         * The volume is resolved at pod startup depending on which PullPolicy value is provided:
         *
         * - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
         * - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
         * - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
         *
         * The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
         * A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
         * The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
         * The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
         * The volume will be mounted read-only (ro) and non-executable files (noexec).
         * Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
         * The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesImagePatch {
            /**
             * Policy for pulling OCI objects. Possible values are:
             * Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
             * Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
             * IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             */
            pullPolicy: string;
            /**
             * Required: Image or artifact reference to be used.
             * Behaves in the same way as pod.spec.containers[*].image.
             * Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            reference: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesNfs {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPatch {
            awsElasticBlockStore: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureDiskPatch;
            azureFile: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesAzureFilePatch;
            cephfs: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCephfsPatch;
            cinder: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCinderPatch;
            configMap: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesConfigMapPatch;
            csi: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesCsiPatch;
            downwardAPI: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEmptyDirPatch;
            ephemeral: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesEphemeralPatch;
            fc: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFcPatch;
            flexVolume: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlexVolumePatch;
            flocker: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGitRepoPatch;
            glusterfs: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesGlusterfsPatch;
            hostPath: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesHostPathPatch;
            image: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesImagePatch;
            iscsi: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesIscsiPatch;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPortworxVolumePatch;
            projected: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedPatch;
            quobyte: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesQuobytePatch;
            rbd: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdPatch;
            scaleIO: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOPatch;
            secret: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretPatch;
            storageos: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosPatch;
            vsphereVolume: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesVsphereVolumePatch;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
         * Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
         * Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
         * Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
         * are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
         * is on.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
         * Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
         * are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
         * is on.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections. Each entry in this list
             * handles one source.
             */
            sources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSources[];
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections. Each entry in this list
             * handles one source.
             */
            sources: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types.
         * Exactly one of these fields must be set.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSources {
            clusterTrustBundle: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundle;
            configMap: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountToken;
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types.
         * Exactly one of these fields must be set.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesPatch {
            clusterTrustBundle: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }

        /**
         * secret information about the secret data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret information about the secret data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
         * Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesQuobyte {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
         * Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesQuobytePatch {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         * Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         * Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
         * Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
         * are redirected to the csi.vsphere.vmware.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
         * Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
         * are redirected to the csi.vsphere.vmware.com CSI driver.
         */
        export interface StackSpecWorkspaceTemplateSpecPodTemplateSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface StackSpecWorkspaceTemplateSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface StackSpecWorkspaceTemplateSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
            /**
             * Request is the name chosen for a request in the referenced claim.
             * If empty, everything from the claim is made available, otherwise
             * only the result of this request.
             */
            request: string;
        }

        /**
         * ResourceRequirements describes the compute resource requirements.
         */
        export interface StackSpecWorkspaceTemplateSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * WorkspaceStackApplyConfiguration represents a declarative configuration of the WorkspaceStack type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacks {
            config: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecStacksConfig[];
            create: boolean;
            environment: string[];
            name: string;
            secretsProvider: string;
        }

        /**
         * ConfigItemApplyConfiguration represents a declarative configuration of the ConfigItem type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksConfig {
            key: string;
            path: boolean;
            secret: boolean;
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecStacksConfigValueFrom;
        }

        /**
         * ConfigItemApplyConfiguration represents a declarative configuration of the ConfigItem type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksConfigPatch {
            key: string;
            path: boolean;
            secret: boolean;
            value: string;
            valueFrom: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecStacksConfigValueFromPatch;
        }

        /**
         * ConfigValueFromApplyConfiguration represents a declarative configuration of the ConfigValueFrom type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksConfigValueFrom {
            env: string;
            path: string;
        }

        /**
         * ConfigValueFromApplyConfiguration represents a declarative configuration of the ConfigValueFrom type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksConfigValueFromPatch {
            env: string;
            path: string;
        }

        /**
         * WorkspaceStackApplyConfiguration represents a declarative configuration of the WorkspaceStack type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateSpecStacksPatch {
            config: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateSpecStacksConfigPatch[];
            create: boolean;
            environment: string[];
            name: string;
            secretsProvider: string;
        }

        /**
         * WorkspaceStatusApplyConfiguration represents a declarative configuration of the WorkspaceStatus type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateStatus {
            address: string;
            conditions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateStatusConditions[];
            observedGeneration: number;
        }

        /**
         * ConditionApplyConfiguration represents a declarative configuration of the Condition type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateStatusConditions {
            lastTransitionTime: string;
            message: string;
            observedGeneration: number;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * ConditionApplyConfiguration represents a declarative configuration of the Condition type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateStatusConditionsPatch {
            lastTransitionTime: string;
            message: string;
            observedGeneration: number;
            reason: string;
            status: string;
            type: string;
        }

        /**
         * WorkspaceStatusApplyConfiguration represents a declarative configuration of the WorkspaceStatus type for use
         * with apply.
         */
        export interface StackSpecWorkspaceTemplateStatusPatch {
            address: string;
            conditions: outputs.pulumi.v1alpha1.StackSpecWorkspaceTemplateStatusConditionsPatch[];
            observedGeneration: number;
        }

        /**
         * StackStatus defines the observed state of Stack
         */
        export interface StackStatus {
            lastUpdate: outputs.pulumi.v1alpha1.StackStatusLastUpdate;
            /**
             * Outputs contains the exported stack output variables resulting from a deployment.
             */
            outputs: {[key: string]: {[key: string]: any}};
        }

        /**
         * LastUpdate contains details of the status of the last update.
         */
        export interface StackStatusLastUpdate {
            /**
             * Failures records how many times the update has been attempted and
             * failed. Failed updates are periodically retried with exponential backoff
             * in case the failure was due to transient conditions.
             */
            failures: number;
            /**
             * Generation is the stack generation associated with the update.
             */
            generation: number;
            /**
             * Last commit attempted
             */
            lastAttemptedCommit: string;
            /**
             * LastResyncTime contains a timestamp for the last time a resync of the stack took place.
             */
            lastResyncTime: string;
            /**
             * Last commit successfully applied
             */
            lastSuccessfulCommit: string;
            /**
             * Message is the message surfacing any errors or additional information about the update.
             */
            message: string;
            /**
             * Name is the name of the update object.
             */
            name: string;
            /**
             * Permalink is the Pulumi Console URL of the stack operation.
             */
            permalink: string;
            /**
             * ReconcileRequest is the stack reconcile request associated with the update.
             */
            reconcileRequest: string;
            /**
             * State is the state of the stack update - one of `succeeded` or `failed`
             */
            state: string;
            /**
             * Type is the type of update.
             */
            type: string;
        }

        /**
         * LastUpdate contains details of the status of the last update.
         */
        export interface StackStatusLastUpdatePatch {
            /**
             * Failures records how many times the update has been attempted and
             * failed. Failed updates are periodically retried with exponential backoff
             * in case the failure was due to transient conditions.
             */
            failures: number;
            /**
             * Generation is the stack generation associated with the update.
             */
            generation: number;
            /**
             * Last commit attempted
             */
            lastAttemptedCommit: string;
            /**
             * LastResyncTime contains a timestamp for the last time a resync of the stack took place.
             */
            lastResyncTime: string;
            /**
             * Last commit successfully applied
             */
            lastSuccessfulCommit: string;
            /**
             * Message is the message surfacing any errors or additional information about the update.
             */
            message: string;
            /**
             * Name is the name of the update object.
             */
            name: string;
            /**
             * Permalink is the Pulumi Console URL of the stack operation.
             */
            permalink: string;
            /**
             * ReconcileRequest is the stack reconcile request associated with the update.
             */
            reconcileRequest: string;
            /**
             * State is the state of the stack update - one of `succeeded` or `failed`
             */
            state: string;
            /**
             * Type is the type of update.
             */
            type: string;
        }

        /**
         * StackStatus defines the observed state of Stack
         */
        export interface StackStatusPatch {
            lastUpdate: outputs.pulumi.v1alpha1.StackStatusLastUpdatePatch;
            /**
             * Outputs contains the exported stack output variables resulting from a deployment.
             */
            outputs: {[key: string]: {[key: string]: any}};
        }

    }
}
