// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CephBlockPoolArgs } from "./cephBlockPool";
export type CephBlockPool = import("./cephBlockPool").CephBlockPool;
export const CephBlockPool: typeof import("./cephBlockPool").CephBlockPool = null as any;
utilities.lazyLoad(exports, ["CephBlockPool"], () => require("./cephBlockPool"));

export { CephBlockPoolListArgs } from "./cephBlockPoolList";
export type CephBlockPoolList = import("./cephBlockPoolList").CephBlockPoolList;
export const CephBlockPoolList: typeof import("./cephBlockPoolList").CephBlockPoolList = null as any;
utilities.lazyLoad(exports, ["CephBlockPoolList"], () => require("./cephBlockPoolList"));

export { CephBlockPoolPatchArgs } from "./cephBlockPoolPatch";
export type CephBlockPoolPatch = import("./cephBlockPoolPatch").CephBlockPoolPatch;
export const CephBlockPoolPatch: typeof import("./cephBlockPoolPatch").CephBlockPoolPatch = null as any;
utilities.lazyLoad(exports, ["CephBlockPoolPatch"], () => require("./cephBlockPoolPatch"));

export { CephClusterArgs } from "./cephCluster";
export type CephCluster = import("./cephCluster").CephCluster;
export const CephCluster: typeof import("./cephCluster").CephCluster = null as any;
utilities.lazyLoad(exports, ["CephCluster"], () => require("./cephCluster"));

export { CephClusterListArgs } from "./cephClusterList";
export type CephClusterList = import("./cephClusterList").CephClusterList;
export const CephClusterList: typeof import("./cephClusterList").CephClusterList = null as any;
utilities.lazyLoad(exports, ["CephClusterList"], () => require("./cephClusterList"));

export { CephClusterPatchArgs } from "./cephClusterPatch";
export type CephClusterPatch = import("./cephClusterPatch").CephClusterPatch;
export const CephClusterPatch: typeof import("./cephClusterPatch").CephClusterPatch = null as any;
utilities.lazyLoad(exports, ["CephClusterPatch"], () => require("./cephClusterPatch"));

export { CephFilesystemArgs } from "./cephFilesystem";
export type CephFilesystem = import("./cephFilesystem").CephFilesystem;
export const CephFilesystem: typeof import("./cephFilesystem").CephFilesystem = null as any;
utilities.lazyLoad(exports, ["CephFilesystem"], () => require("./cephFilesystem"));

export { CephFilesystemListArgs } from "./cephFilesystemList";
export type CephFilesystemList = import("./cephFilesystemList").CephFilesystemList;
export const CephFilesystemList: typeof import("./cephFilesystemList").CephFilesystemList = null as any;
utilities.lazyLoad(exports, ["CephFilesystemList"], () => require("./cephFilesystemList"));

export { CephFilesystemPatchArgs } from "./cephFilesystemPatch";
export type CephFilesystemPatch = import("./cephFilesystemPatch").CephFilesystemPatch;
export const CephFilesystemPatch: typeof import("./cephFilesystemPatch").CephFilesystemPatch = null as any;
utilities.lazyLoad(exports, ["CephFilesystemPatch"], () => require("./cephFilesystemPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:ceph.rook.io/v1:CephBlockPool":
                return new CephBlockPool(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBlockPoolList":
                return new CephBlockPoolList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephBlockPoolPatch":
                return new CephBlockPoolPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephCluster":
                return new CephCluster(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephClusterList":
                return new CephClusterList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephClusterPatch":
                return new CephClusterPatch(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystem":
                return new CephFilesystem(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemList":
                return new CephFilesystemList(name, <any>undefined, { urn })
            case "kubernetes:ceph.rook.io/v1:CephFilesystemPatch":
                return new CephFilesystemPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "ceph.rook.io/v1", _module)
