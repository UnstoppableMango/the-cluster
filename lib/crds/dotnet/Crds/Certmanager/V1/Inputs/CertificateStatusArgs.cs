// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Certmanager.V1
{

    /// <summary>
    /// Status of the Certificate. This is set and managed automatically. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    /// </summary>
    public class CertificateStatusArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Certmanager.V1.CertificateStatusConditionsArgs>? _conditions;

        /// <summary>
        /// List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Certmanager.V1.CertificateStatusConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Pulumi.Kubernetes.Types.Inputs.Certmanager.V1.CertificateStatusConditionsArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
        /// </summary>
        [Input("failedIssuanceAttempts")]
        public Input<int>? FailedIssuanceAttempts { get; set; }

        /// <summary>
        /// LastFailureTime is set only if the lastest issuance for this Certificate failed and contains the time of the failure. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1). If the latest issuance has succeeded this field will be unset.
        /// </summary>
        [Input("lastFailureTime")]
        public Input<string>? LastFailureTime { get; set; }

        /// <summary>
        /// The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
        /// </summary>
        [Input("nextPrivateKeySecretName")]
        public Input<string>? NextPrivateKeySecretName { get; set; }

        /// <summary>
        /// The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
        /// </summary>
        [Input("notAfter")]
        public Input<string>? NotAfter { get; set; }

        /// <summary>
        /// The time after which the certificate stored in the secret named by this resource in `spec.secretName` is valid.
        /// </summary>
        [Input("notBefore")]
        public Input<string>? NotBefore { get; set; }

        /// <summary>
        /// RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
        /// </summary>
        [Input("renewalTime")]
        public Input<string>? RenewalTime { get; set; }

        /// <summary>
        /// The current 'revision' of the certificate as issued. 
        ///  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
        ///  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
        ///  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        public CertificateStatusArgs()
        {
        }
        public static new CertificateStatusArgs Empty => new CertificateStatusArgs();
    }
}
