// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Infrastructure.V1Beta1
{

    /// <summary>
    /// Options for QEMU instance
    /// </summary>
    public class ProxmoxMachineTemplateSpecTemplateSpecOptionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/Disable ACPI. Defaults to true.
        /// </summary>
        [Input("acpi")]
        public Input<bool>? Acpi { get; set; }

        /// <summary>
        /// Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
        /// </summary>
        [Input("arch")]
        public Input<string>? Arch { get; set; }

        /// <summary>
        /// Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
        /// </summary>
        [Input("balloon")]
        public Input<int>? Balloon { get; set; }

        /// <summary>
        /// Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
        /// </summary>
        [Input("hugePages")]
        public Input<int>? HugePages { get; set; }

        /// <summary>
        /// Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
        /// </summary>
        [Input("keepHugePages")]
        public Input<bool>? KeepHugePages { get; set; }

        /// <summary>
        /// Enable/disable KVM hardware virtualization. Defaults to true.
        /// </summary>
        [Input("kvm")]
        public Input<bool>? Kvm { get; set; }

        /// <summary>
        /// Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
        /// </summary>
        [Input("localTime")]
        public Input<bool>? LocalTime { get; set; }

        /// <summary>
        /// Lock/unlock the VM.
        /// </summary>
        [Input("lock")]
        public Input<string>? Lock { get; set; }

        /// <summary>
        /// Enable/disable NUMA.
        /// </summary>
        [Input("numa")]
        public Input<bool>? Numa { get; set; }

        /// <summary>
        /// Specifies whether a VM will be started during system bootup.
        /// </summary>
        [Input("onBoot")]
        public Input<bool>? OnBoot { get; set; }

        /// <summary>
        /// Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
        /// </summary>
        [Input("protection")]
        public Input<bool>? Protection { get; set; }

        /// <summary>
        /// Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
        /// </summary>
        [Input("reboot")]
        public Input<bool>? Reboot { get; set; }

        /// <summary>
        /// Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
        /// </summary>
        [Input("shares")]
        public Input<int>? Shares { get; set; }

        /// <summary>
        /// Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set &lt;vmid&gt; --vga qxl`). Defaults to true.
        /// </summary>
        [Input("tablet")]
        public Input<bool>? Tablet { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the VM. This is only meta information.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Enable/disable Template. Defaults to false.
        /// </summary>
        [Input("template")]
        public Input<bool>? Template { get; set; }

        /// <summary>
        /// Enable/disable time drift fix. Defaults to false.
        /// </summary>
        [Input("timeDriftFix")]
        public Input<bool>? TimeDriftFix { get; set; }

        /// <summary>
        /// Number of hotplugged vcpus. Defaults to 0.
        /// </summary>
        [Input("vcpus")]
        public Input<int>? Vcpus { get; set; }

        /// <summary>
        /// The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
        /// </summary>
        [Input("vmGenerationID")]
        public Input<string>? VmGenerationID { get; set; }

        public ProxmoxMachineTemplateSpecTemplateSpecOptionsArgs()
        {
        }
        public static new ProxmoxMachineTemplateSpecTemplateSpecOptionsArgs Empty => new ProxmoxMachineTemplateSpecTemplateSpecOptionsArgs();
    }
}
