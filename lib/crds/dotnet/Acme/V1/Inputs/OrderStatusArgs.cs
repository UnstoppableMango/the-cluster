// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Acme.V1
{

    public class OrderStatusArgs : global::Pulumi.ResourceArgs
    {
        [Input("authorizations")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Acme.V1.OrderStatusAuthorizationsArgs>? _authorizations;

        /// <summary>
        /// Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Acme.V1.OrderStatusAuthorizationsArgs> Authorizations
        {
            get => _authorizations ?? (_authorizations = new InputList<Pulumi.Kubernetes.Types.Inputs.Acme.V1.OrderStatusAuthorizationsArgs>());
            set => _authorizations = value;
        }

        /// <summary>
        /// Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
        /// </summary>
        [Input("failureTime")]
        public Input<string>? FailureTime { get; set; }

        /// <summary>
        /// FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
        /// </summary>
        [Input("finalizeURL")]
        public Input<string>? FinalizeURL { get; set; }

        /// <summary>
        /// Reason optionally provides more information about a why the order is in the current state.
        /// </summary>
        [Input("reason")]
        public Input<string>? Reason { get; set; }

        /// <summary>
        /// State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public OrderStatusArgs()
        {
        }
        public static new OrderStatusArgs Empty => new OrderStatusArgs();
    }
}
