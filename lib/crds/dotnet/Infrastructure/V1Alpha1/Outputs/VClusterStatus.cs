// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Infrastructure.V1Alpha1
{

    /// <summary>
    /// VClusterStatus defines the observed state of VCluster
    /// </summary>
    [OutputType]
    public sealed class VClusterStatus
    {
        /// <summary>
        /// Conditions holds several conditions the vcluster might be in
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Infrastructure.V1Alpha1.VClusterStatusConditions> Conditions;
        /// <summary>
        /// Initialized defines if the virtual cluster control plane was initialized.
        /// </summary>
        public readonly bool Initialized;
        /// <summary>
        /// Message describes the reason in human readable form why the cluster is in the currrent phase
        /// </summary>
        public readonly string Message;
        /// <summary>
        /// ObservedGeneration is the latest generation observed by the controller.
        /// </summary>
        public readonly int ObservedGeneration;
        /// <summary>
        /// Phase describes the current phase the virtual cluster is in
        /// </summary>
        public readonly string Phase;
        /// <summary>
        /// Ready defines if the virtual cluster control plane is ready.
        /// </summary>
        public readonly bool Ready;
        /// <summary>
        /// Reason describes the reason in machine readable form why the cluster is in the current phase
        /// </summary>
        public readonly string Reason;

        [OutputConstructor]
        private VClusterStatus(
            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Infrastructure.V1Alpha1.VClusterStatusConditions> conditions,

            bool initialized,

            string message,

            int observedGeneration,

            string phase,

            bool ready,

            string reason)
        {
            Conditions = conditions;
            Initialized = initialized;
            Message = message;
            ObservedGeneration = observedGeneration;
            Phase = phase;
            Ready = ready;
            Reason = reason;
        }
    }
}
