// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Trust.V1Alpha1
{

    /// <summary>
    /// Target is the target location in all namespaces to sync source data to.
    /// </summary>
    public class BundleSpecTargetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AdditionalFormats specifies any additional formats to write to the target
        /// </summary>
        [Input("additionalFormats")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Trust.V1Alpha1.BundleSpecTargetAdditionalFormatsArgs>? AdditionalFormats { get; set; }

        /// <summary>
        /// ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        /// </summary>
        [Input("configMap")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Trust.V1Alpha1.BundleSpecTargetConfigMapArgs>? ConfigMap { get; set; }

        /// <summary>
        /// NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        /// </summary>
        [Input("namespaceSelector")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Trust.V1Alpha1.BundleSpecTargetNamespaceSelectorArgs>? NamespaceSelector { get; set; }

        /// <summary>
        /// Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        /// </summary>
        [Input("secret")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Trust.V1Alpha1.BundleSpecTargetSecretArgs>? Secret { get; set; }

        public BundleSpecTargetArgs()
        {
        }
        public static new BundleSpecTargetArgs Empty => new BundleSpecTargetArgs();
    }
}
