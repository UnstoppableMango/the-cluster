// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Trust.V1Alpha1
{

    /// <summary>
    /// BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
    /// </summary>
    public class BundleSpecSourcesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
        /// </summary>
        [Input("configMap")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Trust.V1Alpha1.BundleSpecSourcesConfigMapArgs>? ConfigMap { get; set; }

        /// <summary>
        /// InLine is a simple string to append as the source data.
        /// </summary>
        [Input("inLine")]
        public Input<string>? InLine { get; set; }

        /// <summary>
        /// Secret is a reference to a Secrets's `data` key, in the trust Namespace.
        /// </summary>
        [Input("secret")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Trust.V1Alpha1.BundleSpecSourcesSecretArgs>? Secret { get; set; }

        /// <summary>
        /// UseDefaultCAs, when true, requests the default CA bundle to be used as a source. Default CAs are available if trust-manager was installed via Helm or was otherwise set up to include a package-injecting init container by using the "--default-package-location" flag when starting the trust-manager controller. If default CAs were not configured at start-up, any request to use the default CAs will fail. The version of the default CA package which is used for a Bundle is stored in the defaultCAPackageVersion field of the Bundle's status field.
        /// </summary>
        [Input("useDefaultCAs")]
        public Input<bool>? UseDefaultCAs { get; set; }

        public BundleSpecSourcesArgs()
        {
        }
        public static new BundleSpecSourcesArgs Empty => new BundleSpecSourcesArgs();
    }
}
