// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Cluster.V1Beta1
{

    /// <summary>
    /// MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this control plane.
    /// </summary>
    [OutputType]
    public sealed class ClusterSpecTopologyControlPlaneMachineHealthCheck
    {
        /// <summary>
        /// Enable controls if a MachineHealthCheck should be created for the target machines. 
        ///  If false: No MachineHealthCheck will be created. 
        ///  If not set(default): A MachineHealthCheck will be created if it is defined here or in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created. 
        ///  If true: A MachineHealthCheck is guaranteed to be created. Cluster validation will block if `enable` is true and no MachineHealthCheck definition is available.
        /// </summary>
        public readonly bool Enable;
        /// <summary>
        /// Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
        /// </summary>
        public readonly Union<int, string> MaxUnhealthy;
        /// <summary>
        /// Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
        /// </summary>
        public readonly string NodeStartupTimeout;
        /// <summary>
        /// RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
        ///  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Cluster.V1Beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplate RemediationTemplate;
        /// <summary>
        /// UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Cluster.V1Beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditions> UnhealthyConditions;
        /// <summary>
        /// Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
        /// </summary>
        public readonly string UnhealthyRange;

        [OutputConstructor]
        private ClusterSpecTopologyControlPlaneMachineHealthCheck(
            bool enable,

            Union<int, string> maxUnhealthy,

            string nodeStartupTimeout,

            Pulumi.Kubernetes.Types.Outputs.Cluster.V1Beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplate remediationTemplate,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Cluster.V1Beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditions> unhealthyConditions,

            string unhealthyRange)
        {
            Enable = enable;
            MaxUnhealthy = maxUnhealthy;
            NodeStartupTimeout = nodeStartupTimeout;
            RemediationTemplate = remediationTemplate;
            UnhealthyConditions = unhealthyConditions;
            UnhealthyRange = unhealthyRange;
        }
    }
}
