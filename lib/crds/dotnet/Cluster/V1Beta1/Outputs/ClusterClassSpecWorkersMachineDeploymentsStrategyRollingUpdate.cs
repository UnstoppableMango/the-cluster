// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Cluster.V1Beta1
{

    /// <summary>
    /// Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
    /// </summary>
    [OutputType]
    public sealed class ClusterClassSpecWorkersMachineDeploymentsStrategyRollingUpdate
    {
        /// <summary>
        /// DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
        /// </summary>
        public readonly string DeletePolicy;
        /// <summary>
        /// The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
        /// </summary>
        public readonly Union<int, string> MaxSurge;
        /// <summary>
        /// The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
        /// </summary>
        public readonly Union<int, string> MaxUnavailable;

        [OutputConstructor]
        private ClusterClassSpecWorkersMachineDeploymentsStrategyRollingUpdate(
            string deletePolicy,

            Union<int, string> maxSurge,

            Union<int, string> maxUnavailable)
        {
            DeletePolicy = deletePolicy;
            MaxSurge = maxSurge;
            MaxUnavailable = maxUnavailable;
        }
    }
}
