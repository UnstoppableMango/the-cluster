// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Cluster.V1Beta1
{

    /// <summary>
    /// ControlPlane describes the cluster control plane.
    /// </summary>
    public class ClusterSpecTopologyControlPlaneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this control plane.
        /// </summary>
        [Input("machineHealthCheck")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Cluster.V1Beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckArgs>? MachineHealthCheck { get; set; }

        /// <summary>
        /// Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
        /// </summary>
        [Input("metadata")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Cluster.V1Beta1.ClusterSpecTopologyControlPlaneMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
        /// </summary>
        [Input("nodeDeletionTimeout")]
        public Input<string>? NodeDeletionTimeout { get; set; }

        /// <summary>
        /// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
        /// </summary>
        [Input("nodeDrainTimeout")]
        public Input<string>? NodeDrainTimeout { get; set; }

        /// <summary>
        /// NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
        /// </summary>
        [Input("nodeVolumeDetachTimeout")]
        public Input<string>? NodeVolumeDetachTimeout { get; set; }

        /// <summary>
        /// Replicas is the number of control plane nodes. If the value is nil, the ControlPlane object is created without the number of Replicas and it's assumed that the control plane controller does not implement support for this field. When specified against a control plane provider that lacks support for this field, this value will be ignored.
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        public ClusterSpecTopologyControlPlaneArgs()
        {
        }
        public static new ClusterSpecTopologyControlPlaneArgs Empty => new ClusterSpecTopologyControlPlaneArgs();
    }
}
