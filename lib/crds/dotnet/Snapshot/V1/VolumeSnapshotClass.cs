// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.TheClusterCrds.Snapshot.V1
{
    /// <summary>
    /// VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
    /// </summary>
    [TheClusterCrdsResourceType("kubernetes:snapshot.storage.k8s.io/v1:VolumeSnapshotClass")]
    public partial class VolumeSnapshotClass : KubernetesResource
    {
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
        /// </summary>
        [Output("deletionPolicy")]
        public Output<string> DeletionPolicy { get; private set; } = null!;

        /// <summary>
        /// driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.
        /// </summary>
        [Output("driver")]
        public Output<string> Driver { get; private set; } = null!;

        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        [Output("metadata")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>> Parameters { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeSnapshotClass resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeSnapshotClass(string name, Pulumi.Kubernetes.Types.Inputs.Snapshot.V1.VolumeSnapshotClassArgs? args = null, CustomResourceOptions? options = null)
            : base("kubernetes:snapshot.storage.k8s.io/v1:VolumeSnapshotClass", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }
        internal VolumeSnapshotClass(string name, ImmutableDictionary<string, object?> dictionary, CustomResourceOptions? options = null)
            : base("kubernetes:snapshot.storage.k8s.io/v1:VolumeSnapshotClass", name, new DictionaryResourceArgs(dictionary), MakeResourceOptions(options, ""))
        {
        }

        private VolumeSnapshotClass(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("kubernetes:snapshot.storage.k8s.io/v1:VolumeSnapshotClass", name, null, MakeResourceOptions(options, id))
        {
        }

        private static Pulumi.Kubernetes.Types.Inputs.Snapshot.V1.VolumeSnapshotClassArgs? MakeArgs(Pulumi.Kubernetes.Types.Inputs.Snapshot.V1.VolumeSnapshotClassArgs? args)
        {
            args ??= new Pulumi.Kubernetes.Types.Inputs.Snapshot.V1.VolumeSnapshotClassArgs();
            args.ApiVersion = "snapshot.storage.k8s.io/v1";
            args.Kind = "VolumeSnapshotClass";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeSnapshotClass resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeSnapshotClass Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VolumeSnapshotClass(name, id, options);
        }
    }
}
namespace Pulumi.Kubernetes.Types.Inputs.Snapshot.V1
{

    public class VolumeSnapshotClassArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        /// <summary>
        /// deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
        /// </summary>
        [Input("deletionPolicy")]
        public Input<string>? DeletionPolicy { get; set; }

        /// <summary>
        /// driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("metadata")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs>? Metadata { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        public VolumeSnapshotClassArgs()
        {
        }
        public static new VolumeSnapshotClassArgs Empty => new VolumeSnapshotClassArgs();
    }
}
