// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Networking.V1Alpha1
{

    /// <summary>
    /// TunnelSpec defines the desired state of Tunnel
    /// </summary>
    public class TunnelSpecArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloudflare Credentials
        /// </summary>
        [Input("cloudflare")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Networking.V1Alpha1.TunnelSpecCloudflareArgs>? Cloudflare { get; set; }

        /// <summary>
        /// Existing tunnel object. ExistingTunnel and NewTunnel cannot be both empty and are mutually exclusive.
        /// </summary>
        [Input("existingTunnel")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Networking.V1Alpha1.TunnelSpecExistingTunnelArgs>? ExistingTunnel { get; set; }

        /// <summary>
        /// FallbackTarget speficies the target for requests that do not match an ingress. Defaults to http_status:404
        /// </summary>
        [Input("fallbackTarget")]
        public Input<string>? FallbackTarget { get; set; }

        /// <summary>
        /// Image sets the Cloudflared Image to use. Defaults to the image set during the release of the operator.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// New tunnel object. NewTunnel and ExistingTunnel cannot be both empty and are mutually exclusive.
        /// </summary>
        [Input("newTunnel")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Networking.V1Alpha1.TunnelSpecNewTunnelArgs>? NewTunnel { get; set; }

        /// <summary>
        /// NoTlsVerify disables origin TLS certificate checks when the endpoint is HTTPS.
        /// </summary>
        [Input("noTlsVerify")]
        public Input<bool>? NoTlsVerify { get; set; }

        /// <summary>
        /// OriginCaPool speficies the secret with tls.crt (and other certs as needed to be referred in the service annotation) of the Root CA to be trusted when sending traffic to HTTPS endpoints
        /// </summary>
        [Input("originCaPool")]
        public Input<string>? OriginCaPool { get; set; }

        /// <summary>
        /// Size defines the number of Daemon pods to run for this tunnel
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        public TunnelSpecArgs()
        {
            FallbackTarget = "http_status:404";
            Image = "cloudflare/cloudflared:2022.12.1";
            NoTlsVerify = false;
            Size = 1;
        }
        public static new TunnelSpecArgs Empty => new TunnelSpecArgs();
    }
}
