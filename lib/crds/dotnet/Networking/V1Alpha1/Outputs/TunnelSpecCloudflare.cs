// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Networking.V1Alpha1
{

    /// <summary>
    /// Cloudflare Credentials
    /// </summary>
    [OutputType]
    public sealed class TunnelSpecCloudflare
    {
        /// <summary>
        /// Key in the secret to use for Cloudflare API Key, defaults to CLOUDFLARE_API_KEY. Needs Email also to be provided. For Delete operations for new tunnels only, or as an alternate to API Token
        /// </summary>
        public readonly string CLOUDFLARE_API_KEY;
        /// <summary>
        /// Key in the secret to use for Cloudflare API token, defaults to CLOUDFLARE_API_TOKEN
        /// </summary>
        public readonly string CLOUDFLARE_API_TOKEN;
        /// <summary>
        /// Key in the secret to use as credentials.json for an existing tunnel, defaults to CLOUDFLARE_TUNNEL_CREDENTIAL_FILE
        /// </summary>
        public readonly string CLOUDFLARE_TUNNEL_CREDENTIAL_FILE;
        /// <summary>
        /// Key in the secret to use as tunnel secret for an existing tunnel, defaults to CLOUDFLARE_TUNNEL_CREDENTIAL_SECRET
        /// </summary>
        public readonly string CLOUDFLARE_TUNNEL_CREDENTIAL_SECRET;
        /// <summary>
        /// Account ID in Cloudflare. AccountId and AccountName cannot be both empty. If both are provided, Account ID is used if valid, else falls back to Account Name.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Account Name in Cloudflare. AccountName and AccountId cannot be both empty. If both are provided, Account ID is used if valid, else falls back to Account Name.
        /// </summary>
        public readonly string AccountName;
        /// <summary>
        /// Cloudflare Domain to which this tunnel belongs to
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Email to use along with API Key for Delete operations for new tunnels only, or as an alternate to API Token
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Secret containing Cloudflare API key/token
        /// </summary>
        public readonly string Secret;

        [OutputConstructor]
        private TunnelSpecCloudflare(
            string CLOUDFLARE_API_KEY,

            string CLOUDFLARE_API_TOKEN,

            string CLOUDFLARE_TUNNEL_CREDENTIAL_FILE,

            string CLOUDFLARE_TUNNEL_CREDENTIAL_SECRET,

            string accountId,

            string accountName,

            string domain,

            string email,

            string secret)
        {
            this.CLOUDFLARE_API_KEY = CLOUDFLARE_API_KEY;
            this.CLOUDFLARE_API_TOKEN = CLOUDFLARE_API_TOKEN;
            this.CLOUDFLARE_TUNNEL_CREDENTIAL_FILE = CLOUDFLARE_TUNNEL_CREDENTIAL_FILE;
            this.CLOUDFLARE_TUNNEL_CREDENTIAL_SECRET = CLOUDFLARE_TUNNEL_CREDENTIAL_SECRET;
            AccountId = accountId;
            AccountName = accountName;
            Domain = domain;
            Email = email;
            Secret = secret;
        }
    }
}
