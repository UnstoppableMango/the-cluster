// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Metallb.V1Beta2
{

    /// <summary>
    /// BGPPeerSpec defines the desired state of Peer.
    /// </summary>
    [OutputType]
    public sealed class BGPPeerSpec
    {
        /// <summary>
        /// The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.
        /// </summary>
        public readonly string BfdProfile;
        /// <summary>
        /// To set if the BGPPeer is multi-hops away. Needed for FRR mode only.
        /// </summary>
        public readonly bool EbgpMultiHop;
        /// <summary>
        /// Requested BGP hold time, per RFC4271.
        /// </summary>
        public readonly string HoldTime;
        /// <summary>
        /// Requested BGP keepalive time, per RFC4271.
        /// </summary>
        public readonly string KeepaliveTime;
        /// <summary>
        /// AS number to use for the local end of the session.
        /// </summary>
        public readonly int MyASN;
        /// <summary>
        /// Only connect to this peer on nodes that match one of these selectors.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Metallb.V1Beta2.BGPPeerSpecNodeSelectors> NodeSelectors;
        /// <summary>
        /// Authentication password for routers enforcing TCP MD5 authenticated sessions
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// passwordSecret is name of the authentication secret for BGP Peer. the secret must be of type "kubernetes.io/basic-auth", and created in the same namespace as the MetalLB deployment. The password is stored in the secret as the key "password".
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Metallb.V1Beta2.BGPPeerSpecPasswordSecret PasswordSecret;
        /// <summary>
        /// AS number to expect from the remote end of the session.
        /// </summary>
        public readonly int PeerASN;
        /// <summary>
        /// Address to dial when establishing the session.
        /// </summary>
        public readonly string PeerAddress;
        /// <summary>
        /// Port to dial when establishing the session.
        /// </summary>
        public readonly int PeerPort;
        /// <summary>
        /// BGP router ID to advertise to the peer
        /// </summary>
        public readonly string RouterID;
        /// <summary>
        /// Source address to use when establishing the session.
        /// </summary>
        public readonly string SourceAddress;
        /// <summary>
        /// To set if we want to peer with the BGPPeer using an interface belonging to a host vrf
        /// </summary>
        public readonly string Vrf;

        [OutputConstructor]
        private BGPPeerSpec(
            string bfdProfile,

            bool ebgpMultiHop,

            string holdTime,

            string keepaliveTime,

            int myASN,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Metallb.V1Beta2.BGPPeerSpecNodeSelectors> nodeSelectors,

            string password,

            Pulumi.Kubernetes.Types.Outputs.Metallb.V1Beta2.BGPPeerSpecPasswordSecret passwordSecret,

            int peerASN,

            string peerAddress,

            int peerPort,

            string routerID,

            string sourceAddress,

            string vrf)
        {
            BfdProfile = bfdProfile;
            EbgpMultiHop = ebgpMultiHop;
            HoldTime = holdTime;
            KeepaliveTime = keepaliveTime;
            MyASN = myASN;
            NodeSelectors = nodeSelectors;
            Password = password;
            PasswordSecret = passwordSecret;
            PeerASN = peerASN;
            PeerAddress = peerAddress;
            PeerPort = peerPort;
            RouterID = routerID;
            SourceAddress = sourceAddress;
            Vrf = vrf;
        }
    }
}
