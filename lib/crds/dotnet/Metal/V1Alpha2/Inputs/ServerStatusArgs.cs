// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Metal.V1Alpha2
{

    /// <summary>
    /// ServerStatus defines the observed state of Server.
    /// </summary>
    public class ServerStatusArgs : global::Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Metal.V1Alpha2.ServerStatusAddressesArgs>? _addresses;

        /// <summary>
        /// Addresses lists discovered node IPs.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Metal.V1Alpha2.ServerStatusAddressesArgs> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<Pulumi.Kubernetes.Types.Inputs.Metal.V1Alpha2.ServerStatusAddressesArgs>());
            set => _addresses = value;
        }

        [Input("conditions")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Metal.V1Alpha2.ServerStatusConditionsArgs>? _conditions;

        /// <summary>
        /// Conditions defines current service state of the Server.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Metal.V1Alpha2.ServerStatusConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Pulumi.Kubernetes.Types.Inputs.Metal.V1Alpha2.ServerStatusConditionsArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// InUse is true when server is assigned to some MetalMachine.
        /// </summary>
        [Input("inUse")]
        public Input<bool>? InUse { get; set; }

        /// <summary>
        /// IsClean is true when server disks are wiped.
        /// </summary>
        [Input("isClean")]
        public Input<bool>? IsClean { get; set; }

        /// <summary>
        /// Power is the current power state of the server: "on", "off" or "unknown".
        /// </summary>
        [Input("power")]
        public Input<string>? Power { get; set; }

        /// <summary>
        /// Ready is true when server is accepted and in use.
        /// </summary>
        [Input("ready")]
        public Input<bool>? Ready { get; set; }

        public ServerStatusArgs()
        {
        }
        public static new ServerStatusArgs Empty => new ServerStatusArgs();
    }
}
