// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.K8s.V1
{

    /// <summary>
    /// Upstream defines an upstream.
    /// </summary>
    public class VirtualServerSpecUpstreamsArgs : global::Pulumi.ResourceArgs
    {
        [Input("backup")]
        public Input<string>? Backup { get; set; }

        [Input("backupPort")]
        public Input<int>? BackupPort { get; set; }

        [Input("buffer-size")]
        public Input<string>? BufferSize { get; set; }

        [Input("buffering")]
        public Input<bool>? Buffering { get; set; }

        /// <summary>
        /// UpstreamBuffers defines Buffer Configuration for an Upstream.
        /// </summary>
        [Input("buffers")]
        public Input<Pulumi.Kubernetes.Types.Inputs.K8s.V1.VirtualServerSpecUpstreamsBuffersArgs>? Buffers { get; set; }

        [Input("client-max-body-size")]
        public Input<string>? ClientMaxBodySize { get; set; }

        [Input("connect-timeout")]
        public Input<string>? ConnectTimeout { get; set; }

        [Input("fail-timeout")]
        public Input<string>? FailTimeout { get; set; }

        /// <summary>
        /// HealthCheck defines the parameters for active Upstream HealthChecks.
        /// </summary>
        [Input("healthCheck")]
        public Input<Pulumi.Kubernetes.Types.Inputs.K8s.V1.VirtualServerSpecUpstreamsHealthCheckArgs>? HealthCheck { get; set; }

        [Input("keepalive")]
        public Input<int>? Keepalive { get; set; }

        [Input("lb-method")]
        public Input<string>? LbMethod { get; set; }

        [Input("max-conns")]
        public Input<int>? MaxConns { get; set; }

        [Input("max-fails")]
        public Input<int>? MaxFails { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("next-upstream")]
        public Input<string>? Next-upstream { get; set; }

        [Input("next-upstream-timeout")]
        public Input<string>? NextUpstreamTimeout { get; set; }

        [Input("next-upstream-tries")]
        public Input<int>? NextUpstreamTries { get; set; }

        [Input("ntlm")]
        public Input<bool>? Ntlm { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// UpstreamQueue defines Queue Configuration for an Upstream.
        /// </summary>
        [Input("queue")]
        public Input<Pulumi.Kubernetes.Types.Inputs.K8s.V1.VirtualServerSpecUpstreamsQueueArgs>? Queue { get; set; }

        [Input("read-timeout")]
        public Input<string>? ReadTimeout { get; set; }

        [Input("send-timeout")]
        public Input<string>? Send-timeout { get; set; }

        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// SessionCookie defines the parameters for session persistence.
        /// </summary>
        [Input("sessionCookie")]
        public Input<Pulumi.Kubernetes.Types.Inputs.K8s.V1.VirtualServerSpecUpstreamsSessionCookieArgs>? SessionCookie { get; set; }

        [Input("slow-start")]
        public Input<string>? SlowStart { get; set; }

        [Input("subselector")]
        private InputMap<string>? _subselector;
        public InputMap<string> Subselector
        {
            get => _subselector ?? (_subselector = new InputMap<string>());
            set => _subselector = value;
        }

        /// <summary>
        /// UpstreamTLS defines a TLS configuration for an Upstream.
        /// </summary>
        [Input("tls")]
        public Input<Pulumi.Kubernetes.Types.Inputs.K8s.V1.VirtualServerSpecUpstreamsTlsArgs>? Tls { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("use-cluster-ip")]
        public Input<bool>? UseClusterIp { get; set; }

        public VirtualServerSpecUpstreamsArgs()
        {
        }
        public static new VirtualServerSpecUpstreamsArgs Empty => new VirtualServerSpecUpstreamsArgs();
    }
}
