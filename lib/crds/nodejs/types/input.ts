// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace addons {
    export namespace v1alpha3 {
        /**
         * ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
         */
        export interface ClusterResourceSetBindingSpecArgs {
            /**
             * Bindings is a list of ClusterResourceSets and their resources.
             */
            bindings?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha3.ClusterResourceSetBindingSpecBindingsArgs>[]>;
        }

        /**
         * ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
         */
        export interface ClusterResourceSetBindingSpecBindingsArgs {
            /**
             * ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
             */
            clusterResourceSetName: pulumi.Input<string>;
            /**
             * Resources is a list of resources that the ClusterResourceSet has.
             */
            resources?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha3.ClusterResourceSetBindingSpecBindingsResourcesArgs>[]>;
        }

        /**
         * ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
         */
        export interface ClusterResourceSetBindingSpecBindingsResourcesArgs {
            /**
             * Applied is to track if a resource is applied to the cluster or not.
             */
            applied: pulumi.Input<boolean>;
            /**
             * Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
             */
            hash?: pulumi.Input<string>;
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: pulumi.Input<string>;
            /**
             * LastAppliedTime identifies when this resource was last applied to the cluster.
             */
            lastAppliedTime?: pulumi.Input<string>;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
         */
        export interface ClusterResourceSetSpecArgs {
            /**
             * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable.
             */
            clusterSelector: pulumi.Input<inputs.addons.v1alpha3.ClusterResourceSetSpecClusterSelectorArgs>;
            /**
             * Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
             */
            resources?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha3.ClusterResourceSetSpecResourcesArgs>[]>;
            /**
             * Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
             */
            strategy?: pulumi.Input<string>;
        }

        /**
         * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable.
         */
        export interface ClusterResourceSetSpecClusterSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha3.ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ResourceRef specifies a resource.
         */
        export interface ClusterResourceSetSpecResourcesArgs {
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
         */
        export interface ClusterResourceSetStatusArgs {
            /**
             * Conditions defines current state of the ClusterResourceSet.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha3.ClusterResourceSetStatusConditionsArgs>[]>;
            /**
             * ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
             */
            observedGeneration?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterResourceSetStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }

    export namespace v1alpha4 {
        /**
         * ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
         */
        export interface ClusterResourceSetBindingSpecArgs {
            /**
             * Bindings is a list of ClusterResourceSets and their resources.
             */
            bindings?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha4.ClusterResourceSetBindingSpecBindingsArgs>[]>;
        }

        /**
         * ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
         */
        export interface ClusterResourceSetBindingSpecBindingsArgs {
            /**
             * ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
             */
            clusterResourceSetName: pulumi.Input<string>;
            /**
             * Resources is a list of resources that the ClusterResourceSet has.
             */
            resources?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha4.ClusterResourceSetBindingSpecBindingsResourcesArgs>[]>;
        }

        /**
         * ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
         */
        export interface ClusterResourceSetBindingSpecBindingsResourcesArgs {
            /**
             * Applied is to track if a resource is applied to the cluster or not.
             */
            applied: pulumi.Input<boolean>;
            /**
             * Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
             */
            hash?: pulumi.Input<string>;
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: pulumi.Input<string>;
            /**
             * LastAppliedTime identifies when this resource was last applied to the cluster.
             */
            lastAppliedTime?: pulumi.Input<string>;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
         */
        export interface ClusterResourceSetSpecArgs {
            /**
             * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
             */
            clusterSelector: pulumi.Input<inputs.addons.v1alpha4.ClusterResourceSetSpecClusterSelectorArgs>;
            /**
             * Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
             */
            resources?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha4.ClusterResourceSetSpecResourcesArgs>[]>;
            /**
             * Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
             */
            strategy?: pulumi.Input<string>;
        }

        /**
         * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
         */
        export interface ClusterResourceSetSpecClusterSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha4.ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ResourceRef specifies a resource.
         */
        export interface ClusterResourceSetSpecResourcesArgs {
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
         */
        export interface ClusterResourceSetStatusArgs {
            /**
             * Conditions defines current state of the ClusterResourceSet.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.addons.v1alpha4.ClusterResourceSetStatusConditionsArgs>[]>;
            /**
             * ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
             */
            observedGeneration?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterResourceSetStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }

    export namespace v1beta1 {
        /**
         * ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
         */
        export interface ClusterResourceSetBindingSpecArgs {
            /**
             * Bindings is a list of ClusterResourceSets and their resources.
             */
            bindings?: pulumi.Input<pulumi.Input<inputs.addons.v1beta1.ClusterResourceSetBindingSpecBindingsArgs>[]>;
            /**
             * ClusterName is the name of the Cluster this binding applies to. Note: this field mandatory in v1beta2.
             */
            clusterName?: pulumi.Input<string>;
        }

        /**
         * ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
         */
        export interface ClusterResourceSetBindingSpecBindingsArgs {
            /**
             * ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
             */
            clusterResourceSetName: pulumi.Input<string>;
            /**
             * Resources is a list of resources that the ClusterResourceSet has.
             */
            resources?: pulumi.Input<pulumi.Input<inputs.addons.v1beta1.ClusterResourceSetBindingSpecBindingsResourcesArgs>[]>;
        }

        /**
         * ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
         */
        export interface ClusterResourceSetBindingSpecBindingsResourcesArgs {
            /**
             * Applied is to track if a resource is applied to the cluster or not.
             */
            applied: pulumi.Input<boolean>;
            /**
             * Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
             */
            hash?: pulumi.Input<string>;
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: pulumi.Input<string>;
            /**
             * LastAppliedTime identifies when this resource was last applied to the cluster.
             */
            lastAppliedTime?: pulumi.Input<string>;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
         */
        export interface ClusterResourceSetSpecArgs {
            /**
             * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
             */
            clusterSelector: pulumi.Input<inputs.addons.v1beta1.ClusterResourceSetSpecClusterSelectorArgs>;
            /**
             * Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
             */
            resources?: pulumi.Input<pulumi.Input<inputs.addons.v1beta1.ClusterResourceSetSpecResourcesArgs>[]>;
            /**
             * Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
             */
            strategy?: pulumi.Input<string>;
        }

        /**
         * Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
         */
        export interface ClusterResourceSetSpecClusterSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.addons.v1beta1.ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ResourceRef specifies a resource.
         */
        export interface ClusterResourceSetSpecResourcesArgs {
            /**
             * Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the resource that is in the same namespace with ClusterResourceSet object.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
         */
        export interface ClusterResourceSetStatusArgs {
            /**
             * Conditions defines current state of the ClusterResourceSet.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.addons.v1beta1.ClusterResourceSetStatusConditionsArgs>[]>;
            /**
             * ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
             */
            observedGeneration?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterResourceSetStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }
}

export namespace bootstrap {
    export namespace v1alpha2 {
        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigSpecArgs {
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
        }

        /**
         * TalosConfigStatus defines the observed state of TalosConfig
         */
        export interface TalosConfigStatusArgs {
            /**
             * BootstrapData will be a slice of bootstrap data
             */
            bootstrapData?: pulumi.Input<string>;
            /**
             * ErrorMessage will be set on non-retryable errors
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * ErrorReason will be set on non-retryable errors
             */
            errorReason?: pulumi.Input<string>;
            /**
             * Ready indicates the BootstrapData field is ready to be consumed
             */
            ready?: pulumi.Input<boolean>;
            /**
             * Talos config will be a string containing the config for download
             */
            talosConfig?: pulumi.Input<string>;
        }

        /**
         * TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
         */
        export interface TalosConfigTemplateSpecArgs {
            /**
             * TalosConfigTemplateResource defines the Template structure
             */
            template: pulumi.Input<inputs.bootstrap.v1alpha2.TalosConfigTemplateSpecTemplateArgs>;
        }

        /**
         * TalosConfigTemplateResource defines the Template structure
         */
        export interface TalosConfigTemplateSpecTemplateArgs {
            /**
             * TalosConfigSpec defines the desired state of TalosConfig
             */
            spec?: pulumi.Input<inputs.bootstrap.v1alpha2.TalosConfigTemplateSpecTemplateSpecArgs>;
        }

        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigTemplateSpecTemplateSpecArgs {
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
        }
    }

    export namespace v1alpha3 {
        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigSpecArgs {
            configPatches?: pulumi.Input<pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigSpecConfigPatchesArgs>[]>;
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigSpecHostnameArgs>;
            talosVersion?: pulumi.Input<string>;
        }

        export interface TalosConfigSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosConfigSpecHostnameArgs {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: pulumi.Input<string>;
        }

        /**
         * TalosConfigStatus defines the observed state of TalosConfig
         */
        export interface TalosConfigStatusArgs {
            /**
             * Conditions defines current service state of the TalosConfig.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigStatusConditionsArgs>[]>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script.
             */
            dataSecretName?: pulumi.Input<string>;
            /**
             * FailureMessage will be set on non-retryable errors
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason will be set on non-retryable errors
             */
            failureReason?: pulumi.Input<string>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Ready indicates the BootstrapData field is ready to be consumed
             */
            ready?: pulumi.Input<boolean>;
            /**
             * Talos config will be a string containing the config for download. 
             *  Deprecated: please use `<cluster>-talosconfig` secret.
             */
            talosConfig?: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface TalosConfigStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
         */
        export interface TalosConfigTemplateSpecArgs {
            /**
             * TalosConfigTemplateResource defines the Template structure
             */
            template: pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateArgs>;
        }

        /**
         * TalosConfigTemplateResource defines the Template structure
         */
        export interface TalosConfigTemplateSpecTemplateArgs {
            /**
             * TalosConfigSpec defines the desired state of TalosConfig
             */
            spec?: pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpecArgs>;
        }

        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosConfigTemplateSpecTemplateSpecArgs {
            configPatches?: pulumi.Input<pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs>[]>;
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: pulumi.Input<inputs.bootstrap.v1alpha3.TalosConfigTemplateSpecTemplateSpecHostnameArgs>;
            talosVersion?: pulumi.Input<string>;
        }

        export interface TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosConfigTemplateSpecTemplateSpecHostnameArgs {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: pulumi.Input<string>;
        }
    }
}

export namespace cluster {
    export namespace v1alpha3 {
        /**
         * ClusterSpec defines the desired state of Cluster.
         */
        export interface ClusterSpecArgs {
            /**
             * Cluster network configuration.
             */
            clusterNetwork?: pulumi.Input<inputs.cluster.v1alpha3.ClusterSpecClusterNetworkArgs>;
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: pulumi.Input<inputs.cluster.v1alpha3.ClusterSpecControlPlaneEndpointArgs>;
            /**
             * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
             */
            controlPlaneRef?: pulumi.Input<inputs.cluster.v1alpha3.ClusterSpecControlPlaneRefArgs>;
            /**
             * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
             */
            infrastructureRef?: pulumi.Input<inputs.cluster.v1alpha3.ClusterSpecInfrastructureRefArgs>;
            /**
             * Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
             */
            paused?: pulumi.Input<boolean>;
        }

        /**
         * Cluster network configuration.
         */
        export interface ClusterSpecClusterNetworkArgs {
            /**
             * APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
             */
            apiServerPort?: pulumi.Input<number>;
            /**
             * The network ranges from which Pod networks are allocated.
             */
            pods?: pulumi.Input<inputs.cluster.v1alpha3.ClusterSpecClusterNetworkPodsArgs>;
            /**
             * Domain name for services.
             */
            serviceDomain?: pulumi.Input<string>;
            /**
             * The network ranges from which service VIPs are allocated.
             */
            services?: pulumi.Input<inputs.cluster.v1alpha3.ClusterSpecClusterNetworkServicesArgs>;
        }

        /**
         * The network ranges from which Pod networks are allocated.
         */
        export interface ClusterSpecClusterNetworkPodsArgs {
            cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The network ranges from which service VIPs are allocated.
         */
        export interface ClusterSpecClusterNetworkServicesArgs {
            cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface ClusterSpecControlPlaneEndpointArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
         */
        export interface ClusterSpecControlPlaneRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
         */
        export interface ClusterSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ClusterStatus defines the observed state of Cluster.
         */
        export interface ClusterStatusArgs {
            /**
             * Conditions defines current service state of the cluster.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.ClusterStatusConditionsArgs>[]>;
            /**
             * ControlPlaneInitialized defines if the control plane has been initialized.
             */
            controlPlaneInitialized?: pulumi.Input<boolean>;
            /**
             * ControlPlaneReady defines if the control plane is ready.
             */
            controlPlaneReady?: pulumi.Input<boolean>;
            /**
             * FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
             */
            failureDomains?: pulumi.Input<{[key: string]: pulumi.Input<inputs.cluster.v1alpha3.ClusterStatusFailureDomainsArgs>}>;
            /**
             * FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
         */
        export interface ClusterStatusFailureDomainsArgs {
            /**
             * Attributes is a free form map of attributes an infrastructure provider might use or require.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ControlPlane determines if this failure domain is suitable for use by control plane machines.
             */
            controlPlane?: pulumi.Input<boolean>;
        }

        /**
         * MachineDeploymentSpec defines the desired state of MachineDeployment.
         */
        export interface MachineDeploymentSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * Indicates that the deployment is paused.
             */
            paused?: pulumi.Input<boolean>;
            /**
             * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
             */
            progressDeadlineSeconds?: pulumi.Input<number>;
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: pulumi.Input<number>;
            /**
             * The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
             */
            selector: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecSelectorArgs>;
            /**
             * The deployment strategy to use to replace existing machines with new ones.
             */
            strategy?: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecStrategyArgs>;
            /**
             * Template describes the machines that will be created.
             */
            template: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecTemplateArgs>;
        }

        /**
         * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
         */
        export interface MachineDeploymentSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineDeploymentSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones.
         */
        export interface MachineDeploymentSpecStrategyArgs {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface MachineDeploymentSpecStrategyRollingUpdateArgs {
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachineDeploymentSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineDeploymentSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. 
             *  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). 
             *  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            generateName?: pulumi.Input<string>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. 
             *  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs>[]>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface MachineDeploymentSpecTemplateMetadataOwnerReferencesArgs {
            /**
             * API version of the referent.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineDeploymentSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1alpha3.MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. 
             *  Deprecated: Switch to DataSecretName.
             */
            data?: pulumi.Input<string>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineDeploymentSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineDeploymentStatus defines the observed state of MachineDeployment.
         */
        export interface MachineDeploymentStatusArgs {
            /**
             * Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * The generation observed by the deployment controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
             */
            phase?: pulumi.Input<string>;
            /**
             * Total number of ready machines targeted by this deployment.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated machines targeted by this deployment (their labels match the selector).
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: pulumi.Input<string>;
            /**
             * Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
             */
            unavailableReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated machines targeted by this deployment that have the desired template spec.
             */
            updatedReplicas?: pulumi.Input<number>;
        }

        /**
         * Specification of machine health check policy
         */
        export interface MachineHealthCheckSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: pulumi.Input<number | string>;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated.
             */
            nodeStartupTimeout?: pulumi.Input<string>;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: pulumi.Input<inputs.cluster.v1alpha3.MachineHealthCheckSpecRemediationTemplateArgs>;
            /**
             * Label selector to match machines whose health will be exercised
             */
            selector: pulumi.Input<inputs.cluster.v1alpha3.MachineHealthCheckSpecSelectorArgs>;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineHealthCheckSpecUnhealthyConditionsArgs>[]>;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface MachineHealthCheckSpecRemediationTemplateArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Label selector to match machines whose health will be exercised
         */
        export interface MachineHealthCheckSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineHealthCheckSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineHealthCheckSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface MachineHealthCheckSpecUnhealthyConditionsArgs {
            status: pulumi.Input<string>;
            timeout: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * Most recently observed status of MachineHealthCheck resource
         */
        export interface MachineHealthCheckStatusArgs {
            /**
             * Conditions defines current service state of the MachineHealthCheck.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineHealthCheckStatusConditionsArgs>[]>;
            /**
             * total number of healthy machines counted by this machine health check
             */
            currentHealthy?: pulumi.Input<number>;
            /**
             * total number of machines counted by this machine health check
             */
            expectedMachines?: pulumi.Input<number>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
             */
            remediationsAllowed?: pulumi.Input<number>;
            /**
             * Targets shows the current list of machines the machine health check is watching
             */
            targets?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineHealthCheckStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * MachinePoolSpec defines the desired state of MachinePool.
         */
        export interface MachinePoolSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomains is the list of failure domains this MachinePool should be attached to.
             */
            failureDomains?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
             */
            providerIDList?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: pulumi.Input<number>;
            /**
             * The deployment strategy to use to replace existing machine instances with new ones.
             */
            strategy?: pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecStrategyArgs>;
            /**
             * Template describes the machines that will be created.
             */
            template: pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecTemplateArgs>;
        }

        /**
         * The deployment strategy to use to replace existing machine instances with new ones.
         */
        export interface MachinePoolSpecStrategyArgs {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Currently the only supported strategy is "RollingUpdate". Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface MachinePoolSpecStrategyRollingUpdateArgs {
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachinePoolSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachinePoolSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. 
             *  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). 
             *  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            generateName?: pulumi.Input<string>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. 
             *  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecTemplateMetadataOwnerReferencesArgs>[]>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface MachinePoolSpecTemplateMetadataOwnerReferencesArgs {
            /**
             * API version of the referent.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachinePoolSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1alpha3.MachinePoolSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. 
             *  Deprecated: Switch to DataSecretName.
             */
            data?: pulumi.Input<string>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachinePoolSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachinePoolStatus defines the observed state of MachinePool.
         */
        export interface MachinePoolStatusArgs {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: pulumi.Input<boolean>;
            /**
             * Conditions define the current service state of the MachinePool.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachinePoolStatusConditionsArgs>[]>;
            /**
             * FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * NodeRefs will point to the corresponding Nodes if it they exist.
             */
            nodeRefs?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachinePoolStatusNodeRefsArgs>[]>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
            /**
             * The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
             */
            unavailableReplicas?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachinePoolStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MachinePoolStatusNodeRefsArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineSetSpec defines the desired state of MachineSet.
         */
        export interface MachineSetSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
             */
            deletePolicy?: pulumi.Input<string>;
            /**
             * MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecSelectorArgs>;
            /**
             * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
             */
            template?: pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecTemplateArgs>;
        }

        /**
         * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface MachineSetSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineSetSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
         */
        export interface MachineSetSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineSetSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. 
             *  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). 
             *  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            generateName?: pulumi.Input<string>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. 
             *  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. 
             *  Deprecated: This field has no function and is going to be removed in a next release.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecTemplateMetadataOwnerReferencesArgs>[]>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface MachineSetSpecTemplateMetadataOwnerReferencesArgs {
            /**
             * API version of the referent.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineSetSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSetSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1alpha3.MachineSetSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. 
             *  Deprecated: Switch to DataSecretName.
             */
            data?: pulumi.Input<string>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
         */
        export interface MachineSetSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSetSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineSetStatus defines the observed state of MachineSet.
         */
        export interface MachineSetStatusArgs {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
             */
            availableReplicas?: pulumi.Input<number>;
            failureMessage?: pulumi.Input<string>;
            /**
             * In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption. 
             *  These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * The number of replicas that have labels matching the labels of the machine template of the MachineSet.
             */
            fullyLabeledReplicas?: pulumi.Input<number>;
            /**
             * ObservedGeneration reflects the generation of the most recently observed MachineSet.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: pulumi.Input<string>;
        }

        /**
         * MachineSpec defines the desired state of Machine.
         */
        export interface MachineSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha3.MachineSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1alpha3.MachineSpecInfrastructureRefArgs>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1alpha3.MachineSpecBootstrapConfigRefArgs>;
            /**
             * Data contains the bootstrap data, such as cloud-init details scripts. If nil, the Machine should remain in the Pending state. 
             *  Deprecated: Switch to DataSecretName.
             */
            data?: pulumi.Input<string>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.Data without the need of a controller.
         */
        export interface MachineSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineStatus defines the observed state of Machine.
         */
        export interface MachineStatusArgs {
            /**
             * Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineStatusAddressesArgs>[]>;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: pulumi.Input<boolean>;
            /**
             * Conditions defines current service state of the Machine.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha3.MachineStatusConditionsArgs>[]>;
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * LastUpdated identifies when the phase of the Machine last transitioned.
             */
            lastUpdated?: pulumi.Input<string>;
            /**
             * NodeRef will point to the corresponding Node if it exists.
             */
            nodeRef?: pulumi.Input<inputs.cluster.v1alpha3.MachineStatusNodeRefArgs>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
            /**
             * Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MachineStatusAddressesArgs {
            /**
             * The machine address.
             */
            address: pulumi.Input<string>;
            /**
             * Machine address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * NodeRef will point to the corresponding Node if it exists.
         */
        export interface MachineStatusNodeRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }
    }

    export namespace v1alpha4 {
        /**
         * ClusterClassSpec describes the desired state of the ClusterClass.
         */
        export interface ClusterClassSpecArgs {
            /**
             * ControlPlane is a reference to a local struct that holds the details for provisioning the Control Plane for the Cluster.
             */
            controlPlane?: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecControlPlaneArgs>;
            /**
             * Infrastructure is a reference to a provider-specific template that holds the details for provisioning infrastructure specific cluster for the underlying provider. The underlying provider is responsible for the implementation of the template to an infrastructure cluster.
             */
            infrastructure?: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecInfrastructureArgs>;
            /**
             * Workers describes the worker nodes for the cluster. It is a collection of node types which can be used to create the worker nodes of the cluster.
             */
            workers?: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecWorkersArgs>;
        }

        /**
         * ControlPlane is a reference to a local struct that holds the details for provisioning the Control Plane for the Cluster.
         */
        export interface ClusterClassSpecControlPlaneArgs {
            /**
             * MachineTemplate defines the metadata and infrastructure information for control plane machines. 
             *  This field is supported if and only if the control plane provider template referenced above is Machine based and supports setting replicas.
             */
            machineInfrastructure?: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecControlPlaneMachineInfrastructureArgs>;
            /**
             * Metadata is the metadata applied to the machines of the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the topology. 
             *  This field is supported if and only if the control plane provider template referenced is Machine based.
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecControlPlaneMetadataArgs>;
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecControlPlaneRefArgs>;
        }

        /**
         * MachineTemplate defines the metadata and infrastructure information for control plane machines. 
         *  This field is supported if and only if the control plane provider template referenced above is Machine based and supports setting replicas.
         */
        export interface ClusterClassSpecControlPlaneMachineInfrastructureArgs {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecControlPlaneMachineInfrastructureRefArgs>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecControlPlaneMachineInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Metadata is the metadata applied to the machines of the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the topology. 
         *  This field is supported if and only if the control plane provider template referenced is Machine based.
         */
        export interface ClusterClassSpecControlPlaneMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecControlPlaneRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Infrastructure is a reference to a provider-specific template that holds the details for provisioning infrastructure specific cluster for the underlying provider. The underlying provider is responsible for the implementation of the template to an infrastructure cluster.
         */
        export interface ClusterClassSpecInfrastructureArgs {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecInfrastructureRefArgs>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Workers describes the worker nodes for the cluster. It is a collection of node types which can be used to create the worker nodes of the cluster.
         */
        export interface ClusterClassSpecWorkersArgs {
            /**
             * MachineDeployments is a list of machine deployment classes that can be used to create a set of worker nodes.
             */
            machineDeployments?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsArgs>[]>;
        }

        /**
         * MachineDeploymentClass serves as a template to define a set of worker nodes of the cluster provisioned using the `ClusterClass`.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsArgs {
            /**
             * Class denotes a type of worker node present in the cluster, this name MUST be unique within a ClusterClass and can be referenced in the Cluster to create a managed MachineDeployment.
             */
            class: pulumi.Input<string>;
            /**
             * Template is a local struct containing a collection of templates for creation of MachineDeployment objects representing a set of worker nodes.
             */
            template: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateArgs>;
        }

        /**
         * Template is a local struct containing a collection of templates for creation of MachineDeployment objects representing a set of worker nodes.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateArgs {
            /**
             * Bootstrap contains the bootstrap template reference to be used for the creation of worker Machines.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapArgs>;
            /**
             * Infrastructure contains the infrastructure template reference to be used for the creation of worker Machines.
             */
            infrastructure: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureArgs>;
            /**
             * Metadata is the metadata applied to the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the topology.
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateMetadataArgs>;
        }

        /**
         * Bootstrap contains the bootstrap template reference to be used for the creation of worker Machines.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapArgs {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapRefArgs>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Infrastructure contains the infrastructure template reference to be used for the creation of worker Machines.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureArgs {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1alpha4.ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureRefArgs>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Metadata is the metadata applied to the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the topology.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * ClusterSpec defines the desired state of Cluster.
         */
        export interface ClusterSpecArgs {
            /**
             * Cluster network configuration.
             */
            clusterNetwork?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecClusterNetworkArgs>;
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecControlPlaneEndpointArgs>;
            /**
             * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
             */
            controlPlaneRef?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecControlPlaneRefArgs>;
            /**
             * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
             */
            infrastructureRef?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecInfrastructureRefArgs>;
            /**
             * Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
             */
            paused?: pulumi.Input<boolean>;
            /**
             * This encapsulates the topology for the cluster. NOTE: It is required to enable the ClusterTopology feature gate flag to activate managed topologies support; this feature is highly experimental, and parts of it might still be not implemented.
             */
            topology?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecTopologyArgs>;
        }

        /**
         * Cluster network configuration.
         */
        export interface ClusterSpecClusterNetworkArgs {
            /**
             * APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
             */
            apiServerPort?: pulumi.Input<number>;
            /**
             * The network ranges from which Pod networks are allocated.
             */
            pods?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecClusterNetworkPodsArgs>;
            /**
             * Domain name for services.
             */
            serviceDomain?: pulumi.Input<string>;
            /**
             * The network ranges from which service VIPs are allocated.
             */
            services?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecClusterNetworkServicesArgs>;
        }

        /**
         * The network ranges from which Pod networks are allocated.
         */
        export interface ClusterSpecClusterNetworkPodsArgs {
            cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The network ranges from which service VIPs are allocated.
         */
        export interface ClusterSpecClusterNetworkServicesArgs {
            cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface ClusterSpecControlPlaneEndpointArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
         */
        export interface ClusterSpecControlPlaneRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
         */
        export interface ClusterSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * This encapsulates the topology for the cluster. NOTE: It is required to enable the ClusterTopology feature gate flag to activate managed topologies support; this feature is highly experimental, and parts of it might still be not implemented.
         */
        export interface ClusterSpecTopologyArgs {
            /**
             * The name of the ClusterClass object to create the topology.
             */
            class: pulumi.Input<string>;
            /**
             * ControlPlane describes the cluster control plane.
             */
            controlPlane?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecTopologyControlPlaneArgs>;
            /**
             * RolloutAfter performs a rollout of the entire cluster one component at a time, control plane first and then machine deployments.
             */
            rolloutAfter?: pulumi.Input<string>;
            /**
             * The Kubernetes version of the cluster.
             */
            version: pulumi.Input<string>;
            /**
             * Workers encapsulates the different constructs that form the worker nodes for the cluster.
             */
            workers?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecTopologyWorkersArgs>;
        }

        /**
         * ControlPlane describes the cluster control plane.
         */
        export interface ClusterSpecTopologyControlPlaneArgs {
            /**
             * Metadata is the metadata applied to the machines of the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass. 
             *  This field is supported if and only if the control plane provider template referenced in the ClusterClass is Machine based.
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecTopologyControlPlaneMetadataArgs>;
            /**
             * Replicas is the number of control plane nodes. If the value is nil, the ControlPlane object is created without the number of Replicas and it's assumed that the control plane controller does not implement support for this field. When specified against a control plane provider that lacks support for this field, this value will be ignored.
             */
            replicas?: pulumi.Input<number>;
        }

        /**
         * Metadata is the metadata applied to the machines of the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass. 
         *  This field is supported if and only if the control plane provider template referenced in the ClusterClass is Machine based.
         */
        export interface ClusterSpecTopologyControlPlaneMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Workers encapsulates the different constructs that form the worker nodes for the cluster.
         */
        export interface ClusterSpecTopologyWorkersArgs {
            /**
             * MachineDeployments is a list of machine deployments in the cluster.
             */
            machineDeployments?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecTopologyWorkersMachineDeploymentsArgs>[]>;
        }

        /**
         * MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology. This set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsArgs {
            /**
             * Class is the name of the MachineDeploymentClass used to create the set of worker nodes. This should match one of the deployment classes defined in the ClusterClass object mentioned in the `Cluster.Spec.Class` field.
             */
            class: pulumi.Input<string>;
            /**
             * Metadata is the metadata applied to the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha4.ClusterSpecTopologyWorkersMachineDeploymentsMetadataArgs>;
            /**
             * Name is the unique identifier for this MachineDeploymentTopology. The value is used with other unique identifiers to create a MachineDeployment's Name (e.g. cluster's name, etc). In case the name is greater than the allowed maximum length, the values are hashed together.
             */
            name: pulumi.Input<string>;
            /**
             * Replicas is the number of worker nodes belonging to this set. If the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to zero) and it's assumed that an external entity (like cluster autoscaler) is responsible for the management of this value.
             */
            replicas?: pulumi.Input<number>;
        }

        /**
         * Metadata is the metadata applied to the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * ClusterStatus defines the observed state of Cluster.
         */
        export interface ClusterStatusArgs {
            /**
             * Conditions defines current service state of the cluster.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.ClusterStatusConditionsArgs>[]>;
            /**
             * ControlPlaneReady defines if the control plane is ready.
             */
            controlPlaneReady?: pulumi.Input<boolean>;
            /**
             * FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
             */
            failureDomains?: pulumi.Input<{[key: string]: pulumi.Input<inputs.cluster.v1alpha4.ClusterStatusFailureDomainsArgs>}>;
            /**
             * FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
         */
        export interface ClusterStatusFailureDomainsArgs {
            /**
             * Attributes is a free form map of attributes an infrastructure provider might use or require.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ControlPlane determines if this failure domain is suitable for use by control plane machines.
             */
            controlPlane?: pulumi.Input<boolean>;
        }

        /**
         * MachineDeploymentSpec defines the desired state of MachineDeployment.
         */
        export interface MachineDeploymentSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * Indicates that the deployment is paused.
             */
            paused?: pulumi.Input<boolean>;
            /**
             * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
             */
            progressDeadlineSeconds?: pulumi.Input<number>;
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: pulumi.Input<number>;
            /**
             * The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
             */
            selector: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecSelectorArgs>;
            /**
             * The deployment strategy to use to replace existing machines with new ones.
             */
            strategy?: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecStrategyArgs>;
            /**
             * Template describes the machines that will be created.
             */
            template: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecTemplateArgs>;
        }
        /**
         * machineDeploymentSpecArgsProvideDefaults sets the appropriate defaults for MachineDeploymentSpecArgs
         */
        export function machineDeploymentSpecArgsProvideDefaults(val: MachineDeploymentSpecArgs): MachineDeploymentSpecArgs {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
         */
        export interface MachineDeploymentSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineDeploymentSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones.
         */
        export interface MachineDeploymentSpecStrategyArgs {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface MachineDeploymentSpecStrategyRollingUpdateArgs {
            /**
             * DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
             */
            deletePolicy?: pulumi.Input<string>;
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachineDeploymentSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineDeploymentSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineDeploymentSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineDeploymentSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineDeploymentStatus defines the observed state of MachineDeployment.
         */
        export interface MachineDeploymentStatusArgs {
            /**
             * Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * Conditions defines current service state of the MachineDeployment.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineDeploymentStatusConditionsArgs>[]>;
            /**
             * The generation observed by the deployment controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
             */
            phase?: pulumi.Input<string>;
            /**
             * Total number of ready machines targeted by this deployment.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated machines targeted by this deployment (their labels match the selector).
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: pulumi.Input<string>;
            /**
             * Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
             */
            unavailableReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated machines targeted by this deployment that have the desired template spec.
             */
            updatedReplicas?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineDeploymentStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Specification of machine health check policy
         */
        export interface MachineHealthCheckSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: pulumi.Input<number | string>;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If not set, this value is defaulted to 10 minutes. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: pulumi.Input<string>;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: pulumi.Input<inputs.cluster.v1alpha4.MachineHealthCheckSpecRemediationTemplateArgs>;
            /**
             * Label selector to match machines whose health will be exercised
             */
            selector: pulumi.Input<inputs.cluster.v1alpha4.MachineHealthCheckSpecSelectorArgs>;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineHealthCheckSpecUnhealthyConditionsArgs>[]>;
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: pulumi.Input<string>;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface MachineHealthCheckSpecRemediationTemplateArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Label selector to match machines whose health will be exercised
         */
        export interface MachineHealthCheckSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineHealthCheckSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineHealthCheckSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface MachineHealthCheckSpecUnhealthyConditionsArgs {
            status: pulumi.Input<string>;
            timeout: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * Most recently observed status of MachineHealthCheck resource
         */
        export interface MachineHealthCheckStatusArgs {
            /**
             * Conditions defines current service state of the MachineHealthCheck.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineHealthCheckStatusConditionsArgs>[]>;
            /**
             * total number of healthy machines counted by this machine health check
             */
            currentHealthy?: pulumi.Input<number>;
            /**
             * total number of machines counted by this machine health check
             */
            expectedMachines?: pulumi.Input<number>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
             */
            remediationsAllowed?: pulumi.Input<number>;
            /**
             * Targets shows the current list of machines the machine health check is watching
             */
            targets?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineHealthCheckStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * MachinePoolSpec defines the desired state of MachinePool.
         */
        export interface MachinePoolSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomains is the list of failure domains this MachinePool should be attached to.
             */
            failureDomains?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
             */
            providerIDList?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Template describes the machines that will be created.
             */
            template: pulumi.Input<inputs.cluster.v1alpha4.MachinePoolSpecTemplateArgs>;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachinePoolSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha4.MachinePoolSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1alpha4.MachinePoolSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachinePoolSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachinePoolSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha4.MachinePoolSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1alpha4.MachinePoolSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1alpha4.MachinePoolSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachinePoolSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachinePoolStatus defines the observed state of MachinePool.
         */
        export interface MachinePoolStatusArgs {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: pulumi.Input<boolean>;
            /**
             * Conditions define the current service state of the MachinePool.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachinePoolStatusConditionsArgs>[]>;
            /**
             * FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * NodeRefs will point to the corresponding Nodes if it they exist.
             */
            nodeRefs?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachinePoolStatusNodeRefsArgs>[]>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
            /**
             * The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
             */
            unavailableReplicas?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachinePoolStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MachinePoolStatusNodeRefsArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineSetSpec defines the desired state of MachineSet.
         */
        export interface MachineSetSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
             */
            deletePolicy?: pulumi.Input<string>;
            /**
             * MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: pulumi.Input<inputs.cluster.v1alpha4.MachineSetSpecSelectorArgs>;
            /**
             * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
             */
            template?: pulumi.Input<inputs.cluster.v1alpha4.MachineSetSpecTemplateArgs>;
        }
        /**
         * machineSetSpecArgsProvideDefaults sets the appropriate defaults for MachineSetSpecArgs
         */
        export function machineSetSpecArgsProvideDefaults(val: MachineSetSpecArgs): MachineSetSpecArgs {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface MachineSetSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineSetSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineSetSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
         */
        export interface MachineSetSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1alpha4.MachineSetSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1alpha4.MachineSetSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineSetSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineSetSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha4.MachineSetSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1alpha4.MachineSetSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSetSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1alpha4.MachineSetSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineSetSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSetSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineSetStatus defines the observed state of MachineSet.
         */
        export interface MachineSetStatusArgs {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * Conditions defines current service state of the MachineSet.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineSetStatusConditionsArgs>[]>;
            failureMessage?: pulumi.Input<string>;
            /**
             * In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption. 
             *  These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * The number of replicas that have labels matching the labels of the machine template of the MachineSet.
             */
            fullyLabeledReplicas?: pulumi.Input<number>;
            /**
             * ObservedGeneration reflects the generation of the most recently observed MachineSet.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineSetStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * MachineSpec defines the desired state of Machine.
         */
        export interface MachineSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1alpha4.MachineSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1alpha4.MachineSpecInfrastructureRefArgs>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1alpha4.MachineSpecBootstrapConfigRefArgs>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineStatus defines the observed state of Machine.
         */
        export interface MachineStatusArgs {
            /**
             * Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineStatusAddressesArgs>[]>;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: pulumi.Input<boolean>;
            /**
             * Conditions defines current service state of the Machine.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1alpha4.MachineStatusConditionsArgs>[]>;
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * LastUpdated identifies when the phase of the Machine last transitioned.
             */
            lastUpdated?: pulumi.Input<string>;
            /**
             * NodeInfo is a set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
             */
            nodeInfo?: pulumi.Input<inputs.cluster.v1alpha4.MachineStatusNodeInfoArgs>;
            /**
             * NodeRef will point to the corresponding Node if it exists.
             */
            nodeRef?: pulumi.Input<inputs.cluster.v1alpha4.MachineStatusNodeRefArgs>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
            /**
             * Version specifies the current version of Kubernetes running on the corresponding Node. This is meant to be a means of bubbling up status from the Node to the Machine. It is entirely optional, but useful for end-user UX if it’s present.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MachineStatusAddressesArgs {
            /**
             * The machine address.
             */
            address: pulumi.Input<string>;
            /**
             * Machine address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * NodeInfo is a set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
         */
        export interface MachineStatusNodeInfoArgs {
            /**
             * The Architecture reported by the node
             */
            architecture: pulumi.Input<string>;
            /**
             * Boot ID reported by the node.
             */
            bootID: pulumi.Input<string>;
            /**
             * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
             */
            containerRuntimeVersion: pulumi.Input<string>;
            /**
             * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
             */
            kernelVersion: pulumi.Input<string>;
            /**
             * KubeProxy Version reported by the node.
             */
            kubeProxyVersion: pulumi.Input<string>;
            /**
             * Kubelet Version reported by the node.
             */
            kubeletVersion: pulumi.Input<string>;
            /**
             * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
             */
            machineID: pulumi.Input<string>;
            /**
             * The Operating System reported by the node
             */
            operatingSystem: pulumi.Input<string>;
            /**
             * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
             */
            osImage: pulumi.Input<string>;
            /**
             * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
             */
            systemUUID: pulumi.Input<string>;
        }

        /**
         * NodeRef will point to the corresponding Node if it exists.
         */
        export interface MachineStatusNodeRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }
    }

    export namespace v1beta1 {
        /**
         * ClusterClassSpec describes the desired state of the ClusterClass.
         */
        export interface ClusterClassSpecArgs {
            /**
             * ControlPlane is a reference to a local struct that holds the details for provisioning the Control Plane for the Cluster.
             */
            controlPlane?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneArgs>;
            /**
             * Infrastructure is a reference to a provider-specific template that holds the details for provisioning infrastructure specific cluster for the underlying provider. The underlying provider is responsible for the implementation of the template to an infrastructure cluster.
             */
            infrastructure?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecInfrastructureArgs>;
            /**
             * Patches defines the patches which are applied to customize referenced templates of a ClusterClass. Note: Patches will be applied in the order of the array.
             */
            patches?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecPatchesArgs>[]>;
            /**
             * Variables defines the variables which can be configured in the Cluster topology and are then used in patches.
             */
            variables?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecVariablesArgs>[]>;
            /**
             * Workers describes the worker nodes for the cluster. It is a collection of node types which can be used to create the worker nodes of the cluster.
             */
            workers?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersArgs>;
        }

        /**
         * ControlPlane is a reference to a local struct that holds the details for provisioning the Control Plane for the Cluster.
         */
        export interface ClusterClassSpecControlPlaneArgs {
            /**
             * MachineHealthCheck defines a MachineHealthCheck for this ControlPlaneClass. This field is supported if and only if the ControlPlane provider template referenced above is Machine based and supports setting replicas.
             */
            machineHealthCheck?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineHealthCheckArgs>;
            /**
             * MachineInfrastructure defines the metadata and infrastructure information for control plane machines. 
             *  This field is supported if and only if the control plane provider template referenced above is Machine based and supports setting replicas.
             */
            machineInfrastructure?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineInfrastructureArgs>;
            /**
             * Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the topology. 
             *  This field is supported if and only if the control plane provider template referenced is Machine based.
             */
            metadata?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneMetadataArgs>;
            /**
             * NamingStrategy allows changing the naming pattern used when creating the control plane provider object.
             */
            namingStrategy?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneNamingStrategyArgs>;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds. NOTE: This value can be overridden while defining a Cluster.Topology.
             */
            nodeDeletionTimeout?: pulumi.Input<string>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout` NOTE: This value can be overridden while defining a Cluster.Topology.
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations. NOTE: This value can be overridden while defining a Cluster.Topology.
             */
            nodeVolumeDetachTimeout?: pulumi.Input<string>;
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneRefArgs>;
        }

        /**
         * MachineHealthCheck defines a MachineHealthCheck for this ControlPlaneClass. This field is supported if and only if the ControlPlane provider template referenced above is Machine based and supports setting replicas.
         */
        export interface ClusterClassSpecControlPlaneMachineHealthCheckArgs {
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: pulumi.Input<number | string>;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: pulumi.Input<string>;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineHealthCheckRemediationTemplateArgs>;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineHealthCheckUnhealthyConditionsArgs>[]>;
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: pulumi.Input<string>;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface ClusterClassSpecControlPlaneMachineHealthCheckRemediationTemplateArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface ClusterClassSpecControlPlaneMachineHealthCheckUnhealthyConditionsArgs {
            status: pulumi.Input<string>;
            timeout: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * MachineInfrastructure defines the metadata and infrastructure information for control plane machines. 
         *  This field is supported if and only if the control plane provider template referenced above is Machine based and supports setting replicas.
         */
        export interface ClusterClassSpecControlPlaneMachineInfrastructureArgs {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecControlPlaneMachineInfrastructureRefArgs>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecControlPlaneMachineInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the topology. 
         *  This field is supported if and only if the control plane provider template referenced is Machine based.
         */
        export interface ClusterClassSpecControlPlaneMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * NamingStrategy allows changing the naming pattern used when creating the control plane provider object.
         */
        export interface ClusterClassSpecControlPlaneNamingStrategyArgs {
            /**
             * Template defines the template to use for generating the name of the ControlPlane object. If not defined, it will fallback to `{{ .cluster.name }}-{{ .random }}`. If the templated string exceeds 63 characters, it will be trimmed to 58 characters and will get concatenated with a random suffix of length 5. The templating mechanism provides the following arguments: * `.cluster.name`: The name of the cluster object. * `.random`: A random alphanumeric string, without vowels, of length 5.
             */
            template?: pulumi.Input<string>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecControlPlaneRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Infrastructure is a reference to a provider-specific template that holds the details for provisioning infrastructure specific cluster for the underlying provider. The underlying provider is responsible for the implementation of the template to an infrastructure cluster.
         */
        export interface ClusterClassSpecInfrastructureArgs {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecInfrastructureRefArgs>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ClusterClassPatch defines a patch which is applied to customize the referenced templates.
         */
        export interface ClusterClassSpecPatchesArgs {
            /**
             * Definitions define inline patches. Note: Patches will be applied in the order of the array. Note: Exactly one of Definitions or External must be set.
             */
            definitions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsArgs>[]>;
            /**
             * Description is a human-readable description of this patch.
             */
            description?: pulumi.Input<string>;
            /**
             * EnabledIf is a Go template to be used to calculate if a patch should be enabled. It can reference variables defined in .spec.variables and builtin variables. The patch will be enabled if the template evaluates to `true`, otherwise it will be disabled. If EnabledIf is not set, the patch will be enabled per default.
             */
            enabledIf?: pulumi.Input<string>;
            /**
             * External defines an external patch. Note: Exactly one of Definitions or External must be set.
             */
            external?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecPatchesExternalArgs>;
            /**
             * Name of the patch.
             */
            name: pulumi.Input<string>;
        }

        /**
         * PatchDefinition defines a patch which is applied to customize the referenced templates.
         */
        export interface ClusterClassSpecPatchesDefinitionsArgs {
            /**
             * JSONPatches defines the patches which should be applied on the templates matching the selector. Note: Patches will be applied in the order of the array.
             */
            jsonPatches: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsJsonPatchesArgs>[]>;
            /**
             * Selector defines on which templates the patch should be applied.
             */
            selector: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsSelectorArgs>;
        }

        /**
         * JSONPatch defines a JSON patch.
         */
        export interface ClusterClassSpecPatchesDefinitionsJsonPatchesArgs {
            /**
             * Op defines the operation of the patch. Note: Only `add`, `replace` and `remove` are supported.
             */
            op: pulumi.Input<string>;
            /**
             * Path defines the path of the patch. Note: Only the spec of a template can be patched, thus the path has to start with /spec/. Note: For now the only allowed array modifications are `append` and `prepend`, i.e.: * for op: `add`: only index 0 (prepend) and - (append) are allowed * for op: `replace` or `remove`: no indexes are allowed
             */
            path: pulumi.Input<string>;
            /**
             * Value defines the value of the patch. Note: Either Value or ValueFrom is required for add and replace operations. Only one of them is allowed to be set at the same time. Note: We have to use apiextensionsv1.JSON instead of our JSON type, because controller-tools has a hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type (unset type field). Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
             */
            value?: pulumi.Input<{[key: string]: any}>;
            /**
             * ValueFrom defines the value of the patch. Note: Either Value or ValueFrom is required for add and replace operations. Only one of them is allowed to be set at the same time.
             */
            valueFrom?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsJsonPatchesValueFromArgs>;
        }

        /**
         * ValueFrom defines the value of the patch. Note: Either Value or ValueFrom is required for add and replace operations. Only one of them is allowed to be set at the same time.
         */
        export interface ClusterClassSpecPatchesDefinitionsJsonPatchesValueFromArgs {
            /**
             * Template is the Go template to be used to calculate the value. A template can reference variables defined in .spec.variables and builtin variables. Note: The template must evaluate to a valid YAML or JSON value.
             */
            template?: pulumi.Input<string>;
            /**
             * Variable is the variable to be used as value. Variable can be one of the variables defined in .spec.variables or a builtin variable.
             */
            variable?: pulumi.Input<string>;
        }

        /**
         * Selector defines on which templates the patch should be applied.
         */
        export interface ClusterClassSpecPatchesDefinitionsSelectorArgs {
            /**
             * APIVersion filters templates by apiVersion.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * Kind filters templates by kind.
             */
            kind: pulumi.Input<string>;
            /**
             * MatchResources selects templates based on where they are referenced.
             */
            matchResources: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsSelectorMatchResourcesArgs>;
        }

        /**
         * MatchResources selects templates based on where they are referenced.
         */
        export interface ClusterClassSpecPatchesDefinitionsSelectorMatchResourcesArgs {
            /**
             * ControlPlane selects templates referenced in .spec.ControlPlane. Note: this will match the controlPlane and also the controlPlane machineInfrastructure (depending on the kind and apiVersion).
             */
            controlPlane?: pulumi.Input<boolean>;
            /**
             * InfrastructureCluster selects templates referenced in .spec.infrastructure.
             */
            infrastructureCluster?: pulumi.Input<boolean>;
            /**
             * MachineDeploymentClass selects templates referenced in specific MachineDeploymentClasses in .spec.workers.machineDeployments.
             */
            machineDeploymentClass?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecPatchesDefinitionsSelectorMatchResourcesMachineDeploymentClassArgs>;
        }

        /**
         * MachineDeploymentClass selects templates referenced in specific MachineDeploymentClasses in .spec.workers.machineDeployments.
         */
        export interface ClusterClassSpecPatchesDefinitionsSelectorMatchResourcesMachineDeploymentClassArgs {
            /**
             * Names selects templates by class names.
             */
            names?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * External defines an external patch. Note: Exactly one of Definitions or External must be set.
         */
        export interface ClusterClassSpecPatchesExternalArgs {
            /**
             * DiscoverVariablesExtension references an extension which is called to discover variables.
             */
            discoverVariablesExtension?: pulumi.Input<string>;
            /**
             * GenerateExtension references an extension which is called to generate patches.
             */
            generateExtension?: pulumi.Input<string>;
            /**
             * Settings defines key value pairs to be passed to the extensions. Values defined here take precedence over the values defined in the corresponding ExtensionConfig.
             */
            settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ValidateExtension references an extension which is called to validate the topology.
             */
            validateExtension?: pulumi.Input<string>;
        }

        /**
         * ClusterClassVariable defines a variable which can be configured in the Cluster topology and used in patches.
         */
        export interface ClusterClassSpecVariablesArgs {
            /**
             * Name of the variable.
             */
            name: pulumi.Input<string>;
            /**
             * Required specifies if the variable is required. Note: this applies to the variable as a whole and thus the top-level object defined in the schema. If nested fields are required, this will be specified inside the schema.
             */
            required: pulumi.Input<boolean>;
            /**
             * Schema defines the schema of the variable.
             */
            schema: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecVariablesSchemaArgs>;
        }

        /**
         * Schema defines the schema of the variable.
         */
        export interface ClusterClassSpecVariablesSchemaArgs {
            /**
             * OpenAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
             */
            openAPIV3Schema: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecVariablesSchemaOpenAPIV3SchemaArgs>;
        }

        /**
         * OpenAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
         */
        export interface ClusterClassSpecVariablesSchemaOpenAPIV3SchemaArgs {
            /**
             * AdditionalProperties specifies the schema of values in a map (keys are always strings). NOTE: Can only be set if type is object. NOTE: AdditionalProperties is mutually exclusive with Properties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            additionalProperties?: pulumi.Input<{[key: string]: any}>;
            /**
             * Description is a human-readable description of this variable.
             */
            description?: pulumi.Input<string>;
            /**
             * Enum is the list of valid values of the variable. NOTE: Can be set for all types.
             */
            enum?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            /**
             * Example is an example for this variable.
             */
            example?: pulumi.Input<{[key: string]: any}>;
            /**
             * ExclusiveMaximum specifies if the Maximum is exclusive. NOTE: Can only be set if type is integer or number.
             */
            exclusiveMaximum?: pulumi.Input<boolean>;
            /**
             * ExclusiveMinimum specifies if the Minimum is exclusive. NOTE: Can only be set if type is integer or number.
             */
            exclusiveMinimum?: pulumi.Input<boolean>;
            /**
             * Format is an OpenAPI v3 format string. Unknown formats are ignored. For a list of supported formats please see: (of the k8s.io/apiextensions-apiserver version we're currently using) https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go NOTE: Can only be set if type is string.
             */
            format?: pulumi.Input<string>;
            /**
             * Items specifies fields of an array. NOTE: Can only be set if type is array. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            items?: pulumi.Input<{[key: string]: any}>;
            /**
             * MaxItems is the max length of an array variable. NOTE: Can only be set if type is array.
             */
            maxItems?: pulumi.Input<number>;
            /**
             * MaxLength is the max length of a string variable. NOTE: Can only be set if type is string.
             */
            maxLength?: pulumi.Input<number>;
            /**
             * Maximum is the maximum of an integer or number variable. If ExclusiveMaximum is false, the variable is valid if it is lower than, or equal to, the value of Maximum. If ExclusiveMaximum is true, the variable is valid if it is strictly lower than the value of Maximum. NOTE: Can only be set if type is integer or number.
             */
            maximum?: pulumi.Input<number>;
            /**
             * MinItems is the min length of an array variable. NOTE: Can only be set if type is array.
             */
            minItems?: pulumi.Input<number>;
            /**
             * MinLength is the min length of a string variable. NOTE: Can only be set if type is string.
             */
            minLength?: pulumi.Input<number>;
            /**
             * Minimum is the minimum of an integer or number variable. If ExclusiveMinimum is false, the variable is valid if it is greater than, or equal to, the value of Minimum. If ExclusiveMinimum is true, the variable is valid if it is strictly greater than the value of Minimum. NOTE: Can only be set if type is integer or number.
             */
            minimum?: pulumi.Input<number>;
            /**
             * Pattern is the regex which a string variable must match. NOTE: Can only be set if type is string.
             */
            pattern?: pulumi.Input<string>;
            /**
             * Properties specifies fields of an object. NOTE: Can only be set if type is object. NOTE: Properties is mutually exclusive with AdditionalProperties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            properties?: pulumi.Input<{[key: string]: any}>;
            /**
             * Required specifies which fields of an object are required. NOTE: Can only be set if type is object.
             */
            required?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Type is the type of the variable. Valid values are: object, array, string, integer, number or boolean.
             */
            type: pulumi.Input<string>;
            /**
             * UniqueItems specifies if items in an array must be unique. NOTE: Can only be set if type is array.
             */
            uniqueItems?: pulumi.Input<boolean>;
            /**
             * XPreserveUnknownFields allows setting fields in a variable object which are not defined in the variable schema. This affects fields recursively, except if nested properties or additionalProperties are specified in the schema.
             */
            'x-kubernetes-preserve-unknown-fields'?: pulumi.Input<boolean>;
        }

        /**
         * Workers describes the worker nodes for the cluster. It is a collection of node types which can be used to create the worker nodes of the cluster.
         */
        export interface ClusterClassSpecWorkersArgs {
            /**
             * MachineDeployments is a list of machine deployment classes that can be used to create a set of worker nodes.
             */
            machineDeployments?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsArgs>[]>;
        }

        /**
         * MachineDeploymentClass serves as a template to define a set of worker nodes of the cluster provisioned using the `ClusterClass`.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsArgs {
            /**
             * Class denotes a type of worker node present in the cluster, this name MUST be unique within a ClusterClass and can be referenced in the Cluster to create a managed MachineDeployment.
             */
            class: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machines will be created in. Must match a key in the FailureDomains map stored on the cluster object. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * MachineHealthCheck defines a MachineHealthCheck for this MachineDeploymentClass.
             */
            machineHealthCheck?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckArgs>;
            /**
             * Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready) NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * NamingStrategy allows changing the naming pattern used when creating the MachineDeployment.
             */
            namingStrategy?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsNamingStrategyArgs>;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            nodeDeletionTimeout?: pulumi.Input<string>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout` NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            nodeVolumeDetachTimeout?: pulumi.Input<string>;
            /**
             * The deployment strategy to use to replace existing machines with new ones. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
             */
            strategy?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsStrategyArgs>;
            /**
             * Template is a local struct containing a collection of templates for creation of MachineDeployment objects representing a set of worker nodes.
             */
            template: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateArgs>;
        }

        /**
         * MachineHealthCheck defines a MachineHealthCheck for this MachineDeploymentClass.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckArgs {
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: pulumi.Input<number | string>;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: pulumi.Input<string>;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckRemediationTemplateArgs>;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckUnhealthyConditionsArgs>[]>;
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: pulumi.Input<string>;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckRemediationTemplateArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsMachineHealthCheckUnhealthyConditionsArgs {
            status: pulumi.Input<string>;
            timeout: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * NamingStrategy allows changing the naming pattern used when creating the MachineDeployment.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsNamingStrategyArgs {
            /**
             * Template defines the template to use for generating the name of the MachineDeployment object. If not defined, it will fallback to `{{ .cluster.name }}-{{ .machineDeployment.topologyName }}-{{ .random }}`. If the templated string exceeds 63 characters, it will be trimmed to 58 characters and will get concatenated with a random suffix of length 5. The templating mechanism provides the following arguments: * `.cluster.name`: The name of the cluster object. * `.random`: A random alphanumeric string, without vowels, of length 5. * `.machineDeployment.topologyName`: The name of the MachineDeployment topology (Cluster.spec.topology.workers.machineDeployments[].name).
             */
            template?: pulumi.Input<string>;
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones. NOTE: This value can be overridden while defining a Cluster.Topology using this MachineDeploymentClass.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsStrategyArgs {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsStrategyRollingUpdateArgs {
            /**
             * DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
             */
            deletePolicy?: pulumi.Input<string>;
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * Template is a local struct containing a collection of templates for creation of MachineDeployment objects representing a set of worker nodes.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateArgs {
            /**
             * Bootstrap contains the bootstrap template reference to be used for the creation of worker Machines.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapArgs>;
            /**
             * Infrastructure contains the infrastructure template reference to be used for the creation of worker Machines.
             */
            infrastructure: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureArgs>;
            /**
             * Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the topology.
             */
            metadata?: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateMetadataArgs>;
        }

        /**
         * Bootstrap contains the bootstrap template reference to be used for the creation of worker Machines.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapArgs {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapRefArgs>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateBootstrapRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Infrastructure contains the infrastructure template reference to be used for the creation of worker Machines.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureArgs {
            /**
             * Ref is a required reference to a custom resource offered by a provider.
             */
            ref: pulumi.Input<inputs.cluster.v1beta1.ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureRefArgs>;
        }

        /**
         * Ref is a required reference to a custom resource offered by a provider.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the topology.
         */
        export interface ClusterClassSpecWorkersMachineDeploymentsTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * ClusterClassStatus defines the observed state of the ClusterClass.
         */
        export interface ClusterClassStatusArgs {
            /**
             * Conditions defines current observed state of the ClusterClass.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassStatusConditionsArgs>[]>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Variables is a list of ClusterClassStatusVariable that are defined for the ClusterClass.
             */
            variables?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassStatusVariablesArgs>[]>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterClassStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ClusterClassStatusVariable defines a variable which appears in the status of a ClusterClass.
         */
        export interface ClusterClassStatusVariablesArgs {
            /**
             * Definitions is a list of definitions for a variable.
             */
            definitions: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterClassStatusVariablesDefinitionsArgs>[]>;
            /**
             * DefinitionsConflict specifies whether or not there are conflicting definitions for a single variable name.
             */
            definitionsConflict?: pulumi.Input<boolean>;
            /**
             * Name is the name of the variable.
             */
            name: pulumi.Input<string>;
        }

        /**
         * ClusterClassStatusVariableDefinition defines a variable which appears in the status of a ClusterClass.
         */
        export interface ClusterClassStatusVariablesDefinitionsArgs {
            /**
             * From specifies the origin of the variable definition. This will be `inline` for variables defined in the ClusterClass or the name of a patch defined in the ClusterClass for variables discovered from a DiscoverVariables runtime extensions.
             */
            from: pulumi.Input<string>;
            /**
             * Required specifies if the variable is required. Note: this applies to the variable as a whole and thus the top-level object defined in the schema. If nested fields are required, this will be specified inside the schema.
             */
            required: pulumi.Input<boolean>;
            /**
             * Schema defines the schema of the variable.
             */
            schema: pulumi.Input<inputs.cluster.v1beta1.ClusterClassStatusVariablesDefinitionsSchemaArgs>;
        }

        /**
         * Schema defines the schema of the variable.
         */
        export interface ClusterClassStatusVariablesDefinitionsSchemaArgs {
            /**
             * OpenAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
             */
            openAPIV3Schema: pulumi.Input<inputs.cluster.v1beta1.ClusterClassStatusVariablesDefinitionsSchemaOpenAPIV3SchemaArgs>;
        }

        /**
         * OpenAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
         */
        export interface ClusterClassStatusVariablesDefinitionsSchemaOpenAPIV3SchemaArgs {
            /**
             * AdditionalProperties specifies the schema of values in a map (keys are always strings). NOTE: Can only be set if type is object. NOTE: AdditionalProperties is mutually exclusive with Properties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            additionalProperties?: pulumi.Input<{[key: string]: any}>;
            /**
             * Description is a human-readable description of this variable.
             */
            description?: pulumi.Input<string>;
            /**
             * Enum is the list of valid values of the variable. NOTE: Can be set for all types.
             */
            enum?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            /**
             * Example is an example for this variable.
             */
            example?: pulumi.Input<{[key: string]: any}>;
            /**
             * ExclusiveMaximum specifies if the Maximum is exclusive. NOTE: Can only be set if type is integer or number.
             */
            exclusiveMaximum?: pulumi.Input<boolean>;
            /**
             * ExclusiveMinimum specifies if the Minimum is exclusive. NOTE: Can only be set if type is integer or number.
             */
            exclusiveMinimum?: pulumi.Input<boolean>;
            /**
             * Format is an OpenAPI v3 format string. Unknown formats are ignored. For a list of supported formats please see: (of the k8s.io/apiextensions-apiserver version we're currently using) https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go NOTE: Can only be set if type is string.
             */
            format?: pulumi.Input<string>;
            /**
             * Items specifies fields of an array. NOTE: Can only be set if type is array. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            items?: pulumi.Input<{[key: string]: any}>;
            /**
             * MaxItems is the max length of an array variable. NOTE: Can only be set if type is array.
             */
            maxItems?: pulumi.Input<number>;
            /**
             * MaxLength is the max length of a string variable. NOTE: Can only be set if type is string.
             */
            maxLength?: pulumi.Input<number>;
            /**
             * Maximum is the maximum of an integer or number variable. If ExclusiveMaximum is false, the variable is valid if it is lower than, or equal to, the value of Maximum. If ExclusiveMaximum is true, the variable is valid if it is strictly lower than the value of Maximum. NOTE: Can only be set if type is integer or number.
             */
            maximum?: pulumi.Input<number>;
            /**
             * MinItems is the min length of an array variable. NOTE: Can only be set if type is array.
             */
            minItems?: pulumi.Input<number>;
            /**
             * MinLength is the min length of a string variable. NOTE: Can only be set if type is string.
             */
            minLength?: pulumi.Input<number>;
            /**
             * Minimum is the minimum of an integer or number variable. If ExclusiveMinimum is false, the variable is valid if it is greater than, or equal to, the value of Minimum. If ExclusiveMinimum is true, the variable is valid if it is strictly greater than the value of Minimum. NOTE: Can only be set if type is integer or number.
             */
            minimum?: pulumi.Input<number>;
            /**
             * Pattern is the regex which a string variable must match. NOTE: Can only be set if type is string.
             */
            pattern?: pulumi.Input<string>;
            /**
             * Properties specifies fields of an object. NOTE: Can only be set if type is object. NOTE: Properties is mutually exclusive with AdditionalProperties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
             */
            properties?: pulumi.Input<{[key: string]: any}>;
            /**
             * Required specifies which fields of an object are required. NOTE: Can only be set if type is object.
             */
            required?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Type is the type of the variable. Valid values are: object, array, string, integer, number or boolean.
             */
            type: pulumi.Input<string>;
            /**
             * UniqueItems specifies if items in an array must be unique. NOTE: Can only be set if type is array.
             */
            uniqueItems?: pulumi.Input<boolean>;
            /**
             * XPreserveUnknownFields allows setting fields in a variable object which are not defined in the variable schema. This affects fields recursively, except if nested properties or additionalProperties are specified in the schema.
             */
            'x-kubernetes-preserve-unknown-fields'?: pulumi.Input<boolean>;
        }

        /**
         * ClusterSpec defines the desired state of Cluster.
         */
        export interface ClusterSpecArgs {
            /**
             * Cluster network configuration.
             */
            clusterNetwork?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecClusterNetworkArgs>;
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecControlPlaneEndpointArgs>;
            /**
             * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
             */
            controlPlaneRef?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecControlPlaneRefArgs>;
            /**
             * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
             */
            infrastructureRef?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecInfrastructureRefArgs>;
            /**
             * Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
             */
            paused?: pulumi.Input<boolean>;
            /**
             * This encapsulates the topology for the cluster. NOTE: It is required to enable the ClusterTopology feature gate flag to activate managed topologies support; this feature is highly experimental, and parts of it might still be not implemented.
             */
            topology?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyArgs>;
        }

        /**
         * Cluster network configuration.
         */
        export interface ClusterSpecClusterNetworkArgs {
            /**
             * APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
             */
            apiServerPort?: pulumi.Input<number>;
            /**
             * The network ranges from which Pod networks are allocated.
             */
            pods?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecClusterNetworkPodsArgs>;
            /**
             * Domain name for services.
             */
            serviceDomain?: pulumi.Input<string>;
            /**
             * The network ranges from which service VIPs are allocated.
             */
            services?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecClusterNetworkServicesArgs>;
        }

        /**
         * The network ranges from which Pod networks are allocated.
         */
        export interface ClusterSpecClusterNetworkPodsArgs {
            cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The network ranges from which service VIPs are allocated.
         */
        export interface ClusterSpecClusterNetworkServicesArgs {
            cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface ClusterSpecControlPlaneEndpointArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
         */
        export interface ClusterSpecControlPlaneRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
         */
        export interface ClusterSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * This encapsulates the topology for the cluster. NOTE: It is required to enable the ClusterTopology feature gate flag to activate managed topologies support; this feature is highly experimental, and parts of it might still be not implemented.
         */
        export interface ClusterSpecTopologyArgs {
            /**
             * The name of the ClusterClass object to create the topology.
             */
            class: pulumi.Input<string>;
            /**
             * ControlPlane describes the cluster control plane.
             */
            controlPlane?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneArgs>;
            /**
             * RolloutAfter performs a rollout of the entire cluster one component at a time, control plane first and then machine deployments. 
             *  Deprecated: This field has no function and is going to be removed in the next apiVersion.
             */
            rolloutAfter?: pulumi.Input<string>;
            /**
             * Variables can be used to customize the Cluster through patches. They must comply to the corresponding VariableClasses defined in the ClusterClass.
             */
            variables?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyVariablesArgs>[]>;
            /**
             * The Kubernetes version of the cluster.
             */
            version: pulumi.Input<string>;
            /**
             * Workers encapsulates the different constructs that form the worker nodes for the cluster.
             */
            workers?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersArgs>;
        }

        /**
         * ControlPlane describes the cluster control plane.
         */
        export interface ClusterSpecTopologyControlPlaneArgs {
            /**
             * MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this control plane.
             */
            machineHealthCheck?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckArgs>;
            /**
             * Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
             */
            metadata?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneMetadataArgs>;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: pulumi.Input<string>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: pulumi.Input<string>;
            /**
             * Replicas is the number of control plane nodes. If the value is nil, the ControlPlane object is created without the number of Replicas and it's assumed that the control plane controller does not implement support for this field. When specified against a control plane provider that lacks support for this field, this value will be ignored.
             */
            replicas?: pulumi.Input<number>;
        }

        /**
         * MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this control plane.
         */
        export interface ClusterSpecTopologyControlPlaneMachineHealthCheckArgs {
            /**
             * Enable controls if a MachineHealthCheck should be created for the target machines. 
             *  If false: No MachineHealthCheck will be created. 
             *  If not set(default): A MachineHealthCheck will be created if it is defined here or in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created. 
             *  If true: A MachineHealthCheck is guaranteed to be created. Cluster validation will block if `enable` is true and no MachineHealthCheck definition is available.
             */
            enable?: pulumi.Input<boolean>;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: pulumi.Input<number | string>;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: pulumi.Input<string>;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplateArgs>;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditionsArgs>[]>;
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: pulumi.Input<string>;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface ClusterSpecTopologyControlPlaneMachineHealthCheckRemediationTemplateArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface ClusterSpecTopologyControlPlaneMachineHealthCheckUnhealthyConditionsArgs {
            status: pulumi.Input<string>;
            timeout: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * Metadata is the metadata applied to the ControlPlane and the Machines of the ControlPlane if the ControlPlaneTemplate referenced by the ClusterClass is machine based. If not, it is applied only to the ControlPlane. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
         */
        export interface ClusterSpecTopologyControlPlaneMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a Variable definition in the ClusterClass `status` variables.
         */
        export interface ClusterSpecTopologyVariablesArgs {
            /**
             * DefinitionFrom specifies where the definition of this Variable is from. DefinitionFrom is `inline` when the definition is from the ClusterClass `.spec.variables` or the name of a patch defined in the ClusterClass `.spec.patches` where the patch is external and provides external variables. This field is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass `status.variables[]`
             */
            definitionFrom?: pulumi.Input<string>;
            /**
             * Name of the variable.
             */
            name: pulumi.Input<string>;
            /**
             * Value of the variable. Note: the value will be validated against the schema of the corresponding ClusterClassVariable from the ClusterClass. Note: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools, i.e. it is not possible to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
             */
            value: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Workers encapsulates the different constructs that form the worker nodes for the cluster.
         */
        export interface ClusterSpecTopologyWorkersArgs {
            /**
             * MachineDeployments is a list of machine deployments in the cluster.
             */
            machineDeployments?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsArgs>[]>;
        }

        /**
         * MachineDeploymentTopology specifies the different parameters for a set of worker nodes in the topology. This set of nodes is managed by a MachineDeployment object whose lifecycle is managed by the Cluster controller.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsArgs {
            /**
             * Class is the name of the MachineDeploymentClass used to create the set of worker nodes. This should match one of the deployment classes defined in the ClusterClass object mentioned in the `Cluster.Spec.Class` field.
             */
            class: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machines will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this MachineDeployment.
             */
            machineHealthCheck?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckArgs>;
            /**
             * Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
             */
            metadata?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsMetadataArgs>;
            /**
             * Minimum number of seconds for which a newly created machine should be ready. Defaults to 0 (machine will be considered available as soon as it is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * Name is the unique identifier for this MachineDeploymentTopology. The value is used with other unique identifiers to create a MachineDeployment's Name (e.g. cluster's name, etc). In case the name is greater than the allowed maximum length, the values are hashed together.
             */
            name: pulumi.Input<string>;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: pulumi.Input<string>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: pulumi.Input<string>;
            /**
             * Replicas is the number of worker nodes belonging to this set. If the value is nil, the MachineDeployment is created without the number of Replicas (defaulting to 1) and it's assumed that an external entity (like cluster autoscaler) is responsible for the management of this value.
             */
            replicas?: pulumi.Input<number>;
            /**
             * The deployment strategy to use to replace existing machines with new ones.
             */
            strategy?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsStrategyArgs>;
            /**
             * Variables can be used to customize the MachineDeployment through patches.
             */
            variables?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsVariablesArgs>;
        }

        /**
         * MachineHealthCheck allows to enable, disable and override the MachineHealthCheck configuration in the ClusterClass for this MachineDeployment.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckArgs {
            /**
             * Enable controls if a MachineHealthCheck should be created for the target machines. 
             *  If false: No MachineHealthCheck will be created. 
             *  If not set(default): A MachineHealthCheck will be created if it is defined here or in the associated ClusterClass. If no MachineHealthCheck is defined then none will be created. 
             *  If true: A MachineHealthCheck is guaranteed to be created. Cluster validation will block if `enable` is true and no MachineHealthCheck definition is available.
             */
            enable?: pulumi.Input<boolean>;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: pulumi.Input<number | string>;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: pulumi.Input<string>;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckRemediationTemplateArgs>;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy. The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckUnhealthyConditionsArgs>[]>;
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: pulumi.Input<string>;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckRemediationTemplateArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMachineHealthCheckUnhealthyConditionsArgs {
            status: pulumi.Input<string>;
            timeout: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * Metadata is the metadata applied to the MachineDeployment and the machines of the MachineDeployment. At runtime this metadata is merged with the corresponding metadata from the ClusterClass.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsStrategyArgs {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsStrategyRollingUpdateArgs {
            /**
             * DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
             */
            deletePolicy?: pulumi.Input<string>;
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * Variables can be used to customize the MachineDeployment through patches.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsVariablesArgs {
            /**
             * Overrides can be used to override Cluster level variables.
             */
            overrides?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterSpecTopologyWorkersMachineDeploymentsVariablesOverridesArgs>[]>;
        }

        /**
         * ClusterVariable can be used to customize the Cluster through patches. Each ClusterVariable is associated with a Variable definition in the ClusterClass `status` variables.
         */
        export interface ClusterSpecTopologyWorkersMachineDeploymentsVariablesOverridesArgs {
            /**
             * DefinitionFrom specifies where the definition of this Variable is from. DefinitionFrom is `inline` when the definition is from the ClusterClass `.spec.variables` or the name of a patch defined in the ClusterClass `.spec.patches` where the patch is external and provides external variables. This field is mandatory if the variable has `DefinitionsConflict: true` in ClusterClass `status.variables[]`
             */
            definitionFrom?: pulumi.Input<string>;
            /**
             * Name of the variable.
             */
            name: pulumi.Input<string>;
            /**
             * Value of the variable. Note: the value will be validated against the schema of the corresponding ClusterClassVariable from the ClusterClass. Note: We have to use apiextensionsv1.JSON instead of a custom JSON type, because controller-tools has a hard-coded schema for apiextensionsv1.JSON which cannot be produced by another type via controller-tools, i.e. it is not possible to have no type field. Ref: https://github.com/kubernetes-sigs/controller-tools/blob/d0e03a142d0ecdd5491593e941ee1d6b5d91dba6/pkg/crd/known_types.go#L106-L111
             */
            value: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * ClusterStatus defines the observed state of Cluster.
         */
        export interface ClusterStatusArgs {
            /**
             * Conditions defines current service state of the cluster.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.ClusterStatusConditionsArgs>[]>;
            /**
             * ControlPlaneReady defines if the control plane is ready.
             */
            controlPlaneReady?: pulumi.Input<boolean>;
            /**
             * FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
             */
            failureDomains?: pulumi.Input<{[key: string]: pulumi.Input<inputs.cluster.v1beta1.ClusterStatusFailureDomainsArgs>}>;
            /**
             * FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ClusterStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
         */
        export interface ClusterStatusFailureDomainsArgs {
            /**
             * Attributes is a free form map of attributes an infrastructure provider might use or require.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ControlPlane determines if this failure domain is suitable for use by control plane machines.
             */
            controlPlane?: pulumi.Input<boolean>;
        }

        /**
         * MachineDeploymentSpec defines the desired state of MachineDeployment.
         */
        export interface MachineDeploymentSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * MinReadySeconds is the minimum number of seconds for which a Node for a newly created machine should be ready before considering the replica available. Defaults to 0 (machine will be considered available as soon as the Node is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * Indicates that the deployment is paused.
             */
            paused?: pulumi.Input<boolean>;
            /**
             * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
             */
            progressDeadlineSeconds?: pulumi.Input<number>;
            /**
             * Number of desired machines. This is a pointer to distinguish between explicit zero and not specified. 
             *  Defaults to: * if the Kubernetes autoscaler min size and max size annotations are set: - if it's a new MachineDeployment, use min size - if the replicas field of the old MachineDeployment is < min size, use min size - if the replicas field of the old MachineDeployment is > max size, use max size - if the replicas field of the old MachineDeployment is in the (min size, max size) range, keep the value from the oldMD * otherwise use 1 Note: Defaulting will be run whenever the replicas field is not set: * A new MachineDeployment is created with replicas not set. * On an existing MachineDeployment the replicas field was first set and is now unset. Those cases are especially relevant for the following Kubernetes autoscaler use cases: * A new MachineDeployment is created and replicas should be managed by the autoscaler * An existing MachineDeployment which initially wasn't controlled by the autoscaler should be later controlled by the autoscaler
             */
            replicas?: pulumi.Input<number>;
            /**
             * The number of old MachineSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * RolloutAfter is a field to indicate a rollout should be performed after the specified time even if no changes have been made to the MachineDeployment. Example: In the YAML the time can be specified in the RFC3339 format. To specify the rolloutAfter target as March 9, 2023, at 9 am UTC use "2023-03-09T09:00:00Z".
             */
            rolloutAfter?: pulumi.Input<string>;
            /**
             * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
             */
            selector: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecSelectorArgs>;
            /**
             * The deployment strategy to use to replace existing machines with new ones.
             */
            strategy?: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecStrategyArgs>;
            /**
             * Template describes the machines that will be created.
             */
            template: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecTemplateArgs>;
        }

        /**
         * Label selector for machines. Existing MachineSets whose machines are selected by this will be the ones affected by this deployment. It must match the machine template's labels.
         */
        export interface MachineDeploymentSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineDeploymentSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The deployment strategy to use to replace existing machines with new ones.
         */
        export interface MachineDeploymentSpecStrategyArgs {
            /**
             * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
             */
            rollingUpdate?: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if MachineDeploymentStrategyType = RollingUpdate.
         */
        export interface MachineDeploymentSpecStrategyRollingUpdateArgs {
            /**
             * DeletePolicy defines the policy used by the MachineDeployment to identify nodes to delete when downscaling. Valid values are "Random, "Newest", "Oldest" When no value is supplied, the default DeletePolicy of MachineSet is used
             */
            deletePolicy?: pulumi.Input<string>;
            /**
             * The maximum number of machines that can be scheduled above the desired number of machines. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 1. Example: when this is set to 30%, the new MachineSet can be scaled up immediately when the rolling update starts, such that the total number of old and new machines do not exceed 130% of desired machines. Once old machines have been killed, new MachineSet can be scaled up further, ensuring that total number of machines running at any time during the update is at most 130% of desired machines.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of machines that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired machines (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 0. Example: when this is set to 30%, the old MachineSet can be scaled down to 70% of desired machines immediately when the rolling update starts. Once new machines are ready, old MachineSet can be scaled down further, followed by scaling up the new MachineSet, ensuring that the total number of machines available at all times during the update is at least 70% of desired machines.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachineDeploymentSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineDeploymentSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineDeploymentSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: pulumi.Input<string>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineDeploymentSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineDeploymentSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineDeploymentStatus defines the observed state of MachineDeployment.
         */
        export interface MachineDeploymentStatusArgs {
            /**
             * Total number of available machines (ready for at least minReadySeconds) targeted by this deployment.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * Conditions defines current service state of the MachineDeployment.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineDeploymentStatusConditionsArgs>[]>;
            /**
             * The generation observed by the deployment controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of a MachineDeployment (ScalingUp, ScalingDown, Running, Failed, or Unknown).
             */
            phase?: pulumi.Input<string>;
            /**
             * Total number of ready machines targeted by this deployment.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated machines targeted by this deployment (their labels match the selector).
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: pulumi.Input<string>;
            /**
             * Total number of unavailable machines targeted by this deployment. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet available or machines that still have not been created.
             */
            unavailableReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated machines targeted by this deployment that have the desired template spec.
             */
            updatedReplicas?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineDeploymentStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Specification of machine health check policy
         */
        export interface MachineHealthCheckSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * Any further remediation is only allowed if at most "MaxUnhealthy" machines selected by "selector" are not healthy.
             */
            maxUnhealthy?: pulumi.Input<number | string>;
            /**
             * Machines older than this duration without a node will be considered to have failed and will be remediated. If not set, this value is defaulted to 10 minutes. If you wish to disable this feature, set the value explicitly to 0.
             */
            nodeStartupTimeout?: pulumi.Input<string>;
            /**
             * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
             *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
             */
            remediationTemplate?: pulumi.Input<inputs.cluster.v1beta1.MachineHealthCheckSpecRemediationTemplateArgs>;
            /**
             * Label selector to match machines whose health will be exercised
             */
            selector: pulumi.Input<inputs.cluster.v1beta1.MachineHealthCheckSpecSelectorArgs>;
            /**
             * UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy.
             */
            unhealthyConditions: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineHealthCheckSpecUnhealthyConditionsArgs>[]>;
            /**
             * Any further remediation is only allowed if the number of machines selected by "selector" as not healthy is within the range of "UnhealthyRange". Takes precedence over MaxUnhealthy. Eg. "[3-5]" - This means that remediation will be allowed only when: (a) there are at least 3 unhealthy machines (and) (b) there are at most 5 unhealthy machines
             */
            unhealthyRange?: pulumi.Input<string>;
        }

        /**
         * RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. 
         *  This field is completely optional, when filled, the MachineHealthCheck controller creates a new object from the template referenced and hands off remediation of the machine to a controller that lives outside of Cluster API.
         */
        export interface MachineHealthCheckSpecRemediationTemplateArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Label selector to match machines whose health will be exercised
         */
        export interface MachineHealthCheckSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineHealthCheckSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineHealthCheckSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * UnhealthyCondition represents a Node condition type and value with a timeout specified as a duration.  When the named condition has been in the given status for at least the timeout value, a node is considered unhealthy.
         */
        export interface MachineHealthCheckSpecUnhealthyConditionsArgs {
            status: pulumi.Input<string>;
            timeout: pulumi.Input<string>;
            type: pulumi.Input<string>;
        }

        /**
         * Most recently observed status of MachineHealthCheck resource
         */
        export interface MachineHealthCheckStatusArgs {
            /**
             * Conditions defines current service state of the MachineHealthCheck.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineHealthCheckStatusConditionsArgs>[]>;
            /**
             * total number of healthy machines counted by this machine health check
             */
            currentHealthy?: pulumi.Input<number>;
            /**
             * total number of machines counted by this machine health check
             */
            expectedMachines?: pulumi.Input<number>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * RemediationsAllowed is the number of further remediations allowed by this machine health check before maxUnhealthy short circuiting will be applied
             */
            remediationsAllowed?: pulumi.Input<number>;
            /**
             * Targets shows the current list of machines the machine health check is watching
             */
            targets?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineHealthCheckStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * MachinePoolSpec defines the desired state of MachinePool.
         */
        export interface MachinePoolSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomains is the list of failure domains this MachinePool should be attached to.
             */
            failureDomains?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Minimum number of seconds for which a newly created machine instances should be ready. Defaults to 0 (machine instance will be considered available as soon as it is ready) NOTE: No logic is implemented for this field and it currently has no behaviour.
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * ProviderIDList are the identification IDs of machine instances provided by the provider. This field must match the provider IDs as seen on the node objects corresponding to a machine pool's machine instances.
             */
            providerIDList?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Number of desired machines. Defaults to 1. This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Template describes the machines that will be created.
             */
            template: pulumi.Input<inputs.cluster.v1beta1.MachinePoolSpecTemplateArgs>;
        }

        /**
         * Template describes the machines that will be created.
         */
        export interface MachinePoolSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1beta1.MachinePoolSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1beta1.MachinePoolSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachinePoolSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachinePoolSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1beta1.MachinePoolSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1beta1.MachinePoolSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: pulumi.Input<string>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1beta1.MachinePoolSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachinePoolSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachinePoolSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachinePoolStatus defines the observed state of MachinePool.
         */
        export interface MachinePoolStatusArgs {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachinePool.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: pulumi.Input<boolean>;
            /**
             * Conditions define the current service state of the MachinePool.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachinePoolStatusConditionsArgs>[]>;
            /**
             * FailureMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * NodeRefs will point to the corresponding Nodes if it they exist.
             */
            nodeRefs?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachinePoolStatusNodeRefsArgs>[]>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
            /**
             * The number of ready replicas for this MachinePool. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Total number of unavailable machine instances targeted by this machine pool. This is the total number of machine instances that are still required for the machine pool to have 100% available capacity. They may either be machine instances that are running but not yet available or machine instances that still have not been created.
             */
            unavailableReplicas?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachinePoolStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MachinePoolStatusNodeRefsArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineSetSpec defines the desired state of MachineSet.
         */
        export interface MachineSetSpecArgs {
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * DeletePolicy defines the policy used to identify nodes to delete when downscaling. Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
             */
            deletePolicy?: pulumi.Input<string>;
            /**
             * MinReadySeconds is the minimum number of seconds for which a Node for a newly created machine should be ready before considering the replica available. Defaults to 0 (machine will be considered available as soon as the Node is ready)
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: pulumi.Input<inputs.cluster.v1beta1.MachineSetSpecSelectorArgs>;
            /**
             * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
             */
            template?: pulumi.Input<inputs.cluster.v1beta1.MachineSetSpecTemplateArgs>;
        }
        /**
         * machineSetSpecArgsProvideDefaults sets the appropriate defaults for MachineSetSpecArgs
         */
        export function machineSetSpecArgsProvideDefaults(val: MachineSetSpecArgs): MachineSetSpecArgs {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * Selector is a label query over machines that should match the replica count. Label keys and values that must match in order to be controlled by this MachineSet. It must match the machine template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface MachineSetSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineSetSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface MachineSetSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Template is the object that describes the machine that will be created if insufficient replicas are detected. Object references to custom resources are treated as templates.
         */
        export interface MachineSetSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.cluster.v1beta1.MachineSetSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.cluster.v1beta1.MachineSetSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface MachineSetSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Specification of the desired behavior of the machine. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface MachineSetSpecTemplateSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1beta1.MachineSetSpecTemplateSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1beta1.MachineSetSpecTemplateSpecInfrastructureRefArgs>;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: pulumi.Input<string>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSetSpecTemplateSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1beta1.MachineSetSpecTemplateSpecBootstrapConfigRefArgs>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineSetSpecTemplateSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSetSpecTemplateSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineSetStatus defines the observed state of MachineSet.
         */
        export interface MachineSetStatusArgs {
            /**
             * The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
             */
            availableReplicas?: pulumi.Input<number>;
            /**
             * Conditions defines current service state of the MachineSet.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineSetStatusConditionsArgs>[]>;
            failureMessage?: pulumi.Input<string>;
            /**
             * In the event that there is a terminal problem reconciling the replicas, both FailureReason and FailureMessage will be set. FailureReason will be populated with a succinct value suitable for machine interpretation, while FailureMessage will contain a more verbose string suitable for logging and human consumption. 
             *  These fields should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the MachineTemplate's spec or the configuration of the machine controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the machine controller, or the responsible machine controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the MachineSet object and/or logged in the controller's output.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * The number of replicas that have labels matching the labels of the machine template of the MachineSet.
             */
            fullyLabeledReplicas?: pulumi.Input<number>;
            /**
             * ObservedGeneration reflects the generation of the most recently observed MachineSet.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is the same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineSetStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * MachineSpec defines the desired state of Machine.
         */
        export interface MachineSpecArgs {
            /**
             * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
             */
            bootstrap: pulumi.Input<inputs.cluster.v1beta1.MachineSpecBootstrapArgs>;
            /**
             * ClusterName is the name of the Cluster this object belongs to.
             */
            clusterName: pulumi.Input<string>;
            /**
             * FailureDomain is the failure domain the machine will be created in. Must match a key in the FailureDomains map stored on the cluster object.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureRef: pulumi.Input<inputs.cluster.v1beta1.MachineSpecInfrastructureRefArgs>;
            /**
             * NodeDeletionTimeout defines how long the controller will attempt to delete the Node that the Machine hosts after the Machine is marked for deletion. A duration of 0 will retry deletion indefinitely. Defaults to 10 seconds.
             */
            nodeDeletionTimeout?: pulumi.Input<string>;
            /**
             * NodeDrainTimeout is the total amount of time that the controller will spend on draining a node. The default value is 0, meaning that the node can be drained without any time limitations. NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
             */
            nodeDrainTimeout?: pulumi.Input<string>;
            /**
             * NodeVolumeDetachTimeout is the total amount of time that the controller will spend on waiting for all volumes to be detached. The default value is 0, meaning that the volumes can be detached without any time limitations.
             */
            nodeVolumeDetachTimeout?: pulumi.Input<string>;
            /**
             * ProviderID is the identification ID of the machine provided by the provider. This field must match the provider ID as seen on the node object corresponding to this machine. This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a generic out-of-tree provider for autoscaler, this field is required by autoscaler to be able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver and then a comparison is done to find out unregistered machines and are marked for delete. This field will be set by the actuators and consumed by higher level entities like autoscaler that will be interfacing with cluster-api as generic provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * Version defines the desired Kubernetes version. This field is meant to be optionally used by bootstrap providers.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Bootstrap is a reference to a local struct which encapsulates fields to configure the Machine’s bootstrapping mechanism.
         */
        export interface MachineSpecBootstrapArgs {
            /**
             * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
             */
            configRef?: pulumi.Input<inputs.cluster.v1beta1.MachineSpecBootstrapConfigRefArgs>;
            /**
             * DataSecretName is the name of the secret that stores the bootstrap data script. If nil, the Machine should remain in the Pending state.
             */
            dataSecretName?: pulumi.Input<string>;
        }

        /**
         * ConfigRef is a reference to a bootstrap provider-specific resource that holds configuration details. The reference is optional to allow users/operators to specify Bootstrap.DataSecretName without the need of a controller.
         */
        export interface MachineSpecBootstrapConfigRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface MachineSpecInfrastructureRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MachineStatus defines the observed state of Machine.
         */
        export interface MachineStatusArgs {
            /**
             * Addresses is a list of addresses assigned to the machine. This field is copied from the infrastructure provider reference.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineStatusAddressesArgs>[]>;
            /**
             * BootstrapReady is the state of the bootstrap provider.
             */
            bootstrapReady?: pulumi.Input<boolean>;
            /**
             * CertificatesExpiryDate is the expiry date of the machine certificates. This value is only set for control plane machines.
             */
            certificatesExpiryDate?: pulumi.Input<string>;
            /**
             * Conditions defines current service state of the Machine.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.cluster.v1beta1.MachineStatusConditionsArgs>[]>;
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InfrastructureReady is the state of the infrastructure provider.
             */
            infrastructureReady?: pulumi.Input<boolean>;
            /**
             * LastUpdated identifies when the phase of the Machine last transitioned.
             */
            lastUpdated?: pulumi.Input<string>;
            /**
             * NodeInfo is a set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
             */
            nodeInfo?: pulumi.Input<inputs.cluster.v1beta1.MachineStatusNodeInfoArgs>;
            /**
             * NodeRef will point to the corresponding Node if it exists.
             */
            nodeRef?: pulumi.Input<inputs.cluster.v1beta1.MachineStatusNodeRefArgs>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Phase represents the current phase of machine actuation. E.g. Pending, Running, Terminating, Failed etc.
             */
            phase?: pulumi.Input<string>;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MachineStatusAddressesArgs {
            /**
             * The machine address.
             */
            address: pulumi.Input<string>;
            /**
             * Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MachineStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * NodeInfo is a set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
         */
        export interface MachineStatusNodeInfoArgs {
            /**
             * The Architecture reported by the node
             */
            architecture: pulumi.Input<string>;
            /**
             * Boot ID reported by the node.
             */
            bootID: pulumi.Input<string>;
            /**
             * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
             */
            containerRuntimeVersion: pulumi.Input<string>;
            /**
             * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
             */
            kernelVersion: pulumi.Input<string>;
            /**
             * KubeProxy Version reported by the node.
             */
            kubeProxyVersion: pulumi.Input<string>;
            /**
             * Kubelet Version reported by the node.
             */
            kubeletVersion: pulumi.Input<string>;
            /**
             * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
             */
            machineID: pulumi.Input<string>;
            /**
             * The Operating System reported by the node
             */
            operatingSystem: pulumi.Input<string>;
            /**
             * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
             */
            osImage: pulumi.Input<string>;
            /**
             * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
             */
            systemUUID: pulumi.Input<string>;
        }

        /**
         * NodeRef will point to the corresponding Node if it exists.
         */
        export interface MachineStatusNodeRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }
    }
}

export namespace controlplane {
    export namespace v1alpha3 {
        /**
         * TalosControlPlaneSpec defines the desired state of TalosControlPlane
         */
        export interface TalosControlPlaneSpecArgs {
            /**
             * ControlPlaneConfig is a two TalosConfigSpecs to use for initializing and joining machines to the control plane.
             */
            controlPlaneConfig: pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigArgs>;
            /**
             * InfrastructureTemplate is a required reference to a custom resource offered by an infrastructure provider.
             */
            infrastructureTemplate: pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecInfrastructureTemplateArgs>;
            /**
             * Number of desired machines. Defaults to 1. When stacked etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members). This is a pointer to distinguish between explicit zero and not specified.
             */
            replicas?: pulumi.Input<number>;
            /**
             * The RolloutStrategy to use to replace control plane machines with new ones.
             */
            rolloutStrategy?: pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecRolloutStrategyArgs>;
            /**
             * Version defines the desired Kubernetes version.
             */
            version: pulumi.Input<string>;
        }

        /**
         * ControlPlaneConfig is a two TalosConfigSpecs to use for initializing and joining machines to the control plane.
         */
        export interface TalosControlPlaneSpecControlPlaneConfigArgs {
            /**
             * TalosConfigSpec defines the desired state of TalosConfig
             */
            controlplane: pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigControlplaneArgs>;
            /**
             * Deprecated: starting from cacppt v0.4.0 provider doesn't use init configs.
             */
            init?: pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigInitArgs>;
        }

        /**
         * TalosConfigSpec defines the desired state of TalosConfig
         */
        export interface TalosControlPlaneSpecControlPlaneConfigControlplaneArgs {
            configPatches?: pulumi.Input<pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigControlplaneConfigPatchesArgs>[]>;
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigControlplaneHostnameArgs>;
            talosVersion?: pulumi.Input<string>;
        }

        export interface TalosControlPlaneSpecControlPlaneConfigControlplaneConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosControlPlaneSpecControlPlaneConfigControlplaneHostnameArgs {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: pulumi.Input<string>;
        }

        /**
         * Deprecated: starting from cacppt v0.4.0 provider doesn't use init configs.
         */
        export interface TalosControlPlaneSpecControlPlaneConfigInitArgs {
            configPatches?: pulumi.Input<pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigInitConfigPatchesArgs>[]>;
            data?: pulumi.Input<string>;
            generateType: pulumi.Input<string>;
            /**
             * Set hostname in the machine configuration to some value.
             */
            hostname?: pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecControlPlaneConfigInitHostnameArgs>;
            talosVersion?: pulumi.Input<string>;
        }

        export interface TalosControlPlaneSpecControlPlaneConfigInitConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Set hostname in the machine configuration to some value.
         */
        export interface TalosControlPlaneSpecControlPlaneConfigInitHostnameArgs {
            /**
             * Source of the hostname. 
             *  Allowed values: "MachineName" (use linked Machine's Name).
             */
            source?: pulumi.Input<string>;
        }

        /**
         * InfrastructureTemplate is a required reference to a custom resource offered by an infrastructure provider.
         */
        export interface TalosControlPlaneSpecInfrastructureTemplateArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * The RolloutStrategy to use to replace control plane machines with new ones.
         */
        export interface TalosControlPlaneSpecRolloutStrategyArgs {
            /**
             * Rolling update config params. Present only if RolloutStrategyType = RollingUpdate.
             */
            rollingUpdate?: pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneSpecRolloutStrategyRollingUpdateArgs>;
            /**
             * Change rollout strategy. 
             *  Supported strategies: * "RollingUpdate". * "OnDelete" 
             *  Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if RolloutStrategyType = RollingUpdate.
         */
        export interface TalosControlPlaneSpecRolloutStrategyRollingUpdateArgs {
            /**
             * The maximum number of control planes that can be scheduled above or under the desired number of control planes. Value can be an absolute number 1 or 0. Defaults to 1. Example: when this is set to 1, the control plane can be scaled up immediately when the rolling update starts.
             */
            maxSurge?: pulumi.Input<number | string>;
        }

        /**
         * TalosControlPlaneStatus defines the observed state of TalosControlPlane
         */
        export interface TalosControlPlaneStatusArgs {
            /**
             * Bootstrapped denotes whether any nodes received bootstrap request which is required to start etcd and Kubernetes components in Talos.
             */
            bootstrapped?: pulumi.Input<boolean>;
            /**
             * Conditions defines current service state of the KubeadmControlPlane.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.controlplane.v1alpha3.TalosControlPlaneStatusConditionsArgs>[]>;
            /**
             * ErrorMessage indicates that there is a terminal problem reconciling the state, and will be set to a descriptive error message.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason indicates that there is a terminal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * Initialized denotes whether or not the control plane has the uploaded talos-config configmap.
             */
            initialized?: pulumi.Input<boolean>;
            /**
             * ObservedGeneration is the latest generation observed by the controller.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Ready denotes that the TalosControlPlane API Server is ready to receive requests.
             */
            ready?: pulumi.Input<boolean>;
            /**
             * Total number of fully running and ready control plane machines.
             */
            readyReplicas?: pulumi.Input<number>;
            /**
             * Total number of non-terminated machines targeted by this control plane (their labels match the selector).
             */
            replicas?: pulumi.Input<number>;
            /**
             * Selector is the label selector in string format to avoid introspection by clients, and is used to provide the CRD-based integration for the scale subresource and additional integrations for things like kubectl describe.. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
             */
            selector?: pulumi.Input<string>;
            /**
             * Total number of unavailable machines targeted by this control plane. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet ready or machines that still have not been created.
             */
            unavailableReplicas?: pulumi.Input<number>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface TalosControlPlaneStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }
}

export namespace gateway {
    export namespace v1 {
        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpecArgs {
            /**
             * ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. 
             *  Example: "example.net/gateway-controller". 
             *  This field is not mutable and cannot be empty. 
             *  Support: Core
             */
            controllerName: pulumi.Input<string>;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description?: pulumi.Input<string>;
            /**
             * ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. 
             *  ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. 
             *  If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true. 
             *  Support: Implementation-specific
             */
            parametersRef?: pulumi.Input<inputs.gateway.v1.GatewayClassSpecParametersRefArgs>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. 
         *  ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. 
         *  If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true. 
         *  Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRefArgs {
            /**
             * Group is the group of the referent.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of GatewayClass. 
         *  Implementations MUST populate status on all GatewayClass resources which specify their controller name.
         */
        export interface GatewayClassStatusArgs {
            /**
             * Conditions is the current status from the controller for this GatewayClass. 
             *  Controllers should prefer to publish conditions using values of GatewayClassConditionType for the type of each Condition.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayClassStatusConditionsArgs>[]>;
            /**
             * SupportedFeatures is the set of features the GatewayClass support. It MUST be sorted in ascending alphabetical order. 
             */
            supportedFeatures?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface GatewayClassStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpecArgs {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. 
             *  The Addresses field represents a request for the address(es) on the "outside of the Gateway", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. 
             *  If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. 
             *  The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. 
             *  Support: Extended 
             *  
             */
            addresses?: pulumi.Input<any[]>;
            /**
             * GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.
             */
            gatewayClassName: pulumi.Input<string>;
            /**
             * Infrastructure defines infrastructure level attributes about this Gateway instance. 
             *  Support: Core 
             *  
             */
            infrastructure?: pulumi.Input<inputs.gateway.v1.GatewaySpecInfrastructureArgs>;
            /**
             * Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. 
             *  Each Listener in a set of Listeners (for example, in a single Gateway) MUST be _distinct_, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses "set of Listeners" rather than "Listeners in a single Gateway" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules _also_ apply in that case). 
             *  Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. 
             *  Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: 
             *  HTTP Profile 
             *  1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided 
             *  TLS Profile 
             *  1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough 
             *  "Distinct" Listeners have the following property: 
             *  The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. 
             *  For example, the following Listener scenarios are distinct: 
             *  1. Multiple Listeners with the same Port that all use the "HTTP" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the "HTTPS" or "TLS" Protocol that all have unique Hostname values. 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener with the same Protocol has the same Port value. 
             *  Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. 
             *  When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. 
             *  When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. 
             *  Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, `"foo.example.com"` takes precedence over `"*.example.com"`, and `"*.example.com"` takes precedence over `""`. 
             *  Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. 
             *  The wildcard character will match any number of characters _and dots_ to the left, however, so `"*.example.com"` will match both `"foo.bar.example.com"` _and_ `"bar.example.com"`. 
             *  If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the "Conflicted" condition in the Listener Status to "True". 
             *  Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out *all* the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. 
             *  The implementation MUST set a "ListenersNotValid" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. 
             *  A Gateway's Listeners are considered "compatible" if: 
             *  1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. 
             *  Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. 
             *  For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. 
             *  Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for "foo.example.com" and "*.example.com", a request to "foo.example.com" SHOULD only be routed using routes attached to the "foo.example.com" Listener (and not the "*.example.com" Listener). This concept is known as "Listener Isolation". Implementations that do not support Listener Isolation MUST clearly document this. 
             *  Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. 
             *  Support: Core
             */
            listeners: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersArgs>[]>;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance. 
         *  Support: Core 
         *  
         */
        export interface GatewaySpecInfrastructureArgs {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway. 
             *  For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources. For other implementations, this refers to any relevant (implementation specific) "annotations" concepts. 
             *  An implementation may chose to add additional implementation-specific annotations as they see fit. 
             *  Support: Extended
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway. 
             *  For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources. For other implementations, this refers to any relevant (implementation specific) "labels" concepts. 
             *  An implementation may chose to add additional implementation-specific labels as they see fit. 
             *  Support: Extended
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts network connections.
         */
        export interface GatewaySpecListenersArgs {
            /**
             * AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. 
             *  Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: 
             *  * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of "2020-09-08 01:02:03" is given precedence over a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. 
             *  All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. 
             *  Support: Core
             */
            allowedRoutes?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesArgs>;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. 
             *  Implementations MUST apply Hostname matching appropriately for each of the following protocols: 
             *  * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. 
             *  For HTTPRoute and TLSRoute resources, there is an interaction with the `spec.hostnames` array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. 
             *  Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
             *  Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Name is the name of the Listener. This name MUST be unique within a Gateway. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. 
             *  Support: Core
             */
            port: pulumi.Input<number>;
            /**
             * Protocol specifies the network protocol this listener expects to receive. 
             *  Support: Core
             */
            protocol: pulumi.Input<string>;
            /**
             * TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP". 
             *  The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. 
             *  The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. 
             *  Support: Core
             */
            tls?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsArgs>;
        }
        /**
         * gatewaySpecListenersArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersArgs
         */
        export function gatewaySpecListenersArgsProvideDefaults(val: GatewaySpecListenersArgs): GatewaySpecListenersArgs {
            return {
                ...val,
                allowedRoutes: (val.allowedRoutes ? pulumi.output(val.allowedRoutes).apply(inputs.gateway.v1.gatewaySpecListenersAllowedRoutesArgsProvideDefaults) : undefined),
                tls: (val.tls ? pulumi.output(val.tls).apply(inputs.gateway.v1.gatewaySpecListenersTlsArgsProvideDefaults) : undefined),
            };
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. 
         *  Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: 
         *  * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of "2020-09-08 01:02:03" is given precedence over a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. 
         *  All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. 
         *  Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesArgs {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. 
             *  A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the "ResolvedRefs" condition to False for this Listener with the "InvalidRouteKinds" reason. 
             *  Support: Core
             */
            kinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesKindsArgs>[]>;
            /**
             * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. 
             *  Support: Core
             */
            namespaces?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesArgs>;
        }
        /**
         * gatewaySpecListenersAllowedRoutesArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersAllowedRoutesArgs
         */
        export function gatewaySpecListenersAllowedRoutesArgsProvideDefaults(val: GatewaySpecListenersAllowedRoutesArgs): GatewaySpecListenersAllowedRoutesArgs {
            return {
                ...val,
                namespaces: (val.namespaces ? pulumi.output(val.namespaces).apply(inputs.gateway.v1.gatewaySpecListenersAllowedRoutesNamespacesArgsProvideDefaults) : undefined),
            };
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKindsArgs {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind: pulumi.Input<string>;
        }
        /**
         * gatewaySpecListenersAllowedRoutesKindsArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersAllowedRoutesKindsArgs
         */
        export function gatewaySpecListenersAllowedRoutesKindsArgsProvideDefaults(val: GatewaySpecListenersAllowedRoutesKindsArgs): GatewaySpecListenersAllowedRoutesKindsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
            };
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. 
         *  Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesArgs {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible values are: 
             *  * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. 
             *  Support: Core
             */
            from?: pulumi.Input<string>;
            /**
             * Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From". 
             *  Support: Core
             */
            selector?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs>;
        }
        /**
         * gatewaySpecListenersAllowedRoutesNamespacesArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersAllowedRoutesNamespacesArgs
         */
        export function gatewaySpecListenersAllowedRoutesNamespacesArgsProvideDefaults(val: GatewaySpecListenersAllowedRoutesNamespacesArgs): GatewaySpecListenersAllowedRoutesNamespacesArgs {
            return {
                ...val,
                from: (val.from) ?? "Same",
            };
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From". 
         *  Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP". 
         *  The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. 
         *  The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. 
         *  Support: Core
         */
        export interface GatewaySpecListenersTlsArgs {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. 
             *  A single CertificateRef to a Kubernetes Secret has "Core" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. 
             *  References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the "ResolvedRefs" condition MUST be set to False for this listener with the "RefNotPermitted" reason. 
             *  This field is required to have at least one element when the mode is set to "Terminate" (default) and is optional otherwise. 
             *  CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. 
             *  Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls 
             *  Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsCertificateRefsArgs>[]>;
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: 
             *  - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. 
             *  Support: Core
             */
            mode?: pulumi.Input<string>;
            /**
             * Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. 
             *  A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as `example.com/my-custom-option`. Un-prefixed names are reserved for key names defined by Gateway API. 
             *  Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }
        /**
         * gatewaySpecListenersTlsArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersTlsArgs
         */
        export function gatewaySpecListenersTlsArgsProvideDefaults(val: GatewaySpecListenersTlsArgs): GatewaySpecListenersTlsArgs {
            return {
                ...val,
                mode: (val.mode) ?? "Terminate",
            };
        }

        /**
         * SecretObjectReference identifies an API object including its namespace, defaulting to Secret. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefsArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
        }
        /**
         * gatewaySpecListenersTlsCertificateRefsArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersTlsCertificateRefsArgs
         */
        export function gatewaySpecListenersTlsCertificateRefsArgsProvideDefaults(val: GatewaySpecListenersTlsCertificateRefsArgs): GatewaySpecListenersTlsCertificateRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Secret",
            };
        }

        /**
         * Status defines the current state of Gateway.
         */
        export interface GatewayStatusArgs {
            /**
             * Addresses lists the network addresses that have been bound to the Gateway. 
             *  This list may differ from the addresses provided in the spec under some conditions: 
             *  * no addresses are specified, all addresses are dynamically assigned * a combination of specified and dynamic addresses are assigned * a specified address was unusable (e.g. already in use) 
             *  
             */
            addresses?: pulumi.Input<any[]>;
            /**
             * Conditions describe the current conditions of the Gateway. 
             *  Implementations should prefer to express Gateway conditions using the `GatewayConditionType` and `GatewayConditionReason` constants so that operators and tools can converge on a common vocabulary to describe Gateway state. 
             *  Known condition types are: 
             *  * "Accepted" * "Programmed" * "Ready"
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusConditionsArgs>[]>;
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusListenersArgs>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface GatewayStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface GatewayStatusListenersArgs {
            /**
             * AttachedRoutes represents the total number of Routes that have been successfully attached to this Listener. 
             *  Successful attachment of a Route to a Listener is based solely on the combination of the AllowedRoutes field on the corresponding Listener and the Route's ParentRefs field. A Route is successfully attached to a Listener when it is selected by the Listener's AllowedRoutes field AND the Route has a valid ParentRef selecting the whole Gateway resource or a specific Listener as a parent resource (more detail on attachment semantics can be found in the documentation on the various Route kinds ParentRefs fields). Listener or Route status does not impact successful attachment, i.e. the AttachedRoutes field count MUST be set for Listeners with condition Accepted: false and MUST count successfully attached Routes that may themselves have Accepted: false conditions. 
             *  Uses for this field include troubleshooting Route attachment and measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes: pulumi.Input<number>;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusListenersConditionsArgs>[]>;
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name: pulumi.Input<string>;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this listener. This MUST represent the kinds an implementation supports for that Listener configuration. 
             *  If kinds are specified in Spec that are not supported, they MUST NOT appear in this list and an implementation MUST set the "ResolvedRefs" condition to "False" with the "InvalidRouteKinds" reason. If both valid and invalid Route kinds are specified, the implementation MUST reference the valid Route kinds that have been specified.
             */
            supportedKinds: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusListenersSupportedKindsArgs>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface GatewayStatusListenersConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewayStatusListenersSupportedKindsArgs {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind: pulumi.Input<string>;
        }
        /**
         * gatewayStatusListenersSupportedKindsArgsProvideDefaults sets the appropriate defaults for GatewayStatusListenersSupportedKindsArgs
         */
        export function gatewayStatusListenersSupportedKindsArgsProvideDefaults(val: GatewayStatusListenersSupportedKindsArgs): GatewayStatusListenersSupportedKindsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
            };
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpecArgs {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. 
             *  Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: 
             *  1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. 
             *  If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: 
             *  * A Listener with `test.example.com` as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `*.example.com`, `test.example.com`, and `foo.test.example.com` would all match. On the other hand, `example.com` and `test.example.net` would not match. 
             *  Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
             *  If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
             *  If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
             *  In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: 
             *  * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. 
             *  If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. 
             *  Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
             *  ParentRefs must be _distinct_. This means either that: 
             *  * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
             *  Some examples: 
             *  * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
             *  It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
             *  Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecParentRefsArgs>[]>;
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesArgs>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * httprouteSpecParentRefsArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecParentRefsArgs
         */
        export function httprouteSpecParentRefsArgsProvideDefaults(val: HTTPRouteSpecParentRefsArgs): HTTPRouteSpecParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
         */
        export interface HTTPRouteSpecRulesArgs {
            /**
             * BackendRefs defines the backend(s) where matching requests should be sent. 
             *  Failure behavior here depends on how many BackendRefs are specified and how many are invalid. 
             *  If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive a 500 status code. 
             *  See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. 
             *  When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. 
             *  For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. 
             *  Support: Core for Kubernetes Service 
             *  Support: Extended for Kubernetes ServiceImport 
             *  Support: Implementation-specific for any other resource 
             *  Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsArgs>[]>;
            /**
             * Filters define the filters that are applied to requests that match this rule. 
             *  The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
             *  Conformance-levels at this level are defined based on the type of filter: 
             *  - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. 
             *  Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. 
             *  All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error. 
             *  Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersArgs>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
             *  For example, take the following matches configuration: 
             *  ``` matches: - path: value: "/foo" headers: - name: "version" value: "v2" - path: value: "/v2/foo" ``` 
             *  For a request to match against this rule, a request must satisfy EITHER of the two conditions: 
             *  - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo` 
             *  See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. 
             *  If no matches are specified, the default is a prefix path match on "/", which has the effect of matching every HTTP request. 
             *  Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: 
             *  * "Exact" path match. * "Prefix" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. 
             *  Note: The precedence of RegularExpression path matches are implementation-specific. 
             *  If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
             *  * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
             *  If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. 
             *  When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesArgs>[]>;
            /**
             * Timeouts defines the timeouts that can be configured for an HTTP request. 
             *  Support: Extended 
             *  
             */
            timeouts?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesTimeoutsArgs>;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request. 
         *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         *  <gateway:experimental:description> 
         *  When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         *  Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         *  If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         *  If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         *  </gateway:experimental:description>
         */
        export interface HTTPRouteSpecRulesBackendRefsArgs {
            /**
             * Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. 
             *  Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersArgs>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
             *  If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
             *  Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesBackendRefsArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsArgs
         */
        export function httprouteSpecRulesBackendRefsArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsArgs): HTTPRouteSpecRulesBackendRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
                weight: (val.weight) ?? 1,
            };
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersArgs {
            /**
             * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
             *  This filter can be used multiple times within the same rule. 
             *  Support: Implementation-specific
             */
            extensionRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs>;
            /**
             * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
             *  Support: Core
             */
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs>;
            /**
             * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
             *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
             *  Support: Extended
             */
            requestMirror?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs>;
            /**
             * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
             *  Support: Core
             */
            requestRedirect?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs>;
            /**
             * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
             *  Support: Extended
             */
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs>;
            /**
             * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
             *  - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations must support core filters. 
             *  - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
             *  - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` should be set to "ExtensionRef" for custom filters. 
             *  Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
             *  If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
            /**
             * URLRewrite defines a schema for a filter that modifies a request during forwarding. 
             *  Support: Extended
             */
            urlRewrite?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs>;
        }
        /**
         * httprouteSpecRulesBackendRefsFiltersArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsFiltersArgs
         */
        export function httprouteSpecRulesBackendRefsFiltersArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsFiltersArgs): HTTPRouteSpecRulesBackendRefsFiltersArgs {
            return {
                ...val,
                requestMirror: (val.requestMirror ? pulumi.output(val.requestMirror).apply(inputs.gateway.v1.httprouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults) : undefined),
                requestRedirect: (val.requestRedirect ? pulumi.output(val.requestRedirect).apply(inputs.gateway.v1.httprouteSpecRulesBackendRefsFiltersRequestRedirectArgsProvideDefaults) : undefined),
            };
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         *  This filter can be used multiple times within the same rule. 
         *  Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs {
            /**
             * BackendRef references a resource where mirrored requests are sent. 
             *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
             *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
             *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
             *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
             *  Support: Extended for Kubernetes Service 
             *  Support: Implementation-specific for any other resource
             */
            backendRef: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs>;
        }
        /**
         * httprouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs
         */
        export function httprouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs): HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs {
            return {
                ...val,
                backendRef: pulumi.output(val.backendRef).apply(inputs.gateway.v1.httprouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults),
            };
        }

        /**
         * BackendRef references a resource where mirrored requests are sent. 
         *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         *  Support: Extended for Kubernetes Service 
         *  Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs
         */
        export function httprouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs): HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
            };
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs {
            /**
             * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used. 
             *  Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
             *  Support: Extended
             */
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs>;
            /**
             * Port is the port to be used in the value of the `Location` header in the response. 
             *  If no port is specified, the redirect port MUST be derived using the following rules: 
             *  * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. 
             *  Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: 
             *  * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 443. 
             *  Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
             *  Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
             *  Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
             *  Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesBackendRefsFiltersRequestRedirectArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs
         */
        export function httprouteSpecRulesBackendRefsFiltersRequestRedirectArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs): HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs {
            return {
                ...val,
                statusCode: (val.statusCode) ?? 302,
            };
        }

        /**
         * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
             *  Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
             *  ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
             *  Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be added in a future release of the API. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs {
            /**
             * Hostname is the value to be used to replace the Host header value during forwarding. 
             *  Support: Extended
             */
            hostname?: pulumi.Input<string>;
            /**
             * Path defines a path rewrite. 
             *  Support: Extended
             */
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs>;
        }

        /**
         * Path defines a path rewrite. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
             *  Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
             *  ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
             *  Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be added in a future release of the API. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFiltersArgs {
            /**
             * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
             *  This filter can be used multiple times within the same rule. 
             *  Support: Implementation-specific
             */
            extensionRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersExtensionRefArgs>;
            /**
             * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
             *  Support: Core
             */
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs>;
            /**
             * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
             *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
             *  Support: Extended
             */
            requestMirror?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorArgs>;
            /**
             * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
             *  Support: Core
             */
            requestRedirect?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirectArgs>;
            /**
             * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
             *  Support: Extended
             */
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs>;
            /**
             * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
             *  - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations must support core filters. 
             *  - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
             *  - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` should be set to "ExtensionRef" for custom filters. 
             *  Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
             *  If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
            /**
             * URLRewrite defines a schema for a filter that modifies a request during forwarding. 
             *  Support: Extended
             */
            urlRewrite?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewriteArgs>;
        }
        /**
         * httprouteSpecRulesFiltersArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersArgs
         */
        export function httprouteSpecRulesFiltersArgsProvideDefaults(val: HTTPRouteSpecRulesFiltersArgs): HTTPRouteSpecRulesFiltersArgs {
            return {
                ...val,
                requestMirror: (val.requestMirror ? pulumi.output(val.requestMirror).apply(inputs.gateway.v1.httprouteSpecRulesFiltersRequestMirrorArgsProvideDefaults) : undefined),
                requestRedirect: (val.requestRedirect ? pulumi.output(val.requestRedirect).apply(inputs.gateway.v1.httprouteSpecRulesFiltersRequestRedirectArgsProvideDefaults) : undefined),
            };
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         *  This filter can be used multiple times within the same rule. 
         *  Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorArgs {
            /**
             * BackendRef references a resource where mirrored requests are sent. 
             *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
             *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
             *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
             *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
             *  Support: Extended for Kubernetes Service 
             *  Support: Implementation-specific for any other resource
             */
            backendRef: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs>;
        }
        /**
         * httprouteSpecRulesFiltersRequestMirrorArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersRequestMirrorArgs
         */
        export function httprouteSpecRulesFiltersRequestMirrorArgsProvideDefaults(val: HTTPRouteSpecRulesFiltersRequestMirrorArgs): HTTPRouteSpecRulesFiltersRequestMirrorArgs {
            return {
                ...val,
                backendRef: pulumi.output(val.backendRef).apply(inputs.gateway.v1.httprouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults),
            };
        }

        /**
         * BackendRef references a resource where mirrored requests are sent. 
         *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         *  Support: Extended for Kubernetes Service 
         *  Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs
         */
        export function httprouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults(val: HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs): HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
            };
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectArgs {
            /**
             * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used. 
             *  Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
             *  Support: Extended
             */
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirectPathArgs>;
            /**
             * Port is the port to be used in the value of the `Location` header in the response. 
             *  If no port is specified, the redirect port MUST be derived using the following rules: 
             *  * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. 
             *  Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: 
             *  * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 443. 
             *  Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
             *  Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
             *  Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
             *  Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesFiltersRequestRedirectArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersRequestRedirectArgs
         */
        export function httprouteSpecRulesFiltersRequestRedirectArgsProvideDefaults(val: HTTPRouteSpecRulesFiltersRequestRedirectArgs): HTTPRouteSpecRulesFiltersRequestRedirectArgs {
            return {
                ...val,
                statusCode: (val.statusCode) ?? 302,
            };
        }

        /**
         * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPathArgs {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
             *  Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
             *  ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
             *  Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be added in a future release of the API. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewriteArgs {
            /**
             * Hostname is the value to be used to replace the Host header value during forwarding. 
             *  Support: Extended
             */
            hostname?: pulumi.Input<string>;
            /**
             * Path defines a path rewrite. 
             *  Support: Extended
             */
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewritePathArgs>;
        }

        /**
         * Path defines a path rewrite. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePathArgs {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
             *  Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
             *  ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
             *  Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be added in a future release of the API. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied. 
         *  For example, the match below will match a HTTP request only if its path starts with `/foo` AND it contains the `version: v1` header: 
         *  ``` match: 
         *  path: value: "/foo" headers: - name: "version" value "v1" 
         *  ```
         */
        export interface HTTPRouteSpecRulesMatchesArgs {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesHeadersArgs>[]>;
            /**
             * Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. 
             *  Support: Extended
             */
            method?: pulumi.Input<string>;
            /**
             * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
             */
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesPathArgs>;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. 
             *  Support: Extended
             */
            queryParams?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesQueryParamsArgs>[]>;
        }
        /**
         * httprouteSpecRulesMatchesArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesArgs
         */
        export function httprouteSpecRulesMatchesArgsProvideDefaults(val: HTTPRouteSpecRulesMatchesArgs): HTTPRouteSpecRulesMatchesArgs {
            return {
                ...val,
                path: (val.path ? pulumi.output(val.path).apply(inputs.gateway.v1.httprouteSpecRulesMatchesPathArgsProvideDefaults) : undefined),
            };
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeadersArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent. 
             *  When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for "Set-Cookie".
             */
            name: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header. 
             *  Support: Core (Exact) 
             *  Support: Implementation-specific (RegularExpression) 
             *  Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }
        /**
         * httprouteSpecRulesMatchesHeadersArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesHeadersArgs
         */
        export function httprouteSpecRulesMatchesHeadersArgsProvideDefaults(val: HTTPRouteSpecRulesMatchesHeadersArgs): HTTPRouteSpecRulesMatchesHeadersArgs {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPathArgs {
            /**
             * Type specifies how to match against the path Value. 
             *  Support: Core (Exact, PathPrefix) 
             *  Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the HTTP path to match against.
             */
            value?: pulumi.Input<string>;
        }
        /**
         * httprouteSpecRulesMatchesPathArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesPathArgs
         */
        export function httprouteSpecRulesMatchesPathArgsProvideDefaults(val: HTTPRouteSpecRulesMatchesPathArgs): HTTPRouteSpecRulesMatchesPathArgs {
            return {
                ...val,
                type: (val.type) ?? "PathPrefix",
                value: (val.value) ?? "/",
            };
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParamsArgs {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). 
             *  If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. 
             *  If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is *recommended* that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. 
             *  Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.
             */
            name: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the query parameter. 
             *  Support: Extended (Exact) 
             *  Support: Implementation-specific (RegularExpression) 
             *  Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value: pulumi.Input<string>;
        }
        /**
         * httprouteSpecRulesMatchesQueryParamsArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesQueryParamsArgs
         */
        export function httprouteSpecRulesMatchesQueryParamsArgsProvideDefaults(val: HTTPRouteSpecRulesMatchesQueryParamsArgs): HTTPRouteSpecRulesMatchesQueryParamsArgs {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request. 
         *  Support: Extended 
         *  
         */
        export interface HTTPRouteSpecRulesTimeoutsArgs {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway to a backend. This covers the time from when the request first starts being sent from the gateway to when the full response has been received from the backend. 
             *  An entire client HTTP transaction with a gateway, covered by the Request timeout, may result in more than one call from the gateway to the destination backend, for example, if automatic retries are supported. 
             *  Because the Request timeout encompasses the BackendRequest timeout, the value of BackendRequest must be <= the value of Request timeout. 
             *  Support: Extended
             */
            backendRequest?: pulumi.Input<string>;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request. If the gateway has not been able to respond before this deadline is met, the gateway MUST return a timeout error. 
             *  For example, setting the `rules.timeouts.request` field to the value `10s` in an `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds to complete. 
             *  This timeout is intended to cover as close to the whole request-response transaction as possible although an implementation MAY choose to start the timeout after the entire request stream has been received instead of immediately after the transaction is initiated by the client. 
             *  When this field is unspecified, request timeout behavior is implementation-specific. 
             *  Support: Extended
             */
            request?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatusArgs {
            /**
             * Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
             *  Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
             *  A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
             */
            parents: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteStatusParentsArgs>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an associated Parent.
         */
        export interface HTTPRouteStatusParentsArgs {
            /**
             * Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
             *  If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
             *  A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
             *  There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
             *  * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteStatusParentsConditionsArgs>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: pulumi.Input<string>;
            /**
             * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
             */
            parentRef: pulumi.Input<inputs.gateway.v1.HTTPRouteStatusParentsParentRefArgs>;
        }
        /**
         * httprouteStatusParentsArgsProvideDefaults sets the appropriate defaults for HTTPRouteStatusParentsArgs
         */
        export function httprouteStatusParentsArgsProvideDefaults(val: HTTPRouteStatusParentsArgs): HTTPRouteStatusParentsArgs {
            return {
                ...val,
                parentRef: pulumi.output(val.parentRef).apply(inputs.gateway.v1.httprouteStatusParentsParentRefArgsProvideDefaults),
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface HTTPRouteStatusParentsConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentRefArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * httprouteStatusParentsParentRefArgsProvideDefaults sets the appropriate defaults for HTTPRouteStatusParentsParentRefArgs
         */
        export function httprouteStatusParentsParentRefArgsProvideDefaults(val: HTTPRouteStatusParentsParentRefArgs): HTTPRouteStatusParentsParentRefArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }
    }

    export namespace v1alpha2 {
        /**
         * Spec defines the desired state of BackendTLSPolicy.
         */
        export interface BackendTLSPolicySpecArgs {
            /**
             * TargetRef identifies an API object to apply the policy to. Only Services have Extended support. Implementations MAY support additional objects, with Implementation Specific support. Note that this config applies to the entire referenced resource by default, but this default may change in the future to provide a more granular application of the policy. 
             *  Support: Extended for Kubernetes Service 
             *  Support: Implementation-specific for any other resource
             */
            targetRef: pulumi.Input<inputs.gateway.v1alpha2.BackendTLSPolicySpecTargetRefArgs>;
            /**
             * TLS contains backend TLS policy configuration.
             */
            tls: pulumi.Input<inputs.gateway.v1alpha2.BackendTLSPolicySpecTlsArgs>;
        }

        /**
         * TargetRef identifies an API object to apply the policy to. Only Services have Extended support. Implementations MAY support additional objects, with Implementation Specific support. Note that this config applies to the entire referenced resource by default, but this default may change in the future to provide a more granular application of the policy. 
         *  Support: Extended for Kubernetes Service 
         *  Support: Implementation-specific for any other resource
         */
        export interface BackendTLSPolicySpecTargetRefArgs {
            /**
             * Group is the group of the target resource.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the target resource.
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the target resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, the local namespace is inferred. Even when policy targets a resource in a different namespace, it MUST only apply to traffic originating from the same namespace as the policy.
             */
            namespace?: pulumi.Input<string>;
            /**
             * SectionName is the name of a section within the target resource. When unspecified, this targetRef targets the entire resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name * Service: Port Name 
             *  If a SectionName is specified, but does not exist on the targeted object, the Policy must fail to attach, and the policy implementation should record a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * TLS contains backend TLS policy configuration.
         */
        export interface BackendTLSPolicySpecTlsArgs {
            /**
             * CACertRefs contains one or more references to Kubernetes objects that contain a PEM-encoded TLS CA certificate bundle, which is used to validate a TLS handshake between the Gateway and backend Pod. 
             *  If CACertRefs is empty or unspecified, then WellKnownCACerts must be specified. Only one of CACertRefs or WellKnownCACerts may be specified, not both. If CACertRefs is empty or unspecified, the configuration for WellKnownCACerts MUST be honored instead. 
             *  References to a resource in a different namespace are invalid for the moment, although we will revisit this in the future. 
             *  A single CACertRef to a Kubernetes ConfigMap kind has "Core" support. Implementations MAY choose to support attaching multiple certificates to a backend, but this behavior is implementation-specific. 
             *  Support: Core - An optional single reference to a Kubernetes ConfigMap, with the CA certificate in a key named `ca.crt`. 
             *  Support: Implementation-specific (More than one reference, or other kinds of resources).
             */
            caCertRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.BackendTLSPolicySpecTlsCaCertRefsArgs>[]>;
            /**
             * Hostname is used for two purposes in the connection between Gateways and backends: 
             *  1. Hostname MUST be used as the SNI to connect to the backend (RFC 6066). 2. Hostname MUST be used for authentication and MUST match the certificate served by the matching backend. 
             *  Support: Core
             */
            hostname: pulumi.Input<string>;
            /**
             * WellKnownCACerts specifies whether system CA certificates may be used in the TLS handshake between the gateway and backend pod. 
             *  If WellKnownCACerts is unspecified or empty (""), then CACertRefs must be specified with at least one entry for a valid configuration. Only one of CACertRefs or WellKnownCACerts may be specified, not both. 
             *  Support: Core for "System"
             */
            wellKnownCACerts?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference identifies an API object within the namespace of the referrer. The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface BackendTLSPolicySpecTlsCaCertRefsArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of BackendTLSPolicy.
         */
        export interface BackendTLSPolicyStatusArgs {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are associated with the policy, and the status of the policy with respect to each ancestor. When this policy attaches to a parent, the controller that manages the parent and the ancestors MUST add an entry to this list when the controller first sees the policy and SHOULD update the entry as appropriate when the relevant ancestor is modified. 
             *  Note that choosing the relevant ancestor is left to the Policy designers; an important part of Policy design is designing the right object level at which to namespace this status. 
             *  Note also that implementations MUST ONLY populate ancestor status for the Ancestor resources they are responsible for. Implementations MUST use the ControllerName field to uniquely identify the entries in this list that they are responsible for. 
             *  Note that to achieve this, the list of PolicyAncestorStatus structs MUST be treated as a map with a composite key, made up of the AncestorRef and ControllerName fields combined. 
             *  A maximum of 16 ancestors will be represented in this list. An empty list means the Policy is not relevant for any ancestors. 
             *  If this slice is full, implementations MUST NOT add further entries. Instead they MUST consider the policy unimplementable and signal that on any related resources such as the ancestor that would be referenced here. For example, if this list was full on BackendTLSPolicy, no additional Gateways would be able to reference the Service targeted by the BackendTLSPolicy.
             */
            ancestors: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.BackendTLSPolicyStatusAncestorsArgs>[]>;
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an associated Ancestor. 
         *  Ancestors refer to objects that are either the Target of a policy or above it in terms of object hierarchy. For example, if a policy targets a Service, the Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most useful object to place Policy status on, so we recommend that implementations SHOULD use Gateway as the PolicyAncestorStatus object unless the designers have a _very_ good reason otherwise. 
         *  In the context of policy attachment, the Ancestor is used to distinguish which resource results in a distinct application of this policy. For example, if a policy targets a Service, it may have a distinct result per attached Gateway. 
         *  Policies targeting the same resource may have different effects depending on the ancestors of those resources. For example, different Gateways targeting the same Service may have different capabilities, especially if they have different underlying implementations. 
         *  For example, in BackendTLSPolicy, the Policy attaches to a Service that is used as a backend in a HTTPRoute that is itself attached to a Gateway. In this case, the relevant object for status is the Gateway, and that is the ancestor object referred to in this status. 
         *  Note that a parent is also an ancestor, so for objects where the parent is the relevant object for status, this struct SHOULD still be used. 
         *  This struct is intended to be used in a slice that's effectively a map, with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface BackendTLSPolicyStatusAncestorsArgs {
            /**
             * AncestorRef corresponds with a ParentRef in the spec that this PolicyAncestorStatus struct describes the status of.
             */
            ancestorRef: pulumi.Input<inputs.gateway.v1alpha2.BackendTLSPolicyStatusAncestorsAncestorRefArgs>;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.BackendTLSPolicyStatusAncestorsConditionsArgs>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: pulumi.Input<string>;
        }
        /**
         * backendTLSPolicyStatusAncestorsArgsProvideDefaults sets the appropriate defaults for BackendTLSPolicyStatusAncestorsArgs
         */
        export function backendTLSPolicyStatusAncestorsArgsProvideDefaults(val: BackendTLSPolicyStatusAncestorsArgs): BackendTLSPolicyStatusAncestorsArgs {
            return {
                ...val,
                ancestorRef: pulumi.output(val.ancestorRef).apply(inputs.gateway.v1alpha2.backendTLSPolicyStatusAncestorsAncestorRefArgsProvideDefaults),
            };
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this PolicyAncestorStatus struct describes the status of.
         */
        export interface BackendTLSPolicyStatusAncestorsAncestorRefArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * backendTLSPolicyStatusAncestorsAncestorRefArgsProvideDefaults sets the appropriate defaults for BackendTLSPolicyStatusAncestorsAncestorRefArgs
         */
        export function backendTLSPolicyStatusAncestorsAncestorRefArgsProvideDefaults(val: BackendTLSPolicyStatusAncestorsAncestorRefArgs): BackendTLSPolicyStatusAncestorsAncestorRefArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface BackendTLSPolicyStatusAncestorsConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of GRPCRoute.
         */
        export interface GRPCRouteSpecArgs {
            /**
             * Hostnames defines a set of hostnames to match against the GRPC Host header to select a GRPCRoute to process the request. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: 
             *  1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label MUST appear by itself as the first label. 
             *  If a hostname is specified by both the Listener and GRPCRoute, there MUST be at least one intersecting hostname for the GRPCRoute to be attached to the Listener. For example: 
             *  * A Listener with `test.example.com` as the hostname matches GRPCRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches GRPCRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `test.example.com` and `*.example.com` would both match. On the other hand, `example.com` and `test.example.net` would not match. 
             *  Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
             *  If both the Listener and GRPCRoute have specified hostnames, any GRPCRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the GRPCRoute specified `test.example.com` and `test.example.net`, `test.example.net` MUST NOT be considered for a match. 
             *  If both the Listener and GRPCRoute have specified hostnames, and none match with the criteria above, then the GRPCRoute MUST NOT be accepted by the implementation. The implementation MUST raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
             *  If a Route (A) of type HTTPRoute or GRPCRoute is attached to a Listener and that listener already has another Route (B) of the other type attached and the intersection of the hostnames of A and B is non-empty, then the implementation MUST accept exactly one of these two routes, determined by the following criteria, in order: 
             *  * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
             *  The rejected Route MUST raise an 'Accepted' condition with a status of 'False' in the corresponding RouteParentStatus. 
             *  Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
             *  ParentRefs must be _distinct_. This means either that: 
             *  * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
             *  Some examples: 
             *  * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
             *  It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
             *  Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecParentRefsArgs>[]>;
            /**
             * Rules are a list of GRPC matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesArgs>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface GRPCRouteSpecParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * grpcrouteSpecParentRefsArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecParentRefsArgs
         */
        export function grpcrouteSpecParentRefsArgsProvideDefaults(val: GRPCRouteSpecParentRefsArgs): GRPCRouteSpecParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * GRPCRouteRule defines the semantics for matching a gRPC request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
         */
        export interface GRPCRouteSpecRulesArgs {
            /**
             * BackendRefs defines the backend(s) where matching requests should be sent. 
             *  Failure behavior here depends on how many BackendRefs are specified and how many are invalid. 
             *  If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive an `UNAVAILABLE` status. 
             *  See the GRPCBackendRef definition for the rules about what makes a single GRPCBackendRef invalid. 
             *  When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive an `UNAVAILABLE` status. 
             *  For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status. Implementations may choose how that 50 percent is determined. 
             *  Support: Core for Kubernetes Service 
             *  Support: Implementation-specific for any other resource 
             *  Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsArgs>[]>;
            /**
             * Filters define the filters that are applied to requests that match this rule. 
             *  The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
             *  Conformance-levels at this level are defined based on the type of filter: 
             *  - ALL core filters MUST be supported by all implementations that support GRPCRoute. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. 
             *  Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. 
             *  If an implementation can not support a combination of filters, it must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error. 
             *  Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersArgs>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
             *  For example, take the following matches configuration: 
             *  ``` matches: - method: service: foo.bar headers: values: version: 2 - method: service: foo.bar.v2 ``` 
             *  For a request to match against this rule, it MUST satisfy EITHER of the two conditions: 
             *  - service of foo.bar AND contains the header `version: 2` - service of foo.bar.v2 
             *  See the documentation for GRPCRouteMatch on how to specify multiple match conditions to be ANDed together. 
             *  If no matches are specified, the implementation MUST match every gRPC request. 
             *  Proxy or Load Balancer routing configuration generated from GRPCRoutes MUST prioritize rules based on the following criteria, continuing on ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes. Precedence MUST be given to the rule with the largest number of: 
             *  * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching service. * Characters in a matching method. * Header matches. 
             *  If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
             *  * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
             *  If ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesMatchesArgs>[]>;
        }

        /**
         * GRPCBackendRef defines how a GRPCRoute forwards a gRPC request. 
         *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         *  <gateway:experimental:description> 
         *  When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         *  Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         *  If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         *  If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         *  </gateway:experimental:description>
         */
        export interface GRPCRouteSpecRulesBackendRefsArgs {
            /**
             * Filters defined at this level MUST be executed if and only if the request is being forwarded to the backend defined here. 
             *  Support: Implementation-specific (For broader support of filters, use the Filters field in GRPCRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersArgs>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
             *  If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
             *  Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }
        /**
         * grpcrouteSpecRulesBackendRefsArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsArgs
         */
        export function grpcrouteSpecRulesBackendRefsArgsProvideDefaults(val: GRPCRouteSpecRulesBackendRefsArgs): GRPCRouteSpecRulesBackendRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
                weight: (val.weight) ?? 1,
            };
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the request or response lifecycle. GRPCRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersArgs {
            /**
             * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
             *  Support: Implementation-specific 
             *  This filter can be used multiple times within the same rule.
             */
            extensionRef?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs>;
            /**
             * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
             *  Support: Core
             */
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs>;
            /**
             * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
             *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
             *  Support: Extended
             */
            requestMirror?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs>;
            /**
             * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
             *  Support: Extended
             */
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs>;
            /**
             * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
             *  - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations supporting GRPCRoute MUST support core filters. 
             *  - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
             *  - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` MUST be set to "ExtensionRef" for custom filters. 
             *  Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
             *  If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
             *  
             */
            type: pulumi.Input<string>;
        }
        /**
         * grpcrouteSpecRulesBackendRefsFiltersArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFiltersArgs
         */
        export function grpcrouteSpecRulesBackendRefsFiltersArgsProvideDefaults(val: GRPCRouteSpecRulesBackendRefsFiltersArgs): GRPCRouteSpecRulesBackendRefsFiltersArgs {
            return {
                ...val,
                requestMirror: (val.requestMirror ? pulumi.output(val.requestMirror).apply(inputs.gateway.v1alpha2.grpcrouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults) : undefined),
            };
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         *  Support: Implementation-specific 
         *  This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         *  Support: Core
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         *  Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs {
            /**
             * BackendRef references a resource where mirrored requests are sent. 
             *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
             *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
             *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
             *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
             *  Support: Extended for Kubernetes Service 
             *  Support: Implementation-specific for any other resource
             */
            backendRef: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs>;
        }
        /**
         * grpcrouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs
         */
        export function grpcrouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults(val: GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs): GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs {
            return {
                ...val,
                backendRef: pulumi.output(val.backendRef).apply(inputs.gateway.v1alpha2.grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults),
            };
        }

        /**
         * BackendRef references a resource where mirrored requests are sent. 
         *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         *  Support: Extended for Kubernetes Service 
         *  Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
        }
        /**
         * grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs
         */
        export function grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults(val: GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs): GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
            };
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         *  Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the request or response lifecycle. GRPCRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesFiltersArgs {
            /**
             * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
             *  Support: Implementation-specific 
             *  This filter can be used multiple times within the same rule.
             */
            extensionRef?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersExtensionRefArgs>;
            /**
             * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
             *  Support: Core
             */
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs>;
            /**
             * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
             *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
             *  Support: Extended
             */
            requestMirror?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersRequestMirrorArgs>;
            /**
             * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
             *  Support: Extended
             */
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs>;
            /**
             * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
             *  - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations supporting GRPCRoute MUST support core filters. 
             *  - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
             *  - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` MUST be set to "ExtensionRef" for custom filters. 
             *  Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
             *  If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
             *  
             */
            type: pulumi.Input<string>;
        }
        /**
         * grpcrouteSpecRulesFiltersArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesFiltersArgs
         */
        export function grpcrouteSpecRulesFiltersArgsProvideDefaults(val: GRPCRouteSpecRulesFiltersArgs): GRPCRouteSpecRulesFiltersArgs {
            return {
                ...val,
                requestMirror: (val.requestMirror ? pulumi.output(val.requestMirror).apply(inputs.gateway.v1alpha2.grpcrouteSpecRulesFiltersRequestMirrorArgsProvideDefaults) : undefined),
            };
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         *  Support: Implementation-specific 
         *  This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesFiltersExtensionRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         *  Support: Core
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         *  Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorArgs {
            /**
             * BackendRef references a resource where mirrored requests are sent. 
             *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
             *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
             *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
             *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
             *  Support: Extended for Kubernetes Service 
             *  Support: Implementation-specific for any other resource
             */
            backendRef: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs>;
        }
        /**
         * grpcrouteSpecRulesFiltersRequestMirrorArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesFiltersRequestMirrorArgs
         */
        export function grpcrouteSpecRulesFiltersRequestMirrorArgsProvideDefaults(val: GRPCRouteSpecRulesFiltersRequestMirrorArgs): GRPCRouteSpecRulesFiltersRequestMirrorArgs {
            return {
                ...val,
                backendRef: pulumi.output(val.backendRef).apply(inputs.gateway.v1alpha2.grpcrouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults),
            };
        }

        /**
         * BackendRef references a resource where mirrored requests are sent. 
         *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         *  Support: Extended for Kubernetes Service 
         *  Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
        }
        /**
         * grpcrouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs
         */
        export function grpcrouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults(val: GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs): GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
            };
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         *  Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * GRPCRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied. 
         *  For example, the match below will match a gRPC request only if its service is `foo` AND it contains the `version: v1` header: 
         *  ``` matches: - method: type: Exact service: "foo" headers: - name: "version" value "v1" 
         *  ```
         */
        export interface GRPCRouteSpecRulesMatchesArgs {
            /**
             * Headers specifies gRPC request header matchers. Multiple match values are ANDed together, meaning, a request MUST match all the specified headers to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesMatchesHeadersArgs>[]>;
            /**
             * Method specifies a gRPC request service/method matcher. If this field is not specified, all services and methods will match.
             */
            method?: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteSpecRulesMatchesMethodArgs>;
        }
        /**
         * grpcrouteSpecRulesMatchesArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesMatchesArgs
         */
        export function grpcrouteSpecRulesMatchesArgsProvideDefaults(val: GRPCRouteSpecRulesMatchesArgs): GRPCRouteSpecRulesMatchesArgs {
            return {
                ...val,
                method: (val.method ? pulumi.output(val.method).apply(inputs.gateway.v1alpha2.grpcrouteSpecRulesMatchesMethodArgsProvideDefaults) : undefined),
            };
        }

        /**
         * GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request headers.
         */
        export interface GRPCRouteSpecRulesMatchesHeadersArgs {
            /**
             * Name is the name of the gRPC Header to be matched. 
             *  If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of the gRPC Header to be matched.
             */
            value: pulumi.Input<string>;
        }
        /**
         * grpcrouteSpecRulesMatchesHeadersArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesMatchesHeadersArgs
         */
        export function grpcrouteSpecRulesMatchesHeadersArgsProvideDefaults(val: GRPCRouteSpecRulesMatchesHeadersArgs): GRPCRouteSpecRulesMatchesHeadersArgs {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Method specifies a gRPC request service/method matcher. If this field is not specified, all services and methods will match.
         */
        export interface GRPCRouteSpecRulesMatchesMethodArgs {
            /**
             * Value of the method to match against. If left empty or omitted, will match all services. 
             *  At least one of Service and Method MUST be a non-empty string.
             */
            method?: pulumi.Input<string>;
            /**
             * Value of the service to match against. If left empty or omitted, will match any service. 
             *  At least one of Service and Method MUST be a non-empty string.
             */
            service?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the service and/or method. Support: Core (Exact with service and method specified) 
             *  Support: Implementation-specific (Exact with method specified but no service specified) 
             *  Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
        }
        /**
         * grpcrouteSpecRulesMatchesMethodArgsProvideDefaults sets the appropriate defaults for GRPCRouteSpecRulesMatchesMethodArgs
         */
        export function grpcrouteSpecRulesMatchesMethodArgsProvideDefaults(val: GRPCRouteSpecRulesMatchesMethodArgs): GRPCRouteSpecRulesMatchesMethodArgs {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Status defines the current state of GRPCRoute.
         */
        export interface GRPCRouteStatusArgs {
            /**
             * Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
             *  Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
             *  A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
             */
            parents: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteStatusParentsArgs>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an associated Parent.
         */
        export interface GRPCRouteStatusParentsArgs {
            /**
             * Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
             *  If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
             *  A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
             *  There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
             *  * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteStatusParentsConditionsArgs>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: pulumi.Input<string>;
            /**
             * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
             */
            parentRef: pulumi.Input<inputs.gateway.v1alpha2.GRPCRouteStatusParentsParentRefArgs>;
        }
        /**
         * grpcrouteStatusParentsArgsProvideDefaults sets the appropriate defaults for GRPCRouteStatusParentsArgs
         */
        export function grpcrouteStatusParentsArgsProvideDefaults(val: GRPCRouteStatusParentsArgs): GRPCRouteStatusParentsArgs {
            return {
                ...val,
                parentRef: pulumi.output(val.parentRef).apply(inputs.gateway.v1alpha2.grpcrouteStatusParentsParentRefArgsProvideDefaults),
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface GRPCRouteStatusParentsConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
         */
        export interface GRPCRouteStatusParentsParentRefArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * grpcrouteStatusParentsParentRefArgsProvideDefaults sets the appropriate defaults for GRPCRouteStatusParentsParentRefArgs
         */
        export function grpcrouteStatusParentsParentRefArgsProvideDefaults(val: GRPCRouteStatusParentsParentRefArgs): GRPCRouteStatusParentsParentRefArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * Spec defines the desired state of ReferenceGrant.
         */
        export interface ReferenceGrantSpecArgs {
            /**
             * From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. 
             *  Support: Core
             */
            from: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.ReferenceGrantSpecFromArgs>[]>;
            /**
             * To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. 
             *  Support: Core
             */
            to: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.ReferenceGrantSpecToArgs>[]>;
        }

        /**
         * ReferenceGrantFrom describes trusted namespaces and kinds.
         */
        export interface ReferenceGrantSpecFromArgs {
            /**
             * Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
             *  Support: Core
             */
            group: pulumi.Input<string>;
            /**
             * Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field. 
             *  When used to permit a SecretObjectReference: 
             *  * Gateway 
             *  When used to permit a BackendObjectReference: 
             *  * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
             */
            kind: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. 
             *  Support: Core
             */
            namespace: pulumi.Input<string>;
        }

        /**
         * ReferenceGrantTo describes what Kinds are allowed as targets of the references.
         */
        export interface ReferenceGrantSpecToArgs {
            /**
             * Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
             *  Support: Core
             */
            group: pulumi.Input<string>;
            /**
             * Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field: 
             *  * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of TCPRoute.
         */
        export interface TCPRouteSpecArgs {
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
             *  ParentRefs must be _distinct_. This means either that: 
             *  * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
             *  Some examples: 
             *  * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
             *  It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
             *  Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecParentRefsArgs>[]>;
            /**
             * Rules are a list of TCP matchers and actions.
             */
            rules: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecRulesArgs>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface TCPRouteSpecParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * tcprouteSpecParentRefsArgsProvideDefaults sets the appropriate defaults for TCPRouteSpecParentRefsArgs
         */
        export function tcprouteSpecParentRefsArgsProvideDefaults(val: TCPRouteSpecParentRefsArgs): TCPRouteSpecParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * TCPRouteRule is the configuration for a given rule.
         */
        export interface TCPRouteSpecRulesArgs {
            /**
             * BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Connection rejections must respect weight; if an invalid backend is requested to have 80% of connections, then 80% of connections must be rejected instead. 
             *  Support: Core for Kubernetes Service 
             *  Support: Extended for Kubernetes ServiceImport 
             *  Support: Implementation-specific for any other resource 
             *  Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecRulesBackendRefsArgs>[]>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes resource. 
         *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         *  <gateway:experimental:description> 
         *  When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         *  Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         *  If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         *  If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         *  </gateway:experimental:description> 
         *  Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
         */
        export interface TCPRouteSpecRulesBackendRefsArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
             *  If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
             *  Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }
        /**
         * tcprouteSpecRulesBackendRefsArgsProvideDefaults sets the appropriate defaults for TCPRouteSpecRulesBackendRefsArgs
         */
        export function tcprouteSpecRulesBackendRefsArgsProvideDefaults(val: TCPRouteSpecRulesBackendRefsArgs): TCPRouteSpecRulesBackendRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
                weight: (val.weight) ?? 1,
            };
        }

        /**
         * Status defines the current state of TCPRoute.
         */
        export interface TCPRouteStatusArgs {
            /**
             * Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
             *  Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
             *  A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
             */
            parents: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteStatusParentsArgs>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an associated Parent.
         */
        export interface TCPRouteStatusParentsArgs {
            /**
             * Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
             *  If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
             *  A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
             *  There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
             *  * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteStatusParentsConditionsArgs>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: pulumi.Input<string>;
            /**
             * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
             */
            parentRef: pulumi.Input<inputs.gateway.v1alpha2.TCPRouteStatusParentsParentRefArgs>;
        }
        /**
         * tcprouteStatusParentsArgsProvideDefaults sets the appropriate defaults for TCPRouteStatusParentsArgs
         */
        export function tcprouteStatusParentsArgsProvideDefaults(val: TCPRouteStatusParentsArgs): TCPRouteStatusParentsArgs {
            return {
                ...val,
                parentRef: pulumi.output(val.parentRef).apply(inputs.gateway.v1alpha2.tcprouteStatusParentsParentRefArgsProvideDefaults),
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface TCPRouteStatusParentsConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
         */
        export interface TCPRouteStatusParentsParentRefArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * tcprouteStatusParentsParentRefArgsProvideDefaults sets the appropriate defaults for TCPRouteStatusParentsParentRefArgs
         */
        export function tcprouteStatusParentsParentRefArgsProvideDefaults(val: TCPRouteStatusParentsParentRefArgs): TCPRouteStatusParentsParentRefArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * Spec defines the desired state of TLSRoute.
         */
        export interface TLSRouteSpecArgs {
            /**
             * Hostnames defines a set of SNI names that should match against the SNI attribute of TLS ClientHello message in TLS handshake. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: 
             *  1. IPs are not allowed in SNI names per RFC 6066. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. 
             *  If a hostname is specified by both the Listener and TLSRoute, there must be at least one intersecting hostname for the TLSRoute to be attached to the Listener. For example: 
             *  * A Listener with `test.example.com` as the hostname matches TLSRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches TLSRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `test.example.com` and `*.example.com` would both match. On the other hand, `example.com` and `test.example.net` would not match. 
             *  If both the Listener and TLSRoute have specified hostnames, any TLSRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the TLSRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
             *  If both the Listener and TLSRoute have specified hostnames, and none match with the criteria above, then the TLSRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
             *  Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
             *  ParentRefs must be _distinct_. This means either that: 
             *  * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
             *  Some examples: 
             *  * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
             *  It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
             *  Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecParentRefsArgs>[]>;
            /**
             * Rules are a list of TLS matchers and actions.
             */
            rules: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecRulesArgs>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface TLSRouteSpecParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * tlsrouteSpecParentRefsArgsProvideDefaults sets the appropriate defaults for TLSRouteSpecParentRefsArgs
         */
        export function tlsrouteSpecParentRefsArgsProvideDefaults(val: TLSRouteSpecParentRefsArgs): TLSRouteSpecParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * TLSRouteRule is the configuration for a given rule.
         */
        export interface TLSRouteSpecRulesArgs {
            /**
             * BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the rule performs no forwarding; if no filters are specified that would result in a response being sent, the underlying implementation must actively reject request attempts to this backend, by rejecting the connection or returning a 500 status code. Request rejections must respect weight; if an invalid backend is requested to have 80% of requests, then 80% of requests must be rejected instead. 
             *  Support: Core for Kubernetes Service 
             *  Support: Extended for Kubernetes ServiceImport 
             *  Support: Implementation-specific for any other resource 
             *  Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecRulesBackendRefsArgs>[]>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes resource. 
         *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         *  <gateway:experimental:description> 
         *  When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         *  Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         *  If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         *  If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         *  </gateway:experimental:description> 
         *  Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
         */
        export interface TLSRouteSpecRulesBackendRefsArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
             *  If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
             *  Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }
        /**
         * tlsrouteSpecRulesBackendRefsArgsProvideDefaults sets the appropriate defaults for TLSRouteSpecRulesBackendRefsArgs
         */
        export function tlsrouteSpecRulesBackendRefsArgsProvideDefaults(val: TLSRouteSpecRulesBackendRefsArgs): TLSRouteSpecRulesBackendRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
                weight: (val.weight) ?? 1,
            };
        }

        /**
         * Status defines the current state of TLSRoute.
         */
        export interface TLSRouteStatusArgs {
            /**
             * Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
             *  Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
             *  A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
             */
            parents: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteStatusParentsArgs>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an associated Parent.
         */
        export interface TLSRouteStatusParentsArgs {
            /**
             * Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
             *  If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
             *  A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
             *  There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
             *  * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteStatusParentsConditionsArgs>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: pulumi.Input<string>;
            /**
             * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
             */
            parentRef: pulumi.Input<inputs.gateway.v1alpha2.TLSRouteStatusParentsParentRefArgs>;
        }
        /**
         * tlsrouteStatusParentsArgsProvideDefaults sets the appropriate defaults for TLSRouteStatusParentsArgs
         */
        export function tlsrouteStatusParentsArgsProvideDefaults(val: TLSRouteStatusParentsArgs): TLSRouteStatusParentsArgs {
            return {
                ...val,
                parentRef: pulumi.output(val.parentRef).apply(inputs.gateway.v1alpha2.tlsrouteStatusParentsParentRefArgsProvideDefaults),
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface TLSRouteStatusParentsConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
         */
        export interface TLSRouteStatusParentsParentRefArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * tlsrouteStatusParentsParentRefArgsProvideDefaults sets the appropriate defaults for TLSRouteStatusParentsParentRefArgs
         */
        export function tlsrouteStatusParentsParentRefArgsProvideDefaults(val: TLSRouteStatusParentsParentRefArgs): TLSRouteStatusParentsParentRefArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * Spec defines the desired state of UDPRoute.
         */
        export interface UDPRouteSpecArgs {
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
             *  ParentRefs must be _distinct_. This means either that: 
             *  * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
             *  Some examples: 
             *  * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
             *  It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
             *  Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecParentRefsArgs>[]>;
            /**
             * Rules are a list of UDP matchers and actions.
             */
            rules: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecRulesArgs>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface UDPRouteSpecParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * udprouteSpecParentRefsArgsProvideDefaults sets the appropriate defaults for UDPRouteSpecParentRefsArgs
         */
        export function udprouteSpecParentRefsArgsProvideDefaults(val: UDPRouteSpecParentRefsArgs): UDPRouteSpecParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * UDPRouteRule is the configuration for a given rule.
         */
        export interface UDPRouteSpecRulesArgs {
            /**
             * BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Packet drops must respect weight; if an invalid backend is requested to have 80% of the packets, then 80% of packets must be dropped instead. 
             *  Support: Core for Kubernetes Service 
             *  Support: Extended for Kubernetes ServiceImport 
             *  Support: Implementation-specific for any other resource 
             *  Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecRulesBackendRefsArgs>[]>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes resource. 
         *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         *  <gateway:experimental:description> 
         *  When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         *  Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         *  If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         *  If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         *  </gateway:experimental:description> 
         *  Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
         */
        export interface UDPRouteSpecRulesBackendRefsArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
             *  If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
             *  Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }
        /**
         * udprouteSpecRulesBackendRefsArgsProvideDefaults sets the appropriate defaults for UDPRouteSpecRulesBackendRefsArgs
         */
        export function udprouteSpecRulesBackendRefsArgsProvideDefaults(val: UDPRouteSpecRulesBackendRefsArgs): UDPRouteSpecRulesBackendRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
                weight: (val.weight) ?? 1,
            };
        }

        /**
         * Status defines the current state of UDPRoute.
         */
        export interface UDPRouteStatusArgs {
            /**
             * Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
             *  Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
             *  A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
             */
            parents: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteStatusParentsArgs>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an associated Parent.
         */
        export interface UDPRouteStatusParentsArgs {
            /**
             * Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
             *  If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
             *  A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
             *  There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
             *  * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteStatusParentsConditionsArgs>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: pulumi.Input<string>;
            /**
             * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
             */
            parentRef: pulumi.Input<inputs.gateway.v1alpha2.UDPRouteStatusParentsParentRefArgs>;
        }
        /**
         * udprouteStatusParentsArgsProvideDefaults sets the appropriate defaults for UDPRouteStatusParentsArgs
         */
        export function udprouteStatusParentsArgsProvideDefaults(val: UDPRouteStatusParentsArgs): UDPRouteStatusParentsArgs {
            return {
                ...val,
                parentRef: pulumi.output(val.parentRef).apply(inputs.gateway.v1alpha2.udprouteStatusParentsParentRefArgsProvideDefaults),
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface UDPRouteStatusParentsConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
         */
        export interface UDPRouteStatusParentsParentRefArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * udprouteStatusParentsParentRefArgsProvideDefaults sets the appropriate defaults for UDPRouteStatusParentsParentRefArgs
         */
        export function udprouteStatusParentsParentRefArgsProvideDefaults(val: UDPRouteStatusParentsParentRefArgs): UDPRouteStatusParentsParentRefArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }
    }

    export namespace v1beta1 {
        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpecArgs {
            /**
             * ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. 
             *  Example: "example.net/gateway-controller". 
             *  This field is not mutable and cannot be empty. 
             *  Support: Core
             */
            controllerName: pulumi.Input<string>;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description?: pulumi.Input<string>;
            /**
             * ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. 
             *  ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. 
             *  If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true. 
             *  Support: Implementation-specific
             */
            parametersRef?: pulumi.Input<inputs.gateway.v1beta1.GatewayClassSpecParametersRefArgs>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. 
         *  ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. 
         *  If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true. 
         *  Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRefArgs {
            /**
             * Group is the group of the referent.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of GatewayClass. 
         *  Implementations MUST populate status on all GatewayClass resources which specify their controller name.
         */
        export interface GatewayClassStatusArgs {
            /**
             * Conditions is the current status from the controller for this GatewayClass. 
             *  Controllers should prefer to publish conditions using values of GatewayClassConditionType for the type of each Condition.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayClassStatusConditionsArgs>[]>;
            /**
             * SupportedFeatures is the set of features the GatewayClass support. It MUST be sorted in ascending alphabetical order. 
             */
            supportedFeatures?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface GatewayClassStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpecArgs {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. 
             *  The Addresses field represents a request for the address(es) on the "outside of the Gateway", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. 
             *  If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. 
             *  The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. 
             *  Support: Extended 
             *  
             */
            addresses?: pulumi.Input<any[]>;
            /**
             * GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.
             */
            gatewayClassName: pulumi.Input<string>;
            /**
             * Infrastructure defines infrastructure level attributes about this Gateway instance. 
             *  Support: Core 
             *  
             */
            infrastructure?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecInfrastructureArgs>;
            /**
             * Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. 
             *  Each Listener in a set of Listeners (for example, in a single Gateway) MUST be _distinct_, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses "set of Listeners" rather than "Listeners in a single Gateway" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules _also_ apply in that case). 
             *  Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. 
             *  Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: 
             *  HTTP Profile 
             *  1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided 
             *  TLS Profile 
             *  1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough 
             *  "Distinct" Listeners have the following property: 
             *  The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. 
             *  For example, the following Listener scenarios are distinct: 
             *  1. Multiple Listeners with the same Port that all use the "HTTP" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the "HTTPS" or "TLS" Protocol that all have unique Hostname values. 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener with the same Protocol has the same Port value. 
             *  Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. 
             *  When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. 
             *  When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. 
             *  Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, `"foo.example.com"` takes precedence over `"*.example.com"`, and `"*.example.com"` takes precedence over `""`. 
             *  Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. 
             *  The wildcard character will match any number of characters _and dots_ to the left, however, so `"*.example.com"` will match both `"foo.bar.example.com"` _and_ `"bar.example.com"`. 
             *  If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the "Conflicted" condition in the Listener Status to "True". 
             *  Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out *all* the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. 
             *  The implementation MUST set a "ListenersNotValid" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. 
             *  A Gateway's Listeners are considered "compatible" if: 
             *  1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. 
             *  Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. 
             *  For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. 
             *  Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for "foo.example.com" and "*.example.com", a request to "foo.example.com" SHOULD only be routed using routes attached to the "foo.example.com" Listener (and not the "*.example.com" Listener). This concept is known as "Listener Isolation". Implementations that do not support Listener Isolation MUST clearly document this. 
             *  Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. 
             *  Support: Core
             */
            listeners: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersArgs>[]>;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance. 
         *  Support: Core 
         *  
         */
        export interface GatewaySpecInfrastructureArgs {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway. 
             *  For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources. For other implementations, this refers to any relevant (implementation specific) "annotations" concepts. 
             *  An implementation may chose to add additional implementation-specific annotations as they see fit. 
             *  Support: Extended
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway. 
             *  For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources. For other implementations, this refers to any relevant (implementation specific) "labels" concepts. 
             *  An implementation may chose to add additional implementation-specific labels as they see fit. 
             *  Support: Extended
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts network connections.
         */
        export interface GatewaySpecListenersArgs {
            /**
             * AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. 
             *  Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: 
             *  * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of "2020-09-08 01:02:03" is given precedence over a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. 
             *  All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. 
             *  Support: Core
             */
            allowedRoutes?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesArgs>;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. 
             *  Implementations MUST apply Hostname matching appropriately for each of the following protocols: 
             *  * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. 
             *  For HTTPRoute and TLSRoute resources, there is an interaction with the `spec.hostnames` array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. 
             *  Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
             *  Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Name is the name of the Listener. This name MUST be unique within a Gateway. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. 
             *  Support: Core
             */
            port: pulumi.Input<number>;
            /**
             * Protocol specifies the network protocol this listener expects to receive. 
             *  Support: Core
             */
            protocol: pulumi.Input<string>;
            /**
             * TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP". 
             *  The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. 
             *  The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. 
             *  Support: Core
             */
            tls?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsArgs>;
        }
        /**
         * gatewaySpecListenersArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersArgs
         */
        export function gatewaySpecListenersArgsProvideDefaults(val: GatewaySpecListenersArgs): GatewaySpecListenersArgs {
            return {
                ...val,
                allowedRoutes: (val.allowedRoutes ? pulumi.output(val.allowedRoutes).apply(inputs.gateway.v1beta1.gatewaySpecListenersAllowedRoutesArgsProvideDefaults) : undefined),
                tls: (val.tls ? pulumi.output(val.tls).apply(inputs.gateway.v1beta1.gatewaySpecListenersTlsArgsProvideDefaults) : undefined),
            };
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. 
         *  Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: 
         *  * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of "2020-09-08 01:02:03" is given precedence over a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. 
         *  All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. 
         *  Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesArgs {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. 
             *  A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the "ResolvedRefs" condition to False for this Listener with the "InvalidRouteKinds" reason. 
             *  Support: Core
             */
            kinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesKindsArgs>[]>;
            /**
             * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. 
             *  Support: Core
             */
            namespaces?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesArgs>;
        }
        /**
         * gatewaySpecListenersAllowedRoutesArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersAllowedRoutesArgs
         */
        export function gatewaySpecListenersAllowedRoutesArgsProvideDefaults(val: GatewaySpecListenersAllowedRoutesArgs): GatewaySpecListenersAllowedRoutesArgs {
            return {
                ...val,
                namespaces: (val.namespaces ? pulumi.output(val.namespaces).apply(inputs.gateway.v1beta1.gatewaySpecListenersAllowedRoutesNamespacesArgsProvideDefaults) : undefined),
            };
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKindsArgs {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind: pulumi.Input<string>;
        }
        /**
         * gatewaySpecListenersAllowedRoutesKindsArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersAllowedRoutesKindsArgs
         */
        export function gatewaySpecListenersAllowedRoutesKindsArgsProvideDefaults(val: GatewaySpecListenersAllowedRoutesKindsArgs): GatewaySpecListenersAllowedRoutesKindsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
            };
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. 
         *  Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesArgs {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible values are: 
             *  * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. 
             *  Support: Core
             */
            from?: pulumi.Input<string>;
            /**
             * Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From". 
             *  Support: Core
             */
            selector?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs>;
        }
        /**
         * gatewaySpecListenersAllowedRoutesNamespacesArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersAllowedRoutesNamespacesArgs
         */
        export function gatewaySpecListenersAllowedRoutesNamespacesArgsProvideDefaults(val: GatewaySpecListenersAllowedRoutesNamespacesArgs): GatewaySpecListenersAllowedRoutesNamespacesArgs {
            return {
                ...val,
                from: (val.from) ?? "Same",
            };
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From". 
         *  Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP". 
         *  The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. 
         *  The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. 
         *  Support: Core
         */
        export interface GatewaySpecListenersTlsArgs {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. 
             *  A single CertificateRef to a Kubernetes Secret has "Core" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. 
             *  References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the "ResolvedRefs" condition MUST be set to False for this listener with the "RefNotPermitted" reason. 
             *  This field is required to have at least one element when the mode is set to "Terminate" (default) and is optional otherwise. 
             *  CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. 
             *  Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls 
             *  Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsCertificateRefsArgs>[]>;
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: 
             *  - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. 
             *  Support: Core
             */
            mode?: pulumi.Input<string>;
            /**
             * Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. 
             *  A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as `example.com/my-custom-option`. Un-prefixed names are reserved for key names defined by Gateway API. 
             *  Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }
        /**
         * gatewaySpecListenersTlsArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersTlsArgs
         */
        export function gatewaySpecListenersTlsArgsProvideDefaults(val: GatewaySpecListenersTlsArgs): GatewaySpecListenersTlsArgs {
            return {
                ...val,
                mode: (val.mode) ?? "Terminate",
            };
        }

        /**
         * SecretObjectReference identifies an API object including its namespace, defaulting to Secret. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefsArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
        }
        /**
         * gatewaySpecListenersTlsCertificateRefsArgsProvideDefaults sets the appropriate defaults for GatewaySpecListenersTlsCertificateRefsArgs
         */
        export function gatewaySpecListenersTlsCertificateRefsArgsProvideDefaults(val: GatewaySpecListenersTlsCertificateRefsArgs): GatewaySpecListenersTlsCertificateRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Secret",
            };
        }

        /**
         * Status defines the current state of Gateway.
         */
        export interface GatewayStatusArgs {
            /**
             * Addresses lists the network addresses that have been bound to the Gateway. 
             *  This list may differ from the addresses provided in the spec under some conditions: 
             *  * no addresses are specified, all addresses are dynamically assigned * a combination of specified and dynamic addresses are assigned * a specified address was unusable (e.g. already in use) 
             *  
             */
            addresses?: pulumi.Input<any[]>;
            /**
             * Conditions describe the current conditions of the Gateway. 
             *  Implementations should prefer to express Gateway conditions using the `GatewayConditionType` and `GatewayConditionReason` constants so that operators and tools can converge on a common vocabulary to describe Gateway state. 
             *  Known condition types are: 
             *  * "Accepted" * "Programmed" * "Ready"
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusConditionsArgs>[]>;
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusListenersArgs>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface GatewayStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface GatewayStatusListenersArgs {
            /**
             * AttachedRoutes represents the total number of Routes that have been successfully attached to this Listener. 
             *  Successful attachment of a Route to a Listener is based solely on the combination of the AllowedRoutes field on the corresponding Listener and the Route's ParentRefs field. A Route is successfully attached to a Listener when it is selected by the Listener's AllowedRoutes field AND the Route has a valid ParentRef selecting the whole Gateway resource or a specific Listener as a parent resource (more detail on attachment semantics can be found in the documentation on the various Route kinds ParentRefs fields). Listener or Route status does not impact successful attachment, i.e. the AttachedRoutes field count MUST be set for Listeners with condition Accepted: false and MUST count successfully attached Routes that may themselves have Accepted: false conditions. 
             *  Uses for this field include troubleshooting Route attachment and measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes: pulumi.Input<number>;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusListenersConditionsArgs>[]>;
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name: pulumi.Input<string>;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this listener. This MUST represent the kinds an implementation supports for that Listener configuration. 
             *  If kinds are specified in Spec that are not supported, they MUST NOT appear in this list and an implementation MUST set the "ResolvedRefs" condition to "False" with the "InvalidRouteKinds" reason. If both valid and invalid Route kinds are specified, the implementation MUST reference the valid Route kinds that have been specified.
             */
            supportedKinds: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusListenersSupportedKindsArgs>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface GatewayStatusListenersConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewayStatusListenersSupportedKindsArgs {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind: pulumi.Input<string>;
        }
        /**
         * gatewayStatusListenersSupportedKindsArgsProvideDefaults sets the appropriate defaults for GatewayStatusListenersSupportedKindsArgs
         */
        export function gatewayStatusListenersSupportedKindsArgsProvideDefaults(val: GatewayStatusListenersSupportedKindsArgs): GatewayStatusListenersSupportedKindsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
            };
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpecArgs {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. 
             *  Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: 
             *  1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. 
             *  If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: 
             *  * A Listener with `test.example.com` as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `*.example.com`, `test.example.com`, and `foo.test.example.com` would all match. On the other hand, `example.com` and `test.example.net` would not match. 
             *  Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
             *  If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
             *  If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
             *  In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: 
             *  * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. 
             *  If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. 
             *  Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
             *  ParentRefs must be _distinct_. This means either that: 
             *  * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
             *  Some examples: 
             *  * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
             *  It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
             *  Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecParentRefsArgs>[]>;
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesArgs>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * httprouteSpecParentRefsArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecParentRefsArgs
         */
        export function httprouteSpecParentRefsArgsProvideDefaults(val: HTTPRouteSpecParentRefsArgs): HTTPRouteSpecParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
         */
        export interface HTTPRouteSpecRulesArgs {
            /**
             * BackendRefs defines the backend(s) where matching requests should be sent. 
             *  Failure behavior here depends on how many BackendRefs are specified and how many are invalid. 
             *  If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive a 500 status code. 
             *  See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. 
             *  When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. 
             *  For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. 
             *  Support: Core for Kubernetes Service 
             *  Support: Extended for Kubernetes ServiceImport 
             *  Support: Implementation-specific for any other resource 
             *  Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsArgs>[]>;
            /**
             * Filters define the filters that are applied to requests that match this rule. 
             *  The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
             *  Conformance-levels at this level are defined based on the type of filter: 
             *  - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. 
             *  Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. 
             *  All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error. 
             *  Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersArgs>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
             *  For example, take the following matches configuration: 
             *  ``` matches: - path: value: "/foo" headers: - name: "version" value: "v2" - path: value: "/v2/foo" ``` 
             *  For a request to match against this rule, a request must satisfy EITHER of the two conditions: 
             *  - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo` 
             *  See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. 
             *  If no matches are specified, the default is a prefix path match on "/", which has the effect of matching every HTTP request. 
             *  Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: 
             *  * "Exact" path match. * "Prefix" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. 
             *  Note: The precedence of RegularExpression path matches are implementation-specific. 
             *  If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
             *  * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
             *  If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. 
             *  When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesArgs>[]>;
            /**
             * Timeouts defines the timeouts that can be configured for an HTTP request. 
             *  Support: Extended 
             *  
             */
            timeouts?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesTimeoutsArgs>;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request. 
         *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         *  <gateway:experimental:description> 
         *  When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         *  Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         *  If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         *  If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         *  </gateway:experimental:description>
         */
        export interface HTTPRouteSpecRulesBackendRefsArgs {
            /**
             * Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. 
             *  Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersArgs>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
             *  If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
             *  Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesBackendRefsArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsArgs
         */
        export function httprouteSpecRulesBackendRefsArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsArgs): HTTPRouteSpecRulesBackendRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
                weight: (val.weight) ?? 1,
            };
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersArgs {
            /**
             * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
             *  This filter can be used multiple times within the same rule. 
             *  Support: Implementation-specific
             */
            extensionRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs>;
            /**
             * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
             *  Support: Core
             */
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs>;
            /**
             * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
             *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
             *  Support: Extended
             */
            requestMirror?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs>;
            /**
             * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
             *  Support: Core
             */
            requestRedirect?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs>;
            /**
             * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
             *  Support: Extended
             */
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs>;
            /**
             * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
             *  - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations must support core filters. 
             *  - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
             *  - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` should be set to "ExtensionRef" for custom filters. 
             *  Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
             *  If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
            /**
             * URLRewrite defines a schema for a filter that modifies a request during forwarding. 
             *  Support: Extended
             */
            urlRewrite?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs>;
        }
        /**
         * httprouteSpecRulesBackendRefsFiltersArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsFiltersArgs
         */
        export function httprouteSpecRulesBackendRefsFiltersArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsFiltersArgs): HTTPRouteSpecRulesBackendRefsFiltersArgs {
            return {
                ...val,
                requestMirror: (val.requestMirror ? pulumi.output(val.requestMirror).apply(inputs.gateway.v1beta1.httprouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults) : undefined),
                requestRedirect: (val.requestRedirect ? pulumi.output(val.requestRedirect).apply(inputs.gateway.v1beta1.httprouteSpecRulesBackendRefsFiltersRequestRedirectArgsProvideDefaults) : undefined),
            };
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         *  This filter can be used multiple times within the same rule. 
         *  Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs {
            /**
             * BackendRef references a resource where mirrored requests are sent. 
             *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
             *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
             *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
             *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
             *  Support: Extended for Kubernetes Service 
             *  Support: Implementation-specific for any other resource
             */
            backendRef: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs>;
        }
        /**
         * httprouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs
         */
        export function httprouteSpecRulesBackendRefsFiltersRequestMirrorArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs): HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs {
            return {
                ...val,
                backendRef: pulumi.output(val.backendRef).apply(inputs.gateway.v1beta1.httprouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults),
            };
        }

        /**
         * BackendRef references a resource where mirrored requests are sent. 
         *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         *  Support: Extended for Kubernetes Service 
         *  Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs
         */
        export function httprouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs): HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
            };
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs {
            /**
             * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used. 
             *  Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
             *  Support: Extended
             */
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs>;
            /**
             * Port is the port to be used in the value of the `Location` header in the response. 
             *  If no port is specified, the redirect port MUST be derived using the following rules: 
             *  * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. 
             *  Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: 
             *  * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 443. 
             *  Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
             *  Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
             *  Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
             *  Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesBackendRefsFiltersRequestRedirectArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs
         */
        export function httprouteSpecRulesBackendRefsFiltersRequestRedirectArgsProvideDefaults(val: HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs): HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs {
            return {
                ...val,
                statusCode: (val.statusCode) ?? 302,
            };
        }

        /**
         * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
             *  Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
             *  ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
             *  Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be added in a future release of the API. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs {
            /**
             * Hostname is the value to be used to replace the Host header value during forwarding. 
             *  Support: Extended
             */
            hostname?: pulumi.Input<string>;
            /**
             * Path defines a path rewrite. 
             *  Support: Extended
             */
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs>;
        }

        /**
         * Path defines a path rewrite. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
             *  Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
             *  ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
             *  Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be added in a future release of the API. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFiltersArgs {
            /**
             * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
             *  This filter can be used multiple times within the same rule. 
             *  Support: Implementation-specific
             */
            extensionRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersExtensionRefArgs>;
            /**
             * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
             *  Support: Core
             */
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs>;
            /**
             * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
             *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
             *  Support: Extended
             */
            requestMirror?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorArgs>;
            /**
             * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
             *  Support: Core
             */
            requestRedirect?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirectArgs>;
            /**
             * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
             *  Support: Extended
             */
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs>;
            /**
             * Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
             *  - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations must support core filters. 
             *  - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
             *  - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` should be set to "ExtensionRef" for custom filters. 
             *  Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
             *  If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
            /**
             * URLRewrite defines a schema for a filter that modifies a request during forwarding. 
             *  Support: Extended
             */
            urlRewrite?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewriteArgs>;
        }
        /**
         * httprouteSpecRulesFiltersArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersArgs
         */
        export function httprouteSpecRulesFiltersArgsProvideDefaults(val: HTTPRouteSpecRulesFiltersArgs): HTTPRouteSpecRulesFiltersArgs {
            return {
                ...val,
                requestMirror: (val.requestMirror ? pulumi.output(val.requestMirror).apply(inputs.gateway.v1beta1.httprouteSpecRulesFiltersRequestMirrorArgsProvideDefaults) : undefined),
                requestRedirect: (val.requestRedirect ? pulumi.output(val.requestRedirect).apply(inputs.gateway.v1beta1.httprouteSpecRulesFiltersRequestRedirectArgsProvideDefaults) : undefined),
            };
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         *  This filter can be used multiple times within the same rule. 
         *  Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         *  This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorArgs {
            /**
             * BackendRef references a resource where mirrored requests are sent. 
             *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
             *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
             *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
             *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
             *  Support: Extended for Kubernetes Service 
             *  Support: Implementation-specific for any other resource
             */
            backendRef: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs>;
        }
        /**
         * httprouteSpecRulesFiltersRequestMirrorArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersRequestMirrorArgs
         */
        export function httprouteSpecRulesFiltersRequestMirrorArgsProvideDefaults(val: HTTPRouteSpecRulesFiltersRequestMirrorArgs): HTTPRouteSpecRulesFiltersRequestMirrorArgs {
            return {
                ...val,
                backendRef: pulumi.output(val.backendRef).apply(inputs.gateway.v1beta1.httprouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults),
            };
        }

        /**
         * BackendRef references a resource where mirrored requests are sent. 
         *  Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         *  If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         *  If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         *  In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         *  Support: Extended for Kubernetes Service 
         *  Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example "Service". 
             *  Defaults to "Service" when not specified. 
             *  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
             *  Support: Core (Services with a type other than ExternalName) 
             *  Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
             *  Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
             */
            port?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs
         */
        export function httprouteSpecRulesFiltersRequestMirrorBackendRefArgsProvideDefaults(val: HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs): HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs {
            return {
                ...val,
                group: (val.group) ?? "",
                kind: (val.kind) ?? "Service",
            };
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         *  Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectArgs {
            /**
             * Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used. 
             *  Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
             *  Support: Extended
             */
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirectPathArgs>;
            /**
             * Port is the port to be used in the value of the `Location` header in the response. 
             *  If no port is specified, the redirect port MUST be derived using the following rules: 
             *  * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. 
             *  Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: 
             *  * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 443. 
             *  Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
             *  Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
             *  Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
             *  Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }
        /**
         * httprouteSpecRulesFiltersRequestRedirectArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesFiltersRequestRedirectArgs
         */
        export function httprouteSpecRulesFiltersRequestRedirectArgsProvideDefaults(val: HTTPRouteSpecRulesFiltersRequestRedirectArgs): HTTPRouteSpecRulesFiltersRequestRedirectArgs {
            return {
                ...val,
                statusCode: (val.statusCode) ?? 302,
            };
        }

        /**
         * Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPathArgs {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
             *  Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
             *  ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
             *  Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be added in a future release of the API. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs {
            /**
             * Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: add: - name: "my-header" value: "bar,baz" 
             *  Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
             *  Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
             *  Config: remove: ["my-header1", "my-header3"] 
             *  Output: GET /foo HTTP/1.1 my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value) before the action. 
             *  Input: GET /foo HTTP/1.1 my-header: foo 
             *  Config: set: - name: "my-header" value: "bar" 
             *  Output: GET /foo HTTP/1.1 my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
             */
            name: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewriteArgs {
            /**
             * Hostname is the value to be used to replace the Host header value during forwarding. 
             *  Support: Extended
             */
            hostname?: pulumi.Input<string>;
            /**
             * Path defines a path rewrite. 
             *  Support: Extended
             */
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewritePathArgs>;
        }

        /**
         * Path defines a path rewrite. 
         *  Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePathArgs {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
             *  Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
             *  ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
             *  Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be added in a future release of the API. 
             *  Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
             *  Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
             */
            type: pulumi.Input<string>;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied. 
         *  For example, the match below will match a HTTP request only if its path starts with `/foo` AND it contains the `version: v1` header: 
         *  ``` match: 
         *  path: value: "/foo" headers: - name: "version" value "v1" 
         *  ```
         */
        export interface HTTPRouteSpecRulesMatchesArgs {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesHeadersArgs>[]>;
            /**
             * Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. 
             *  Support: Extended
             */
            method?: pulumi.Input<string>;
            /**
             * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
             */
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesPathArgs>;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. 
             *  Support: Extended
             */
            queryParams?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesQueryParamsArgs>[]>;
        }
        /**
         * httprouteSpecRulesMatchesArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesArgs
         */
        export function httprouteSpecRulesMatchesArgsProvideDefaults(val: HTTPRouteSpecRulesMatchesArgs): HTTPRouteSpecRulesMatchesArgs {
            return {
                ...val,
                path: (val.path ? pulumi.output(val.path).apply(inputs.gateway.v1beta1.httprouteSpecRulesMatchesPathArgsProvideDefaults) : undefined),
            };
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeadersArgs {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
             *  If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent. 
             *  When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for "Set-Cookie".
             */
            name: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header. 
             *  Support: Core (Exact) 
             *  Support: Implementation-specific (RegularExpression) 
             *  Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: pulumi.Input<string>;
        }
        /**
         * httprouteSpecRulesMatchesHeadersArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesHeadersArgs
         */
        export function httprouteSpecRulesMatchesHeadersArgsProvideDefaults(val: HTTPRouteSpecRulesMatchesHeadersArgs): HTTPRouteSpecRulesMatchesHeadersArgs {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPathArgs {
            /**
             * Type specifies how to match against the path Value. 
             *  Support: Core (Exact, PathPrefix) 
             *  Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the HTTP path to match against.
             */
            value?: pulumi.Input<string>;
        }
        /**
         * httprouteSpecRulesMatchesPathArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesPathArgs
         */
        export function httprouteSpecRulesMatchesPathArgsProvideDefaults(val: HTTPRouteSpecRulesMatchesPathArgs): HTTPRouteSpecRulesMatchesPathArgs {
            return {
                ...val,
                type: (val.type) ?? "PathPrefix",
                value: (val.value) ?? "/",
            };
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParamsArgs {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). 
             *  If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. 
             *  If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is *recommended* that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. 
             *  Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.
             */
            name: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the query parameter. 
             *  Support: Extended (Exact) 
             *  Support: Implementation-specific (RegularExpression) 
             *  Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value: pulumi.Input<string>;
        }
        /**
         * httprouteSpecRulesMatchesQueryParamsArgsProvideDefaults sets the appropriate defaults for HTTPRouteSpecRulesMatchesQueryParamsArgs
         */
        export function httprouteSpecRulesMatchesQueryParamsArgsProvideDefaults(val: HTTPRouteSpecRulesMatchesQueryParamsArgs): HTTPRouteSpecRulesMatchesQueryParamsArgs {
            return {
                ...val,
                type: (val.type) ?? "Exact",
            };
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request. 
         *  Support: Extended 
         *  
         */
        export interface HTTPRouteSpecRulesTimeoutsArgs {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway to a backend. This covers the time from when the request first starts being sent from the gateway to when the full response has been received from the backend. 
             *  An entire client HTTP transaction with a gateway, covered by the Request timeout, may result in more than one call from the gateway to the destination backend, for example, if automatic retries are supported. 
             *  Because the Request timeout encompasses the BackendRequest timeout, the value of BackendRequest must be <= the value of Request timeout. 
             *  Support: Extended
             */
            backendRequest?: pulumi.Input<string>;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request. If the gateway has not been able to respond before this deadline is met, the gateway MUST return a timeout error. 
             *  For example, setting the `rules.timeouts.request` field to the value `10s` in an `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds to complete. 
             *  This timeout is intended to cover as close to the whole request-response transaction as possible although an implementation MAY choose to start the timeout after the entire request stream has been received instead of immediately after the transaction is initiated by the client. 
             *  When this field is unspecified, request timeout behavior is implementation-specific. 
             *  Support: Extended
             */
            request?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatusArgs {
            /**
             * Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
             *  Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
             *  A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
             */
            parents: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteStatusParentsArgs>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an associated Parent.
         */
        export interface HTTPRouteStatusParentsArgs {
            /**
             * Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
             *  If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
             *  A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
             *  There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
             *  * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteStatusParentsConditionsArgs>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
             *  Example: "example.net/gateway-controller". 
             *  The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
             *  Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
             */
            controllerName: pulumi.Input<string>;
            /**
             * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
             */
            parentRef: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteStatusParentsParentRefArgs>;
        }
        /**
         * httprouteStatusParentsArgsProvideDefaults sets the appropriate defaults for HTTPRouteStatusParentsArgs
         */
        export function httprouteStatusParentsArgsProvideDefaults(val: HTTPRouteStatusParentsArgs): HTTPRouteStatusParentsArgs {
            return {
                ...val,
                parentRef: pulumi.output(val.parentRef).apply(inputs.gateway.v1beta1.httprouteStatusParentsParentRefArgsProvideDefaults),
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface HTTPRouteStatusParentsConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentRefArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *   ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *   When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * httprouteStatusParentsParentRefArgsProvideDefaults sets the appropriate defaults for HTTPRouteStatusParentsParentRefArgs
         */
        export function httprouteStatusParentsParentRefArgsProvideDefaults(val: HTTPRouteStatusParentsParentRefArgs): HTTPRouteStatusParentsParentRefArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * Spec defines the desired state of ReferenceGrant.
         */
        export interface ReferenceGrantSpecArgs {
            /**
             * From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. 
             *  Support: Core
             */
            from: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.ReferenceGrantSpecFromArgs>[]>;
            /**
             * To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. 
             *  Support: Core
             */
            to: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.ReferenceGrantSpecToArgs>[]>;
        }

        /**
         * ReferenceGrantFrom describes trusted namespaces and kinds.
         */
        export interface ReferenceGrantSpecFromArgs {
            /**
             * Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
             *  Support: Core
             */
            group: pulumi.Input<string>;
            /**
             * Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field. 
             *  When used to permit a SecretObjectReference: 
             *  * Gateway 
             *  When used to permit a BackendObjectReference: 
             *  * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
             */
            kind: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. 
             *  Support: Core
             */
            namespace: pulumi.Input<string>;
        }

        /**
         * ReferenceGrantTo describes what Kinds are allowed as targets of the references.
         */
        export interface ReferenceGrantSpecToArgs {
            /**
             * Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
             *  Support: Core
             */
            group: pulumi.Input<string>;
            /**
             * Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field: 
             *  * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
             */
            name?: pulumi.Input<string>;
        }
    }
}

export namespace gatewayoperator {
    export namespace v1alpha1 {
        /**
         * ControlPlaneSpec defines the desired state of ControlPlane
         */
        export interface ControlPlaneSpecArgs {
            /**
             * DataPlanes refers to the named DataPlane objects which this ControlPlane is responsible for. Currently they must be in the same namespace as the Dataplane.
             */
            dataplane?: pulumi.Input<string>;
            /**
             * DeploymentOptions is a shared type used on objects to indicate that their configuration results in a Deployment which is managed by the Operator and includes options for managing Deployments such as the the number of replicas or pod options like container image and resource requirements. version, as well as Env variable overrides.
             */
            deployment?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentArgs>;
            /**
             * GatewayClass indicates the Gateway resources which this ControlPlane should be responsible for configuring routes for (e.g. HTTPRoute, TCPRoute, UDPRoute, TLSRoute, e.t.c.). 
             *  Required for the ControlPlane to have any effect: at least one Gateway must be present for configuration to be pushed to the data-plane and only Gateway resources can be used to identify data-plane entities.
             */
            gatewayClass?: pulumi.Input<string>;
            /**
             * IngressClass enables support for the older Ingress resource and indicates which Ingress resources this ControlPlane should be responsible for. 
             *  Routing configured this way will be applied to the Gateway resources indicated by GatewayClass. 
             *  If omitted, Ingress resources will not be supported by the ControlPlane.
             */
            ingressClass?: pulumi.Input<string>;
        }
        /**
         * controlPlaneSpecArgsProvideDefaults sets the appropriate defaults for ControlPlaneSpecArgs
         */
        export function controlPlaneSpecArgsProvideDefaults(val: ControlPlaneSpecArgs): ControlPlaneSpecArgs {
            return {
                ...val,
                deployment: (val.deployment ? pulumi.output(val.deployment).apply(inputs.gatewayoperator.v1alpha1.controlPlaneSpecDeploymentArgsProvideDefaults) : undefined),
            };
        }

        /**
         * DeploymentOptions is a shared type used on objects to indicate that their configuration results in a Deployment which is managed by the Operator and includes options for managing Deployments such as the the number of replicas or pod options like container image and resource requirements. version, as well as Env variable overrides.
         */
        export interface ControlPlaneSpecDeploymentArgs {
            /**
             * PodTemplateSpec defines PodTemplateSpec for Deployment's pods.
             */
            podTemplateSpec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecArgs>;
            /**
             * Replicas describes the number of desired pods. This is a pointer to distinguish between explicit zero and not specified. This only affects the DataPlane deployments for now, for more details on ControlPlane scaling please see https://github.com/Kong/gateway-operator/issues/736.
             */
            replicas?: pulumi.Input<number>;
        }
        /**
         * controlPlaneSpecDeploymentArgsProvideDefaults sets the appropriate defaults for ControlPlaneSpecDeploymentArgs
         */
        export function controlPlaneSpecDeploymentArgsProvideDefaults(val: ControlPlaneSpecDeploymentArgs): ControlPlaneSpecDeploymentArgs {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * PodTemplateSpec defines PodTemplateSpec for Deployment's pods.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecMetadataArgs>;
            /**
             * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecArgs {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityArgs>;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken?: pulumi.Input<boolean>;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersArgs>[]>;
            /**
             * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
             */
            dnsConfig?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecDnsConfigArgs>;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks?: pulumi.Input<boolean>;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersArgs>[]>;
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecHostAliasesArgs>[]>;
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC?: pulumi.Input<boolean>;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork?: pulumi.Input<boolean>;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID?: pulumi.Input<boolean>;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers?: pulumi.Input<boolean>;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecImagePullSecretsArgs>[]>;
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersArgs>[]>;
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
             *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
             *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
             */
            os?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecOsArgs>;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy?: pulumi.Input<string>;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority?: pulumi.Input<number>;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecReadinessGatesArgs>[]>;
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable.
             */
            resourceClaims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecResourceClaimsArgs>[]>;
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod. 
             *  SchedulingGates can only be set at pod creation time, and be removed only afterwards. 
             *  This is a beta feature enabled by the PodSchedulingReadiness feature gate.
             */
            schedulingGates?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecSchedulingGatesArgs>[]>;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextArgs>;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount?: pulumi.Input<string>;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN?: pulumi.Input<boolean>;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace?: pulumi.Input<boolean>;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecTolerationsArgs>[]>;
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsArgs>[]>;
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersResourcesArgs>;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * controlPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgsProvideDefaults sets the appropriate defaults for ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs
         */
        export function controlPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgsProvideDefaults(val: ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs): ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResizePolicyArgs>[]>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResourcesArgs>;
            /**
             * Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * controlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgsProvideDefaults sets the appropriate defaults for ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs
         */
        export function controlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgsProvideDefaults(val: ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs): ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResourcesArgs>;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * controlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgsProvideDefaults sets the appropriate defaults for ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs
         */
        export function controlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgsProvideDefaults(val: ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs): ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecOsArgs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: pulumi.Input<string>;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecReadinessGatesArgs {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: pulumi.Input<string>;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecResourceClaimsArgs {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: pulumi.Input<string>;
            /**
             * Source describes where to find the ResourceClaim.
             */
            source?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecResourceClaimsSourceArgs>;
        }

        /**
         * Source describes where to find the ResourceClaim.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecResourceClaimsSourceArgs {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName?: pulumi.Input<string>;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod. 
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses. 
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName?: pulumi.Input<string>;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecSchedulingGatesArgs {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. 
             *  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. 
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. 
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. 
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. 
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesArgs {
            /**
             * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesAzureDiskArgs>;
            /**
             * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesAzureFileArgs>;
            /**
             * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCephfsArgs>;
            /**
             * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCinderArgs>;
            /**
             * configMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesConfigMapArgs>;
            /**
             * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCsiArgs>;
            /**
             * downwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIArgs>;
            /**
             * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEmptyDirArgs>;
            /**
             * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralArgs>;
            /**
             * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesFcArgs>;
            /**
             * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlexVolumeArgs>;
            /**
             * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlockerArgs>;
            /**
             * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesGcePersistentDiskArgs>;
            /**
             * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesGitRepoArgs>;
            /**
             * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesGlusterfsArgs>;
            /**
             * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesHostPathArgs>;
            /**
             * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesIscsiArgs>;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesNfsArgs>;
            /**
             * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesPortworxVolumeArgs>;
            /**
             * projected items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedArgs>;
            /**
             * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesQuobyteArgs>;
            /**
             * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesRbdArgs>;
            /**
             * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesScaleIOArgs>;
            /**
             * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesSecretArgs>;
            /**
             * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesStorageosArgs>;
            /**
             * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesAzureDiskArgs {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesAzureFileArgs {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * shareName is the azure share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCephfsArgs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCephfsSecretRefArgs>;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCinderArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCinderSecretRefArgs>;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesConfigMapArgs {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCsiArgs {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEmptyDirArgs {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<number | string>;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesFcArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * lun is Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlexVolumeArgs {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlockerArgs {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesGcePersistentDiskArgs {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesGitRepoArgs {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * repository is the URL
             */
            repository: pulumi.Input<string>;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesGlusterfsArgs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesHostPathArgs {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesIscsiArgs {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is the CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesIscsiSecretRefArgs>;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesNfsArgs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesPersistentVolumeClaimArgs {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesPhotonPersistentDiskArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesPortworxVolumeArgs {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedArgs {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * sources is the list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesArgs {
            /**
             * configMap information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * downwardAPI information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * secret information about the secret data to project
             */
            secret?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * serviceAccountToken is information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * secret information about the secret data to project
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesQuobyteArgs {
            /**
             * group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesRbdArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesRbdSecretRefArgs>;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesScaleIOArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesScaleIOSecretRefArgs>;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesSecretArgs {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesSecretItemsArgs>[]>;
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesStorageosArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesStorageosSecretRefArgs>;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface ControlPlaneSpecDeploymentPodTemplateSpecSpecVolumesVsphereVolumeArgs {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * ControlPlaneStatus defines the observed state of ControlPlane
         */
        export interface ControlPlaneStatusArgs {
            /**
             * Conditions describe the current conditions of the Gateway.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.ControlPlaneStatusConditionsArgs>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface ControlPlaneStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * GatewayConfigurationSpec defines the desired state of GatewayConfiguration
         */
        export interface GatewayConfigurationSpecArgs {
            /**
             * ControlPlaneOptions is the specification for configuration overrides for ControlPlane resources that will be created for the Gateway.
             */
            controlPlaneOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsArgs>;
            /**
             * DataPlaneOptions is the specification for configuration overrides for DataPlane resources that will be created for the Gateway.
             */
            dataPlaneOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsArgs>;
        }
        /**
         * gatewayConfigurationSpecArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecArgs
         */
        export function gatewayConfigurationSpecArgsProvideDefaults(val: GatewayConfigurationSpecArgs): GatewayConfigurationSpecArgs {
            return {
                ...val,
                controlPlaneOptions: (val.controlPlaneOptions ? pulumi.output(val.controlPlaneOptions).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecControlPlaneOptionsArgsProvideDefaults) : undefined),
                dataPlaneOptions: (val.dataPlaneOptions ? pulumi.output(val.dataPlaneOptions).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsArgsProvideDefaults) : undefined),
            };
        }

        /**
         * ControlPlaneOptions is the specification for configuration overrides for ControlPlane resources that will be created for the Gateway.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsArgs {
            /**
             * DataPlanes refers to the named DataPlane objects which this ControlPlane is responsible for. Currently they must be in the same namespace as the Dataplane.
             */
            dataplane?: pulumi.Input<string>;
            /**
             * DeploymentOptions is a shared type used on objects to indicate that their configuration results in a Deployment which is managed by the Operator and includes options for managing Deployments such as the the number of replicas or pod options like container image and resource requirements. version, as well as Env variable overrides.
             */
            deployment?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentArgs>;
        }
        /**
         * gatewayConfigurationSpecControlPlaneOptionsArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecControlPlaneOptionsArgs
         */
        export function gatewayConfigurationSpecControlPlaneOptionsArgsProvideDefaults(val: GatewayConfigurationSpecControlPlaneOptionsArgs): GatewayConfigurationSpecControlPlaneOptionsArgs {
            return {
                ...val,
                deployment: (val.deployment ? pulumi.output(val.deployment).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecControlPlaneOptionsDeploymentArgsProvideDefaults) : undefined),
            };
        }

        /**
         * DeploymentOptions is a shared type used on objects to indicate that their configuration results in a Deployment which is managed by the Operator and includes options for managing Deployments such as the the number of replicas or pod options like container image and resource requirements. version, as well as Env variable overrides.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentArgs {
            /**
             * PodTemplateSpec defines PodTemplateSpec for Deployment's pods.
             */
            podTemplateSpec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecArgs>;
            /**
             * Replicas describes the number of desired pods. This is a pointer to distinguish between explicit zero and not specified. This only affects the DataPlane deployments for now, for more details on ControlPlane scaling please see https://github.com/Kong/gateway-operator/issues/736.
             */
            replicas?: pulumi.Input<number>;
        }
        /**
         * gatewayConfigurationSpecControlPlaneOptionsDeploymentArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecControlPlaneOptionsDeploymentArgs
         */
        export function gatewayConfigurationSpecControlPlaneOptionsDeploymentArgsProvideDefaults(val: GatewayConfigurationSpecControlPlaneOptionsDeploymentArgs): GatewayConfigurationSpecControlPlaneOptionsDeploymentArgs {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
            };
        }

        /**
         * PodTemplateSpec defines PodTemplateSpec for Deployment's pods.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecMetadataArgs>;
            /**
             * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecArgs {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityArgs>;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken?: pulumi.Input<boolean>;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersArgs>[]>;
            /**
             * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
             */
            dnsConfig?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecDnsConfigArgs>;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks?: pulumi.Input<boolean>;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersArgs>[]>;
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecHostAliasesArgs>[]>;
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC?: pulumi.Input<boolean>;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork?: pulumi.Input<boolean>;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID?: pulumi.Input<boolean>;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers?: pulumi.Input<boolean>;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecImagePullSecretsArgs>[]>;
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersArgs>[]>;
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
             *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
             *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
             */
            os?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecOsArgs>;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy?: pulumi.Input<string>;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority?: pulumi.Input<number>;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecReadinessGatesArgs>[]>;
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable.
             */
            resourceClaims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecResourceClaimsArgs>[]>;
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod. 
             *  SchedulingGates can only be set at pod creation time, and be removed only afterwards. 
             *  This is a beta feature enabled by the PodSchedulingReadiness feature gate.
             */
            schedulingGates?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSchedulingGatesArgs>[]>;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextArgs>;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount?: pulumi.Input<string>;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN?: pulumi.Input<boolean>;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace?: pulumi.Input<boolean>;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecTolerationsArgs>[]>;
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsArgs>[]>;
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersResourcesArgs>;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs
         */
        export function gatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgsProvideDefaults(val: GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs): GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResizePolicyArgs>[]>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResourcesArgs>;
            /**
             * Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs
         */
        export function gatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgsProvideDefaults(val: GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs): GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResourcesArgs>;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs
         */
        export function gatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgsProvideDefaults(val: GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs): GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecOsArgs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: pulumi.Input<string>;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecReadinessGatesArgs {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: pulumi.Input<string>;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecResourceClaimsArgs {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: pulumi.Input<string>;
            /**
             * Source describes where to find the ResourceClaim.
             */
            source?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecResourceClaimsSourceArgs>;
        }

        /**
         * Source describes where to find the ResourceClaim.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecResourceClaimsSourceArgs {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName?: pulumi.Input<string>;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod. 
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses. 
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName?: pulumi.Input<string>;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSchedulingGatesArgs {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. 
             *  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. 
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. 
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. 
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. 
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesArgs {
            /**
             * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAzureDiskArgs>;
            /**
             * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAzureFileArgs>;
            /**
             * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCephfsArgs>;
            /**
             * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCinderArgs>;
            /**
             * configMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesConfigMapArgs>;
            /**
             * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCsiArgs>;
            /**
             * downwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIArgs>;
            /**
             * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEmptyDirArgs>;
            /**
             * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralArgs>;
            /**
             * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFcArgs>;
            /**
             * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlexVolumeArgs>;
            /**
             * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlockerArgs>;
            /**
             * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGcePersistentDiskArgs>;
            /**
             * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGitRepoArgs>;
            /**
             * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGlusterfsArgs>;
            /**
             * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesHostPathArgs>;
            /**
             * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesIscsiArgs>;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesNfsArgs>;
            /**
             * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPortworxVolumeArgs>;
            /**
             * projected items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedArgs>;
            /**
             * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesQuobyteArgs>;
            /**
             * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesRbdArgs>;
            /**
             * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesScaleIOArgs>;
            /**
             * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesSecretArgs>;
            /**
             * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesStorageosArgs>;
            /**
             * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAzureDiskArgs {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAzureFileArgs {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * shareName is the azure share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCephfsArgs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCephfsSecretRefArgs>;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCinderArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCinderSecretRefArgs>;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesConfigMapArgs {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCsiArgs {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEmptyDirArgs {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<number | string>;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFcArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * lun is Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlexVolumeArgs {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlockerArgs {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGcePersistentDiskArgs {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGitRepoArgs {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * repository is the URL
             */
            repository: pulumi.Input<string>;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGlusterfsArgs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesHostPathArgs {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesIscsiArgs {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is the CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesIscsiSecretRefArgs>;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesNfsArgs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPersistentVolumeClaimArgs {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPhotonPersistentDiskArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPortworxVolumeArgs {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedArgs {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * sources is the list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesArgs {
            /**
             * configMap information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * downwardAPI information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * secret information about the secret data to project
             */
            secret?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * serviceAccountToken is information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * secret information about the secret data to project
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesQuobyteArgs {
            /**
             * group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesRbdArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesRbdSecretRefArgs>;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesScaleIOArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesScaleIOSecretRefArgs>;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesSecretArgs {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesSecretItemsArgs>[]>;
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesStorageosArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesStorageosSecretRefArgs>;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface GatewayConfigurationSpecControlPlaneOptionsDeploymentPodTemplateSpecSpecVolumesVsphereVolumeArgs {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * DataPlaneOptions is the specification for configuration overrides for DataPlane resources that will be created for the Gateway.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsArgs {
            /**
             * DataPlaneDeploymentOptions specifies options for the Deployments (as in the Kubernetes resource "Deployment") which are created and managed for the DataPlane resource.
             */
            deployment?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentArgs>;
            /**
             * DataPlaneNetworkOptions defines network related options for a DataPlane.
             */
            network?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsNetworkArgs>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsArgs): GatewayConfigurationSpecDataPlaneOptionsArgs {
            return {
                ...val,
                deployment: (val.deployment ? pulumi.output(val.deployment).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsDeploymentArgsProvideDefaults) : undefined),
                network: (val.network ? pulumi.output(val.network).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsNetworkArgsProvideDefaults) : undefined),
            };
        }

        /**
         * DataPlaneDeploymentOptions specifies options for the Deployments (as in the Kubernetes resource "Deployment") which are created and managed for the DataPlane resource.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentArgs {
            /**
             * PodTemplateSpec defines PodTemplateSpec for Deployment's pods. It's being applied on top of the generated Deployments using [StrategicMergePatch](https://pkg.go.dev/k8s.io/apimachinery/pkg/util/strategicpatch#StrategicMergePatch).
             */
            podTemplateSpec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecArgs>;
            /**
             * Replicas describes the number of desired pods. This is a pointer to distinguish between explicit zero and not specified. This only affects the DataPlane deployments for now, for more details on ControlPlane scaling please see https://github.com/Kong/gateway-operator/issues/736.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Rollout describes a custom rollout strategy.
             */
            rollout?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutArgs>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentArgs {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
                rollout: (val.rollout ? pulumi.output(val.rollout).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutArgsProvideDefaults) : undefined),
            };
        }

        /**
         * PodTemplateSpec defines PodTemplateSpec for Deployment's pods. It's being applied on top of the generated Deployments using [StrategicMergePatch](https://pkg.go.dev/k8s.io/apimachinery/pkg/util/strategicpatch#StrategicMergePatch).
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecMetadataArgs>;
            /**
             * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecArgs {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityArgs>;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken?: pulumi.Input<boolean>;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersArgs>[]>;
            /**
             * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
             */
            dnsConfig?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecDnsConfigArgs>;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks?: pulumi.Input<boolean>;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersArgs>[]>;
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecHostAliasesArgs>[]>;
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC?: pulumi.Input<boolean>;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork?: pulumi.Input<boolean>;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID?: pulumi.Input<boolean>;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers?: pulumi.Input<boolean>;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecImagePullSecretsArgs>[]>;
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersArgs>[]>;
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
             *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
             *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
             */
            os?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecOsArgs>;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy?: pulumi.Input<string>;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority?: pulumi.Input<number>;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecReadinessGatesArgs>[]>;
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable.
             */
            resourceClaims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecResourceClaimsArgs>[]>;
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod. 
             *  SchedulingGates can only be set at pod creation time, and be removed only afterwards. 
             *  This is a beta feature enabled by the PodSchedulingReadiness feature gate.
             */
            schedulingGates?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSchedulingGatesArgs>[]>;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextArgs>;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount?: pulumi.Input<string>;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN?: pulumi.Input<boolean>;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace?: pulumi.Input<boolean>;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecTolerationsArgs>[]>;
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsArgs>[]>;
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersResourcesArgs>;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResizePolicyArgs>[]>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResourcesArgs>;
            /**
             * Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResourcesArgs>;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecOsArgs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: pulumi.Input<string>;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecReadinessGatesArgs {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: pulumi.Input<string>;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecResourceClaimsArgs {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: pulumi.Input<string>;
            /**
             * Source describes where to find the ResourceClaim.
             */
            source?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecResourceClaimsSourceArgs>;
        }

        /**
         * Source describes where to find the ResourceClaim.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecResourceClaimsSourceArgs {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName?: pulumi.Input<string>;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod. 
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses. 
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName?: pulumi.Input<string>;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSchedulingGatesArgs {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. 
             *  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. 
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. 
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. 
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. 
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesArgs {
            /**
             * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAzureDiskArgs>;
            /**
             * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAzureFileArgs>;
            /**
             * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCephfsArgs>;
            /**
             * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCinderArgs>;
            /**
             * configMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesConfigMapArgs>;
            /**
             * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCsiArgs>;
            /**
             * downwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIArgs>;
            /**
             * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEmptyDirArgs>;
            /**
             * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralArgs>;
            /**
             * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFcArgs>;
            /**
             * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlexVolumeArgs>;
            /**
             * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlockerArgs>;
            /**
             * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGcePersistentDiskArgs>;
            /**
             * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGitRepoArgs>;
            /**
             * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGlusterfsArgs>;
            /**
             * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesHostPathArgs>;
            /**
             * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesIscsiArgs>;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesNfsArgs>;
            /**
             * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPortworxVolumeArgs>;
            /**
             * projected items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedArgs>;
            /**
             * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesQuobyteArgs>;
            /**
             * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesRbdArgs>;
            /**
             * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesScaleIOArgs>;
            /**
             * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesSecretArgs>;
            /**
             * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesStorageosArgs>;
            /**
             * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAzureDiskArgs {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesAzureFileArgs {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * shareName is the azure share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCephfsArgs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCephfsSecretRefArgs>;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCinderArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCinderSecretRefArgs>;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesConfigMapArgs {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCsiArgs {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEmptyDirArgs {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<number | string>;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFcArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * lun is Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlexVolumeArgs {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesFlockerArgs {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGcePersistentDiskArgs {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGitRepoArgs {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * repository is the URL
             */
            repository: pulumi.Input<string>;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesGlusterfsArgs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesHostPathArgs {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesIscsiArgs {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is the CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesIscsiSecretRefArgs>;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesNfsArgs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPersistentVolumeClaimArgs {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPhotonPersistentDiskArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesPortworxVolumeArgs {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedArgs {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * sources is the list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesArgs {
            /**
             * configMap information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * downwardAPI information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * secret information about the secret data to project
             */
            secret?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * serviceAccountToken is information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * secret information about the secret data to project
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesQuobyteArgs {
            /**
             * group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesRbdArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesRbdSecretRefArgs>;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesScaleIOArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesScaleIOSecretRefArgs>;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesSecretArgs {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesSecretItemsArgs>[]>;
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesStorageosArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesStorageosSecretRefArgs>;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentPodTemplateSpecSpecVolumesVsphereVolumeArgs {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * Rollout describes a custom rollout strategy.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutArgs {
            /**
             * Strategy contains the deployment strategy for rollout.
             */
            strategy: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyArgs>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutArgs {
            return {
                ...val,
                strategy: pulumi.output(val.strategy).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyArgsProvideDefaults),
            };
        }

        /**
         * Strategy contains the deployment strategy for rollout.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyArgs {
            /**
             * BlueGreen holds the options specific for Blue Green Deployments.
             */
            blueGreen?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenArgs>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyArgs {
            return {
                ...val,
                blueGreen: (val.blueGreen ? pulumi.output(val.blueGreen).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenArgsProvideDefaults) : undefined),
            };
        }

        /**
         * BlueGreen holds the options specific for Blue Green Deployments.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenArgs {
            /**
             * Promotion defines how the operator handles promotion of resources.
             */
            promotion: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenPromotionArgs>;
            /**
             * Resources controls what happens to operator managed resources during or after a rollout.
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesArgs>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenArgs {
            return {
                ...val,
                promotion: pulumi.output(val.promotion).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenPromotionArgsProvideDefaults),
                resources: (val.resources ? pulumi.output(val.resources).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Promotion defines how the operator handles promotion of resources.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenPromotionArgs {
            /**
             * Strategy indicates how you want the operator to handle the promotion of the preview (green) resources (Deployments and Services) after all workflows and tests succeed, OR if you even want it to break before performing the promotion to allow manual inspection.
             */
            strategy: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenPromotionArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenPromotionArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenPromotionArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenPromotionArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenPromotionArgs {
            return {
                ...val,
                strategy: (val.strategy) ?? "BreakBeforePromotion",
            };
        }

        /**
         * Resources controls what happens to operator managed resources during or after a rollout.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesArgs {
            /**
             * Plan defines the resource plan for managing resources during and after a rollout.
             */
            plan?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesPlanArgs>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesArgs {
            return {
                ...val,
                plan: (val.plan ? pulumi.output(val.plan).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesPlanArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Plan defines the resource plan for managing resources during and after a rollout.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesPlanArgs {
            /**
             * Deployment describes how the operator manages Deployments during and after a rollout.
             */
            deployment?: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesPlanArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesPlanArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesPlanArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesPlanArgs): GatewayConfigurationSpecDataPlaneOptionsDeploymentRolloutStrategyBlueGreenResourcesPlanArgs {
            return {
                ...val,
                deployment: (val.deployment) ?? "ScaleDownOnPromotionScaleUpOnRollout",
            };
        }

        /**
         * DataPlaneNetworkOptions defines network related options for a DataPlane.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsNetworkArgs {
            /**
             * Services indicates the configuration of Kubernetes Services needed for the topology of various forms of traffic (including ingress, e.t.c.) to and from the DataPlane.
             */
            services?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsNetworkServicesArgs>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsNetworkArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsNetworkArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsNetworkArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsNetworkArgs): GatewayConfigurationSpecDataPlaneOptionsNetworkArgs {
            return {
                ...val,
                services: (val.services ? pulumi.output(val.services).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsNetworkServicesArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Services indicates the configuration of Kubernetes Services needed for the topology of various forms of traffic (including ingress, e.t.c.) to and from the DataPlane.
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsNetworkServicesArgs {
            /**
             * Ingress is the Kubernetes Service that will be used to expose ingress traffic for the DataPlane. Here you can determine whether the DataPlane will be exposed outside the cluster (e.g. using a LoadBalancer type Services) or only internally (e.g. ClusterIP), and inject any additional annotations you need on the service (for instance, if you need to influence a cloud provider LoadBalancer configuration).
             */
            ingress?: pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationSpecDataPlaneOptionsNetworkServicesIngressArgs>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsNetworkServicesArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsNetworkServicesArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsNetworkServicesArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsNetworkServicesArgs): GatewayConfigurationSpecDataPlaneOptionsNetworkServicesArgs {
            return {
                ...val,
                ingress: (val.ingress ? pulumi.output(val.ingress).apply(inputs.gatewayoperator.v1alpha1.gatewayConfigurationSpecDataPlaneOptionsNetworkServicesIngressArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Ingress is the Kubernetes Service that will be used to expose ingress traffic for the DataPlane. Here you can determine whether the DataPlane will be exposed outside the cluster (e.g. using a LoadBalancer type Services) or only internally (e.g. ClusterIP), and inject any additional annotations you need on the service (for instance, if you need to influence a cloud provider LoadBalancer configuration).
         */
        export interface GatewayConfigurationSpecDataPlaneOptionsNetworkServicesIngressArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. 
             *  More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Type determines how the Service is exposed. Defaults to `LoadBalancer`. 
             *  Valid options are `LoadBalancer` and `ClusterIP`. 
             *  `ClusterIP` allocates a cluster-internal IP address for load-balancing to endpoints. 
             *  `LoadBalancer` builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. 
             *  More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }
        /**
         * gatewayConfigurationSpecDataPlaneOptionsNetworkServicesIngressArgsProvideDefaults sets the appropriate defaults for GatewayConfigurationSpecDataPlaneOptionsNetworkServicesIngressArgs
         */
        export function gatewayConfigurationSpecDataPlaneOptionsNetworkServicesIngressArgsProvideDefaults(val: GatewayConfigurationSpecDataPlaneOptionsNetworkServicesIngressArgs): GatewayConfigurationSpecDataPlaneOptionsNetworkServicesIngressArgs {
            return {
                ...val,
                type: (val.type) ?? "LoadBalancer",
            };
        }

        /**
         * GatewayConfigurationStatus defines the observed state of GatewayConfiguration
         */
        export interface GatewayConfigurationStatusArgs {
            /**
             * Conditions describe the current conditions of the GatewayConfigurationStatus.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1alpha1.GatewayConfigurationStatusConditionsArgs>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface GatewayConfigurationStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }
    }

    export namespace v1beta1 {
        /**
         * DataPlaneSpec defines the desired state of DataPlane
         */
        export interface DataPlaneSpecArgs {
            /**
             * DataPlaneDeploymentOptions specifies options for the Deployments (as in the Kubernetes resource "Deployment") which are created and managed for the DataPlane resource.
             */
            deployment?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentArgs>;
            /**
             * DataPlaneNetworkOptions defines network related options for a DataPlane.
             */
            network?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecNetworkArgs>;
        }
        /**
         * dataPlaneSpecArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecArgs
         */
        export function dataPlaneSpecArgsProvideDefaults(val: DataPlaneSpecArgs): DataPlaneSpecArgs {
            return {
                ...val,
                deployment: (val.deployment ? pulumi.output(val.deployment).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecDeploymentArgsProvideDefaults) : undefined),
                network: (val.network ? pulumi.output(val.network).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecNetworkArgsProvideDefaults) : undefined),
            };
        }

        /**
         * DataPlaneDeploymentOptions specifies options for the Deployments (as in the Kubernetes resource "Deployment") which are created and managed for the DataPlane resource.
         */
        export interface DataPlaneSpecDeploymentArgs {
            /**
             * PodTemplateSpec defines PodTemplateSpec for Deployment's pods. It's being applied on top of the generated Deployments using [StrategicMergePatch](https://pkg.go.dev/k8s.io/apimachinery/pkg/util/strategicpatch#StrategicMergePatch).
             */
            podTemplateSpec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecArgs>;
            /**
             * Replicas describes the number of desired pods. This is a pointer to distinguish between explicit zero and not specified. This only affects the DataPlane deployments for now, for more details on ControlPlane scaling please see https://github.com/Kong/gateway-operator/issues/736.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Rollout describes a custom rollout strategy.
             */
            rollout?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentRolloutArgs>;
        }
        /**
         * dataPlaneSpecDeploymentArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentArgs
         */
        export function dataPlaneSpecDeploymentArgsProvideDefaults(val: DataPlaneSpecDeploymentArgs): DataPlaneSpecDeploymentArgs {
            return {
                ...val,
                replicas: (val.replicas) ?? 1,
                rollout: (val.rollout ? pulumi.output(val.rollout).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecDeploymentRolloutArgsProvideDefaults) : undefined),
            };
        }

        /**
         * PodTemplateSpec defines PodTemplateSpec for Deployment's pods. It's being applied on top of the generated Deployments using [StrategicMergePatch](https://pkg.go.dev/k8s.io/apimachinery/pkg/util/strategicpatch#StrategicMergePatch).
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecMetadataArgs>;
            /**
             * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecArgs {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityArgs>;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken?: pulumi.Input<boolean>;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersArgs>[]>;
            /**
             * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
             */
            dnsConfig?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecDnsConfigArgs>;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks?: pulumi.Input<boolean>;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersArgs>[]>;
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecHostAliasesArgs>[]>;
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC?: pulumi.Input<boolean>;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork?: pulumi.Input<boolean>;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID?: pulumi.Input<boolean>;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers?: pulumi.Input<boolean>;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecImagePullSecretsArgs>[]>;
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersArgs>[]>;
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
             *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
             *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
             */
            os?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecOsArgs>;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy?: pulumi.Input<string>;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority?: pulumi.Input<number>;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecReadinessGatesArgs>[]>;
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable.
             */
            resourceClaims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecResourceClaimsArgs>[]>;
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod. 
             *  SchedulingGates can only be set at pod creation time, and be removed only afterwards. 
             *  This is a beta feature enabled by the PodSchedulingReadiness feature gate.
             */
            schedulingGates?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecSchedulingGatesArgs>[]>;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextArgs>;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount?: pulumi.Input<string>;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN?: pulumi.Input<boolean>;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace?: pulumi.Input<boolean>;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecTolerationsArgs>[]>;
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsArgs>[]>;
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersResourcesArgs>;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * dataPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs
         */
        export function dataPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgsProvideDefaults(val: DataPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs): DataPlaneSpecDeploymentPodTemplateSpecSpecContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResizePolicyArgs>[]>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResourcesArgs>;
            /**
             * Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * dataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs
         */
        export function dataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgsProvideDefaults(val: DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs): DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResourcesArgs>;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * dataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs
         */
        export function dataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgsProvideDefaults(val: DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs): DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecOsArgs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: pulumi.Input<string>;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecReadinessGatesArgs {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: pulumi.Input<string>;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecResourceClaimsArgs {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: pulumi.Input<string>;
            /**
             * Source describes where to find the ResourceClaim.
             */
            source?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecResourceClaimsSourceArgs>;
        }

        /**
         * Source describes where to find the ResourceClaim.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecResourceClaimsSourceArgs {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName?: pulumi.Input<string>;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod. 
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses. 
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName?: pulumi.Input<string>;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecSchedulingGatesArgs {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. 
             *  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. 
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. 
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. 
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. 
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesArgs {
            /**
             * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesAzureDiskArgs>;
            /**
             * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesAzureFileArgs>;
            /**
             * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCephfsArgs>;
            /**
             * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCinderArgs>;
            /**
             * configMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesConfigMapArgs>;
            /**
             * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCsiArgs>;
            /**
             * downwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIArgs>;
            /**
             * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEmptyDirArgs>;
            /**
             * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralArgs>;
            /**
             * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesFcArgs>;
            /**
             * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlexVolumeArgs>;
            /**
             * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlockerArgs>;
            /**
             * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesGcePersistentDiskArgs>;
            /**
             * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesGitRepoArgs>;
            /**
             * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesGlusterfsArgs>;
            /**
             * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesHostPathArgs>;
            /**
             * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesIscsiArgs>;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesNfsArgs>;
            /**
             * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesPortworxVolumeArgs>;
            /**
             * projected items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedArgs>;
            /**
             * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesQuobyteArgs>;
            /**
             * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesRbdArgs>;
            /**
             * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesScaleIOArgs>;
            /**
             * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesSecretArgs>;
            /**
             * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesStorageosArgs>;
            /**
             * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesAzureDiskArgs {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesAzureFileArgs {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * shareName is the azure share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCephfsArgs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCephfsSecretRefArgs>;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCinderArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCinderSecretRefArgs>;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesConfigMapArgs {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCsiArgs {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEmptyDirArgs {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<number | string>;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesFcArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * lun is Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlexVolumeArgs {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesFlockerArgs {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesGcePersistentDiskArgs {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesGitRepoArgs {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * repository is the URL
             */
            repository: pulumi.Input<string>;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesGlusterfsArgs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesHostPathArgs {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesIscsiArgs {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is the CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesIscsiSecretRefArgs>;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesNfsArgs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesPersistentVolumeClaimArgs {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesPhotonPersistentDiskArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesPortworxVolumeArgs {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedArgs {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * sources is the list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesArgs {
            /**
             * configMap information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * downwardAPI information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * secret information about the secret data to project
             */
            secret?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * serviceAccountToken is information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * secret information about the secret data to project
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesQuobyteArgs {
            /**
             * group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesRbdArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesRbdSecretRefArgs>;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesScaleIOArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesScaleIOSecretRefArgs>;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesSecretArgs {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesSecretItemsArgs>[]>;
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesStorageosArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesStorageosSecretRefArgs>;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface DataPlaneSpecDeploymentPodTemplateSpecSpecVolumesVsphereVolumeArgs {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * Rollout describes a custom rollout strategy.
         */
        export interface DataPlaneSpecDeploymentRolloutArgs {
            /**
             * Strategy contains the deployment strategy for rollout.
             */
            strategy: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentRolloutStrategyArgs>;
        }
        /**
         * dataPlaneSpecDeploymentRolloutArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentRolloutArgs
         */
        export function dataPlaneSpecDeploymentRolloutArgsProvideDefaults(val: DataPlaneSpecDeploymentRolloutArgs): DataPlaneSpecDeploymentRolloutArgs {
            return {
                ...val,
                strategy: pulumi.output(val.strategy).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecDeploymentRolloutStrategyArgsProvideDefaults),
            };
        }

        /**
         * Strategy contains the deployment strategy for rollout.
         */
        export interface DataPlaneSpecDeploymentRolloutStrategyArgs {
            /**
             * BlueGreen holds the options specific for Blue Green Deployments.
             */
            blueGreen?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentRolloutStrategyBlueGreenArgs>;
        }
        /**
         * dataPlaneSpecDeploymentRolloutStrategyArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentRolloutStrategyArgs
         */
        export function dataPlaneSpecDeploymentRolloutStrategyArgsProvideDefaults(val: DataPlaneSpecDeploymentRolloutStrategyArgs): DataPlaneSpecDeploymentRolloutStrategyArgs {
            return {
                ...val,
                blueGreen: (val.blueGreen ? pulumi.output(val.blueGreen).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecDeploymentRolloutStrategyBlueGreenArgsProvideDefaults) : undefined),
            };
        }

        /**
         * BlueGreen holds the options specific for Blue Green Deployments.
         */
        export interface DataPlaneSpecDeploymentRolloutStrategyBlueGreenArgs {
            /**
             * Promotion defines how the operator handles promotion of resources.
             */
            promotion: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentRolloutStrategyBlueGreenPromotionArgs>;
            /**
             * Resources controls what happens to operator managed resources during or after a rollout.
             */
            resources?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesArgs>;
        }
        /**
         * dataPlaneSpecDeploymentRolloutStrategyBlueGreenArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentRolloutStrategyBlueGreenArgs
         */
        export function dataPlaneSpecDeploymentRolloutStrategyBlueGreenArgsProvideDefaults(val: DataPlaneSpecDeploymentRolloutStrategyBlueGreenArgs): DataPlaneSpecDeploymentRolloutStrategyBlueGreenArgs {
            return {
                ...val,
                promotion: pulumi.output(val.promotion).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecDeploymentRolloutStrategyBlueGreenPromotionArgsProvideDefaults),
                resources: (val.resources ? pulumi.output(val.resources).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Promotion defines how the operator handles promotion of resources.
         */
        export interface DataPlaneSpecDeploymentRolloutStrategyBlueGreenPromotionArgs {
            /**
             * Strategy indicates how you want the operator to handle the promotion of the preview (green) resources (Deployments and Services) after all workflows and tests succeed, OR if you even want it to break before performing the promotion to allow manual inspection.
             */
            strategy: pulumi.Input<string>;
        }
        /**
         * dataPlaneSpecDeploymentRolloutStrategyBlueGreenPromotionArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentRolloutStrategyBlueGreenPromotionArgs
         */
        export function dataPlaneSpecDeploymentRolloutStrategyBlueGreenPromotionArgsProvideDefaults(val: DataPlaneSpecDeploymentRolloutStrategyBlueGreenPromotionArgs): DataPlaneSpecDeploymentRolloutStrategyBlueGreenPromotionArgs {
            return {
                ...val,
                strategy: (val.strategy) ?? "BreakBeforePromotion",
            };
        }

        /**
         * Resources controls what happens to operator managed resources during or after a rollout.
         */
        export interface DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesArgs {
            /**
             * Plan defines the resource plan for managing resources during and after a rollout.
             */
            plan?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesPlanArgs>;
        }
        /**
         * dataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesArgs
         */
        export function dataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesArgsProvideDefaults(val: DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesArgs): DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesArgs {
            return {
                ...val,
                plan: (val.plan ? pulumi.output(val.plan).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesPlanArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Plan defines the resource plan for managing resources during and after a rollout.
         */
        export interface DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesPlanArgs {
            /**
             * Deployment describes how the operator manages Deployments during and after a rollout.
             */
            deployment?: pulumi.Input<string>;
        }
        /**
         * dataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesPlanArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesPlanArgs
         */
        export function dataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesPlanArgsProvideDefaults(val: DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesPlanArgs): DataPlaneSpecDeploymentRolloutStrategyBlueGreenResourcesPlanArgs {
            return {
                ...val,
                deployment: (val.deployment) ?? "ScaleDownOnPromotionScaleUpOnRollout",
            };
        }

        /**
         * DataPlaneNetworkOptions defines network related options for a DataPlane.
         */
        export interface DataPlaneSpecNetworkArgs {
            /**
             * Services indicates the configuration of Kubernetes Services needed for the topology of various forms of traffic (including ingress, e.t.c.) to and from the DataPlane.
             */
            services?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecNetworkServicesArgs>;
        }
        /**
         * dataPlaneSpecNetworkArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecNetworkArgs
         */
        export function dataPlaneSpecNetworkArgsProvideDefaults(val: DataPlaneSpecNetworkArgs): DataPlaneSpecNetworkArgs {
            return {
                ...val,
                services: (val.services ? pulumi.output(val.services).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecNetworkServicesArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Services indicates the configuration of Kubernetes Services needed for the topology of various forms of traffic (including ingress, e.t.c.) to and from the DataPlane.
         */
        export interface DataPlaneSpecNetworkServicesArgs {
            /**
             * Ingress is the Kubernetes Service that will be used to expose ingress traffic for the DataPlane. Here you can determine whether the DataPlane will be exposed outside the cluster (e.g. using a LoadBalancer type Services) or only internally (e.g. ClusterIP), and inject any additional annotations you need on the service (for instance, if you need to influence a cloud provider LoadBalancer configuration).
             */
            ingress?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneSpecNetworkServicesIngressArgs>;
        }
        /**
         * dataPlaneSpecNetworkServicesArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecNetworkServicesArgs
         */
        export function dataPlaneSpecNetworkServicesArgsProvideDefaults(val: DataPlaneSpecNetworkServicesArgs): DataPlaneSpecNetworkServicesArgs {
            return {
                ...val,
                ingress: (val.ingress ? pulumi.output(val.ingress).apply(inputs.gatewayoperator.v1beta1.dataPlaneSpecNetworkServicesIngressArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Ingress is the Kubernetes Service that will be used to expose ingress traffic for the DataPlane. Here you can determine whether the DataPlane will be exposed outside the cluster (e.g. using a LoadBalancer type Services) or only internally (e.g. ClusterIP), and inject any additional annotations you need on the service (for instance, if you need to influence a cloud provider LoadBalancer configuration).
         */
        export interface DataPlaneSpecNetworkServicesIngressArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. 
             *  More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Type determines how the Service is exposed. Defaults to `LoadBalancer`. 
             *  Valid options are `LoadBalancer` and `ClusterIP`. 
             *  `ClusterIP` allocates a cluster-internal IP address for load-balancing to endpoints. 
             *  `LoadBalancer` builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. 
             *  More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: pulumi.Input<string>;
        }
        /**
         * dataPlaneSpecNetworkServicesIngressArgsProvideDefaults sets the appropriate defaults for DataPlaneSpecNetworkServicesIngressArgs
         */
        export function dataPlaneSpecNetworkServicesIngressArgsProvideDefaults(val: DataPlaneSpecNetworkServicesIngressArgs): DataPlaneSpecNetworkServicesIngressArgs {
            return {
                ...val,
                type: (val.type) ?? "LoadBalancer",
            };
        }

        /**
         * DataPlaneStatus defines the observed state of DataPlane
         */
        export interface DataPlaneStatusArgs {
            /**
             * Addresses lists the addresses that have actually been bound to the DataPlane.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusAddressesArgs>[]>;
            /**
             * Conditions describe the status of the DataPlane.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusConditionsArgs>[]>;
            /**
             * ReadyReplicas indicates how many replicas have reported to be ready.
             */
            readyReplicas: pulumi.Input<number>;
            /**
             * Replicas indicates how many replicas have been set for the DataPlane.
             */
            replicas: pulumi.Input<number>;
            /**
             * RolloutStatus contains information about the rollout. It is set only if a rollout strategy was configured in the spec.
             */
            rollout?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusRolloutArgs>;
            /**
             * Selector contains a unique DataPlane identifier used as a deterministic label selector that is used throughout its dependent resources. This is used e.g. as a label selector for DataPlane's Services and Deployments.
             */
            selector?: pulumi.Input<string>;
            /**
             * Service indicates the Service that exposes the DataPlane's configured routes
             */
            service?: pulumi.Input<string>;
        }
        /**
         * dataPlaneStatusArgsProvideDefaults sets the appropriate defaults for DataPlaneStatusArgs
         */
        export function dataPlaneStatusArgsProvideDefaults(val: DataPlaneStatusArgs): DataPlaneStatusArgs {
            return {
                ...val,
                readyReplicas: (val.readyReplicas) ?? 0,
                replicas: (val.replicas) ?? 0,
            };
        }

        /**
         * Address describes an address which can be either an IP address or a hostname.
         */
        export interface DataPlaneStatusAddressesArgs {
            /**
             * Source type of the address.
             */
            sourceType: pulumi.Input<string>;
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the address. The validity of the values will depend on the type and support by the controller. 
             *  Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: pulumi.Input<string>;
        }
        /**
         * dataPlaneStatusAddressesArgsProvideDefaults sets the appropriate defaults for DataPlaneStatusAddressesArgs
         */
        export function dataPlaneStatusAddressesArgsProvideDefaults(val: DataPlaneStatusAddressesArgs): DataPlaneStatusAddressesArgs {
            return {
                ...val,
                type: (val.type) ?? "IPAddress",
            };
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface DataPlaneStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * RolloutStatus contains information about the rollout. It is set only if a rollout strategy was configured in the spec.
         */
        export interface DataPlaneStatusRolloutArgs {
            /**
             * Conditions contains the status conditions about the rollout.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusRolloutConditionsArgs>[]>;
            /**
             * Deployment contains the information about the preview deployment.
             */
            deployment?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusRolloutDeploymentArgs>;
            /**
             * Services contain the information about the services which are available through which user can access the preview deployment.
             */
            services?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusRolloutServicesArgs>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface DataPlaneStatusRolloutConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * Deployment contains the information about the preview deployment.
         */
        export interface DataPlaneStatusRolloutDeploymentArgs {
            /**
             * Selector is a stable label selector value assigned to a DataPlane rollout status which is used throughout the rollout as a deterministic labels selector for Services and Deployments.
             */
            selector?: pulumi.Input<string>;
        }

        /**
         * Services contain the information about the services which are available through which user can access the preview deployment.
         */
        export interface DataPlaneStatusRolloutServicesArgs {
            /**
             * AdminAPI contains the name and the address of the preview service for Admin API. Using this service users can send requests to configure the DataPlane's preview deployment.
             */
            adminAPI?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusRolloutServicesAdminAPIArgs>;
            /**
             * Ingress contains the name and the address of the preview service for ingress. Using this service users can send requests that will hit the preview deployment.
             */
            ingress?: pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusRolloutServicesIngressArgs>;
        }

        /**
         * AdminAPI contains the name and the address of the preview service for Admin API. Using this service users can send requests to configure the DataPlane's preview deployment.
         */
        export interface DataPlaneStatusRolloutServicesAdminAPIArgs {
            /**
             * Addresses contains the addresses of a Service.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusRolloutServicesAdminAPIAddressesArgs>[]>;
            /**
             * Name indicates the name of the service.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Address describes an address which can be either an IP address or a hostname.
         */
        export interface DataPlaneStatusRolloutServicesAdminAPIAddressesArgs {
            /**
             * Source type of the address.
             */
            sourceType: pulumi.Input<string>;
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the address. The validity of the values will depend on the type and support by the controller. 
             *  Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: pulumi.Input<string>;
        }
        /**
         * dataPlaneStatusRolloutServicesAdminAPIAddressesArgsProvideDefaults sets the appropriate defaults for DataPlaneStatusRolloutServicesAdminAPIAddressesArgs
         */
        export function dataPlaneStatusRolloutServicesAdminAPIAddressesArgsProvideDefaults(val: DataPlaneStatusRolloutServicesAdminAPIAddressesArgs): DataPlaneStatusRolloutServicesAdminAPIAddressesArgs {
            return {
                ...val,
                type: (val.type) ?? "IPAddress",
            };
        }

        /**
         * Ingress contains the name and the address of the preview service for ingress. Using this service users can send requests that will hit the preview deployment.
         */
        export interface DataPlaneStatusRolloutServicesIngressArgs {
            /**
             * Addresses contains the addresses of a Service.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gatewayoperator.v1beta1.DataPlaneStatusRolloutServicesIngressAddressesArgs>[]>;
            /**
             * Name indicates the name of the service.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Address describes an address which can be either an IP address or a hostname.
         */
        export interface DataPlaneStatusRolloutServicesIngressAddressesArgs {
            /**
             * Source type of the address.
             */
            sourceType: pulumi.Input<string>;
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the address. The validity of the values will depend on the type and support by the controller. 
             *  Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: pulumi.Input<string>;
        }
        /**
         * dataPlaneStatusRolloutServicesIngressAddressesArgsProvideDefaults sets the appropriate defaults for DataPlaneStatusRolloutServicesIngressAddressesArgs
         */
        export function dataPlaneStatusRolloutServicesIngressAddressesArgsProvideDefaults(val: DataPlaneStatusRolloutServicesIngressAddressesArgs): DataPlaneStatusRolloutServicesIngressAddressesArgs {
            return {
                ...val,
                type: (val.type) ?? "IPAddress",
            };
        }
    }
}

export namespace infrastructure {
    export namespace v1alpha2 {
        /**
         * MetalClusterSpec defines the desired state of MetalCluster.
         */
        export interface MetalClusterSpecArgs {
            apiEndpoints?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha2.MetalClusterSpecApiEndpointsArgs>[]>;
        }

        export interface MetalClusterSpecApiEndpointsArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * MetalClusterStatus defines the observed state of MetalCluster.
         */
        export interface MetalClusterStatusArgs {
            /**
             * APIEndpoints represents the endpoints to communicate with the control plane.
             */
            apiEndpoints?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha2.MetalClusterStatusApiEndpointsArgs>[]>;
            ready: pulumi.Input<boolean>;
        }

        export interface MetalClusterStatusApiEndpointsArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * MetalMachineSpec defines the desired state of MetalMachine.
         */
        export interface MetalMachineSpecArgs {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: pulumi.Input<inputs.infrastructure.v1alpha2.MetalMachineSpecServerRefArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MetalMachineStatus defines the observed state of MetalMachine.
         */
        export interface MetalMachineStatusArgs {
            /**
             * ErrorMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * ErrorReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            errorReason?: pulumi.Input<string>;
            ready: pulumi.Input<boolean>;
        }

        /**
         * MetalMachineTemplateSpec defines the desired state of MetalMachineTemplate.
         */
        export interface MetalMachineTemplateSpecArgs {
            template: pulumi.Input<inputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplateArgs>;
        }

        export interface MetalMachineTemplateSpecTemplateArgs {
            /**
             * Spec is the specification of the desired behavior of the machine.
             */
            spec: pulumi.Input<inputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplateSpecArgs>;
        }

        /**
         * Spec is the specification of the desired behavior of the machine.
         */
        export interface MetalMachineTemplateSpecTemplateSpecArgs {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: pulumi.Input<inputs.infrastructure.v1alpha2.MetalMachineTemplateSpecTemplateSpecServerRefArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

    }

    export namespace v1alpha3 {
        /**
         * MetalClusterSpec defines the desired state of MetalCluster.
         */
        export interface MetalClusterSpecArgs {
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalClusterSpecControlPlaneEndpointArgs>;
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface MetalClusterSpecControlPlaneEndpointArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * MetalClusterStatus defines the observed state of MetalCluster.
         */
        export interface MetalClusterStatusArgs {
            ready: pulumi.Input<boolean>;
        }

        /**
         * MetalMachineSpec defines the desired state of MetalMachine.
         */
        export interface MetalMachineSpecArgs {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineSpecServerClassRefArgs>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineSpecServerRefArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerClassRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineSpecServerRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * MetalMachineStatus defines the observed state of MetalMachine.
         */
        export interface MetalMachineStatusArgs {
            /**
             * Addresses contains the Metal machine associated addresses.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineStatusAddressesArgs>[]>;
            /**
             * Conditions defines current state of the MetalMachine.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineStatusConditionsArgs>[]>;
            /**
             * FailureMessage will be set in the event that there is a terminal problem reconciling the Machine and will contain a more verbose string suitable for logging and human consumption. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason will be set in the event that there is a terminal problem reconciling the Machine and will contain a succinct value suitable for machine interpretation. 
             *  This field should not be set for transitive errors that a controller faces that are expected to be fixed automatically over time (like service outages), but instead indicate that something is fundamentally wrong with the Machine's spec or the configuration of the controller, and that manual intervention is required. Examples of terminal errors would be invalid combinations of settings in the spec, values that are unsupported by the controller, or the responsible controller itself being critically misconfigured. 
             *  Any transient errors that occur during the reconciliation of Machines can be added as events to the Machine object and/or logged in the controller's output.
             */
            failureReason?: pulumi.Input<string>;
            ready?: pulumi.Input<boolean>;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface MetalMachineStatusAddressesArgs {
            /**
             * The machine address.
             */
            address: pulumi.Input<string>;
            /**
             * Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface MetalMachineStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * MetalMachineTemplateSpec defines the desired state of MetalMachineTemplate.
         */
        export interface MetalMachineTemplateSpecArgs {
            template: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateArgs>;
        }

        export interface MetalMachineTemplateSpecTemplateArgs {
            /**
             * Spec is the specification of the desired behavior of the machine.
             */
            spec: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpecArgs>;
        }

        /**
         * Spec is the specification of the desired behavior of the machine.
         */
        export interface MetalMachineTemplateSpecTemplateSpecArgs {
            /**
             * ProviderID is the unique identifier as specified by the cloud provider.
             */
            providerID?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpecServerClassRefArgs>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverRef?: pulumi.Input<inputs.infrastructure.v1alpha3.MetalMachineTemplateSpecTemplateSpecServerRefArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerClassRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface MetalMachineTemplateSpecTemplateSpecServerRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ServerBindingSpec defines the spec of the ServerBinding object.
         */
        export interface ServerBindingSpecArgs {
            /**
             * Addresses describes node addresses for the server.
             */
            addresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Hostname describes node hostname for the server.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            metalMachineRef: pulumi.Input<inputs.infrastructure.v1alpha3.ServerBindingSpecMetalMachineRefArgs>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            serverClassRef?: pulumi.Input<inputs.infrastructure.v1alpha3.ServerBindingSpecServerClassRefArgs>;
            /**
             * SideroLink describes state of the SideroLink tunnel.
             */
            siderolink?: pulumi.Input<inputs.infrastructure.v1alpha3.ServerBindingSpecSiderolinkArgs>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerBindingSpecMetalMachineRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerBindingSpecServerClassRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * SideroLink describes state of the SideroLink tunnel.
         */
        export interface ServerBindingSpecSiderolinkArgs {
            /**
             * NodeAddress is the tunnel address of the node.
             */
            address: pulumi.Input<string>;
            /**
             * NodePublicKey is the Wireguard public key of the node.
             */
            publicKey: pulumi.Input<string>;
        }

        /**
         * ServerBindingState defines the observed state of ServerBinding.
         */
        export interface ServerBindingStatusArgs {
            /**
             * Conditions defines current state of the ServerBinding.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1alpha3.ServerBindingStatusConditionsArgs>[]>;
            /**
             * Ready is true when matching server is found.
             */
            ready?: pulumi.Input<boolean>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerBindingStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }

    export namespace v1beta1 {
        /**
         * ProxmoxClusterSpec defines the desired state of ProxmoxCluster
         */
        export interface ProxmoxClusterSpecArgs {
            /**
             * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
             */
            controlPlaneEndpoint?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxClusterSpecControlPlaneEndpointArgs>;
            /**
             * ServerRef is used for configuring Proxmox client
             */
            serverRef: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxClusterSpecServerRefArgs>;
            /**
             * storage is used for storing cloud init snippet
             */
            storage?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxClusterSpecStorageArgs>;
        }

        /**
         * ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
         */
        export interface ProxmoxClusterSpecControlPlaneEndpointArgs {
            /**
             * The hostname on which the API server is serving.
             */
            host: pulumi.Input<string>;
            /**
             * The port on which the API server is serving.
             */
            port: pulumi.Input<number>;
        }

        /**
         * ServerRef is used for configuring Proxmox client
         */
        export interface ProxmoxClusterSpecServerRefArgs {
            /**
             * endpoint is the address of the Proxmox-VE REST API endpoint.
             */
            endpoint: pulumi.Input<string>;
            /**
             * SecretRef is a reference for secret which contains proxmox login secrets
             */
            secretRef: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxClusterSpecServerRefSecretRefArgs>;
        }

        /**
         * SecretRef is a reference for secret which contains proxmox login secrets
         */
        export interface ProxmoxClusterSpecServerRefSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * storage is used for storing cloud init snippet
         */
        export interface ProxmoxClusterSpecStorageArgs {
            name?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
        }

        /**
         * ProxmoxClusterStatus defines the observed state of ProxmoxCluster
         */
        export interface ProxmoxClusterStatusArgs {
            /**
             * Conditions
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxClusterStatusConditionsArgs>[]>;
            /**
             * FailureDomains
             */
            failureDomains?: pulumi.Input<{[key: string]: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxClusterStatusFailureDomainsArgs>}>;
            /**
             * Ready
             */
            ready: pulumi.Input<boolean>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ProxmoxClusterStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
         */
        export interface ProxmoxClusterStatusFailureDomainsArgs {
            /**
             * Attributes is a free form map of attributes an infrastructure provider might use or require.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ControlPlane determines if this failure domain is suitable for use by control plane machines.
             */
            controlPlane?: pulumi.Input<boolean>;
        }

        /**
         * ProxmoxMachineSpec defines the desired state of ProxmoxMachine
         */
        export interface ProxmoxMachineSpecArgs {
            /**
             * CloudInit defines options related to the bootstrapping systems where CloudInit is used.
             */
            cloudInit?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitArgs>;
            /**
             * FailureDomain is the failure domain unique identifier this Machine should be attached to, as defined in Cluster API.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * Hardware
             */
            hardware?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecHardwareArgs>;
            /**
             * Image is the image to be provisioned
             */
            image: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecImageArgs>;
            /**
             * Network
             */
            network?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecNetworkArgs>;
            /**
             * Node is proxmox node hosting vm instance which used for ProxmoxMachine
             */
            node?: pulumi.Input<string>;
            /**
             * Options for QEMU instance
             */
            options?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecOptionsArgs>;
            /**
             * ProviderID
             */
            providerID?: pulumi.Input<string>;
            /**
             * Storage is name of proxmox storage used by this node. The storage must support "images(VM Disks)" type of content. cappx will use random storage if empty
             */
            storage?: pulumi.Input<string>;
            /**
             * VMID is proxmox qemu's id
             */
            vmID?: pulumi.Input<number>;
        }
        /**
         * proxmoxMachineSpecArgsProvideDefaults sets the appropriate defaults for ProxmoxMachineSpecArgs
         */
        export function proxmoxMachineSpecArgsProvideDefaults(val: ProxmoxMachineSpecArgs): ProxmoxMachineSpecArgs {
            return {
                ...val,
                hardware: (val.hardware ? pulumi.output(val.hardware).apply(inputs.infrastructure.v1beta1.proxmoxMachineSpecHardwareArgsProvideDefaults) : undefined),
            };
        }

        /**
         * CloudInit defines options related to the bootstrapping systems where CloudInit is used.
         */
        export interface ProxmoxMachineSpecCloudInitArgs {
            user?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserArgs>;
        }

        export interface ProxmoxMachineSpecCloudInitUserArgs {
            bootcmd?: pulumi.Input<pulumi.Input<string>[]>;
            ca_certs?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserCaCertsArgs>;
            chpasswd?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserChpasswdArgs>;
            manage_etc_hosts?: pulumi.Input<boolean>;
            no_ssh_fingerprints?: pulumi.Input<boolean>;
            package_update?: pulumi.Input<boolean>;
            package_upgrade?: pulumi.Input<boolean>;
            packages?: pulumi.Input<pulumi.Input<string>[]>;
            password?: pulumi.Input<string>;
            runCmd?: pulumi.Input<pulumi.Input<string>[]>;
            ssh?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserSshArgs>;
            ssh_authorized_keys?: pulumi.Input<pulumi.Input<string>[]>;
            ssh_keys?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserSshKeysArgs>;
            ssh_pwauth?: pulumi.Input<boolean>;
            user?: pulumi.Input<string>;
            users?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserUsersArgs>[]>;
            writeFiles?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecCloudInitUserWriteFilesArgs>[]>;
        }

        export interface ProxmoxMachineSpecCloudInitUserCaCertsArgs {
            remove_defaults?: pulumi.Input<boolean>;
            trusted?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ProxmoxMachineSpecCloudInitUserChpasswdArgs {
            expire?: pulumi.Input<string>;
        }

        export interface ProxmoxMachineSpecCloudInitUserSshArgs {
            emit_keys_to_console?: pulumi.Input<boolean>;
        }

        export interface ProxmoxMachineSpecCloudInitUserSshKeysArgs {
            dsa_private?: pulumi.Input<string>;
            dsa_public?: pulumi.Input<string>;
            ecdsa_private?: pulumi.Input<string>;
            ecdsa_public?: pulumi.Input<string>;
            rsa_private?: pulumi.Input<string>;
            rsa_public?: pulumi.Input<string>;
        }

        export interface ProxmoxMachineSpecCloudInitUserUsersArgs {
            expiredate?: pulumi.Input<string>;
            gecos?: pulumi.Input<string>;
            groups?: pulumi.Input<pulumi.Input<string>[]>;
            homedir?: pulumi.Input<string>;
            inactive?: pulumi.Input<number>;
            lock_passwd?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            no_create_home?: pulumi.Input<boolean>;
            no_log_init?: pulumi.Input<boolean>;
            no_user_group?: pulumi.Input<boolean>;
            passwd?: pulumi.Input<string>;
            primary_group?: pulumi.Input<string>;
            selinux_user?: pulumi.Input<string>;
            shell?: pulumi.Input<string>;
            snapuser?: pulumi.Input<string>;
            ssh_authorized_keys?: pulumi.Input<pulumi.Input<string>[]>;
            ssh_import_id?: pulumi.Input<pulumi.Input<string>[]>;
            ssh_redirect_user?: pulumi.Input<boolean>;
            sudo?: pulumi.Input<pulumi.Input<string>[]>;
            system?: pulumi.Input<boolean>;
        }

        export interface ProxmoxMachineSpecCloudInitUserWriteFilesArgs {
            content?: pulumi.Input<string>;
            defer?: pulumi.Input<boolean>;
            encoding?: pulumi.Input<string>;
            owner?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            permissions?: pulumi.Input<string>;
        }

        /**
         * Hardware
         */
        export interface ProxmoxMachineSpecHardwareArgs {
            /**
             * Select BIOS implementation. Defaults to seabios. seabios or ovmf. Defaults to seabios.
             */
            bios?: pulumi.Input<string>;
            /**
             * number of CPU cores : 1 ~
             */
            cpu?: pulumi.Input<number>;
            /**
             * Limit of CPU usage. If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit. Defaults to 0.
             */
            cpuLimit?: pulumi.Input<number>;
            /**
             * hard disk size
             */
            disk?: pulumi.Input<string>;
            /**
             * amount of RAM for the VM in MiB : 16 ~
             */
            memory?: pulumi.Input<number>;
            /**
             * network devices to do: multiple devices
             */
            networkDevice?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecHardwareNetworkDeviceArgs>;
            /**
             * The number of CPU sockets. Defaults to 1.
             */
            sockets?: pulumi.Input<number>;
        }
        /**
         * proxmoxMachineSpecHardwareArgsProvideDefaults sets the appropriate defaults for ProxmoxMachineSpecHardwareArgs
         */
        export function proxmoxMachineSpecHardwareArgsProvideDefaults(val: ProxmoxMachineSpecHardwareArgs): ProxmoxMachineSpecHardwareArgs {
            return {
                ...val,
                cpu: (val.cpu) ?? 2,
                disk: (val.disk) ?? "50G",
                memory: (val.memory) ?? 4096,
                networkDevice: (val.networkDevice ? pulumi.output(val.networkDevice).apply(inputs.infrastructure.v1beta1.proxmoxMachineSpecHardwareNetworkDeviceArgsProvideDefaults) : undefined),
            };
        }

        /**
         * network devices to do: multiple devices
         */
        export interface ProxmoxMachineSpecHardwareNetworkDeviceArgs {
            bridge?: pulumi.Input<string>;
            firewall?: pulumi.Input<boolean>;
            linkDown?: pulumi.Input<boolean>;
            macAddr?: pulumi.Input<string>;
            model?: pulumi.Input<string>;
            mtu?: pulumi.Input<number>;
            queues?: pulumi.Input<number>;
            /**
             * since float is highly discouraged, use string instead
             */
            rate?: pulumi.Input<string>;
            tag?: pulumi.Input<number>;
            /**
             * trunks: array of vlanid
             */
            trunks?: pulumi.Input<pulumi.Input<number>[]>;
        }
        /**
         * proxmoxMachineSpecHardwareNetworkDeviceArgsProvideDefaults sets the appropriate defaults for ProxmoxMachineSpecHardwareNetworkDeviceArgs
         */
        export function proxmoxMachineSpecHardwareNetworkDeviceArgsProvideDefaults(val: ProxmoxMachineSpecHardwareNetworkDeviceArgs): ProxmoxMachineSpecHardwareNetworkDeviceArgs {
            return {
                ...val,
                bridge: (val.bridge) ?? "vmbr0",
                firewall: (val.firewall) ?? true,
                model: (val.model) ?? "virtio",
            };
        }

        /**
         * Image is the image to be provisioned
         */
        export interface ProxmoxMachineSpecImageArgs {
            /**
             * Checksum Always better to specify checksum otherwise cappx will download same image for every time. If checksum is specified, cappx will try to avoid downloading existing image.
             */
            checksum?: pulumi.Input<string>;
            /**
             * ChecksumType
             */
            checksumType?: pulumi.Input<string>;
            /**
             * URL is a location of an image to deploy. supported formats are iso/qcow2/qed/raw/vdi/vpc/vmdk.
             */
            url: pulumi.Input<string>;
        }

        /**
         * Network
         */
        export interface ProxmoxMachineSpecNetworkArgs {
            /**
             * to do : should accept multiple IPConfig
             */
            ipConfig?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineSpecNetworkIpConfigArgs>;
            /**
             * DNS server
             */
            nameServer?: pulumi.Input<string>;
            /**
             * search domain
             */
            searchDomain?: pulumi.Input<string>;
        }

        /**
         * to do : should accept multiple IPConfig
         */
        export interface ProxmoxMachineSpecNetworkIpConfigArgs {
            /**
             * gateway IPv4
             */
            gateway?: pulumi.Input<string>;
            /**
             * gateway IPv6
             */
            gateway6?: pulumi.Input<string>;
            /**
             * IPv4 with CIDR
             */
            ip?: pulumi.Input<string>;
            /**
             * IPv6 with CIDR
             */
            ip6?: pulumi.Input<string>;
        }

        /**
         * Options for QEMU instance
         */
        export interface ProxmoxMachineSpecOptionsArgs {
            /**
             * Enable/Disable ACPI. Defaults to true.
             */
            acpi?: pulumi.Input<boolean>;
            /**
             * Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
             */
            arch?: pulumi.Input<string>;
            /**
             * Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
             */
            balloon?: pulumi.Input<number>;
            /**
             * Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
             */
            description?: pulumi.Input<string>;
            /**
             * enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
             */
            hugePages?: pulumi.Input<number>;
            /**
             * Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
             */
            keepHugePages?: pulumi.Input<boolean>;
            /**
             * Enable/disable KVM hardware virtualization. Defaults to true.
             */
            kvm?: pulumi.Input<boolean>;
            /**
             * Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
             */
            localTime?: pulumi.Input<boolean>;
            /**
             * Lock/unlock the VM.
             */
            lock?: pulumi.Input<string>;
            /**
             * Enable/disable NUMA.
             */
            numa?: pulumi.Input<boolean>;
            /**
             * Specifies whether a VM will be started during system bootup.
             */
            onBoot?: pulumi.Input<boolean>;
            /**
             * Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
             */
            osType?: pulumi.Input<string>;
            /**
             * Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
             */
            protection?: pulumi.Input<boolean>;
            /**
             * Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
             */
            reboot?: pulumi.Input<boolean>;
            /**
             * Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
             */
            shares?: pulumi.Input<number>;
            /**
             * Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`). Defaults to true.
             */
            tablet?: pulumi.Input<boolean>;
            /**
             * Tags of the VM. This is only meta information.
             */
            tags?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Enable/disable Template. Defaults to false.
             */
            template?: pulumi.Input<boolean>;
            /**
             * Enable/disable time drift fix. Defaults to false.
             */
            timeDriftFix?: pulumi.Input<boolean>;
            /**
             * Number of hotplugged vcpus. Defaults to 0.
             */
            vcpus?: pulumi.Input<number>;
            /**
             * The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
             */
            vmGenerationID?: pulumi.Input<string>;
        }

        /**
         * ProxmoxMachineStatus defines the observed state of ProxmoxMachine
         */
        export interface ProxmoxMachineStatusArgs {
            /**
             * Addresses
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineStatusAddressesArgs>[]>;
            /**
             * Conditions
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineStatusConditionsArgs>[]>;
            /**
             * Configuration
             */
            config?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineStatusConfigArgs>;
            /**
             * FailureMessage
             */
            failureMessage?: pulumi.Input<string>;
            /**
             * FailureReason
             */
            failureReason?: pulumi.Input<string>;
            /**
             * InstanceStatus is the status of the proxmox instance for this machine.
             */
            instanceStatus?: pulumi.Input<string>;
            /**
             * Ready is true when the provider resource is ready.
             */
            ready?: pulumi.Input<boolean>;
        }

        /**
         * MachineAddress contains information for the node's address.
         */
        export interface ProxmoxMachineStatusAddressesArgs {
            /**
             * The machine address.
             */
            address: pulumi.Input<string>;
            /**
             * Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ProxmoxMachineStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Configuration
         */
        export interface ProxmoxMachineStatusConfigArgs {
            /**
             * Enable/disable ACPI.
             */
            acpi?: pulumi.Input<number>;
            /**
             * List of host cores used to execute guest processes, for example: 0,5,8-11
             */
            affinity?: pulumi.Input<string>;
            /**
             * Enable/disable communication with the QEMU Guest Agent and its properties.
             */
            agent?: pulumi.Input<string>;
            /**
             * Virtual processor architecture. Defaults to the host.
             */
            arch?: pulumi.Input<string>;
            /**
             * Arbitrary arguments passed to kvm, for example: args: -no-reboot -no-hpet NOTE: this option is for experts only.
             */
            args?: pulumi.Input<string>;
            /**
             * Configure a audio device, useful in combination with QXL/Spice.
             */
            audio0?: pulumi.Input<string>;
            /**
             * Automatic restart after crash (currently ignored).
             */
            autostart?: pulumi.Input<number>;
            /**
             * Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
             */
            balloon?: pulumi.Input<number>;
            /**
             * Select BIOS implementation.
             */
            bios?: pulumi.Input<string>;
            /**
             * boot order. ";" separated. : 'order=device1;device2;device3'
             */
            boot?: pulumi.Input<string>;
            /**
             * This is an alias for option -ide2
             */
            cdrom?: pulumi.Input<string>;
            /**
             * cloud-init: Specify custom files to replace the automatically generated ones at start.
             */
            cicustom?: pulumi.Input<string>;
            /**
             * cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords.
             */
            cipassword?: pulumi.Input<string>;
            /**
             * Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows.
             */
            citype?: pulumi.Input<string>;
            /**
             * cloud-init: User name to change ssh keys and password for instead of the image's configured default user.
             */
            ciuser?: pulumi.Input<string>;
            /**
             * The number of cores per socket. : 1 ~
             */
            cores?: pulumi.Input<number>;
            /**
             * emulated cpu type
             */
            cpu?: pulumi.Input<string>;
            /**
             * Limit of CPU usage. NOTE: If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit.
             */
            cpulimit?: pulumi.Input<number>;
            /**
             * CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
             */
            cpuunits?: pulumi.Input<number>;
            description?: pulumi.Input<string>;
            efidisk0?: pulumi.Input<number>;
            freeze?: pulumi.Input<number>;
            hookscript?: pulumi.Input<string>;
            hostpci0?: pulumi.Input<string>;
            hostpci1?: pulumi.Input<string>;
            hostpci2?: pulumi.Input<string>;
            hostpci3?: pulumi.Input<string>;
            hotplug?: pulumi.Input<string>;
            hugepages?: pulumi.Input<string>;
            ide0?: pulumi.Input<string>;
            ide1?: pulumi.Input<string>;
            ide2?: pulumi.Input<string>;
            ide3?: pulumi.Input<string>;
            ipconfig0?: pulumi.Input<string>;
            ipconfig1?: pulumi.Input<string>;
            ipconfig10?: pulumi.Input<string>;
            ipconfig11?: pulumi.Input<string>;
            ipconfig12?: pulumi.Input<string>;
            ipconfig13?: pulumi.Input<string>;
            ipconfig14?: pulumi.Input<string>;
            ipconfig15?: pulumi.Input<string>;
            ipconfig16?: pulumi.Input<string>;
            ipconfig17?: pulumi.Input<string>;
            ipconfig18?: pulumi.Input<string>;
            ipconfig19?: pulumi.Input<string>;
            ipconfig2?: pulumi.Input<string>;
            ipconfig20?: pulumi.Input<string>;
            ipconfig21?: pulumi.Input<string>;
            ipconfig22?: pulumi.Input<string>;
            ipconfig23?: pulumi.Input<string>;
            ipconfig24?: pulumi.Input<string>;
            ipconfig25?: pulumi.Input<string>;
            ipconfig26?: pulumi.Input<string>;
            ipconfig27?: pulumi.Input<string>;
            ipconfig28?: pulumi.Input<string>;
            ipconfig29?: pulumi.Input<string>;
            ipconfig3?: pulumi.Input<string>;
            ipconfig30?: pulumi.Input<string>;
            ipconfig31?: pulumi.Input<string>;
            ipconfig4?: pulumi.Input<string>;
            ipconfig5?: pulumi.Input<string>;
            ipconfig6?: pulumi.Input<string>;
            ipconfig7?: pulumi.Input<string>;
            ipconfig8?: pulumi.Input<string>;
            ipconfig9?: pulumi.Input<string>;
            ivshmem?: pulumi.Input<string>;
            keephugepages?: pulumi.Input<number>;
            keyboard?: pulumi.Input<string>;
            /**
             * enable/disable KVM hardware virtualization
             */
            kvm?: pulumi.Input<number>;
            localtime?: pulumi.Input<number>;
            lock?: pulumi.Input<string>;
            /**
             * specifies the QEMU machine type
             */
            machine?: pulumi.Input<string>;
            /**
             * amount of RAM for the VM in MiB : 16 ~
             */
            memory?: pulumi.Input<number>;
            /**
             * A Number represents a JSON number literal.
             */
            migrate_downtime?: pulumi.Input<string>;
            migrate_speed?: pulumi.Input<number>;
            /**
             * name for VM. Only used on the configuration web interface
             */
            name?: pulumi.Input<string>;
            /**
             * cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.
             */
            nameserver?: pulumi.Input<string>;
            net0?: pulumi.Input<string>;
            net1?: pulumi.Input<string>;
            net10?: pulumi.Input<string>;
            net11?: pulumi.Input<string>;
            net12?: pulumi.Input<string>;
            net13?: pulumi.Input<string>;
            net14?: pulumi.Input<string>;
            net15?: pulumi.Input<string>;
            net16?: pulumi.Input<string>;
            net17?: pulumi.Input<string>;
            net18?: pulumi.Input<string>;
            net19?: pulumi.Input<string>;
            net2?: pulumi.Input<string>;
            net20?: pulumi.Input<string>;
            net21?: pulumi.Input<string>;
            net22?: pulumi.Input<string>;
            net23?: pulumi.Input<string>;
            net24?: pulumi.Input<string>;
            net25?: pulumi.Input<string>;
            net26?: pulumi.Input<string>;
            net27?: pulumi.Input<string>;
            net28?: pulumi.Input<string>;
            net29?: pulumi.Input<string>;
            net3?: pulumi.Input<string>;
            net30?: pulumi.Input<string>;
            net31?: pulumi.Input<string>;
            net4?: pulumi.Input<string>;
            net5?: pulumi.Input<string>;
            net6?: pulumi.Input<string>;
            net7?: pulumi.Input<string>;
            net8?: pulumi.Input<string>;
            net9?: pulumi.Input<string>;
            numa?: pulumi.Input<number>;
            numa0?: pulumi.Input<string>;
            numa1?: pulumi.Input<string>;
            numa2?: pulumi.Input<string>;
            numa3?: pulumi.Input<string>;
            numa4?: pulumi.Input<string>;
            numa5?: pulumi.Input<string>;
            numa6?: pulumi.Input<string>;
            numa7?: pulumi.Input<string>;
            /**
             * specifies whether a VM will be started during system bootup
             */
            onboot?: pulumi.Input<number>;
            /**
             * quest OS
             */
            ostype?: pulumi.Input<string>;
            parallel0?: pulumi.Input<string>;
            parallel1?: pulumi.Input<string>;
            parallel2?: pulumi.Input<string>;
            protection?: pulumi.Input<number>;
            /**
             * Allow reboot. if set to '0' the VM exit on reboot
             */
            reboot?: pulumi.Input<number>;
            rng0?: pulumi.Input<string>;
            sata0?: pulumi.Input<string>;
            sata1?: pulumi.Input<string>;
            sata2?: pulumi.Input<string>;
            sata3?: pulumi.Input<string>;
            sata4?: pulumi.Input<string>;
            sata5?: pulumi.Input<string>;
            scsi0?: pulumi.Input<string>;
            scsi1?: pulumi.Input<string>;
            scsi10?: pulumi.Input<string>;
            scsi11?: pulumi.Input<string>;
            scsi12?: pulumi.Input<string>;
            scsi13?: pulumi.Input<string>;
            scsi14?: pulumi.Input<string>;
            scsi15?: pulumi.Input<string>;
            scsi16?: pulumi.Input<string>;
            scsi17?: pulumi.Input<string>;
            scsi18?: pulumi.Input<string>;
            scsi19?: pulumi.Input<string>;
            scsi2?: pulumi.Input<string>;
            scsi20?: pulumi.Input<string>;
            scsi21?: pulumi.Input<string>;
            scsi22?: pulumi.Input<string>;
            scsi23?: pulumi.Input<string>;
            scsi24?: pulumi.Input<string>;
            scsi25?: pulumi.Input<string>;
            scsi26?: pulumi.Input<string>;
            scsi27?: pulumi.Input<string>;
            scsi28?: pulumi.Input<string>;
            scsi29?: pulumi.Input<string>;
            scsi3?: pulumi.Input<string>;
            scsi30?: pulumi.Input<string>;
            scsi4?: pulumi.Input<string>;
            scsi5?: pulumi.Input<string>;
            scsi6?: pulumi.Input<string>;
            scsi7?: pulumi.Input<string>;
            scsi8?: pulumi.Input<string>;
            scsi9?: pulumi.Input<string>;
            /**
             * SCSI controller model
             */
            scsihw?: pulumi.Input<string>;
            /**
             * cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.
             */
            searchdomain?: pulumi.Input<string>;
            serial0?: pulumi.Input<string>;
            serial1?: pulumi.Input<string>;
            serial2?: pulumi.Input<string>;
            serial3?: pulumi.Input<string>;
            shares?: pulumi.Input<number>;
            smbios1?: pulumi.Input<string>;
            smp?: pulumi.Input<number>;
            /**
             * number of sockets
             */
            sockets?: pulumi.Input<number>;
            spice_enhancements?: pulumi.Input<string>;
            /**
             * cloud-init setup public ssh keys (one key per line, OpenSSH format)
             */
            sshkeys?: pulumi.Input<string>;
            startdate?: pulumi.Input<string>;
            startup?: pulumi.Input<number>;
            tablet?: pulumi.Input<number>;
            /**
             * tags of the VM. only for meta information
             */
            tags?: pulumi.Input<string>;
            tdf?: pulumi.Input<number>;
            /**
             * enable/disable template
             */
            template?: pulumi.Input<number>;
            tpmstate?: pulumi.Input<string>;
            unused0?: pulumi.Input<string>;
            unused1?: pulumi.Input<string>;
            unused2?: pulumi.Input<string>;
            unused3?: pulumi.Input<string>;
            unused4?: pulumi.Input<string>;
            unused5?: pulumi.Input<string>;
            unused6?: pulumi.Input<string>;
            unused7?: pulumi.Input<string>;
            vcpus?: pulumi.Input<number>;
            vga?: pulumi.Input<string>;
            virtio0?: pulumi.Input<string>;
            virtio1?: pulumi.Input<string>;
            virtio10?: pulumi.Input<string>;
            virtio11?: pulumi.Input<string>;
            virtio12?: pulumi.Input<string>;
            virtio13?: pulumi.Input<string>;
            virtio14?: pulumi.Input<string>;
            virtio15?: pulumi.Input<string>;
            virtio2?: pulumi.Input<string>;
            virtio3?: pulumi.Input<string>;
            virtio4?: pulumi.Input<string>;
            virtio5?: pulumi.Input<string>;
            virtio6?: pulumi.Input<string>;
            virtio7?: pulumi.Input<string>;
            virtio8?: pulumi.Input<string>;
            virtio9?: pulumi.Input<string>;
            vmgenid?: pulumi.Input<string>;
            vmstatestorage?: pulumi.Input<string>;
            watchdog?: pulumi.Input<string>;
        }

        /**
         * ProxmoxMachineTemplateSpec defines the desired state of ProxmoxMachineTemplate
         */
        export interface ProxmoxMachineTemplateSpecArgs {
            template: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateArgs>;
        }
        /**
         * proxmoxMachineTemplateSpecArgsProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpecArgs
         */
        export function proxmoxMachineTemplateSpecArgsProvideDefaults(val: ProxmoxMachineTemplateSpecArgs): ProxmoxMachineTemplateSpecArgs {
            return {
                ...val,
                template: pulumi.output(val.template).apply(inputs.infrastructure.v1beta1.proxmoxMachineTemplateSpecTemplateArgsProvideDefaults),
            };
        }

        export interface ProxmoxMachineTemplateSpecTemplateArgs {
            /**
             * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta. 
             *  ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience. 
             *  During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package. 
             *  In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable. 
             *  In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
             */
            'metadata.omitempty'?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateMetadataOmitemptyArgs>;
            /**
             * ProxmoxMachineSpec defines the desired state of ProxmoxMachine
             */
            spec: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecArgs>;
        }
        /**
         * proxmoxMachineTemplateSpecTemplateArgsProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpecTemplateArgs
         */
        export function proxmoxMachineTemplateSpecTemplateArgsProvideDefaults(val: ProxmoxMachineTemplateSpecTemplateArgs): ProxmoxMachineTemplateSpecTemplateArgs {
            return {
                ...val,
                spec: pulumi.output(val.spec).apply(inputs.infrastructure.v1beta1.proxmoxMachineTemplateSpecTemplateSpecArgsProvideDefaults),
            };
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta. 
         *  ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience. 
         *  During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package. 
         *  In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable. 
         *  In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
         */
        export interface ProxmoxMachineTemplateSpecTemplateMetadataOmitemptyArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * ProxmoxMachineSpec defines the desired state of ProxmoxMachine
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecArgs {
            /**
             * CloudInit defines options related to the bootstrapping systems where CloudInit is used.
             */
            cloudInit?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitArgs>;
            /**
             * FailureDomain is the failure domain unique identifier this Machine should be attached to, as defined in Cluster API.
             */
            failureDomain?: pulumi.Input<string>;
            /**
             * Hardware
             */
            hardware?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecHardwareArgs>;
            /**
             * Image is the image to be provisioned
             */
            image: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecImageArgs>;
            /**
             * Network
             */
            network?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecNetworkArgs>;
            /**
             * Node is proxmox node hosting vm instance which used for ProxmoxMachine
             */
            node?: pulumi.Input<string>;
            /**
             * Options for QEMU instance
             */
            options?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecOptionsArgs>;
            /**
             * ProviderID
             */
            providerID?: pulumi.Input<string>;
            /**
             * Storage is name of proxmox storage used by this node. The storage must support "images(VM Disks)" type of content. cappx will use random storage if empty
             */
            storage?: pulumi.Input<string>;
            /**
             * VMID is proxmox qemu's id
             */
            vmID?: pulumi.Input<number>;
        }
        /**
         * proxmoxMachineTemplateSpecTemplateSpecArgsProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpecTemplateSpecArgs
         */
        export function proxmoxMachineTemplateSpecTemplateSpecArgsProvideDefaults(val: ProxmoxMachineTemplateSpecTemplateSpecArgs): ProxmoxMachineTemplateSpecTemplateSpecArgs {
            return {
                ...val,
                hardware: (val.hardware ? pulumi.output(val.hardware).apply(inputs.infrastructure.v1beta1.proxmoxMachineTemplateSpecTemplateSpecHardwareArgsProvideDefaults) : undefined),
            };
        }

        /**
         * CloudInit defines options related to the bootstrapping systems where CloudInit is used.
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitArgs {
            user?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserArgs>;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserArgs {
            bootcmd?: pulumi.Input<pulumi.Input<string>[]>;
            ca_certs?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserCaCertsArgs>;
            chpasswd?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserChpasswdArgs>;
            manage_etc_hosts?: pulumi.Input<boolean>;
            no_ssh_fingerprints?: pulumi.Input<boolean>;
            package_update?: pulumi.Input<boolean>;
            package_upgrade?: pulumi.Input<boolean>;
            packages?: pulumi.Input<pulumi.Input<string>[]>;
            password?: pulumi.Input<string>;
            runCmd?: pulumi.Input<pulumi.Input<string>[]>;
            ssh?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshArgs>;
            ssh_authorized_keys?: pulumi.Input<pulumi.Input<string>[]>;
            ssh_keys?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshKeysArgs>;
            ssh_pwauth?: pulumi.Input<boolean>;
            user?: pulumi.Input<string>;
            users?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserUsersArgs>[]>;
            writeFiles?: pulumi.Input<pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserWriteFilesArgs>[]>;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserCaCertsArgs {
            remove_defaults?: pulumi.Input<boolean>;
            trusted?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserChpasswdArgs {
            expire?: pulumi.Input<string>;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshArgs {
            emit_keys_to_console?: pulumi.Input<boolean>;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshKeysArgs {
            dsa_private?: pulumi.Input<string>;
            dsa_public?: pulumi.Input<string>;
            ecdsa_private?: pulumi.Input<string>;
            ecdsa_public?: pulumi.Input<string>;
            rsa_private?: pulumi.Input<string>;
            rsa_public?: pulumi.Input<string>;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserUsersArgs {
            expiredate?: pulumi.Input<string>;
            gecos?: pulumi.Input<string>;
            groups?: pulumi.Input<pulumi.Input<string>[]>;
            homedir?: pulumi.Input<string>;
            inactive?: pulumi.Input<number>;
            lock_passwd?: pulumi.Input<boolean>;
            name: pulumi.Input<string>;
            no_create_home?: pulumi.Input<boolean>;
            no_log_init?: pulumi.Input<boolean>;
            no_user_group?: pulumi.Input<boolean>;
            passwd?: pulumi.Input<string>;
            primary_group?: pulumi.Input<string>;
            selinux_user?: pulumi.Input<string>;
            shell?: pulumi.Input<string>;
            snapuser?: pulumi.Input<string>;
            ssh_authorized_keys?: pulumi.Input<pulumi.Input<string>[]>;
            ssh_import_id?: pulumi.Input<pulumi.Input<string>[]>;
            ssh_redirect_user?: pulumi.Input<boolean>;
            sudo?: pulumi.Input<pulumi.Input<string>[]>;
            system?: pulumi.Input<boolean>;
        }

        export interface ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserWriteFilesArgs {
            content?: pulumi.Input<string>;
            defer?: pulumi.Input<boolean>;
            encoding?: pulumi.Input<string>;
            owner?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            permissions?: pulumi.Input<string>;
        }

        /**
         * Hardware
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecHardwareArgs {
            /**
             * Select BIOS implementation. Defaults to seabios. seabios or ovmf. Defaults to seabios.
             */
            bios?: pulumi.Input<string>;
            /**
             * number of CPU cores : 1 ~
             */
            cpu?: pulumi.Input<number>;
            /**
             * Limit of CPU usage. If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit. Defaults to 0.
             */
            cpuLimit?: pulumi.Input<number>;
            /**
             * hard disk size
             */
            disk?: pulumi.Input<string>;
            /**
             * amount of RAM for the VM in MiB : 16 ~
             */
            memory?: pulumi.Input<number>;
            /**
             * network devices to do: multiple devices
             */
            networkDevice?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgs>;
            /**
             * The number of CPU sockets. Defaults to 1.
             */
            sockets?: pulumi.Input<number>;
        }
        /**
         * proxmoxMachineTemplateSpecTemplateSpecHardwareArgsProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpecTemplateSpecHardwareArgs
         */
        export function proxmoxMachineTemplateSpecTemplateSpecHardwareArgsProvideDefaults(val: ProxmoxMachineTemplateSpecTemplateSpecHardwareArgs): ProxmoxMachineTemplateSpecTemplateSpecHardwareArgs {
            return {
                ...val,
                cpu: (val.cpu) ?? 2,
                disk: (val.disk) ?? "50G",
                memory: (val.memory) ?? 4096,
                networkDevice: (val.networkDevice ? pulumi.output(val.networkDevice).apply(inputs.infrastructure.v1beta1.proxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgsProvideDefaults) : undefined),
            };
        }

        /**
         * network devices to do: multiple devices
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgs {
            bridge?: pulumi.Input<string>;
            firewall?: pulumi.Input<boolean>;
            linkDown?: pulumi.Input<boolean>;
            macAddr?: pulumi.Input<string>;
            model?: pulumi.Input<string>;
            mtu?: pulumi.Input<number>;
            queues?: pulumi.Input<number>;
            /**
             * since float is highly discouraged, use string instead
             */
            rate?: pulumi.Input<string>;
            tag?: pulumi.Input<number>;
            /**
             * trunks: array of vlanid
             */
            trunks?: pulumi.Input<pulumi.Input<number>[]>;
        }
        /**
         * proxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgsProvideDefaults sets the appropriate defaults for ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgs
         */
        export function proxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgsProvideDefaults(val: ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgs): ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgs {
            return {
                ...val,
                bridge: (val.bridge) ?? "vmbr0",
                firewall: (val.firewall) ?? true,
                model: (val.model) ?? "virtio",
            };
        }

        /**
         * Image is the image to be provisioned
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecImageArgs {
            /**
             * Checksum Always better to specify checksum otherwise cappx will download same image for every time. If checksum is specified, cappx will try to avoid downloading existing image.
             */
            checksum?: pulumi.Input<string>;
            /**
             * ChecksumType
             */
            checksumType?: pulumi.Input<string>;
            /**
             * URL is a location of an image to deploy. supported formats are iso/qcow2/qed/raw/vdi/vpc/vmdk.
             */
            url: pulumi.Input<string>;
        }

        /**
         * Network
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecNetworkArgs {
            /**
             * to do : should accept multiple IPConfig
             */
            ipConfig?: pulumi.Input<inputs.infrastructure.v1beta1.ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfigArgs>;
            /**
             * DNS server
             */
            nameServer?: pulumi.Input<string>;
            /**
             * search domain
             */
            searchDomain?: pulumi.Input<string>;
        }

        /**
         * to do : should accept multiple IPConfig
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfigArgs {
            /**
             * gateway IPv4
             */
            gateway?: pulumi.Input<string>;
            /**
             * gateway IPv6
             */
            gateway6?: pulumi.Input<string>;
            /**
             * IPv4 with CIDR
             */
            ip?: pulumi.Input<string>;
            /**
             * IPv6 with CIDR
             */
            ip6?: pulumi.Input<string>;
        }

        /**
         * Options for QEMU instance
         */
        export interface ProxmoxMachineTemplateSpecTemplateSpecOptionsArgs {
            /**
             * Enable/Disable ACPI. Defaults to true.
             */
            acpi?: pulumi.Input<boolean>;
            /**
             * Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
             */
            arch?: pulumi.Input<string>;
            /**
             * Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
             */
            balloon?: pulumi.Input<number>;
            /**
             * Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
             */
            description?: pulumi.Input<string>;
            /**
             * enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
             */
            hugePages?: pulumi.Input<number>;
            /**
             * Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
             */
            keepHugePages?: pulumi.Input<boolean>;
            /**
             * Enable/disable KVM hardware virtualization. Defaults to true.
             */
            kvm?: pulumi.Input<boolean>;
            /**
             * Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
             */
            localTime?: pulumi.Input<boolean>;
            /**
             * Lock/unlock the VM.
             */
            lock?: pulumi.Input<string>;
            /**
             * Enable/disable NUMA.
             */
            numa?: pulumi.Input<boolean>;
            /**
             * Specifies whether a VM will be started during system bootup.
             */
            onBoot?: pulumi.Input<boolean>;
            /**
             * Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
             */
            osType?: pulumi.Input<string>;
            /**
             * Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
             */
            protection?: pulumi.Input<boolean>;
            /**
             * Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
             */
            reboot?: pulumi.Input<boolean>;
            /**
             * Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
             */
            shares?: pulumi.Input<number>;
            /**
             * Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`). Defaults to true.
             */
            tablet?: pulumi.Input<boolean>;
            /**
             * Tags of the VM. This is only meta information.
             */
            tags?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Enable/disable Template. Defaults to false.
             */
            template?: pulumi.Input<boolean>;
            /**
             * Enable/disable time drift fix. Defaults to false.
             */
            timeDriftFix?: pulumi.Input<boolean>;
            /**
             * Number of hotplugged vcpus. Defaults to 0.
             */
            vcpus?: pulumi.Input<number>;
            /**
             * The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
             */
            vmGenerationID?: pulumi.Input<string>;
        }

    }
}

export namespace ipam {
    export namespace v1alpha1 {
        /**
         * IPAddressClaimSpec is the desired state of an IPAddressClaim.
         */
        export interface IPAddressClaimSpecArgs {
            /**
             * PoolRef is a reference to the pool from which an IP address should be created.
             */
            poolRef: pulumi.Input<inputs.ipam.v1alpha1.IPAddressClaimSpecPoolRefArgs>;
        }

        /**
         * PoolRef is a reference to the pool from which an IP address should be created.
         */
        export interface IPAddressClaimSpecPoolRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * IPAddressClaimStatus is the observed status of a IPAddressClaim.
         */
        export interface IPAddressClaimStatusArgs {
            /**
             * AddressRef is a reference to the address that was created for this claim.
             */
            addressRef?: pulumi.Input<inputs.ipam.v1alpha1.IPAddressClaimStatusAddressRefArgs>;
            /**
             * Conditions summarises the current state of the IPAddressClaim
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.ipam.v1alpha1.IPAddressClaimStatusConditionsArgs>[]>;
        }

        /**
         * AddressRef is a reference to the address that was created for this claim.
         */
        export interface IPAddressClaimStatusAddressRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface IPAddressClaimStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * IPAddressSpec is the desired state of an IPAddress.
         */
        export interface IPAddressSpecArgs {
            /**
             * Address is the IP address.
             */
            address: pulumi.Input<string>;
            /**
             * ClaimRef is a reference to the claim this IPAddress was created for.
             */
            claimRef: pulumi.Input<inputs.ipam.v1alpha1.IPAddressSpecClaimRefArgs>;
            /**
             * Gateway is the network gateway of the network the address is from.
             */
            gateway?: pulumi.Input<string>;
            /**
             * PoolRef is a reference to the pool that this IPAddress was created from.
             */
            poolRef: pulumi.Input<inputs.ipam.v1alpha1.IPAddressSpecPoolRefArgs>;
            /**
             * Prefix is the prefix of the address.
             */
            prefix: pulumi.Input<number>;
        }

        /**
         * ClaimRef is a reference to the claim this IPAddress was created for.
         */
        export interface IPAddressSpecClaimRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * PoolRef is a reference to the pool that this IPAddress was created from.
         */
        export interface IPAddressSpecPoolRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }
    }
}

export namespace metal {
    export namespace v1alpha1 {
        /**
         * EnvironmentSpec defines the desired state of Environment.
         */
        export interface EnvironmentSpecArgs {
            initrd?: pulumi.Input<inputs.metal.v1alpha1.EnvironmentSpecInitrdArgs>;
            kernel?: pulumi.Input<inputs.metal.v1alpha1.EnvironmentSpecKernelArgs>;
        }

        export interface EnvironmentSpecInitrdArgs {
            sha512?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        export interface EnvironmentSpecKernelArgs {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            sha512?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * EnvironmentStatus defines the observed state of Environment.
         */
        export interface EnvironmentStatusArgs {
            conditions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.EnvironmentStatusConditionsArgs>[]>;
        }

        export interface EnvironmentStatusConditionsArgs {
            sha512?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * ServerClassSpec defines the desired state of ServerClass.
         */
        export interface ServerClassSpecArgs {
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: pulumi.Input<string>;
            /**
             * Set of config patches to apply to the machine configuration to the servers provisioned via this server class.
             */
            configPatches?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecConfigPatchesArgs>[]>;
            /**
             * Reference to the environment which should be used to provision the servers via this server class.
             */
            environmentRef?: pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecEnvironmentRefArgs>;
            /**
             * Qualifiers to match on the server spec. 
             *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
             */
            qualifiers?: pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecQualifiersArgs>;
            /**
             * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecSelectorArgs>;
        }

        export interface ServerClassSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Reference to the environment which should be used to provision the servers via this server class.
         */
        export interface ServerClassSpecEnvironmentRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Qualifiers to match on the server spec. 
         *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
         */
        export interface ServerClassSpecQualifiersArgs {
            cpu?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecQualifiersCpuArgs>[]>;
            labelSelectors?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
            systemInformation?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecQualifiersSystemInformationArgs>[]>;
        }

        export interface ServerClassSpecQualifiersCpuArgs {
            manufacturer?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersSystemInformationArgs {
            family?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            skuNumber?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ServerClassSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerClassSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ServerClassSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerClassStatus defines the observed state of ServerClass.
         */
        export interface ServerClassStatusArgs {
            serversAvailable: pulumi.Input<pulumi.Input<string>[]>;
            serversInUse: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerSpec defines the desired state of Server.
         */
        export interface ServerSpecArgs {
            accepted: pulumi.Input<boolean>;
            /**
             * BMC defines data about how to talk to the node via ipmitool.
             */
            bmc?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcArgs>;
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: pulumi.Input<string>;
            configPatches?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerSpecConfigPatchesArgs>[]>;
            cordoned?: pulumi.Input<boolean>;
            cpu?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecCpuArgs>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            environmentRef?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecEnvironmentRefArgs>;
            hostname?: pulumi.Input<string>;
            /**
             * ManagementAPI defines data about how to talk to the node via simple HTTP API.
             */
            managementApi?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecManagementApiArgs>;
            pxeBootAlways?: pulumi.Input<boolean>;
            /**
             * PXEMode specifies the method to trigger PXE boot via IPMI. 
             *  If not set, controller default is used. Valid values: uefi, bios.
             */
            pxeMode?: pulumi.Input<string>;
            system?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecSystemArgs>;
        }

        /**
         * BMC defines data about how to talk to the node via ipmitool.
         */
        export interface ServerSpecBmcArgs {
            /**
             * BMC endpoint.
             */
            endpoint: pulumi.Input<string>;
            /**
             * BMC Interface Type. Defaults to lanplus.
             */
            interface?: pulumi.Input<string>;
            /**
             * BMC password value.
             */
            pass?: pulumi.Input<string>;
            /**
             * Source for the password value. Cannot be used if Pass is not empty.
             */
            passFrom?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcPassFromArgs>;
            /**
             * BMC port. Defaults to 623.
             */
            port?: pulumi.Input<number>;
            /**
             * BMC user value.
             */
            user?: pulumi.Input<string>;
            /**
             * Source for the user value. Cannot be used if User is not empty.
             */
            userFrom?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcUserFromArgs>;
        }

        /**
         * Source for the password value. Cannot be used if Pass is not empty.
         */
        export interface ServerSpecBmcPassFromArgs {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcPassFromSecretKeyRefArgs>;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcPassFromSecretKeyRefArgs {
            /**
             * Key to select
             */
            key: pulumi.Input<string>;
            name: pulumi.Input<string>;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: pulumi.Input<string>;
        }

        /**
         * Source for the user value. Cannot be used if User is not empty.
         */
        export interface ServerSpecBmcUserFromArgs {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: pulumi.Input<inputs.metal.v1alpha1.ServerSpecBmcUserFromSecretKeyRefArgs>;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcUserFromSecretKeyRefArgs {
            /**
             * Key to select
             */
            key: pulumi.Input<string>;
            name: pulumi.Input<string>;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: pulumi.Input<string>;
        }

        export interface ServerSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ServerSpecCpuArgs {
            manufacturer?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerSpecEnvironmentRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ManagementAPI defines data about how to talk to the node via simple HTTP API.
         */
        export interface ServerSpecManagementApiArgs {
            endpoint: pulumi.Input<string>;
        }

        export interface ServerSpecSystemArgs {
            family?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            skuNumber?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * ServerStatus defines the observed state of Server.
         */
        export interface ServerStatusArgs {
            /**
             * Addresses lists discovered node IPs.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerStatusAddressesArgs>[]>;
            /**
             * Conditions defines current service state of the Server.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha1.ServerStatusConditionsArgs>[]>;
            /**
             * InUse is true when server is assigned to some MetalMachine.
             */
            inUse?: pulumi.Input<boolean>;
            /**
             * IsClean is true when server disks are wiped.
             */
            isClean?: pulumi.Input<boolean>;
            /**
             * Power is the current power state of the server: "on", "off" or "unknown".
             */
            power?: pulumi.Input<string>;
            /**
             * Ready is true when server is accepted and in use.
             */
            ready?: pulumi.Input<boolean>;
        }

        /**
         * NodeAddress contains information for the node's address.
         */
        export interface ServerStatusAddressesArgs {
            /**
             * The node address.
             */
            address: pulumi.Input<string>;
            /**
             * Node address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }

    export namespace v1alpha2 {
        /**
         * EnvironmentSpec defines the desired state of Environment.
         */
        export interface EnvironmentSpecArgs {
            initrd?: pulumi.Input<inputs.metal.v1alpha2.EnvironmentSpecInitrdArgs>;
            kernel?: pulumi.Input<inputs.metal.v1alpha2.EnvironmentSpecKernelArgs>;
        }

        export interface EnvironmentSpecInitrdArgs {
            sha512?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        export interface EnvironmentSpecKernelArgs {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            sha512?: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * EnvironmentStatus defines the observed state of Environment.
         */
        export interface EnvironmentStatusArgs {
            conditions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.EnvironmentStatusConditionsArgs>[]>;
        }

        export interface EnvironmentStatusConditionsArgs {
            sha512?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            type: pulumi.Input<string>;
            url?: pulumi.Input<string>;
        }

        /**
         * ServerClassSpec defines the desired state of ServerClass.
         */
        export interface ServerClassSpecArgs {
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: pulumi.Input<string>;
            /**
             * Set of config patches to apply to the machine configuration to the servers provisioned via this server class.
             */
            configPatches?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecConfigPatchesArgs>[]>;
            /**
             * Reference to the environment which should be used to provision the servers via this server class.
             */
            environmentRef?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecEnvironmentRefArgs>;
            /**
             * Qualifiers to match on the server spec. 
             *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
             */
            qualifiers?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersArgs>;
            /**
             * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
             */
            selector?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecSelectorArgs>;
        }

        export interface ServerClassSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Reference to the environment which should be used to provision the servers via this server class.
         */
        export interface ServerClassSpecEnvironmentRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * Qualifiers to match on the server spec. 
         *  If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
         */
        export interface ServerClassSpecQualifiersArgs {
            hardware?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareArgs>[]>;
            labelSelectors?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
        }

        export interface ServerClassSpecQualifiersHardwareArgs {
            compute?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareComputeArgs>;
            memory?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareMemoryArgs>;
            network?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareNetworkArgs>;
            storage?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareStorageArgs>;
            system?: pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareSystemArgs>;
        }

        export interface ServerClassSpecQualifiersHardwareComputeArgs {
            processorCount?: pulumi.Input<number>;
            processors?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareComputeProcessorsArgs>[]>;
            totalCoreCount?: pulumi.Input<number>;
            totalThreadCount?: pulumi.Input<number>;
        }

        export interface ServerClassSpecQualifiersHardwareComputeProcessorsArgs {
            coreCount?: pulumi.Input<number>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Speed is in megahertz (Mhz)
             */
            speed?: pulumi.Input<number>;
            threadCount?: pulumi.Input<number>;
        }

        export interface ServerClassSpecQualifiersHardwareMemoryArgs {
            moduleCount?: pulumi.Input<number>;
            modules?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareMemoryModulesArgs>[]>;
            totalSize?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareMemoryModulesArgs {
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Size is in megabytes (MB)
             */
            size?: pulumi.Input<number>;
            /**
             * Speed is in megatransfers per second (MT/S)
             */
            speed?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareNetworkArgs {
            interfaceCount?: pulumi.Input<number>;
            interfaces?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareNetworkInterfacesArgs>[]>;
        }

        export interface ServerClassSpecQualifiersHardwareNetworkInterfacesArgs {
            addresses?: pulumi.Input<pulumi.Input<string>[]>;
            flags?: pulumi.Input<string>;
            index?: pulumi.Input<number>;
            mac?: pulumi.Input<string>;
            mtu?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareStorageArgs {
            deviceCount?: pulumi.Input<number>;
            devices?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecQualifiersHardwareStorageDevicesArgs>[]>;
            totalSize?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareStorageDevicesArgs {
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Size is in bytes
             */
            size?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
            uuid?: pulumi.Input<string>;
            wwid?: pulumi.Input<string>;
        }

        export interface ServerClassSpecQualifiersHardwareSystemArgs {
            family?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            skuNumber?: pulumi.Input<string>;
            uuid?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface ServerClassSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerClassSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ServerClassSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerClassStatus defines the observed state of ServerClass.
         */
        export interface ServerClassStatusArgs {
            serversAvailable: pulumi.Input<pulumi.Input<string>[]>;
            serversInUse: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerSpec defines the desired state of Server.
         */
        export interface ServerSpecArgs {
            accepted: pulumi.Input<boolean>;
            /**
             * BMC defines data about how to talk to the node via ipmitool.
             */
            bmc?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcArgs>;
            /**
             * BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
             *  If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
             */
            bootFromDiskMethod?: pulumi.Input<string>;
            configPatches?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecConfigPatchesArgs>[]>;
            cordoned?: pulumi.Input<boolean>;
            /**
             * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
             *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
             */
            environmentRef?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecEnvironmentRefArgs>;
            hardware?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareArgs>;
            hostname?: pulumi.Input<string>;
            /**
             * ManagementAPI defines data about how to talk to the node via simple HTTP API.
             */
            managementApi?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecManagementApiArgs>;
            pxeBootAlways?: pulumi.Input<boolean>;
            /**
             * PXEMode specifies the method to trigger PXE boot via IPMI. 
             *  If not set, controller default is used. Valid values: uefi, bios.
             */
            pxeMode?: pulumi.Input<string>;
        }

        /**
         * BMC defines data about how to talk to the node via ipmitool.
         */
        export interface ServerSpecBmcArgs {
            /**
             * BMC endpoint.
             */
            endpoint: pulumi.Input<string>;
            /**
             * BMC Interface Type. Defaults to lanplus.
             */
            interface?: pulumi.Input<string>;
            /**
             * BMC password value.
             */
            pass?: pulumi.Input<string>;
            /**
             * Source for the password value. Cannot be used if Pass is not empty.
             */
            passFrom?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcPassFromArgs>;
            /**
             * BMC port. Defaults to 623.
             */
            port?: pulumi.Input<number>;
            /**
             * BMC user value.
             */
            user?: pulumi.Input<string>;
            /**
             * Source for the user value. Cannot be used if User is not empty.
             */
            userFrom?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcUserFromArgs>;
        }

        /**
         * Source for the password value. Cannot be used if Pass is not empty.
         */
        export interface ServerSpecBmcPassFromArgs {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcPassFromSecretKeyRefArgs>;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcPassFromSecretKeyRefArgs {
            /**
             * Key to select
             */
            key: pulumi.Input<string>;
            name: pulumi.Input<string>;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: pulumi.Input<string>;
        }

        /**
         * Source for the user value. Cannot be used if User is not empty.
         */
        export interface ServerSpecBmcUserFromArgs {
            /**
             * SecretKeyRef defines a ref to a given key within a secret.
             */
            secretKeyRef?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecBmcUserFromSecretKeyRefArgs>;
        }

        /**
         * SecretKeyRef defines a ref to a given key within a secret.
         */
        export interface ServerSpecBmcUserFromSecretKeyRefArgs {
            /**
             * Key to select
             */
            key: pulumi.Input<string>;
            name: pulumi.Input<string>;
            /**
             * Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
             */
            namespace: pulumi.Input<string>;
        }

        export interface ServerSpecConfigPatchesArgs {
            op: pulumi.Input<string>;
            path: pulumi.Input<string>;
            value?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface ServerSpecEnvironmentRefArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareArgs {
            compute?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareComputeArgs>;
            memory?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareMemoryArgs>;
            network?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareNetworkArgs>;
            storage?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareStorageArgs>;
            system?: pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareSystemArgs>;
        }

        export interface ServerSpecHardwareComputeArgs {
            processorCount?: pulumi.Input<number>;
            processors?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareComputeProcessorsArgs>[]>;
            totalCoreCount?: pulumi.Input<number>;
            totalThreadCount?: pulumi.Input<number>;
        }

        export interface ServerSpecHardwareComputeProcessorsArgs {
            coreCount?: pulumi.Input<number>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Speed is in megahertz (Mhz)
             */
            speed?: pulumi.Input<number>;
            threadCount?: pulumi.Input<number>;
        }

        export interface ServerSpecHardwareMemoryArgs {
            moduleCount?: pulumi.Input<number>;
            modules?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareMemoryModulesArgs>[]>;
            totalSize?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareMemoryModulesArgs {
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Size is in megabytes (MB)
             */
            size?: pulumi.Input<number>;
            /**
             * Speed is in megatransfers per second (MT/S)
             */
            speed?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareNetworkArgs {
            interfaceCount?: pulumi.Input<number>;
            interfaces?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareNetworkInterfacesArgs>[]>;
        }

        export interface ServerSpecHardwareNetworkInterfacesArgs {
            addresses?: pulumi.Input<pulumi.Input<string>[]>;
            flags?: pulumi.Input<string>;
            index?: pulumi.Input<number>;
            mac?: pulumi.Input<string>;
            mtu?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareStorageArgs {
            deviceCount?: pulumi.Input<number>;
            devices?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerSpecHardwareStorageDevicesArgs>[]>;
            totalSize?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareStorageDevicesArgs {
            deviceName?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            /**
             * Size is in bytes
             */
            size?: pulumi.Input<number>;
            type?: pulumi.Input<string>;
            uuid?: pulumi.Input<string>;
            wwid?: pulumi.Input<string>;
        }

        export interface ServerSpecHardwareSystemArgs {
            family?: pulumi.Input<string>;
            manufacturer?: pulumi.Input<string>;
            productName?: pulumi.Input<string>;
            serialNumber?: pulumi.Input<string>;
            skuNumber?: pulumi.Input<string>;
            uuid?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        /**
         * ManagementAPI defines data about how to talk to the node via simple HTTP API.
         */
        export interface ServerSpecManagementApiArgs {
            endpoint: pulumi.Input<string>;
        }

        /**
         * ServerStatus defines the observed state of Server.
         */
        export interface ServerStatusArgs {
            /**
             * Addresses lists discovered node IPs.
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerStatusAddressesArgs>[]>;
            /**
             * Conditions defines current service state of the Server.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.metal.v1alpha2.ServerStatusConditionsArgs>[]>;
            /**
             * InUse is true when server is assigned to some MetalMachine.
             */
            inUse?: pulumi.Input<boolean>;
            /**
             * IsClean is true when server disks are wiped.
             */
            isClean?: pulumi.Input<boolean>;
            /**
             * Power is the current power state of the server: "on", "off" or "unknown".
             */
            power?: pulumi.Input<string>;
            /**
             * Ready is true when server is accepted and in use.
             */
            ready?: pulumi.Input<boolean>;
        }

        /**
         * NodeAddress contains information for the node's address.
         */
        export interface ServerStatusAddressesArgs {
            /**
             * The node address.
             */
            address: pulumi.Input<string>;
            /**
             * Node address type, one of Hostname, ExternalIP or InternalIP.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ServerStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }
    }
}

export namespace pulumiOperator {
    export namespace v1 {
        export interface ProgramProgramArgs {
            /**
             * configuration specifies the Pulumi config inputs to the deployment. Either type or default is required.
             */
            configuration?: pulumi.Input<{[key: string]: pulumi.Input<inputs.pulumiOperator.v1.ProgramProgramConfigurationArgs>}>;
            /**
             * outputs specifies the Pulumi stack outputs of the program and how they are computed from the resources.
             */
            outputs?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
            /**
             * resources declares the Pulumi resources that will be deployed and managed by the program.
             */
            resources?: pulumi.Input<{[key: string]: pulumi.Input<inputs.pulumiOperator.v1.ProgramProgramResourcesArgs>}>;
            /**
             * variables specifies intermediate values of the program; the values of variables are expressions that can be re-used.
             */
            variables?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
        }

        export interface ProgramProgramConfigurationArgs {
            /**
             * type is the (required) data type for the parameter.
             */
            type?: pulumi.Input<string>;
        }

        export interface ProgramProgramResourcesArgs {
            /**
             * A getter function for the resource. Supplying get is mutually exclusive to properties.
             */
            get?: pulumi.Input<inputs.pulumiOperator.v1.ProgramProgramResourcesGetArgs>;
            /**
             * options contains all resource options supported by Pulumi.
             */
            options?: pulumi.Input<inputs.pulumiOperator.v1.ProgramProgramResourcesOptionsArgs>;
            /**
             * properties contains the primary resource-specific keys and values to initialize the resource state.
             */
            properties?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
            /**
             * type is the Pulumi type token for this resource.
             */
            type: pulumi.Input<string>;
        }

        /**
         * A getter function for the resource. Supplying get is mutually exclusive to properties.
         */
        export interface ProgramProgramResourcesGetArgs {
            /**
             * The ID of the resource to import.
             */
            id: pulumi.Input<string>;
            /**
             * state contains the known properties (input & output) of the resource. This assists the provider in figuring out the correct resource.
             */
            state?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
        }

        /**
         * options contains all resource options supported by Pulumi.
         */
        export interface ProgramProgramResourcesOptionsArgs {
            /**
             * additionalSecretOutputs specifies properties that must be encrypted as secrets.
             */
            additionalSecretOutputs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * aliases specifies names that this resource used to have, so that renaming or refactoring doesn’t replace it.
             */
            aliases?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * customTimeouts overrides the default retry/timeout behavior for resource provisioning.
             */
            customTimeouts?: pulumi.Input<inputs.pulumiOperator.v1.ProgramProgramResourcesOptionsCustomTimeoutsArgs>;
            /**
             * deleteBeforeReplace overrides the default create-before-delete behavior when replacing.
             */
            deleteBeforeReplace?: pulumi.Input<boolean>;
            /**
             * dependsOn adds explicit dependencies in addition to the ones in the dependency graph.
             */
            dependsOn?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
            /**
             * ignoreChanges declares that changes to certain properties should be ignored when diffing.
             */
            ignoreChanges?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * import adopts an existing resource from your cloud account under the control of Pulumi.
             */
            import?: pulumi.Input<string>;
            /**
             * parent resource option specifies a parent for a resource. It is used to associate children with the parents that encapsulate or are responsible for them.
             */
            parent?: pulumi.Input<{[key: string]: any}>;
            /**
             * protect prevents accidental deletion of a resource.
             */
            protect?: pulumi.Input<boolean>;
            /**
             * provider resource option sets a provider for the resource.
             */
            provider?: pulumi.Input<{[key: string]: any}>;
            /**
             * providers resource option sets a map of providers for the resource and its children.
             */
            providers?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
            /**
             * version specifies a provider plugin version that should be used when operating on a resource.
             */
            version?: pulumi.Input<string>;
        }

        /**
         * customTimeouts overrides the default retry/timeout behavior for resource provisioning.
         */
        export interface ProgramProgramResourcesOptionsCustomTimeoutsArgs {
            /**
             * create is the custom timeout for create operations.
             */
            create?: pulumi.Input<string>;
            /**
             * delete is the custom timeout for delete operations.
             */
            delete?: pulumi.Input<string>;
            /**
             * update is the custom timeout for update operations.
             */
            update?: pulumi.Input<string>;
        }

        /**
         * StackSpec defines the desired state of Pulumi Stack being managed by this operator.
         */
        export interface StackSpecArgs {
            /**
             * (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access. Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
             */
            accessTokenSecret?: pulumi.Input<string>;
            /**
             * (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/> Examples:<br/> - Pulumi Service:              "https://app.pulumi.com" (default)<br/> - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/> - Local:                       "file://./einstein" <br/> - AWS:                         "s3://<my-pulumi-state-bucket>" <br/> - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/> - GCP:                         "gs://<my-pulumi-state-bucket>" <br/> See: https://www.pulumi.com/docs/intro/concepts/state/
             */
            backend?: pulumi.Input<string>;
            /**
             * (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This is mutually exclusive with the Commit setting. Either value needs to be specified. When specified, the operator will periodically poll to check if the branch has any new commits. The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
             */
            branch?: pulumi.Input<string>;
            /**
             * (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. Either value needs to be specified.
             */
            commit?: pulumi.Input<string>;
            /**
             * (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying to update stacks even if the revision of the source matches. This might be useful in environments where Pulumi programs have dynamic elements for example, calls to internal APIs where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a particular revision is successfully run, the operator will not attempt to rerun the program at that revision again.
             */
            continueResyncOnCommitMatch?: pulumi.Input<boolean>;
            /**
             * (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
             */
            destroyOnFinalize?: pulumi.Input<boolean>;
            /**
             * (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where the variables' values should be loaded from (one of literal, environment variable, file on the filesystem, or Kubernetes Secret) as values.
             */
            envRefs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.pulumiOperator.v1.StackSpecEnvRefsArgs>}>;
            /**
             * (optional) SecretEnvs is an optional array of Secret names containing environment variables to set. Deprecated: use EnvRefs instead.
             */
            envSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * (optional) Envs is an optional array of config maps containing environment variables to set. Deprecated: use EnvRefs instead.
             */
            envs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
             */
            expectNoRefreshChanges?: pulumi.Input<boolean>;
            /**
             * FluxSource specifies how to fetch source code from a Flux source object.
             */
            fluxSource?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecFluxSourceArgs>;
            /**
             * (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
             */
            gitAuth?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthArgs>;
            /**
             * (optional) GitAuthSecret is the the name of a Secret containing an authentication option for the git repository. There are 3 different authentication options: * Personal access token * SSH private key (and it's optional password) * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials. Deprecated. Use GitAuth instead.
             */
            gitAuthSecret?: pulumi.Input<string>;
            /**
             * (optional) Prerequisites is a list of references to other stacks, each with a constraint on how long ago it must have succeeded. This can be used to make sure e.g., state is re-evaluated before running a stack that depends on it.
             */
            prerequisites?: pulumi.Input<pulumi.Input<inputs.pulumiOperator.v1.StackSpecPrerequisitesArgs>[]>;
            /**
             * ProgramRef refers to a Program object, to be used as the source for the stack.
             */
            programRef?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecProgramRefArgs>;
            /**
             * ProjectRepo is the git source control repository from which we fetch the project code and configuration.
             */
            projectRepo?: pulumi.Input<string>;
            /**
             * (optional) Refresh can be set to true to refresh the stack before it is updated.
             */
            refresh?: pulumi.Input<boolean>;
            /**
             * (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
             */
            repoDir?: pulumi.Input<string>;
            /**
             * (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at the specified frequency even if no changes to the custom resource are detected. If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency. The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
             */
            resyncFrequencySeconds?: pulumi.Input<number>;
            /**
             * (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
             */
            retryOnUpdateConflict?: pulumi.Input<boolean>;
            /**
             * (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository. Deprecated: use SecretRefs instead.
             */
            secrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples: - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1" - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname" - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" - See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
             */
            secretsProvider?: pulumi.Input<string>;
            /**
             * (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             */
            secretsRef?: pulumi.Input<{[key: string]: pulumi.Input<inputs.pulumiOperator.v1.StackSpecSecretsRefArgs>}>;
            /**
             * Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
             */
            stack: pulumi.Input<string>;
            /**
             * (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only resources mentioned will be updated.
             */
            targets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * (optional) UseLocalStackOnly can be set to true to prevent the operator from creating stacks that do not exist in the tracking git repo. The default behavior is to create a stack if it doesn't exist.
             */
            useLocalStackOnly?: pulumi.Input<boolean>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecEnvRefsArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecEnvRefsEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecEnvRefsFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecEnvRefsLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecEnvRefsSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecEnvRefsEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecEnvRefsFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecEnvRefsLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecEnvRefsSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * FluxSource specifies how to fetch source code from a Flux source object.
         */
        export interface StackSpecFluxSourceArgs {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of interest, within the fetched source.
             */
            dir?: pulumi.Input<string>;
            sourceRef: pulumi.Input<inputs.pulumiOperator.v1.StackSpecFluxSourceSourceRefArgs>;
        }

        export interface StackSpecFluxSourceSourceRefArgs {
            apiVersion: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        /**
         * (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
         */
        export interface StackSpecGitAuthArgs {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            accessToken?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenArgs>;
            /**
             * BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
             */
            basicAuth?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthArgs>;
            /**
             * SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
             */
            sshAuth?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthArgs>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthAccessTokenArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthAccessTokenSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthAccessTokenEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthAccessTokenFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthAccessTokenLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthAccessTokenSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
         */
        export interface StackSpecGitAuthBasicAuthArgs {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            password: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordArgs>;
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            userName: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameArgs>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthPasswordArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthPasswordSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthPasswordEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthPasswordFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthPasswordLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthPasswordSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthUserNameArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthBasicAuthUserNameSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthUserNameEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthUserNameFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthUserNameLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthUserNameSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
         */
        export interface StackSpecGitAuthSshAuthArgs {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            password?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordArgs>;
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            sshPrivateKey: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeyArgs>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthPasswordArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthPasswordSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthPasswordEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthPasswordFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthPasswordLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthPasswordSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecGitAuthSshAuthSshPrivateKeySecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeySecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be considered satisfied.
         */
        export interface StackSpecPrerequisitesArgs {
            /**
             * Name is the name of the Stack resource that is a prerequisite.
             */
            name: pulumi.Input<string>;
            /**
             * Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
             */
            requirement?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecPrerequisitesRequirementArgs>;
        }

        /**
         * Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
         */
        export interface StackSpecPrerequisitesRequirementArgs {
            /**
             * SucceededWithinDuration gives a duration within which the prerequisite must have reached a succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in the last hour". Fields (should there ever be more than one) are not intended to be mutually exclusive.
             */
            succeededWithinDuration?: pulumi.Input<string>;
        }

        /**
         * ProgramRef refers to a Program object, to be used as the source for the stack.
         */
        export interface StackSpecProgramRefArgs {
            name: pulumi.Input<string>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecSecretsRefArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecSecretsRefEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecSecretsRefFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecSecretsRefLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1.StackSpecSecretsRefSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecSecretsRefEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecSecretsRefFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecSecretsRefLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecSecretsRefSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * StackStatus defines the observed state of Stack
         */
        export interface StackStatusArgs {
            conditions?: pulumi.Input<pulumi.Input<inputs.pulumiOperator.v1.StackStatusConditionsArgs>[]>;
            /**
             * LastUpdate contains details of the status of the last update.
             */
            lastUpdate?: pulumi.Input<inputs.pulumiOperator.v1.StackStatusLastUpdateArgs>;
            /**
             * ObservedGeneration records the value of .meta.generation at the point the controller last processed this object
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * ObservedReconcileRequest records the value of the annotation named for `ReconcileRequestAnnotation` when it was last seen.
             */
            observedReconcileRequest?: pulumi.Input<string>;
            /**
             * Outputs contains the exported stack output variables resulting from a deployment.
             */
            outputs?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface StackStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * LastUpdate contains details of the status of the last update.
         */
        export interface StackStatusLastUpdateArgs {
            /**
             * Last commit attempted
             */
            lastAttemptedCommit?: pulumi.Input<string>;
            /**
             * LastResyncTime contains a timestamp for the last time a resync of the stack took place.
             */
            lastResyncTime?: pulumi.Input<string>;
            /**
             * Last commit successfully applied
             */
            lastSuccessfulCommit?: pulumi.Input<string>;
            /**
             * Permalink is the Pulumi Console URL of the stack operation.
             */
            permalink?: pulumi.Input<string>;
            /**
             * State is the state of the stack update - one of `succeeded` or `failed`
             */
            state?: pulumi.Input<string>;
        }

    }

    export namespace v1alpha1 {
        /**
         * StackSpec defines the desired state of Pulumi Stack being managed by this operator.
         */
        export interface StackSpecArgs {
            /**
             * (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access. Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
             */
            accessTokenSecret?: pulumi.Input<string>;
            /**
             * (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/> Examples:<br/> - Pulumi Service:              "https://app.pulumi.com" (default)<br/> - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/> - Local:                       "file://./einstein" <br/> - AWS:                         "s3://<my-pulumi-state-bucket>" <br/> - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/> - GCP:                         "gs://<my-pulumi-state-bucket>" <br/> See: https://www.pulumi.com/docs/intro/concepts/state/
             */
            backend?: pulumi.Input<string>;
            /**
             * (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This is mutually exclusive with the Commit setting. Either value needs to be specified. When specified, the operator will periodically poll to check if the branch has any new commits. The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
             */
            branch?: pulumi.Input<string>;
            /**
             * (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. Either value needs to be specified.
             */
            commit?: pulumi.Input<string>;
            /**
             * (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying to update stacks even if the revision of the source matches. This might be useful in environments where Pulumi programs have dynamic elements for example, calls to internal APIs where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a particular revision is successfully run, the operator will not attempt to rerun the program at that revision again.
             */
            continueResyncOnCommitMatch?: pulumi.Input<boolean>;
            /**
             * (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
             */
            destroyOnFinalize?: pulumi.Input<boolean>;
            /**
             * (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where the variables' values should be loaded from (one of literal, environment variable, file on the filesystem, or Kubernetes Secret) as values.
             */
            envRefs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecEnvRefsArgs>}>;
            /**
             * (optional) SecretEnvs is an optional array of Secret names containing environment variables to set. Deprecated: use EnvRefs instead.
             */
            envSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * (optional) Envs is an optional array of config maps containing environment variables to set. Deprecated: use EnvRefs instead.
             */
            envs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
             */
            expectNoRefreshChanges?: pulumi.Input<boolean>;
            /**
             * FluxSource specifies how to fetch source code from a Flux source object.
             */
            fluxSource?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecFluxSourceArgs>;
            /**
             * (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
             */
            gitAuth?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthArgs>;
            /**
             * (optional) GitAuthSecret is the the name of a Secret containing an authentication option for the git repository. There are 3 different authentication options: * Personal access token * SSH private key (and it's optional password) * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials. Deprecated. Use GitAuth instead.
             */
            gitAuthSecret?: pulumi.Input<string>;
            /**
             * (optional) Prerequisites is a list of references to other stacks, each with a constraint on how long ago it must have succeeded. This can be used to make sure e.g., state is re-evaluated before running a stack that depends on it.
             */
            prerequisites?: pulumi.Input<pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecPrerequisitesArgs>[]>;
            /**
             * ProgramRef refers to a Program object, to be used as the source for the stack.
             */
            programRef?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecProgramRefArgs>;
            /**
             * ProjectRepo is the git source control repository from which we fetch the project code and configuration.
             */
            projectRepo?: pulumi.Input<string>;
            /**
             * (optional) Refresh can be set to true to refresh the stack before it is updated.
             */
            refresh?: pulumi.Input<boolean>;
            /**
             * (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
             */
            repoDir?: pulumi.Input<string>;
            /**
             * (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at the specified frequency even if no changes to the custom resource are detected. If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency. The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
             */
            resyncFrequencySeconds?: pulumi.Input<number>;
            /**
             * (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
             */
            retryOnUpdateConflict?: pulumi.Input<boolean>;
            /**
             * (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository. Deprecated: use SecretRefs instead.
             */
            secrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples: - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1" - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname" - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" - See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
             */
            secretsProvider?: pulumi.Input<string>;
            /**
             * (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
             */
            secretsRef?: pulumi.Input<{[key: string]: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecSecretsRefArgs>}>;
            /**
             * Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
             */
            stack: pulumi.Input<string>;
            /**
             * (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only resources mentioned will be updated.
             */
            targets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * (optional) UseLocalStackOnly can be set to true to prevent the operator from creating stacks that do not exist in the tracking git repo. The default behavior is to create a stack if it doesn't exist.
             */
            useLocalStackOnly?: pulumi.Input<boolean>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecEnvRefsArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecEnvRefsEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecEnvRefsFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecEnvRefsLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecEnvRefsSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecEnvRefsEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecEnvRefsFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecEnvRefsLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecEnvRefsSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * FluxSource specifies how to fetch source code from a Flux source object.
         */
        export interface StackSpecFluxSourceArgs {
            /**
             * Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of interest, within the fetched source.
             */
            dir?: pulumi.Input<string>;
            sourceRef: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecFluxSourceSourceRefArgs>;
        }

        export interface StackSpecFluxSourceSourceRefArgs {
            apiVersion: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        /**
         * (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
         */
        export interface StackSpecGitAuthArgs {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            accessToken?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenArgs>;
            /**
             * BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
             */
            basicAuth?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthArgs>;
            /**
             * SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
             */
            sshAuth?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthArgs>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthAccessTokenArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthAccessTokenSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthAccessTokenEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthAccessTokenFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthAccessTokenLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthAccessTokenSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
         */
        export interface StackSpecGitAuthBasicAuthArgs {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            password: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordArgs>;
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            userName: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameArgs>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthPasswordArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthPasswordSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthPasswordEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthPasswordFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthPasswordLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthPasswordSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthBasicAuthUserNameArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthBasicAuthUserNameSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthBasicAuthUserNameEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthBasicAuthUserNameFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthBasicAuthUserNameLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthBasicAuthUserNameSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
         */
        export interface StackSpecGitAuthSshAuthArgs {
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            password?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordArgs>;
            /**
             * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
             */
            sshPrivateKey: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyArgs>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthPasswordArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthPasswordSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthPasswordEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthPasswordFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthPasswordLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthPasswordSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecGitAuthSshAuthSshPrivateKeySecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecGitAuthSshAuthSshPrivateKeySecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be considered satisfied.
         */
        export interface StackSpecPrerequisitesArgs {
            /**
             * Name is the name of the Stack resource that is a prerequisite.
             */
            name: pulumi.Input<string>;
            /**
             * Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
             */
            requirement?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecPrerequisitesRequirementArgs>;
        }

        /**
         * Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
         */
        export interface StackSpecPrerequisitesRequirementArgs {
            /**
             * SucceededWithinDuration gives a duration within which the prerequisite must have reached a succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in the last hour". Fields (should there ever be more than one) are not intended to be mutually exclusive.
             */
            succeededWithinDuration?: pulumi.Input<string>;
        }

        /**
         * ProgramRef refers to a Program object, to be used as the source for the stack.
         */
        export interface StackSpecProgramRefArgs {
            name: pulumi.Input<string>;
        }

        /**
         * ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
         */
        export interface StackSpecSecretsRefArgs {
            /**
             * Env selects an environment variable set on the operator process
             */
            env?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecSecretsRefEnvArgs>;
            /**
             * FileSystem selects a file on the operator's file system
             */
            filesystem?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecSecretsRefFilesystemArgs>;
            /**
             * LiteralRef refers to a literal value
             */
            literal?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecSecretsRefLiteralArgs>;
            /**
             * SecretRef refers to a Kubernetes Secret
             */
            secret?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackSpecSecretsRefSecretArgs>;
            /**
             * SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
             */
            type: pulumi.Input<string>;
        }

        /**
         * Env selects an environment variable set on the operator process
         */
        export interface StackSpecSecretsRefEnvArgs {
            /**
             * Name of the environment variable
             */
            name: pulumi.Input<string>;
        }

        /**
         * FileSystem selects a file on the operator's file system
         */
        export interface StackSpecSecretsRefFilesystemArgs {
            /**
             * Path on the filesystem to use to load information from.
             */
            path: pulumi.Input<string>;
        }

        /**
         * LiteralRef refers to a literal value
         */
        export interface StackSpecSecretsRefLiteralArgs {
            /**
             * Value to load
             */
            value: pulumi.Input<string>;
        }

        /**
         * SecretRef refers to a Kubernetes Secret
         */
        export interface StackSpecSecretsRefSecretArgs {
            /**
             * Key within the Secret to use.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the Secret
             */
            name: pulumi.Input<string>;
            /**
             * Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * StackStatus defines the observed state of Stack
         */
        export interface StackStatusArgs {
            /**
             * LastUpdate contains details of the status of the last update.
             */
            lastUpdate?: pulumi.Input<inputs.pulumiOperator.v1alpha1.StackStatusLastUpdateArgs>;
            /**
             * Outputs contains the exported stack output variables resulting from a deployment.
             */
            outputs?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
        }

        /**
         * LastUpdate contains details of the status of the last update.
         */
        export interface StackStatusLastUpdateArgs {
            /**
             * Last commit attempted
             */
            lastAttemptedCommit?: pulumi.Input<string>;
            /**
             * LastResyncTime contains a timestamp for the last time a resync of the stack took place.
             */
            lastResyncTime?: pulumi.Input<string>;
            /**
             * Last commit successfully applied
             */
            lastSuccessfulCommit?: pulumi.Input<string>;
            /**
             * Permalink is the Pulumi Console URL of the stack operation.
             */
            permalink?: pulumi.Input<string>;
            /**
             * State is the state of the stack update - one of `succeeded` or `failed`
             */
            state?: pulumi.Input<string>;
        }

    }
}

export namespace runtime {
    export namespace v1alpha1 {
        /**
         * ExtensionConfigSpec is the desired state of the ExtensionConfig
         */
        export interface ExtensionConfigSpecArgs {
            /**
             * ClientConfig defines how to communicate with the Extension server.
             */
            clientConfig: pulumi.Input<inputs.runtime.v1alpha1.ExtensionConfigSpecClientConfigArgs>;
            /**
             * NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
             */
            namespaceSelector?: pulumi.Input<inputs.runtime.v1alpha1.ExtensionConfigSpecNamespaceSelectorArgs>;
            /**
             * Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
             */
            settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * ClientConfig defines how to communicate with the Extension server.
         */
        export interface ExtensionConfigSpecClientConfigArgs {
            /**
             * CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified. 
             *  If the Extension server is running within a cluster, then you should use `service`.
             */
            service?: pulumi.Input<inputs.runtime.v1alpha1.ExtensionConfigSpecClientConfigServiceArgs>;
            /**
             * URL gives the location of the Extension server, in standard URL form (`scheme://host:port/path`). Note: Exactly one of `url` or `service` must be specified. 
             *  The scheme must be "https". 
             *  The `host` should not refer to a service running in the cluster; use the `service` field instead. 
             *  A path is optional, and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path. 
             *  Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed either.
             */
            url?: pulumi.Input<string>;
        }

        /**
         * Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified. 
         *  If the Extension server is running within a cluster, then you should use `service`.
         */
        export interface ExtensionConfigSpecClientConfigServiceArgs {
            /**
             * Name is the name of the service.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the service.
             */
            namespace: pulumi.Input<string>;
            /**
             * Path is an optional URL path and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
             */
            path?: pulumi.Input<string>;
            /**
             * Port is the port on the service that's hosting the Extension server. Defaults to 443. Port should be a valid port number (1-65535, inclusive).
             */
            port?: pulumi.Input<number>;
        }

        /**
         * NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
         */
        export interface ExtensionConfigSpecNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.runtime.v1alpha1.ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ExtensionConfigStatus is the current state of the ExtensionConfig
         */
        export interface ExtensionConfigStatusArgs {
            /**
             * Conditions define the current service state of the ExtensionConfig.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.runtime.v1alpha1.ExtensionConfigStatusConditionsArgs>[]>;
            /**
             * Handlers defines the current ExtensionHandlers supported by an Extension.
             */
            handlers?: pulumi.Input<pulumi.Input<inputs.runtime.v1alpha1.ExtensionConfigStatusHandlersArgs>[]>;
        }

        /**
         * Condition defines an observation of a Cluster API resource operational state.
         */
        export interface ExtensionConfigStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition. This field may be empty.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
             */
            severity?: pulumi.Input<string>;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
             */
            type: pulumi.Input<string>;
        }

        /**
         * ExtensionHandler specifies the details of a handler for a particular runtime hook registered by an Extension server.
         */
        export interface ExtensionConfigStatusHandlersArgs {
            /**
             * FailurePolicy defines how failures in calls to the ExtensionHandler should be handled by a client. Defaults to Fail if not set.
             */
            failurePolicy?: pulumi.Input<string>;
            /**
             * Name is the unique name of the ExtensionHandler.
             */
            name: pulumi.Input<string>;
            /**
             * RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
             */
            requestHook: pulumi.Input<inputs.runtime.v1alpha1.ExtensionConfigStatusHandlersRequestHookArgs>;
            /**
             * TimeoutSeconds defines the timeout duration for client calls to the ExtensionHandler. Defaults to 10 is not set.
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
         */
        export interface ExtensionConfigStatusHandlersRequestHookArgs {
            /**
             * APIVersion is the group and version of the Hook.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * Hook is the name of the hook.
             */
            hook: pulumi.Input<string>;
        }
    }
}

export namespace trust {
    export namespace v1alpha1 {
        /**
         * Desired state of the Bundle resource.
         */
        export interface BundleSpecArgs {
            /**
             * Sources is a set of references to data whose data will sync to the target.
             */
            sources: pulumi.Input<pulumi.Input<inputs.trust.v1alpha1.BundleSpecSourcesArgs>[]>;
            /**
             * Target is the target location in all namespaces to sync source data to.
             */
            target: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetArgs>;
        }

        /**
         * BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
         */
        export interface BundleSpecSourcesArgs {
            /**
             * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
             */
            configMap?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecSourcesConfigMapArgs>;
            /**
             * InLine is a simple string to append as the source data.
             */
            inLine?: pulumi.Input<string>;
            /**
             * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
             */
            secret?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecSourcesSecretArgs>;
            /**
             * UseDefaultCAs, when true, requests the default CA bundle to be used as a source. Default CAs are available if trust-manager was installed via Helm or was otherwise set up to include a package-injecting init container by using the "--default-package-location" flag when starting the trust-manager controller. If default CAs were not configured at start-up, any request to use the default CAs will fail. The version of the default CA package which is used for a Bundle is stored in the defaultCAPackageVersion field of the Bundle's status field.
             */
            useDefaultCAs?: pulumi.Input<boolean>;
        }

        /**
         * ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
         */
        export interface BundleSpecSourcesConfigMapArgs {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
            /**
             * Name is the name of the source object in the trust Namespace.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Secret is a reference to a Secrets's `data` key, in the trust Namespace.
         */
        export interface BundleSpecSourcesSecretArgs {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
            /**
             * Name is the name of the source object in the trust Namespace.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Target is the target location in all namespaces to sync source data to.
         */
        export interface BundleSpecTargetArgs {
            /**
             * AdditionalFormats specifies any additional formats to write to the target
             */
            additionalFormats?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetAdditionalFormatsArgs>;
            /**
             * ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
             */
            configMap?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetConfigMapArgs>;
            /**
             * NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
             */
            namespaceSelector?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetNamespaceSelectorArgs>;
            /**
             * Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
             */
            secret?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetSecretArgs>;
        }

        /**
         * AdditionalFormats specifies any additional formats to write to the target
         */
        export interface BundleSpecTargetAdditionalFormatsArgs {
            /**
             * JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
             */
            jks?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetAdditionalFormatsJksArgs>;
            /**
             * PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
             */
            pkcs12?: pulumi.Input<inputs.trust.v1alpha1.BundleSpecTargetAdditionalFormatsPkcs12Args>;
        }

        /**
         * JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
         */
        export interface BundleSpecTargetAdditionalFormatsJksArgs {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
        }

        /**
         * PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
         */
        export interface BundleSpecTargetAdditionalFormatsPkcs12Args {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
        }

        /**
         * ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
         */
        export interface BundleSpecTargetConfigMapArgs {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
        }

        /**
         * NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
         */
        export interface BundleSpecTargetNamespaceSelectorArgs {
            /**
             * MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
         */
        export interface BundleSpecTargetSecretArgs {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
        }

        /**
         * Status of the Bundle. This is set and managed automatically.
         */
        export interface BundleStatusArgs {
            /**
             * List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.trust.v1alpha1.BundleStatusConditionsArgs>[]>;
            /**
             * DefaultCAPackageVersion, if set and non-empty, indicates the version information which was retrieved when the set of default CAs was requested in the bundle source. This should only be set if useDefaultCAs was set to "true" on a source, and will be the same for the same version of a bundle with identical certificates.
             */
            defaultCAVersion?: pulumi.Input<string>;
            /**
             * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
             */
            target?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetArgs>;
        }

        /**
         * BundleCondition contains condition information for a Bundle.
         */
        export interface BundleStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of ('True', 'False', 'Unknown').
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Synced`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
         */
        export interface BundleStatusTargetArgs {
            /**
             * AdditionalFormats specifies any additional formats to write to the target
             */
            additionalFormats?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetAdditionalFormatsArgs>;
            /**
             * ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
             */
            configMap?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetConfigMapArgs>;
            /**
             * NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
             */
            namespaceSelector?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetNamespaceSelectorArgs>;
            /**
             * Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
             */
            secret?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetSecretArgs>;
        }

        /**
         * AdditionalFormats specifies any additional formats to write to the target
         */
        export interface BundleStatusTargetAdditionalFormatsArgs {
            /**
             * JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
             */
            jks?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetAdditionalFormatsJksArgs>;
            /**
             * PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
             */
            pkcs12?: pulumi.Input<inputs.trust.v1alpha1.BundleStatusTargetAdditionalFormatsPkcs12Args>;
        }

        /**
         * JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
         */
        export interface BundleStatusTargetAdditionalFormatsJksArgs {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
        }

        /**
         * PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
         */
        export interface BundleStatusTargetAdditionalFormatsPkcs12Args {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
        }

        /**
         * ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
         */
        export interface BundleStatusTargetConfigMapArgs {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
        }

        /**
         * NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
         */
        export interface BundleStatusTargetNamespaceSelectorArgs {
            /**
             * MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
         */
        export interface BundleStatusTargetSecretArgs {
            /**
             * Key is the key of the entry in the object's `data` field to be used.
             */
            key: pulumi.Input<string>;
        }
    }
}
