// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BFDProfileArgs } from "./bfdprofile";
export type BFDProfile = import("./bfdprofile").BFDProfile;
export const BFDProfile: typeof import("./bfdprofile").BFDProfile = null as any;
utilities.lazyLoad(exports, ["BFDProfile"], () => require("./bfdprofile"));

export { BGPAdvertisementArgs } from "./bgpadvertisement";
export type BGPAdvertisement = import("./bgpadvertisement").BGPAdvertisement;
export const BGPAdvertisement: typeof import("./bgpadvertisement").BGPAdvertisement = null as any;
utilities.lazyLoad(exports, ["BGPAdvertisement"], () => require("./bgpadvertisement"));

export { BGPPeerArgs } from "./bgppeer";
export type BGPPeer = import("./bgppeer").BGPPeer;
export const BGPPeer: typeof import("./bgppeer").BGPPeer = null as any;
utilities.lazyLoad(exports, ["BGPPeer"], () => require("./bgppeer"));

export { CommunityArgs } from "./community";
export type Community = import("./community").Community;
export const Community: typeof import("./community").Community = null as any;
utilities.lazyLoad(exports, ["Community"], () => require("./community"));

export { IPAddressPoolArgs } from "./ipaddressPool";
export type IPAddressPool = import("./ipaddressPool").IPAddressPool;
export const IPAddressPool: typeof import("./ipaddressPool").IPAddressPool = null as any;
utilities.lazyLoad(exports, ["IPAddressPool"], () => require("./ipaddressPool"));

export { L2AdvertisementArgs } from "./l2advertisement";
export type L2Advertisement = import("./l2advertisement").L2Advertisement;
export const L2Advertisement: typeof import("./l2advertisement").L2Advertisement = null as any;
utilities.lazyLoad(exports, ["L2Advertisement"], () => require("./l2advertisement"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:metallb.io/v1beta1:BFDProfile":
                return new BFDProfile(name, <any>undefined, { urn })
            case "kubernetes:metallb.io/v1beta1:BGPAdvertisement":
                return new BGPAdvertisement(name, <any>undefined, { urn })
            case "kubernetes:metallb.io/v1beta1:BGPPeer":
                return new BGPPeer(name, <any>undefined, { urn })
            case "kubernetes:metallb.io/v1beta1:Community":
                return new Community(name, <any>undefined, { urn })
            case "kubernetes:metallb.io/v1beta1:IPAddressPool":
                return new IPAddressPool(name, <any>undefined, { urn })
            case "kubernetes:metallb.io/v1beta1:L2Advertisement":
                return new L2Advertisement(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("thecluster-crds", "metallb.io/v1beta1", _module)
