// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { IPAddressArgs } from "./ipaddress";
export type IPAddress = import("./ipaddress").IPAddress;
export const IPAddress: typeof import("./ipaddress").IPAddress = null as any;
utilities.lazyLoad(exports, ["IPAddress"], () => require("./ipaddress"));

export { IPAddressClaimArgs } from "./ipaddressClaim";
export type IPAddressClaim = import("./ipaddressClaim").IPAddressClaim;
export const IPAddressClaim: typeof import("./ipaddressClaim").IPAddressClaim = null as any;
utilities.lazyLoad(exports, ["IPAddressClaim"], () => require("./ipaddressClaim"));

const _module = {
  version: utilities.getVersion(),
  construct: (name: string, type: string, urn: string): pulumi.Resource => {
    switch (type) {
      case "kubernetes:ipam.cluster.x-k8s.io/v1alpha1:IPAddress":
        return new IPAddress(name, <any> undefined, { urn });
      case "kubernetes:ipam.cluster.x-k8s.io/v1alpha1:IPAddressClaim":
        return new IPAddressClaim(name, <any> undefined, { urn });
      default:
        throw new Error(`unknown resource type ${type}`);
    }
  },
};
pulumi.runtime.registerResourceModule("thecluster-crds", "ipam.cluster.x-k8s.io/v1alpha1", _module);
