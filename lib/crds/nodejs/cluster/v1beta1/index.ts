// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ClusterArgs } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterClassArgs } from "./clusterClass";
export type ClusterClass = import("./clusterClass").ClusterClass;
export const ClusterClass: typeof import("./clusterClass").ClusterClass = null as any;
utilities.lazyLoad(exports, ["ClusterClass"], () => require("./clusterClass"));

export { MachineArgs } from "./machine";
export type Machine = import("./machine").Machine;
export const Machine: typeof import("./machine").Machine = null as any;
utilities.lazyLoad(exports, ["Machine"], () => require("./machine"));

export { MachineDeploymentArgs } from "./machineDeployment";
export type MachineDeployment = import("./machineDeployment").MachineDeployment;
export const MachineDeployment: typeof import("./machineDeployment").MachineDeployment = null as any;
utilities.lazyLoad(exports, ["MachineDeployment"], () => require("./machineDeployment"));

export { MachineHealthCheckArgs } from "./machineHealthCheck";
export type MachineHealthCheck = import("./machineHealthCheck").MachineHealthCheck;
export const MachineHealthCheck: typeof import("./machineHealthCheck").MachineHealthCheck = null as any;
utilities.lazyLoad(exports, ["MachineHealthCheck"], () => require("./machineHealthCheck"));

export { MachinePoolArgs } from "./machinePool";
export type MachinePool = import("./machinePool").MachinePool;
export const MachinePool: typeof import("./machinePool").MachinePool = null as any;
utilities.lazyLoad(exports, ["MachinePool"], () => require("./machinePool"));

export { MachineSetArgs } from "./machineSet";
export type MachineSet = import("./machineSet").MachineSet;
export const MachineSet: typeof import("./machineSet").MachineSet = null as any;
utilities.lazyLoad(exports, ["MachineSet"], () => require("./machineSet"));

const _module = {
  version: utilities.getVersion(),
  construct: (name: string, type: string, urn: string): pulumi.Resource => {
    switch (type) {
      case "kubernetes:cluster.x-k8s.io/v1beta1:Cluster":
        return new Cluster(name, <any> undefined, { urn });
      case "kubernetes:cluster.x-k8s.io/v1beta1:ClusterClass":
        return new ClusterClass(name, <any> undefined, { urn });
      case "kubernetes:cluster.x-k8s.io/v1beta1:Machine":
        return new Machine(name, <any> undefined, { urn });
      case "kubernetes:cluster.x-k8s.io/v1beta1:MachineDeployment":
        return new MachineDeployment(name, <any> undefined, { urn });
      case "kubernetes:cluster.x-k8s.io/v1beta1:MachineHealthCheck":
        return new MachineHealthCheck(name, <any> undefined, { urn });
      case "kubernetes:cluster.x-k8s.io/v1beta1:MachinePool":
        return new MachinePool(name, <any> undefined, { urn });
      case "kubernetes:cluster.x-k8s.io/v1beta1:MachineSet":
        return new MachineSet(name, <any> undefined, { urn });
      default:
        throw new Error(`unknown resource type ${type}`);
    }
  },
};
pulumi.runtime.registerResourceModule("thecluster-crds", "cluster.x-k8s.io/v1beta1", _module);
