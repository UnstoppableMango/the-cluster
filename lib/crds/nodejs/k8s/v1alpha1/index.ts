// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { GlobalConfigurationArgs } from "./globalConfiguration";
export type GlobalConfiguration = import("./globalConfiguration").GlobalConfiguration;
export const GlobalConfiguration: typeof import("./globalConfiguration").GlobalConfiguration = null as any;
utilities.lazyLoad(exports, ["GlobalConfiguration"], () => require("./globalConfiguration"));

export { PolicyArgs } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { TransportServerArgs } from "./transportServer";
export type TransportServer = import("./transportServer").TransportServer;
export const TransportServer: typeof import("./transportServer").TransportServer = null as any;
utilities.lazyLoad(exports, ["TransportServer"], () => require("./transportServer"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:k8s.nginx.org/v1alpha1:GlobalConfiguration":
                return new GlobalConfiguration(name, <any>undefined, { urn })
            case "kubernetes:k8s.nginx.org/v1alpha1:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "kubernetes:k8s.nginx.org/v1alpha1:TransportServer":
                return new TransportServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("thecluster-crds", "k8s.nginx.org/v1alpha1", _module)
