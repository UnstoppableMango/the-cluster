// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as acme from "./acme";
import * as actions from "./actions";
import * as addons from "./addons";
import * as bootstrap from "./bootstrap";
import * as certmanager from "./certmanager";
import * as charts from "./charts";
import * as cluster from "./cluster";
import * as controlplane from "./controlplane";
import * as externaldns from "./externaldns";
import * as gateway from "./gateway";
import * as gatewayoperator from "./gatewayoperator";
import * as infrastructure from "./infrastructure";
import * as ipam from "./ipam";
import * as k8s from "./k8s";
import * as metal from "./metal";
import * as minio from "./minio";
import * as pulumiOperator from "./pulumi";
import * as runtime from "./runtime";
import * as snapshot from "./snapshot";
import * as sts from "./sts";
import * as trust from "./trust";
import * as types from "./types";

export {
    acme,
    actions,
    addons,
    bootstrap,
    certmanager,
    charts,
    cluster,
    controlplane,
    externaldns,
    gateway,
    gatewayoperator,
    infrastructure,
    ipam,
    k8s,
    metal,
    minio,
    pulumiOperator,
    runtime,
    snapshot,
    sts,
    trust,
    types,
};
pulumi.runtime.registerResourcePackage("thecluster-crds", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:crds") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
