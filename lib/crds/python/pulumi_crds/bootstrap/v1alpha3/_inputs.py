# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'TalosConfigSpecConfigPatchesArgs',
    'TalosConfigSpecHostnameArgs',
    'TalosConfigSpecArgs',
    'TalosConfigStatusConditionsArgs',
    'TalosConfigStatusArgs',
    'TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs',
    'TalosConfigTemplateSpecTemplateSpecHostnameArgs',
    'TalosConfigTemplateSpecTemplateSpecArgs',
    'TalosConfigTemplateSpecTemplateArgs',
    'TalosConfigTemplateSpecArgs',
]

@pulumi.input_type
class TalosConfigSpecConfigPatchesArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[str],
                 path: pulumi.Input[str],
                 value: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TalosConfigSpecHostnameArgs:
    def __init__(__self__, *,
                 source: Optional[pulumi.Input[str]] = None):
        """
        Set hostname in the machine configuration to some value.
        :param pulumi.Input[str] source: Source of the hostname. 
                Allowed values: "MachineName" (use linked Machine's Name).
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Source of the hostname. 
         Allowed values: "MachineName" (use linked Machine's Name).
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class TalosConfigSpecArgs:
    def __init__(__self__, *,
                 generate_type: pulumi.Input[str],
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigSpecConfigPatchesArgs']]]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input['TalosConfigSpecHostnameArgs']] = None,
                 talos_version: Optional[pulumi.Input[str]] = None):
        """
        TalosConfigSpec defines the desired state of TalosConfig
        :param pulumi.Input['TalosConfigSpecHostnameArgs'] hostname: Set hostname in the machine configuration to some value.
        """
        pulumi.set(__self__, "generate_type", generate_type)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="generateType")
    def generate_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "generate_type")

    @generate_type.setter
    def generate_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "generate_type", value)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigSpecConfigPatchesArgs']]]]:
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigSpecConfigPatchesArgs']]]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['TalosConfigSpecHostnameArgs']]:
        """
        Set hostname in the machine configuration to some value.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['TalosConfigSpecHostnameArgs']]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "talos_version")

    @talos_version.setter
    def talos_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_version", value)


@pulumi.input_type
class TalosConfigStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition. This field may be empty.
        :param pulumi.Input[str] reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param pulumi.Input[str] severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class TalosConfigStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigStatusConditionsArgs']]]] = None,
                 data_secret_name: Optional[pulumi.Input[str]] = None,
                 failure_message: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 ready: Optional[pulumi.Input[bool]] = None,
                 talos_config: Optional[pulumi.Input[str]] = None):
        """
        TalosConfigStatus defines the observed state of TalosConfig
        :param pulumi.Input[Sequence[pulumi.Input['TalosConfigStatusConditionsArgs']]] conditions: Conditions defines current service state of the TalosConfig.
        :param pulumi.Input[str] data_secret_name: DataSecretName is the name of the secret that stores the bootstrap data script.
        :param pulumi.Input[str] failure_message: FailureMessage will be set on non-retryable errors
        :param pulumi.Input[str] failure_reason: FailureReason will be set on non-retryable errors
        :param pulumi.Input[int] observed_generation: ObservedGeneration is the latest generation observed by the controller.
        :param pulumi.Input[bool] ready: Ready indicates the BootstrapData field is ready to be consumed
        :param pulumi.Input[str] talos_config: Talos config will be a string containing the config for download. 
                Deprecated: please use `<cluster>-talosconfig` secret.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if data_secret_name is not None:
            pulumi.set(__self__, "data_secret_name", data_secret_name)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if talos_config is not None:
            pulumi.set(__self__, "talos_config", talos_config)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigStatusConditionsArgs']]]]:
        """
        Conditions defines current service state of the TalosConfig.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="dataSecretName")
    def data_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        DataSecretName is the name of the secret that stores the bootstrap data script.
        """
        return pulumi.get(self, "data_secret_name")

    @data_secret_name.setter
    def data_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_secret_name", value)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[pulumi.Input[str]]:
        """
        FailureMessage will be set on non-retryable errors
        """
        return pulumi.get(self, "failure_message")

    @failure_message.setter
    def failure_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_message", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        FailureReason will be set on non-retryable errors
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        ObservedGeneration is the latest generation observed by the controller.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def ready(self) -> Optional[pulumi.Input[bool]]:
        """
        Ready indicates the BootstrapData field is ready to be consumed
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> Optional[pulumi.Input[str]]:
        """
        Talos config will be a string containing the config for download. 
         Deprecated: please use `<cluster>-talosconfig` secret.
        """
        return pulumi.get(self, "talos_config")

    @talos_config.setter
    def talos_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_config", value)


@pulumi.input_type
class TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[str],
                 path: pulumi.Input[str],
                 value: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TalosConfigTemplateSpecTemplateSpecHostnameArgs:
    def __init__(__self__, *,
                 source: Optional[pulumi.Input[str]] = None):
        """
        Set hostname in the machine configuration to some value.
        :param pulumi.Input[str] source: Source of the hostname. 
                Allowed values: "MachineName" (use linked Machine's Name).
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Source of the hostname. 
         Allowed values: "MachineName" (use linked Machine's Name).
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class TalosConfigTemplateSpecTemplateSpecArgs:
    def __init__(__self__, *,
                 generate_type: pulumi.Input[str],
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs']]]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input['TalosConfigTemplateSpecTemplateSpecHostnameArgs']] = None,
                 talos_version: Optional[pulumi.Input[str]] = None):
        """
        TalosConfigSpec defines the desired state of TalosConfig
        :param pulumi.Input['TalosConfigTemplateSpecTemplateSpecHostnameArgs'] hostname: Set hostname in the machine configuration to some value.
        """
        pulumi.set(__self__, "generate_type", generate_type)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="generateType")
    def generate_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "generate_type")

    @generate_type.setter
    def generate_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "generate_type", value)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs']]]]:
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TalosConfigTemplateSpecTemplateSpecConfigPatchesArgs']]]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['TalosConfigTemplateSpecTemplateSpecHostnameArgs']]:
        """
        Set hostname in the machine configuration to some value.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['TalosConfigTemplateSpecTemplateSpecHostnameArgs']]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "talos_version")

    @talos_version.setter
    def talos_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_version", value)


@pulumi.input_type
class TalosConfigTemplateSpecTemplateArgs:
    def __init__(__self__, *,
                 spec: Optional[pulumi.Input['TalosConfigTemplateSpecTemplateSpecArgs']] = None):
        """
        TalosConfigTemplateResource defines the Template structure
        :param pulumi.Input['TalosConfigTemplateSpecTemplateSpecArgs'] spec: TalosConfigSpec defines the desired state of TalosConfig
        """
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['TalosConfigTemplateSpecTemplateSpecArgs']]:
        """
        TalosConfigSpec defines the desired state of TalosConfig
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['TalosConfigTemplateSpecTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class TalosConfigTemplateSpecArgs:
    def __init__(__self__, *,
                 template: pulumi.Input['TalosConfigTemplateSpecTemplateArgs']):
        """
        TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
        :param pulumi.Input['TalosConfigTemplateSpecTemplateArgs'] template: TalosConfigTemplateResource defines the Template structure
        """
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input['TalosConfigTemplateSpecTemplateArgs']:
        """
        TalosConfigTemplateResource defines the Template structure
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input['TalosConfigTemplateSpecTemplateArgs']):
        pulumi.set(self, "template", value)


