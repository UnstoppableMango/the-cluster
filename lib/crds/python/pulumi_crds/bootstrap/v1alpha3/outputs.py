# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'TalosConfigSpec',
    'TalosConfigSpecConfigPatches',
    'TalosConfigSpecHostname',
    'TalosConfigStatus',
    'TalosConfigStatusConditions',
    'TalosConfigTemplateSpec',
    'TalosConfigTemplateSpecTemplate',
    'TalosConfigTemplateSpecTemplateSpec',
    'TalosConfigTemplateSpecTemplateSpecConfigPatches',
    'TalosConfigTemplateSpecTemplateSpecHostname',
]

@pulumi.output_type
class TalosConfigSpec(dict):
    """
    TalosConfigSpec defines the desired state of TalosConfig
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "generateType":
            suggest = "generate_type"
        elif key == "configPatches":
            suggest = "config_patches"
        elif key == "talosVersion":
            suggest = "talos_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosConfigSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosConfigSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosConfigSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generate_type: str,
                 config_patches: Optional[Sequence['outputs.TalosConfigSpecConfigPatches']] = None,
                 data: Optional[str] = None,
                 hostname: Optional['outputs.TalosConfigSpecHostname'] = None,
                 talos_version: Optional[str] = None):
        """
        TalosConfigSpec defines the desired state of TalosConfig
        :param 'TalosConfigSpecHostnameArgs' hostname: Set hostname in the machine configuration to some value.
        """
        pulumi.set(__self__, "generate_type", generate_type)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="generateType")
    def generate_type(self) -> str:
        return pulumi.get(self, "generate_type")

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[Sequence['outputs.TalosConfigSpecConfigPatches']]:
        return pulumi.get(self, "config_patches")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.TalosConfigSpecHostname']:
        """
        Set hostname in the machine configuration to some value.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[str]:
        return pulumi.get(self, "talos_version")


@pulumi.output_type
class TalosConfigSpecConfigPatches(dict):
    def __init__(__self__, *,
                 op: str,
                 path: str,
                 value: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TalosConfigSpecHostname(dict):
    """
    Set hostname in the machine configuration to some value.
    """
    def __init__(__self__, *,
                 source: Optional[str] = None):
        """
        Set hostname in the machine configuration to some value.
        :param str source: Source of the hostname. 
                Allowed values: "MachineName" (use linked Machine's Name).
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Source of the hostname. 
         Allowed values: "MachineName" (use linked Machine's Name).
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class TalosConfigStatus(dict):
    """
    TalosConfigStatus defines the observed state of TalosConfig
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSecretName":
            suggest = "data_secret_name"
        elif key == "failureMessage":
            suggest = "failure_message"
        elif key == "failureReason":
            suggest = "failure_reason"
        elif key == "observedGeneration":
            suggest = "observed_generation"
        elif key == "talosConfig":
            suggest = "talos_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosConfigStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosConfigStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosConfigStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.TalosConfigStatusConditions']] = None,
                 data_secret_name: Optional[str] = None,
                 failure_message: Optional[str] = None,
                 failure_reason: Optional[str] = None,
                 observed_generation: Optional[int] = None,
                 ready: Optional[bool] = None,
                 talos_config: Optional[str] = None):
        """
        TalosConfigStatus defines the observed state of TalosConfig
        :param Sequence['TalosConfigStatusConditionsArgs'] conditions: Conditions defines current service state of the TalosConfig.
        :param str data_secret_name: DataSecretName is the name of the secret that stores the bootstrap data script.
        :param str failure_message: FailureMessage will be set on non-retryable errors
        :param str failure_reason: FailureReason will be set on non-retryable errors
        :param int observed_generation: ObservedGeneration is the latest generation observed by the controller.
        :param bool ready: Ready indicates the BootstrapData field is ready to be consumed
        :param str talos_config: Talos config will be a string containing the config for download. 
                Deprecated: please use `<cluster>-talosconfig` secret.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if data_secret_name is not None:
            pulumi.set(__self__, "data_secret_name", data_secret_name)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if talos_config is not None:
            pulumi.set(__self__, "talos_config", talos_config)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.TalosConfigStatusConditions']]:
        """
        Conditions defines current service state of the TalosConfig.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="dataSecretName")
    def data_secret_name(self) -> Optional[str]:
        """
        DataSecretName is the name of the secret that stores the bootstrap data script.
        """
        return pulumi.get(self, "data_secret_name")

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[str]:
        """
        FailureMessage will be set on non-retryable errors
        """
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        FailureReason will be set on non-retryable errors
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration is the latest generation observed by the controller.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def ready(self) -> Optional[bool]:
        """
        Ready indicates the BootstrapData field is ready to be consumed
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> Optional[str]:
        """
        Talos config will be a string containing the config for download. 
         Deprecated: please use `<cluster>-talosconfig` secret.
        """
        return pulumi.get(self, "talos_config")


@pulumi.output_type
class TalosConfigStatusConditions(dict):
    """
    Condition defines an observation of a Cluster API resource operational state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosConfigStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosConfigStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosConfigStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param str last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param str message: A human readable message indicating details about the transition. This field may be empty.
        :param str reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param str severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class TalosConfigTemplateSpec(dict):
    """
    TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
    """
    def __init__(__self__, *,
                 template: 'outputs.TalosConfigTemplateSpecTemplate'):
        """
        TalosConfigTemplateSpec defines the desired state of TalosConfigTemplate
        :param 'TalosConfigTemplateSpecTemplateArgs' template: TalosConfigTemplateResource defines the Template structure
        """
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def template(self) -> 'outputs.TalosConfigTemplateSpecTemplate':
        """
        TalosConfigTemplateResource defines the Template structure
        """
        return pulumi.get(self, "template")


@pulumi.output_type
class TalosConfigTemplateSpecTemplate(dict):
    """
    TalosConfigTemplateResource defines the Template structure
    """
    def __init__(__self__, *,
                 spec: Optional['outputs.TalosConfigTemplateSpecTemplateSpec'] = None):
        """
        TalosConfigTemplateResource defines the Template structure
        :param 'TalosConfigTemplateSpecTemplateSpecArgs' spec: TalosConfigSpec defines the desired state of TalosConfig
        """
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.TalosConfigTemplateSpecTemplateSpec']:
        """
        TalosConfigSpec defines the desired state of TalosConfig
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class TalosConfigTemplateSpecTemplateSpec(dict):
    """
    TalosConfigSpec defines the desired state of TalosConfig
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "generateType":
            suggest = "generate_type"
        elif key == "configPatches":
            suggest = "config_patches"
        elif key == "talosVersion":
            suggest = "talos_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosConfigTemplateSpecTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosConfigTemplateSpecTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosConfigTemplateSpecTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generate_type: str,
                 config_patches: Optional[Sequence['outputs.TalosConfigTemplateSpecTemplateSpecConfigPatches']] = None,
                 data: Optional[str] = None,
                 hostname: Optional['outputs.TalosConfigTemplateSpecTemplateSpecHostname'] = None,
                 talos_version: Optional[str] = None):
        """
        TalosConfigSpec defines the desired state of TalosConfig
        :param 'TalosConfigTemplateSpecTemplateSpecHostnameArgs' hostname: Set hostname in the machine configuration to some value.
        """
        pulumi.set(__self__, "generate_type", generate_type)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="generateType")
    def generate_type(self) -> str:
        return pulumi.get(self, "generate_type")

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[Sequence['outputs.TalosConfigTemplateSpecTemplateSpecConfigPatches']]:
        return pulumi.get(self, "config_patches")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.TalosConfigTemplateSpecTemplateSpecHostname']:
        """
        Set hostname in the machine configuration to some value.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[str]:
        return pulumi.get(self, "talos_version")


@pulumi.output_type
class TalosConfigTemplateSpecTemplateSpecConfigPatches(dict):
    def __init__(__self__, *,
                 op: str,
                 path: str,
                 value: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TalosConfigTemplateSpecTemplateSpecHostname(dict):
    """
    Set hostname in the machine configuration to some value.
    """
    def __init__(__self__, *,
                 source: Optional[str] = None):
        """
        Set hostname in the machine configuration to some value.
        :param str source: Source of the hostname. 
                Allowed values: "MachineName" (use linked Machine's Name).
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Source of the hostname. 
         Allowed values: "MachineName" (use linked Machine's Name).
        """
        return pulumi.get(self, "source")


