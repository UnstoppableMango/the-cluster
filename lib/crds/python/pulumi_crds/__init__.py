# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from . import _utilities
import typing
# Export this package's modules as members:
from .provider import *

# Make subpackages available:
if typing.TYPE_CHECKING:
    import pulumi_crds.acme as __acme
    acme = __acme
    import pulumi_crds.actions as __actions
    actions = __actions
    import pulumi_crds.addons as __addons
    addons = __addons
    import pulumi_crds.bootstrap as __bootstrap
    bootstrap = __bootstrap
    import pulumi_crds.certmanager as __certmanager
    certmanager = __certmanager
    import pulumi_crds.charts as __charts
    charts = __charts
    import pulumi_crds.cluster as __cluster
    cluster = __cluster
    import pulumi_crds.controlplane as __controlplane
    controlplane = __controlplane
    import pulumi_crds.externaldns as __externaldns
    externaldns = __externaldns
    import pulumi_crds.gateway as __gateway
    gateway = __gateway
    import pulumi_crds.gatewayoperator as __gatewayoperator
    gatewayoperator = __gatewayoperator
    import pulumi_crds.infrastructure as __infrastructure
    infrastructure = __infrastructure
    import pulumi_crds.ipam as __ipam
    ipam = __ipam
    import pulumi_crds.k8s as __k8s
    k8s = __k8s
    import pulumi_crds.meta as __meta
    meta = __meta
    import pulumi_crds.metal as __metal
    metal = __metal
    import pulumi_crds.minio as __minio
    minio = __minio
    import pulumi_crds.pulumi as __pulumi
    pulumi = __pulumi
    import pulumi_crds.runtime as __runtime
    runtime = __runtime
    import pulumi_crds.snapshot as __snapshot
    snapshot = __snapshot
    import pulumi_crds.sts as __sts
    sts = __sts
    import pulumi_crds.trust as __trust
    trust = __trust
else:
    acme = _utilities.lazy_import('pulumi_crds.acme')
    actions = _utilities.lazy_import('pulumi_crds.actions')
    addons = _utilities.lazy_import('pulumi_crds.addons')
    bootstrap = _utilities.lazy_import('pulumi_crds.bootstrap')
    certmanager = _utilities.lazy_import('pulumi_crds.certmanager')
    charts = _utilities.lazy_import('pulumi_crds.charts')
    cluster = _utilities.lazy_import('pulumi_crds.cluster')
    controlplane = _utilities.lazy_import('pulumi_crds.controlplane')
    externaldns = _utilities.lazy_import('pulumi_crds.externaldns')
    gateway = _utilities.lazy_import('pulumi_crds.gateway')
    gatewayoperator = _utilities.lazy_import('pulumi_crds.gatewayoperator')
    infrastructure = _utilities.lazy_import('pulumi_crds.infrastructure')
    ipam = _utilities.lazy_import('pulumi_crds.ipam')
    k8s = _utilities.lazy_import('pulumi_crds.k8s')
    meta = _utilities.lazy_import('pulumi_crds.meta')
    metal = _utilities.lazy_import('pulumi_crds.metal')
    minio = _utilities.lazy_import('pulumi_crds.minio')
    pulumi = _utilities.lazy_import('pulumi_crds.pulumi')
    runtime = _utilities.lazy_import('pulumi_crds.runtime')
    snapshot = _utilities.lazy_import('pulumi_crds.snapshot')
    sts = _utilities.lazy_import('pulumi_crds.sts')
    trust = _utilities.lazy_import('pulumi_crds.trust')

_utilities.register(
    resource_modules="""
[
 {
  "pkg": "crds",
  "mod": "acme.cert-manager.io/v1",
  "fqn": "pulumi_crds.acme.v1",
  "classes": {
   "kubernetes:acme.cert-manager.io/v1:Challenge": "Challenge",
   "kubernetes:acme.cert-manager.io/v1:Order": "Order"
  }
 },
 {
  "pkg": "crds",
  "mod": "actions.github.com/v1alpha1",
  "fqn": "pulumi_crds.actions.v1alpha1",
  "classes": {
   "kubernetes:actions.github.com/v1alpha1:AutoscalingListener": "AutoscalingListener",
   "kubernetes:actions.github.com/v1alpha1:AutoscalingRunnerSet": "AutoscalingRunnerSet",
   "kubernetes:actions.github.com/v1alpha1:EphemeralRunner": "EphemeralRunner",
   "kubernetes:actions.github.com/v1alpha1:EphemeralRunnerSet": "EphemeralRunnerSet"
  }
 },
 {
  "pkg": "crds",
  "mod": "addons.cluster.x-k8s.io/v1alpha3",
  "fqn": "pulumi_crds.addons.v1alpha3",
  "classes": {
   "kubernetes:addons.cluster.x-k8s.io/v1alpha3:ClusterResourceSet": "ClusterResourceSet",
   "kubernetes:addons.cluster.x-k8s.io/v1alpha3:ClusterResourceSetBinding": "ClusterResourceSetBinding"
  }
 },
 {
  "pkg": "crds",
  "mod": "addons.cluster.x-k8s.io/v1alpha4",
  "fqn": "pulumi_crds.addons.v1alpha4",
  "classes": {
   "kubernetes:addons.cluster.x-k8s.io/v1alpha4:ClusterResourceSet": "ClusterResourceSet",
   "kubernetes:addons.cluster.x-k8s.io/v1alpha4:ClusterResourceSetBinding": "ClusterResourceSetBinding"
  }
 },
 {
  "pkg": "crds",
  "mod": "addons.cluster.x-k8s.io/v1beta1",
  "fqn": "pulumi_crds.addons.v1beta1",
  "classes": {
   "kubernetes:addons.cluster.x-k8s.io/v1beta1:ClusterResourceSet": "ClusterResourceSet",
   "kubernetes:addons.cluster.x-k8s.io/v1beta1:ClusterResourceSetBinding": "ClusterResourceSetBinding"
  }
 },
 {
  "pkg": "crds",
  "mod": "bootstrap.cluster.x-k8s.io/v1alpha2",
  "fqn": "pulumi_crds.bootstrap.v1alpha2",
  "classes": {
   "kubernetes:bootstrap.cluster.x-k8s.io/v1alpha2:TalosConfig": "TalosConfig",
   "kubernetes:bootstrap.cluster.x-k8s.io/v1alpha2:TalosConfigTemplate": "TalosConfigTemplate"
  }
 },
 {
  "pkg": "crds",
  "mod": "bootstrap.cluster.x-k8s.io/v1alpha3",
  "fqn": "pulumi_crds.bootstrap.v1alpha3",
  "classes": {
   "kubernetes:bootstrap.cluster.x-k8s.io/v1alpha3:TalosConfig": "TalosConfig",
   "kubernetes:bootstrap.cluster.x-k8s.io/v1alpha3:TalosConfigTemplate": "TalosConfigTemplate"
  }
 },
 {
  "pkg": "crds",
  "mod": "cert-manager.io/v1",
  "fqn": "pulumi_crds.certmanager.v1",
  "classes": {
   "kubernetes:cert-manager.io/v1:Certificate": "Certificate",
   "kubernetes:cert-manager.io/v1:CertificateRequest": "CertificateRequest",
   "kubernetes:cert-manager.io/v1:ClusterIssuer": "ClusterIssuer",
   "kubernetes:cert-manager.io/v1:Issuer": "Issuer"
  }
 },
 {
  "pkg": "crds",
  "mod": "charts.nginx.org/v1alpha1",
  "fqn": "pulumi_crds.charts.v1alpha1",
  "classes": {
   "kubernetes:charts.nginx.org/v1alpha1:NginxIngress": "NginxIngress"
  }
 },
 {
  "pkg": "crds",
  "mod": "cluster.x-k8s.io/v1alpha3",
  "fqn": "pulumi_crds.cluster.v1alpha3",
  "classes": {
   "kubernetes:cluster.x-k8s.io/v1alpha3:Cluster": "Cluster",
   "kubernetes:cluster.x-k8s.io/v1alpha3:Machine": "Machine",
   "kubernetes:cluster.x-k8s.io/v1alpha3:MachineDeployment": "MachineDeployment",
   "kubernetes:cluster.x-k8s.io/v1alpha3:MachineHealthCheck": "MachineHealthCheck",
   "kubernetes:cluster.x-k8s.io/v1alpha3:MachinePool": "MachinePool",
   "kubernetes:cluster.x-k8s.io/v1alpha3:MachineSet": "MachineSet"
  }
 },
 {
  "pkg": "crds",
  "mod": "cluster.x-k8s.io/v1alpha4",
  "fqn": "pulumi_crds.cluster.v1alpha4",
  "classes": {
   "kubernetes:cluster.x-k8s.io/v1alpha4:Cluster": "Cluster",
   "kubernetes:cluster.x-k8s.io/v1alpha4:ClusterClass": "ClusterClass",
   "kubernetes:cluster.x-k8s.io/v1alpha4:Machine": "Machine",
   "kubernetes:cluster.x-k8s.io/v1alpha4:MachineDeployment": "MachineDeployment",
   "kubernetes:cluster.x-k8s.io/v1alpha4:MachineHealthCheck": "MachineHealthCheck",
   "kubernetes:cluster.x-k8s.io/v1alpha4:MachinePool": "MachinePool",
   "kubernetes:cluster.x-k8s.io/v1alpha4:MachineSet": "MachineSet"
  }
 },
 {
  "pkg": "crds",
  "mod": "cluster.x-k8s.io/v1beta1",
  "fqn": "pulumi_crds.cluster.v1beta1",
  "classes": {
   "kubernetes:cluster.x-k8s.io/v1beta1:Cluster": "Cluster",
   "kubernetes:cluster.x-k8s.io/v1beta1:ClusterClass": "ClusterClass",
   "kubernetes:cluster.x-k8s.io/v1beta1:Machine": "Machine",
   "kubernetes:cluster.x-k8s.io/v1beta1:MachineDeployment": "MachineDeployment",
   "kubernetes:cluster.x-k8s.io/v1beta1:MachineHealthCheck": "MachineHealthCheck",
   "kubernetes:cluster.x-k8s.io/v1beta1:MachinePool": "MachinePool",
   "kubernetes:cluster.x-k8s.io/v1beta1:MachineSet": "MachineSet"
  }
 },
 {
  "pkg": "crds",
  "mod": "controlplane.cluster.x-k8s.io/v1alpha3",
  "fqn": "pulumi_crds.controlplane.v1alpha3",
  "classes": {
   "kubernetes:controlplane.cluster.x-k8s.io/v1alpha3:TalosControlPlane": "TalosControlPlane"
  }
 },
 {
  "pkg": "crds",
  "mod": "externaldns.nginx.org/v1",
  "fqn": "pulumi_crds.externaldns.v1",
  "classes": {
   "kubernetes:externaldns.nginx.org/v1:DNSEndpoint": "DNSEndpoint"
  }
 },
 {
  "pkg": "crds",
  "mod": "gateway-operator.konghq.com/v1alpha1",
  "fqn": "pulumi_crds.gatewayoperator.v1alpha1",
  "classes": {
   "kubernetes:gateway-operator.konghq.com/v1alpha1:ControlPlane": "ControlPlane",
   "kubernetes:gateway-operator.konghq.com/v1alpha1:GatewayConfiguration": "GatewayConfiguration"
  }
 },
 {
  "pkg": "crds",
  "mod": "gateway-operator.konghq.com/v1beta1",
  "fqn": "pulumi_crds.gatewayoperator.v1beta1",
  "classes": {
   "kubernetes:gateway-operator.konghq.com/v1beta1:DataPlane": "DataPlane"
  }
 },
 {
  "pkg": "crds",
  "mod": "gateway.networking.k8s.io/v1",
  "fqn": "pulumi_crds.gateway.v1",
  "classes": {
   "kubernetes:gateway.networking.k8s.io/v1:Gateway": "Gateway",
   "kubernetes:gateway.networking.k8s.io/v1:GatewayClass": "GatewayClass",
   "kubernetes:gateway.networking.k8s.io/v1:HTTPRoute": "HTTPRoute"
  }
 },
 {
  "pkg": "crds",
  "mod": "gateway.networking.k8s.io/v1alpha2",
  "fqn": "pulumi_crds.gateway.v1alpha2",
  "classes": {
   "kubernetes:gateway.networking.k8s.io/v1alpha2:BackendTLSPolicy": "BackendTLSPolicy",
   "kubernetes:gateway.networking.k8s.io/v1alpha2:GRPCRoute": "GRPCRoute",
   "kubernetes:gateway.networking.k8s.io/v1alpha2:ReferenceGrant": "ReferenceGrant",
   "kubernetes:gateway.networking.k8s.io/v1alpha2:TCPRoute": "TCPRoute",
   "kubernetes:gateway.networking.k8s.io/v1alpha2:TLSRoute": "TLSRoute",
   "kubernetes:gateway.networking.k8s.io/v1alpha2:UDPRoute": "UDPRoute"
  }
 },
 {
  "pkg": "crds",
  "mod": "gateway.networking.k8s.io/v1beta1",
  "fqn": "pulumi_crds.gateway.v1beta1",
  "classes": {
   "kubernetes:gateway.networking.k8s.io/v1beta1:Gateway": "Gateway",
   "kubernetes:gateway.networking.k8s.io/v1beta1:GatewayClass": "GatewayClass",
   "kubernetes:gateway.networking.k8s.io/v1beta1:HTTPRoute": "HTTPRoute",
   "kubernetes:gateway.networking.k8s.io/v1beta1:ReferenceGrant": "ReferenceGrant"
  }
 },
 {
  "pkg": "crds",
  "mod": "infrastructure.cluster.x-k8s.io/v1alpha1",
  "fqn": "pulumi_crds.infrastructure.v1alpha1",
  "classes": {
   "kubernetes:infrastructure.cluster.x-k8s.io/v1alpha1:VCluster": "VCluster"
  }
 },
 {
  "pkg": "crds",
  "mod": "infrastructure.cluster.x-k8s.io/v1alpha2",
  "fqn": "pulumi_crds.infrastructure.v1alpha2",
  "classes": {
   "kubernetes:infrastructure.cluster.x-k8s.io/v1alpha2:MetalCluster": "MetalCluster",
   "kubernetes:infrastructure.cluster.x-k8s.io/v1alpha2:MetalMachine": "MetalMachine",
   "kubernetes:infrastructure.cluster.x-k8s.io/v1alpha2:MetalMachineTemplate": "MetalMachineTemplate"
  }
 },
 {
  "pkg": "crds",
  "mod": "infrastructure.cluster.x-k8s.io/v1alpha3",
  "fqn": "pulumi_crds.infrastructure.v1alpha3",
  "classes": {
   "kubernetes:infrastructure.cluster.x-k8s.io/v1alpha3:MetalCluster": "MetalCluster",
   "kubernetes:infrastructure.cluster.x-k8s.io/v1alpha3:MetalMachine": "MetalMachine",
   "kubernetes:infrastructure.cluster.x-k8s.io/v1alpha3:MetalMachineTemplate": "MetalMachineTemplate",
   "kubernetes:infrastructure.cluster.x-k8s.io/v1alpha3:ServerBinding": "ServerBinding"
  }
 },
 {
  "pkg": "crds",
  "mod": "infrastructure.cluster.x-k8s.io/v1beta1",
  "fqn": "pulumi_crds.infrastructure.v1beta1",
  "classes": {
   "kubernetes:infrastructure.cluster.x-k8s.io/v1beta1:ProxmoxCluster": "ProxmoxCluster",
   "kubernetes:infrastructure.cluster.x-k8s.io/v1beta1:ProxmoxMachine": "ProxmoxMachine",
   "kubernetes:infrastructure.cluster.x-k8s.io/v1beta1:ProxmoxMachineTemplate": "ProxmoxMachineTemplate"
  }
 },
 {
  "pkg": "crds",
  "mod": "ipam.cluster.x-k8s.io/v1alpha1",
  "fqn": "pulumi_crds.ipam.v1alpha1",
  "classes": {
   "kubernetes:ipam.cluster.x-k8s.io/v1alpha1:IPAddress": "IPAddress",
   "kubernetes:ipam.cluster.x-k8s.io/v1alpha1:IPAddressClaim": "IPAddressClaim"
  }
 },
 {
  "pkg": "crds",
  "mod": "k8s.nginx.org/v1",
  "fqn": "pulumi_crds.k8s.v1",
  "classes": {
   "kubernetes:k8s.nginx.org/v1:GlobalConfiguration": "GlobalConfiguration",
   "kubernetes:k8s.nginx.org/v1:Policy": "Policy",
   "kubernetes:k8s.nginx.org/v1:TransportServer": "TransportServer",
   "kubernetes:k8s.nginx.org/v1:VirtualServer": "VirtualServer",
   "kubernetes:k8s.nginx.org/v1:VirtualServerRoute": "VirtualServerRoute"
  }
 },
 {
  "pkg": "crds",
  "mod": "k8s.nginx.org/v1alpha1",
  "fqn": "pulumi_crds.k8s.v1alpha1",
  "classes": {
   "kubernetes:k8s.nginx.org/v1alpha1:GlobalConfiguration": "GlobalConfiguration",
   "kubernetes:k8s.nginx.org/v1alpha1:Policy": "Policy",
   "kubernetes:k8s.nginx.org/v1alpha1:TransportServer": "TransportServer"
  }
 },
 {
  "pkg": "crds",
  "mod": "metal.sidero.dev/v1alpha1",
  "fqn": "pulumi_crds.metal.v1alpha1",
  "classes": {
   "kubernetes:metal.sidero.dev/v1alpha1:Environment": "Environment",
   "kubernetes:metal.sidero.dev/v1alpha1:Server": "Server",
   "kubernetes:metal.sidero.dev/v1alpha1:ServerClass": "ServerClass"
  }
 },
 {
  "pkg": "crds",
  "mod": "metal.sidero.dev/v1alpha2",
  "fqn": "pulumi_crds.metal.v1alpha2",
  "classes": {
   "kubernetes:metal.sidero.dev/v1alpha2:Environment": "Environment",
   "kubernetes:metal.sidero.dev/v1alpha2:Server": "Server",
   "kubernetes:metal.sidero.dev/v1alpha2:ServerClass": "ServerClass"
  }
 },
 {
  "pkg": "crds",
  "mod": "minio.min.io/v2",
  "fqn": "pulumi_crds.minio.v2",
  "classes": {
   "kubernetes:minio.min.io/v2:Tenant": "Tenant"
  }
 },
 {
  "pkg": "crds",
  "mod": "pulumi.com/v1",
  "fqn": "pulumi_crds.pulumi.v1",
  "classes": {
   "kubernetes:pulumi.com/v1:Program": "Program",
   "kubernetes:pulumi.com/v1:Stack": "Stack"
  }
 },
 {
  "pkg": "crds",
  "mod": "pulumi.com/v1alpha1",
  "fqn": "pulumi_crds.pulumi.v1alpha1",
  "classes": {
   "kubernetes:pulumi.com/v1alpha1:Stack": "Stack"
  }
 },
 {
  "pkg": "crds",
  "mod": "runtime.cluster.x-k8s.io/v1alpha1",
  "fqn": "pulumi_crds.runtime.v1alpha1",
  "classes": {
   "kubernetes:runtime.cluster.x-k8s.io/v1alpha1:ExtensionConfig": "ExtensionConfig"
  }
 },
 {
  "pkg": "crds",
  "mod": "snapshot.storage.k8s.io/v1",
  "fqn": "pulumi_crds.snapshot.v1",
  "classes": {
   "kubernetes:snapshot.storage.k8s.io/v1:VolumeSnapshot": "VolumeSnapshot",
   "kubernetes:snapshot.storage.k8s.io/v1:VolumeSnapshotClass": "VolumeSnapshotClass",
   "kubernetes:snapshot.storage.k8s.io/v1:VolumeSnapshotContent": "VolumeSnapshotContent"
  }
 },
 {
  "pkg": "crds",
  "mod": "snapshot.storage.k8s.io/v1beta1",
  "fqn": "pulumi_crds.snapshot.v1beta1",
  "classes": {
   "kubernetes:snapshot.storage.k8s.io/v1beta1:VolumeSnapshot": "VolumeSnapshot",
   "kubernetes:snapshot.storage.k8s.io/v1beta1:VolumeSnapshotClass": "VolumeSnapshotClass",
   "kubernetes:snapshot.storage.k8s.io/v1beta1:VolumeSnapshotContent": "VolumeSnapshotContent"
  }
 },
 {
  "pkg": "crds",
  "mod": "sts.min.io/v1alpha1",
  "fqn": "pulumi_crds.sts.v1alpha1",
  "classes": {
   "kubernetes:sts.min.io/v1alpha1:PolicyBinding": "PolicyBinding"
  }
 },
 {
  "pkg": "crds",
  "mod": "trust.cert-manager.io/v1alpha1",
  "fqn": "pulumi_crds.trust.v1alpha1",
  "classes": {
   "kubernetes:trust.cert-manager.io/v1alpha1:Bundle": "Bundle"
  }
 }
]
""",
    resource_packages="""
[
 {
  "pkg": "crds",
  "token": "pulumi:providers:crds",
  "fqn": "pulumi_crds",
  "class": "Provider"
 }
]
"""
)
