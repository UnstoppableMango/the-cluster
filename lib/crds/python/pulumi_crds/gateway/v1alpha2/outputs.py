# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'BackendTLSPolicySpec',
    'BackendTLSPolicySpecTargetRef',
    'BackendTLSPolicySpecTls',
    'BackendTLSPolicySpecTlsCaCertRefs',
    'BackendTLSPolicyStatus',
    'BackendTLSPolicyStatusAncestors',
    'BackendTLSPolicyStatusAncestorsAncestorRef',
    'BackendTLSPolicyStatusAncestorsConditions',
    'GRPCRouteSpec',
    'GRPCRouteSpecParentRefs',
    'GRPCRouteSpecRules',
    'GRPCRouteSpecRulesBackendRefs',
    'GRPCRouteSpecRulesBackendRefsFilters',
    'GRPCRouteSpecRulesBackendRefsFiltersExtensionRef',
    'GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier',
    'GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd',
    'GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet',
    'GRPCRouteSpecRulesBackendRefsFiltersRequestMirror',
    'GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef',
    'GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier',
    'GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd',
    'GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet',
    'GRPCRouteSpecRulesFilters',
    'GRPCRouteSpecRulesFiltersExtensionRef',
    'GRPCRouteSpecRulesFiltersRequestHeaderModifier',
    'GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd',
    'GRPCRouteSpecRulesFiltersRequestHeaderModifierSet',
    'GRPCRouteSpecRulesFiltersRequestMirror',
    'GRPCRouteSpecRulesFiltersRequestMirrorBackendRef',
    'GRPCRouteSpecRulesFiltersResponseHeaderModifier',
    'GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd',
    'GRPCRouteSpecRulesFiltersResponseHeaderModifierSet',
    'GRPCRouteSpecRulesMatches',
    'GRPCRouteSpecRulesMatchesHeaders',
    'GRPCRouteSpecRulesMatchesMethod',
    'GRPCRouteStatus',
    'GRPCRouteStatusParents',
    'GRPCRouteStatusParentsConditions',
    'GRPCRouteStatusParentsParentRef',
    'ReferenceGrantSpec',
    'ReferenceGrantSpecFrom',
    'ReferenceGrantSpecTo',
    'TCPRouteSpec',
    'TCPRouteSpecParentRefs',
    'TCPRouteSpecRules',
    'TCPRouteSpecRulesBackendRefs',
    'TCPRouteStatus',
    'TCPRouteStatusParents',
    'TCPRouteStatusParentsConditions',
    'TCPRouteStatusParentsParentRef',
    'TLSRouteSpec',
    'TLSRouteSpecParentRefs',
    'TLSRouteSpecRules',
    'TLSRouteSpecRulesBackendRefs',
    'TLSRouteStatus',
    'TLSRouteStatusParents',
    'TLSRouteStatusParentsConditions',
    'TLSRouteStatusParentsParentRef',
    'UDPRouteSpec',
    'UDPRouteSpecParentRefs',
    'UDPRouteSpecRules',
    'UDPRouteSpecRulesBackendRefs',
    'UDPRouteStatus',
    'UDPRouteStatusParents',
    'UDPRouteStatusParentsConditions',
    'UDPRouteStatusParentsParentRef',
]

@pulumi.output_type
class BackendTLSPolicySpec(dict):
    """
    Spec defines the desired state of BackendTLSPolicy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetRef":
            suggest = "target_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendTLSPolicySpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendTLSPolicySpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendTLSPolicySpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_ref: 'outputs.BackendTLSPolicySpecTargetRef',
                 tls: 'outputs.BackendTLSPolicySpecTls'):
        """
        Spec defines the desired state of BackendTLSPolicy.
        :param 'BackendTLSPolicySpecTargetRefArgs' target_ref: TargetRef identifies an API object to apply the policy to. Only Services have Extended support. Implementations MAY support additional objects, with Implementation Specific support. Note that this config applies to the entire referenced resource by default, but this default may change in the future to provide a more granular application of the policy. 
                Support: Extended for Kubernetes Service 
                Support: Implementation-specific for any other resource
        :param 'BackendTLSPolicySpecTlsArgs' tls: TLS contains backend TLS policy configuration.
        """
        pulumi.set(__self__, "target_ref", target_ref)
        pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="targetRef")
    def target_ref(self) -> 'outputs.BackendTLSPolicySpecTargetRef':
        """
        TargetRef identifies an API object to apply the policy to. Only Services have Extended support. Implementations MAY support additional objects, with Implementation Specific support. Note that this config applies to the entire referenced resource by default, but this default may change in the future to provide a more granular application of the policy. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        """
        return pulumi.get(self, "target_ref")

    @property
    @pulumi.getter
    def tls(self) -> 'outputs.BackendTLSPolicySpecTls':
        """
        TLS contains backend TLS policy configuration.
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class BackendTLSPolicySpecTargetRef(dict):
    """
    TargetRef identifies an API object to apply the policy to. Only Services have Extended support. Implementations MAY support additional objects, with Implementation Specific support. Note that this config applies to the entire referenced resource by default, but this default may change in the future to provide a more granular application of the policy. 
     Support: Extended for Kubernetes Service 
     Support: Implementation-specific for any other resource
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendTLSPolicySpecTargetRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendTLSPolicySpecTargetRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendTLSPolicySpecTargetRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: str,
                 kind: str,
                 name: str,
                 namespace: Optional[str] = None,
                 section_name: Optional[str] = None):
        """
        TargetRef identifies an API object to apply the policy to. Only Services have Extended support. Implementations MAY support additional objects, with Implementation Specific support. Note that this config applies to the entire referenced resource by default, but this default may change in the future to provide a more granular application of the policy. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        :param str group: Group is the group of the target resource.
        :param str kind: Kind is kind of the target resource.
        :param str name: Name is the name of the target resource.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, the local namespace is inferred. Even when policy targets a resource in a different namespace, it MUST only apply to traffic originating from the same namespace as the policy.
        :param str section_name: SectionName is the name of a section within the target resource. When unspecified, this targetRef targets the entire resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name * Service: Port Name 
                If a SectionName is specified, but does not exist on the targeted object, the Policy must fail to attach, and the policy implementation should record a `ResolvedRefs` or similar Condition in the Policy's status.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Group is the group of the target resource.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is kind of the target resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the target resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, the local namespace is inferred. Even when policy targets a resource in a different namespace, it MUST only apply to traffic originating from the same namespace as the policy.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. When unspecified, this targetRef targets the entire resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name * Service: Port Name 
         If a SectionName is specified, but does not exist on the targeted object, the Policy must fail to attach, and the policy implementation should record a `ResolvedRefs` or similar Condition in the Policy's status.
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class BackendTLSPolicySpecTls(dict):
    """
    TLS contains backend TLS policy configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertRefs":
            suggest = "ca_cert_refs"
        elif key == "wellKnownCACerts":
            suggest = "well_known_ca_certs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendTLSPolicySpecTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendTLSPolicySpecTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendTLSPolicySpecTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: str,
                 ca_cert_refs: Optional[Sequence['outputs.BackendTLSPolicySpecTlsCaCertRefs']] = None,
                 well_known_ca_certs: Optional[str] = None):
        """
        TLS contains backend TLS policy configuration.
        :param str hostname: Hostname is used for two purposes in the connection between Gateways and backends: 
                1. Hostname MUST be used as the SNI to connect to the backend (RFC 6066). 2. Hostname MUST be used for authentication and MUST match the certificate served by the matching backend. 
                Support: Core
        :param Sequence['BackendTLSPolicySpecTlsCaCertRefsArgs'] ca_cert_refs: CACertRefs contains one or more references to Kubernetes objects that contain a PEM-encoded TLS CA certificate bundle, which is used to validate a TLS handshake between the Gateway and backend Pod. 
                If CACertRefs is empty or unspecified, then WellKnownCACerts must be specified. Only one of CACertRefs or WellKnownCACerts may be specified, not both. If CACertRefs is empty or unspecified, the configuration for WellKnownCACerts MUST be honored instead. 
                References to a resource in a different namespace are invalid for the moment, although we will revisit this in the future. 
                A single CACertRef to a Kubernetes ConfigMap kind has "Core" support. Implementations MAY choose to support attaching multiple certificates to a backend, but this behavior is implementation-specific. 
                Support: Core - An optional single reference to a Kubernetes ConfigMap, with the CA certificate in a key named `ca.crt`. 
                Support: Implementation-specific (More than one reference, or other kinds of resources).
        :param str well_known_ca_certs: WellKnownCACerts specifies whether system CA certificates may be used in the TLS handshake between the gateway and backend pod. 
                If WellKnownCACerts is unspecified or empty (""), then CACertRefs must be specified with at least one entry for a valid configuration. Only one of CACertRefs or WellKnownCACerts may be specified, not both. 
                Support: Core for "System"
        """
        pulumi.set(__self__, "hostname", hostname)
        if ca_cert_refs is not None:
            pulumi.set(__self__, "ca_cert_refs", ca_cert_refs)
        if well_known_ca_certs is not None:
            pulumi.set(__self__, "well_known_ca_certs", well_known_ca_certs)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Hostname is used for two purposes in the connection between Gateways and backends: 
         1. Hostname MUST be used as the SNI to connect to the backend (RFC 6066). 2. Hostname MUST be used for authentication and MUST match the certificate served by the matching backend. 
         Support: Core
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="caCertRefs")
    def ca_cert_refs(self) -> Optional[Sequence['outputs.BackendTLSPolicySpecTlsCaCertRefs']]:
        """
        CACertRefs contains one or more references to Kubernetes objects that contain a PEM-encoded TLS CA certificate bundle, which is used to validate a TLS handshake between the Gateway and backend Pod. 
         If CACertRefs is empty or unspecified, then WellKnownCACerts must be specified. Only one of CACertRefs or WellKnownCACerts may be specified, not both. If CACertRefs is empty or unspecified, the configuration for WellKnownCACerts MUST be honored instead. 
         References to a resource in a different namespace are invalid for the moment, although we will revisit this in the future. 
         A single CACertRef to a Kubernetes ConfigMap kind has "Core" support. Implementations MAY choose to support attaching multiple certificates to a backend, but this behavior is implementation-specific. 
         Support: Core - An optional single reference to a Kubernetes ConfigMap, with the CA certificate in a key named `ca.crt`. 
         Support: Implementation-specific (More than one reference, or other kinds of resources).
        """
        return pulumi.get(self, "ca_cert_refs")

    @property
    @pulumi.getter(name="wellKnownCACerts")
    def well_known_ca_certs(self) -> Optional[str]:
        """
        WellKnownCACerts specifies whether system CA certificates may be used in the TLS handshake between the gateway and backend pod. 
         If WellKnownCACerts is unspecified or empty (""), then CACertRefs must be specified with at least one entry for a valid configuration. Only one of CACertRefs or WellKnownCACerts may be specified, not both. 
         Support: Core for "System"
        """
        return pulumi.get(self, "well_known_ca_certs")


@pulumi.output_type
class BackendTLSPolicySpecTlsCaCertRefs(dict):
    """
    LocalObjectReference identifies an API object within the namespace of the referrer. The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
     References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str,
                 name: str):
        """
        LocalObjectReference identifies an API object within the namespace of the referrer. The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is kind of the referent. For example "HTTPRoute" or "Service".
        :param str name: Name is the name of the referent.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is kind of the referent. For example "HTTPRoute" or "Service".
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BackendTLSPolicyStatus(dict):
    """
    Status defines the current state of BackendTLSPolicy.
    """
    def __init__(__self__, *,
                 ancestors: Sequence['outputs.BackendTLSPolicyStatusAncestors']):
        """
        Status defines the current state of BackendTLSPolicy.
        :param Sequence['BackendTLSPolicyStatusAncestorsArgs'] ancestors: Ancestors is a list of ancestor resources (usually Gateways) that are associated with the policy, and the status of the policy with respect to each ancestor. When this policy attaches to a parent, the controller that manages the parent and the ancestors MUST add an entry to this list when the controller first sees the policy and SHOULD update the entry as appropriate when the relevant ancestor is modified. 
                Note that choosing the relevant ancestor is left to the Policy designers; an important part of Policy design is designing the right object level at which to namespace this status. 
                Note also that implementations MUST ONLY populate ancestor status for the Ancestor resources they are responsible for. Implementations MUST use the ControllerName field to uniquely identify the entries in this list that they are responsible for. 
                Note that to achieve this, the list of PolicyAncestorStatus structs MUST be treated as a map with a composite key, made up of the AncestorRef and ControllerName fields combined. 
                A maximum of 16 ancestors will be represented in this list. An empty list means the Policy is not relevant for any ancestors. 
                If this slice is full, implementations MUST NOT add further entries. Instead they MUST consider the policy unimplementable and signal that on any related resources such as the ancestor that would be referenced here. For example, if this list was full on BackendTLSPolicy, no additional Gateways would be able to reference the Service targeted by the BackendTLSPolicy.
        """
        pulumi.set(__self__, "ancestors", ancestors)

    @property
    @pulumi.getter
    def ancestors(self) -> Sequence['outputs.BackendTLSPolicyStatusAncestors']:
        """
        Ancestors is a list of ancestor resources (usually Gateways) that are associated with the policy, and the status of the policy with respect to each ancestor. When this policy attaches to a parent, the controller that manages the parent and the ancestors MUST add an entry to this list when the controller first sees the policy and SHOULD update the entry as appropriate when the relevant ancestor is modified. 
         Note that choosing the relevant ancestor is left to the Policy designers; an important part of Policy design is designing the right object level at which to namespace this status. 
         Note also that implementations MUST ONLY populate ancestor status for the Ancestor resources they are responsible for. Implementations MUST use the ControllerName field to uniquely identify the entries in this list that they are responsible for. 
         Note that to achieve this, the list of PolicyAncestorStatus structs MUST be treated as a map with a composite key, made up of the AncestorRef and ControllerName fields combined. 
         A maximum of 16 ancestors will be represented in this list. An empty list means the Policy is not relevant for any ancestors. 
         If this slice is full, implementations MUST NOT add further entries. Instead they MUST consider the policy unimplementable and signal that on any related resources such as the ancestor that would be referenced here. For example, if this list was full on BackendTLSPolicy, no additional Gateways would be able to reference the Service targeted by the BackendTLSPolicy.
        """
        return pulumi.get(self, "ancestors")


@pulumi.output_type
class BackendTLSPolicyStatusAncestors(dict):
    """
    PolicyAncestorStatus describes the status of a route with respect to an associated Ancestor. 
     Ancestors refer to objects that are either the Target of a policy or above it in terms of object hierarchy. For example, if a policy targets a Service, the Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most useful object to place Policy status on, so we recommend that implementations SHOULD use Gateway as the PolicyAncestorStatus object unless the designers have a _very_ good reason otherwise. 
     In the context of policy attachment, the Ancestor is used to distinguish which resource results in a distinct application of this policy. For example, if a policy targets a Service, it may have a distinct result per attached Gateway. 
     Policies targeting the same resource may have different effects depending on the ancestors of those resources. For example, different Gateways targeting the same Service may have different capabilities, especially if they have different underlying implementations. 
     For example, in BackendTLSPolicy, the Policy attaches to a Service that is used as a backend in a HTTPRoute that is itself attached to a Gateway. In this case, the relevant object for status is the Gateway, and that is the ancestor object referred to in this status. 
     Note that a parent is also an ancestor, so for objects where the parent is the relevant object for status, this struct SHOULD still be used. 
     This struct is intended to be used in a slice that's effectively a map, with a composite key made up of the AncestorRef and the ControllerName.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ancestorRef":
            suggest = "ancestor_ref"
        elif key == "controllerName":
            suggest = "controller_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendTLSPolicyStatusAncestors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendTLSPolicyStatusAncestors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendTLSPolicyStatusAncestors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ancestor_ref: 'outputs.BackendTLSPolicyStatusAncestorsAncestorRef',
                 controller_name: str,
                 conditions: Optional[Sequence['outputs.BackendTLSPolicyStatusAncestorsConditions']] = None):
        """
        PolicyAncestorStatus describes the status of a route with respect to an associated Ancestor. 
         Ancestors refer to objects that are either the Target of a policy or above it in terms of object hierarchy. For example, if a policy targets a Service, the Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most useful object to place Policy status on, so we recommend that implementations SHOULD use Gateway as the PolicyAncestorStatus object unless the designers have a _very_ good reason otherwise. 
         In the context of policy attachment, the Ancestor is used to distinguish which resource results in a distinct application of this policy. For example, if a policy targets a Service, it may have a distinct result per attached Gateway. 
         Policies targeting the same resource may have different effects depending on the ancestors of those resources. For example, different Gateways targeting the same Service may have different capabilities, especially if they have different underlying implementations. 
         For example, in BackendTLSPolicy, the Policy attaches to a Service that is used as a backend in a HTTPRoute that is itself attached to a Gateway. In this case, the relevant object for status is the Gateway, and that is the ancestor object referred to in this status. 
         Note that a parent is also an ancestor, so for objects where the parent is the relevant object for status, this struct SHOULD still be used. 
         This struct is intended to be used in a slice that's effectively a map, with a composite key made up of the AncestorRef and the ControllerName.
        :param 'BackendTLSPolicyStatusAncestorsAncestorRefArgs' ancestor_ref: AncestorRef corresponds with a ParentRef in the spec that this PolicyAncestorStatus struct describes the status of.
        :param str controller_name: ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
                Example: "example.net/gateway-controller". 
                The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
                Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        :param Sequence['BackendTLSPolicyStatusAncestorsConditionsArgs'] conditions: Conditions describes the status of the Policy with respect to the given Ancestor.
        """
        pulumi.set(__self__, "ancestor_ref", ancestor_ref)
        pulumi.set(__self__, "controller_name", controller_name)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter(name="ancestorRef")
    def ancestor_ref(self) -> 'outputs.BackendTLSPolicyStatusAncestorsAncestorRef':
        """
        AncestorRef corresponds with a ParentRef in the spec that this PolicyAncestorStatus struct describes the status of.
        """
        return pulumi.get(self, "ancestor_ref")

    @property
    @pulumi.getter(name="controllerName")
    def controller_name(self) -> str:
        """
        ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
         Example: "example.net/gateway-controller". 
         The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
         Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        """
        return pulumi.get(self, "controller_name")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.BackendTLSPolicyStatusAncestorsConditions']]:
        """
        Conditions describes the status of the Policy with respect to the given Ancestor.
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class BackendTLSPolicyStatusAncestorsAncestorRef(dict):
    """
    AncestorRef corresponds with a ParentRef in the spec that this PolicyAncestorStatus struct describes the status of.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendTLSPolicyStatusAncestorsAncestorRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendTLSPolicyStatusAncestorsAncestorRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendTLSPolicyStatusAncestorsAncestorRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        AncestorRef corresponds with a ParentRef in the spec that this PolicyAncestorStatus struct describes the status of.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class BackendTLSPolicyStatusAncestorsConditions(dict):
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackendTLSPolicyStatusAncestorsConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackendTLSPolicyStatusAncestorsConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackendTLSPolicyStatusAncestorsConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 message: str,
                 reason: str,
                 status: str,
                 type: str,
                 observed_generation: Optional[int] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param str last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param str message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param str reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param str status: status of the condition, one of True, False, Unknown.
        :param str type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param int observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class GRPCRouteSpec(dict):
    """
    Spec defines the desired state of GRPCRoute.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentRefs":
            suggest = "parent_refs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostnames: Optional[Sequence[str]] = None,
                 parent_refs: Optional[Sequence['outputs.GRPCRouteSpecParentRefs']] = None,
                 rules: Optional[Sequence['outputs.GRPCRouteSpecRules']] = None):
        """
        Spec defines the desired state of GRPCRoute.
        :param Sequence[str] hostnames: Hostnames defines a set of hostnames to match against the GRPC Host header to select a GRPCRoute to process the request. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: 
                1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label MUST appear by itself as the first label. 
                If a hostname is specified by both the Listener and GRPCRoute, there MUST be at least one intersecting hostname for the GRPCRoute to be attached to the Listener. For example: 
                * A Listener with `test.example.com` as the hostname matches GRPCRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches GRPCRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `test.example.com` and `*.example.com` would both match. On the other hand, `example.com` and `test.example.net` would not match. 
                Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
                If both the Listener and GRPCRoute have specified hostnames, any GRPCRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the GRPCRoute specified `test.example.com` and `test.example.net`, `test.example.net` MUST NOT be considered for a match. 
                If both the Listener and GRPCRoute have specified hostnames, and none match with the criteria above, then the GRPCRoute MUST NOT be accepted by the implementation. The implementation MUST raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
                If a Route (A) of type HTTPRoute or GRPCRoute is attached to a Listener and that listener already has another Route (B) of the other type attached and the intersection of the hostnames of A and B is non-empty, then the implementation MUST accept exactly one of these two routes, determined by the following criteria, in order: 
                * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
                The rejected Route MUST raise an 'Accepted' condition with a status of 'False' in the corresponding RouteParentStatus. 
                Support: Core
        :param Sequence['GRPCRouteSpecParentRefsArgs'] parent_refs: ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
                ParentRefs must be _distinct_. This means either that: 
                * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
                Some examples: 
                * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
                It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
                Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                
        :param Sequence['GRPCRouteSpecRulesArgs'] rules: Rules are a list of GRPC matchers, filters and actions.
        """
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        """
        Hostnames defines a set of hostnames to match against the GRPC Host header to select a GRPCRoute to process the request. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: 
         1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label MUST appear by itself as the first label. 
         If a hostname is specified by both the Listener and GRPCRoute, there MUST be at least one intersecting hostname for the GRPCRoute to be attached to the Listener. For example: 
         * A Listener with `test.example.com` as the hostname matches GRPCRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches GRPCRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `test.example.com` and `*.example.com` would both match. On the other hand, `example.com` and `test.example.net` would not match. 
         Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
         If both the Listener and GRPCRoute have specified hostnames, any GRPCRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the GRPCRoute specified `test.example.com` and `test.example.net`, `test.example.net` MUST NOT be considered for a match. 
         If both the Listener and GRPCRoute have specified hostnames, and none match with the criteria above, then the GRPCRoute MUST NOT be accepted by the implementation. The implementation MUST raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
         If a Route (A) of type HTTPRoute or GRPCRoute is attached to a Listener and that listener already has another Route (B) of the other type attached and the intersection of the hostnames of A and B is non-empty, then the implementation MUST accept exactly one of these two routes, determined by the following criteria, in order: 
         * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
         The rejected Route MUST raise an 'Accepted' condition with a status of 'False' in the corresponding RouteParentStatus. 
         Support: Core
        """
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(self) -> Optional[Sequence['outputs.GRPCRouteSpecParentRefs']]:
        """
        ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
         ParentRefs must be _distinct_. This means either that: 
         * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
         Some examples: 
         * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
         It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
         Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         
        """
        return pulumi.get(self, "parent_refs")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GRPCRouteSpecRules']]:
        """
        Rules are a list of GRPC matchers, filters and actions.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GRPCRouteSpecParentRefs(dict):
    """
    ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
     * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
     This API may be extended in the future to support additional kinds of parent resources. 
     The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteSpecParentRefs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteSpecParentRefs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteSpecParentRefs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         This API may be extended in the future to support additional kinds of parent resources. 
         The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class GRPCRouteSpecRules(dict):
    """
    GRPCRouteRule defines the semantics for matching a gRPC request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendRefs":
            suggest = "backend_refs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteSpecRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteSpecRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteSpecRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_refs: Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefs']] = None,
                 filters: Optional[Sequence['outputs.GRPCRouteSpecRulesFilters']] = None,
                 matches: Optional[Sequence['outputs.GRPCRouteSpecRulesMatches']] = None):
        """
        GRPCRouteRule defines the semantics for matching a gRPC request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
        :param Sequence['GRPCRouteSpecRulesBackendRefsArgs'] backend_refs: BackendRefs defines the backend(s) where matching requests should be sent. 
                Failure behavior here depends on how many BackendRefs are specified and how many are invalid. 
                If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive an `UNAVAILABLE` status. 
                See the GRPCBackendRef definition for the rules about what makes a single GRPCBackendRef invalid. 
                When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive an `UNAVAILABLE` status. 
                For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status. Implementations may choose how that 50 percent is determined. 
                Support: Core for Kubernetes Service 
                Support: Implementation-specific for any other resource 
                Support for weight: Core
        :param Sequence['GRPCRouteSpecRulesFiltersArgs'] filters: Filters define the filters that are applied to requests that match this rule. 
                The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
                Conformance-levels at this level are defined based on the type of filter: 
                - ALL core filters MUST be supported by all implementations that support GRPCRoute. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. 
                Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. 
                If an implementation can not support a combination of filters, it must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error. 
                Support: Core
        :param Sequence['GRPCRouteSpecRulesMatchesArgs'] matches: Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
                For example, take the following matches configuration: 
                ``` matches: - method: service: foo.bar headers: values: version: 2 - method: service: foo.bar.v2 ``` 
                For a request to match against this rule, it MUST satisfy EITHER of the two conditions: 
                - service of foo.bar AND contains the header `version: 2` - service of foo.bar.v2 
                See the documentation for GRPCRouteMatch on how to specify multiple match conditions to be ANDed together. 
                If no matches are specified, the implementation MUST match every gRPC request. 
                Proxy or Load Balancer routing configuration generated from GRPCRoutes MUST prioritize rules based on the following criteria, continuing on ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes. Precedence MUST be given to the rule with the largest number of: 
                * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching service. * Characters in a matching method. * Header matches. 
                If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
                * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
                If ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria.
        """
        if backend_refs is not None:
            pulumi.set(__self__, "backend_refs", backend_refs)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)

    @property
    @pulumi.getter(name="backendRefs")
    def backend_refs(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefs']]:
        """
        BackendRefs defines the backend(s) where matching requests should be sent. 
         Failure behavior here depends on how many BackendRefs are specified and how many are invalid. 
         If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive an `UNAVAILABLE` status. 
         See the GRPCBackendRef definition for the rules about what makes a single GRPCBackendRef invalid. 
         When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive an `UNAVAILABLE` status. 
         For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status. Implementations may choose how that 50 percent is determined. 
         Support: Core for Kubernetes Service 
         Support: Implementation-specific for any other resource 
         Support for weight: Core
        """
        return pulumi.get(self, "backend_refs")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesFilters']]:
        """
        Filters define the filters that are applied to requests that match this rule. 
         The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
         Conformance-levels at this level are defined based on the type of filter: 
         - ALL core filters MUST be supported by all implementations that support GRPCRoute. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. 
         Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. 
         If an implementation can not support a combination of filters, it must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error. 
         Support: Core
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesMatches']]:
        """
        Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
         For example, take the following matches configuration: 
         ``` matches: - method: service: foo.bar headers: values: version: 2 - method: service: foo.bar.v2 ``` 
         For a request to match against this rule, it MUST satisfy EITHER of the two conditions: 
         - service of foo.bar AND contains the header `version: 2` - service of foo.bar.v2 
         See the documentation for GRPCRouteMatch on how to specify multiple match conditions to be ANDed together. 
         If no matches are specified, the implementation MUST match every gRPC request. 
         Proxy or Load Balancer routing configuration generated from GRPCRoutes MUST prioritize rules based on the following criteria, continuing on ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes. Precedence MUST be given to the rule with the largest number of: 
         * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching service. * Characters in a matching method. * Header matches. 
         If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
         * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
         If ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria.
        """
        return pulumi.get(self, "matches")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefs(dict):
    """
    GRPCBackendRef defines how a GRPCRoute forwards a gRPC request. 
     Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
     <gateway:experimental:description> 
     When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
     Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
     If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
     If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
     </gateway:experimental:description>
    """
    def __init__(__self__, *,
                 name: str,
                 filters: Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFilters']] = None,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 weight: Optional[int] = None):
        """
        GRPCBackendRef defines how a GRPCRoute forwards a gRPC request. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         <gateway:experimental:description> 
         When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         </gateway:experimental:description>
        :param str name: Name is the name of the referent.
        :param Sequence['GRPCRouteSpecRulesBackendRefsFiltersArgs'] filters: Filters defined at this level MUST be executed if and only if the request is being forwarded to the backend defined here. 
                Support: Implementation-specific (For broader support of filters, use the Filters field in GRPCRouteRule.)
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param str namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param int port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        :param int weight: Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
                If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
                Support for this field varies based on the context where used.
        """
        pulumi.set(__self__, "name", name)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if weight is None:
            weight = 1
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFilters']]:
        """
        Filters defined at this level MUST be executed if and only if the request is being forwarded to the backend defined here. 
         Support: Implementation-specific (For broader support of filters, use the Filters field in GRPCRouteRule.)
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
         If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
         Support for this field varies based on the context where used.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFilters(dict):
    """
    GRPCRouteFilter defines processing steps that must be completed during the request or response lifecycle. GRPCRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extensionRef":
            suggest = "extension_ref"
        elif key == "requestHeaderModifier":
            suggest = "request_header_modifier"
        elif key == "requestMirror":
            suggest = "request_mirror"
        elif key == "responseHeaderModifier":
            suggest = "response_header_modifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteSpecRulesBackendRefsFilters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteSpecRulesBackendRefsFilters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteSpecRulesBackendRefsFilters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 extension_ref: Optional['outputs.GRPCRouteSpecRulesBackendRefsFiltersExtensionRef'] = None,
                 request_header_modifier: Optional['outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier'] = None,
                 request_mirror: Optional['outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestMirror'] = None,
                 response_header_modifier: Optional['outputs.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier'] = None):
        """
        GRPCRouteFilter defines processing steps that must be completed during the request or response lifecycle. GRPCRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
        :param str type: Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
                - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations supporting GRPCRoute MUST support core filters. 
                - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
                - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` MUST be set to "ExtensionRef" for custom filters. 
                Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
                If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
                
        :param 'GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs' extension_ref: ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
                Support: Implementation-specific 
                This filter can be used multiple times within the same rule.
        :param 'GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs' request_header_modifier: RequestHeaderModifier defines a schema for a filter that modifies request headers. 
                Support: Core
        :param 'GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs' request_mirror: RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
                This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
                Support: Extended
        :param 'GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs' response_header_modifier: ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
                Support: Extended
        """
        pulumi.set(__self__, "type", type)
        if extension_ref is not None:
            pulumi.set(__self__, "extension_ref", extension_ref)
        if request_header_modifier is not None:
            pulumi.set(__self__, "request_header_modifier", request_header_modifier)
        if request_mirror is not None:
            pulumi.set(__self__, "request_mirror", request_mirror)
        if response_header_modifier is not None:
            pulumi.set(__self__, "response_header_modifier", response_header_modifier)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
         - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations supporting GRPCRoute MUST support core filters. 
         - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
         - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` MUST be set to "ExtensionRef" for custom filters. 
         Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
         If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
         
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="extensionRef")
    def extension_ref(self) -> Optional['outputs.GRPCRouteSpecRulesBackendRefsFiltersExtensionRef']:
        """
        ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         Support: Implementation-specific 
         This filter can be used multiple times within the same rule.
        """
        return pulumi.get(self, "extension_ref")

    @property
    @pulumi.getter(name="requestHeaderModifier")
    def request_header_modifier(self) -> Optional['outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier']:
        """
        RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         Support: Core
        """
        return pulumi.get(self, "request_header_modifier")

    @property
    @pulumi.getter(name="requestMirror")
    def request_mirror(self) -> Optional['outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestMirror']:
        """
        RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         Support: Extended
        """
        return pulumi.get(self, "request_mirror")

    @property
    @pulumi.getter(name="responseHeaderModifier")
    def response_header_modifier(self) -> Optional['outputs.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier']:
        """
        ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         Support: Extended
        """
        return pulumi.get(self, "response_header_modifier")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersExtensionRef(dict):
    """
    ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
     Support: Implementation-specific 
     This filter can be used multiple times within the same rule.
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str,
                 name: str):
        """
        ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         Support: Implementation-specific 
         This filter can be used multiple times within the same rule.
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is kind of the referent. For example "HTTPRoute" or "Service".
        :param str name: Name is the name of the referent.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is kind of the referent. For example "HTTPRoute" or "Service".
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier(dict):
    """
    RequestHeaderModifier defines a schema for a filter that modifies request headers. 
     Support: Core
    """
    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd']] = None,
                 remove: Optional[Sequence[str]] = None,
                 set: Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet']] = None):
        """
        RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         Support: Core
        :param Sequence['GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs'] add: Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: add: - name: "my-header" value: "bar,baz" 
                Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        :param Sequence[str] remove: Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
                Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
                Config: remove: ["my-header1", "my-header3"] 
                Output: GET /foo HTTP/1.1 my-header2: bar
        :param Sequence['GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs'] set: Set overwrites the request with the given header (name, value) before the action. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: set: - name: "my-header" value: "bar" 
                Output: GET /foo HTTP/1.1 my-header: bar
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd']]:
        """
        Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: add: - name: "my-header" value: "bar,baz" 
         Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        """
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def remove(self) -> Optional[Sequence[str]]:
        """
        Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
         Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
         Config: remove: ["my-header1", "my-header3"] 
         Output: GET /foo HTTP/1.1 my-header2: bar
        """
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet']]:
        """
        Set overwrites the request with the given header (name, value) before the action. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: set: - name: "my-header" value: "bar" 
         Output: GET /foo HTTP/1.1 my-header: bar
        """
        return pulumi.get(self, "set")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd(dict):
    """
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param str name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet(dict):
    """
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param str name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersRequestMirror(dict):
    """
    RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
     This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
     Support: Extended
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendRef":
            suggest = "backend_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteSpecRulesBackendRefsFiltersRequestMirror. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteSpecRulesBackendRefsFiltersRequestMirror.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteSpecRulesBackendRefsFiltersRequestMirror.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_ref: 'outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef'):
        """
        RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         Support: Extended
        :param 'GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs' backend_ref: BackendRef references a resource where mirrored requests are sent. 
                Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
                If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
                If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
                In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
                Support: Extended for Kubernetes Service 
                Support: Implementation-specific for any other resource
        """
        pulumi.set(__self__, "backend_ref", backend_ref)

    @property
    @pulumi.getter(name="backendRef")
    def backend_ref(self) -> 'outputs.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef':
        """
        BackendRef references a resource where mirrored requests are sent. 
         Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        """
        return pulumi.get(self, "backend_ref")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef(dict):
    """
    BackendRef references a resource where mirrored requests are sent. 
     Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
     If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
     If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
     In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
     Support: Extended for Kubernetes Service 
     Support: Implementation-specific for any other resource
    """
    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None):
        """
        BackendRef references a resource where mirrored requests are sent. 
         Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        :param str name: Name is the name of the referent.
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param str namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param int port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier(dict):
    """
    ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
     Support: Extended
    """
    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd']] = None,
                 remove: Optional[Sequence[str]] = None,
                 set: Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet']] = None):
        """
        ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         Support: Extended
        :param Sequence['GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs'] add: Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: add: - name: "my-header" value: "bar,baz" 
                Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        :param Sequence[str] remove: Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
                Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
                Config: remove: ["my-header1", "my-header3"] 
                Output: GET /foo HTTP/1.1 my-header2: bar
        :param Sequence['GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs'] set: Set overwrites the request with the given header (name, value) before the action. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: set: - name: "my-header" value: "bar" 
                Output: GET /foo HTTP/1.1 my-header: bar
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd']]:
        """
        Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: add: - name: "my-header" value: "bar,baz" 
         Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        """
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def remove(self) -> Optional[Sequence[str]]:
        """
        Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
         Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
         Config: remove: ["my-header1", "my-header3"] 
         Output: GET /foo HTTP/1.1 my-header2: bar
        """
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet']]:
        """
        Set overwrites the request with the given header (name, value) before the action. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: set: - name: "my-header" value: "bar" 
         Output: GET /foo HTTP/1.1 my-header: bar
        """
        return pulumi.get(self, "set")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd(dict):
    """
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param str name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet(dict):
    """
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param str name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GRPCRouteSpecRulesFilters(dict):
    """
    GRPCRouteFilter defines processing steps that must be completed during the request or response lifecycle. GRPCRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extensionRef":
            suggest = "extension_ref"
        elif key == "requestHeaderModifier":
            suggest = "request_header_modifier"
        elif key == "requestMirror":
            suggest = "request_mirror"
        elif key == "responseHeaderModifier":
            suggest = "response_header_modifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteSpecRulesFilters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteSpecRulesFilters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteSpecRulesFilters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 extension_ref: Optional['outputs.GRPCRouteSpecRulesFiltersExtensionRef'] = None,
                 request_header_modifier: Optional['outputs.GRPCRouteSpecRulesFiltersRequestHeaderModifier'] = None,
                 request_mirror: Optional['outputs.GRPCRouteSpecRulesFiltersRequestMirror'] = None,
                 response_header_modifier: Optional['outputs.GRPCRouteSpecRulesFiltersResponseHeaderModifier'] = None):
        """
        GRPCRouteFilter defines processing steps that must be completed during the request or response lifecycle. GRPCRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
        :param str type: Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
                - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations supporting GRPCRoute MUST support core filters. 
                - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
                - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` MUST be set to "ExtensionRef" for custom filters. 
                Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
                If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
                
        :param 'GRPCRouteSpecRulesFiltersExtensionRefArgs' extension_ref: ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
                Support: Implementation-specific 
                This filter can be used multiple times within the same rule.
        :param 'GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs' request_header_modifier: RequestHeaderModifier defines a schema for a filter that modifies request headers. 
                Support: Core
        :param 'GRPCRouteSpecRulesFiltersRequestMirrorArgs' request_mirror: RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
                This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
                Support: Extended
        :param 'GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs' response_header_modifier: ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
                Support: Extended
        """
        pulumi.set(__self__, "type", type)
        if extension_ref is not None:
            pulumi.set(__self__, "extension_ref", extension_ref)
        if request_header_modifier is not None:
            pulumi.set(__self__, "request_header_modifier", request_header_modifier)
        if request_mirror is not None:
            pulumi.set(__self__, "request_mirror", request_mirror)
        if response_header_modifier is not None:
            pulumi.set(__self__, "response_header_modifier", response_header_modifier)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
         - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations supporting GRPCRoute MUST support core filters. 
         - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
         - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` MUST be set to "ExtensionRef" for custom filters. 
         Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
         If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
         
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="extensionRef")
    def extension_ref(self) -> Optional['outputs.GRPCRouteSpecRulesFiltersExtensionRef']:
        """
        ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         Support: Implementation-specific 
         This filter can be used multiple times within the same rule.
        """
        return pulumi.get(self, "extension_ref")

    @property
    @pulumi.getter(name="requestHeaderModifier")
    def request_header_modifier(self) -> Optional['outputs.GRPCRouteSpecRulesFiltersRequestHeaderModifier']:
        """
        RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         Support: Core
        """
        return pulumi.get(self, "request_header_modifier")

    @property
    @pulumi.getter(name="requestMirror")
    def request_mirror(self) -> Optional['outputs.GRPCRouteSpecRulesFiltersRequestMirror']:
        """
        RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         Support: Extended
        """
        return pulumi.get(self, "request_mirror")

    @property
    @pulumi.getter(name="responseHeaderModifier")
    def response_header_modifier(self) -> Optional['outputs.GRPCRouteSpecRulesFiltersResponseHeaderModifier']:
        """
        ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         Support: Extended
        """
        return pulumi.get(self, "response_header_modifier")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersExtensionRef(dict):
    """
    ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
     Support: Implementation-specific 
     This filter can be used multiple times within the same rule.
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str,
                 name: str):
        """
        ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         Support: Implementation-specific 
         This filter can be used multiple times within the same rule.
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is kind of the referent. For example "HTTPRoute" or "Service".
        :param str name: Name is the name of the referent.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is kind of the referent. For example "HTTPRoute" or "Service".
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersRequestHeaderModifier(dict):
    """
    RequestHeaderModifier defines a schema for a filter that modifies request headers. 
     Support: Core
    """
    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd']] = None,
                 remove: Optional[Sequence[str]] = None,
                 set: Optional[Sequence['outputs.GRPCRouteSpecRulesFiltersRequestHeaderModifierSet']] = None):
        """
        RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         Support: Core
        :param Sequence['GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs'] add: Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: add: - name: "my-header" value: "bar,baz" 
                Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        :param Sequence[str] remove: Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
                Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
                Config: remove: ["my-header1", "my-header3"] 
                Output: GET /foo HTTP/1.1 my-header2: bar
        :param Sequence['GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs'] set: Set overwrites the request with the given header (name, value) before the action. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: set: - name: "my-header" value: "bar" 
                Output: GET /foo HTTP/1.1 my-header: bar
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd']]:
        """
        Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: add: - name: "my-header" value: "bar,baz" 
         Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        """
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def remove(self) -> Optional[Sequence[str]]:
        """
        Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
         Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
         Config: remove: ["my-header1", "my-header3"] 
         Output: GET /foo HTTP/1.1 my-header2: bar
        """
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesFiltersRequestHeaderModifierSet']]:
        """
        Set overwrites the request with the given header (name, value) before the action. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: set: - name: "my-header" value: "bar" 
         Output: GET /foo HTTP/1.1 my-header: bar
        """
        return pulumi.get(self, "set")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd(dict):
    """
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param str name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersRequestHeaderModifierSet(dict):
    """
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param str name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersRequestMirror(dict):
    """
    RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
     This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
     Support: Extended
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendRef":
            suggest = "backend_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteSpecRulesFiltersRequestMirror. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteSpecRulesFiltersRequestMirror.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteSpecRulesFiltersRequestMirror.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_ref: 'outputs.GRPCRouteSpecRulesFiltersRequestMirrorBackendRef'):
        """
        RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         Support: Extended
        :param 'GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs' backend_ref: BackendRef references a resource where mirrored requests are sent. 
                Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
                If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
                If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
                In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
                Support: Extended for Kubernetes Service 
                Support: Implementation-specific for any other resource
        """
        pulumi.set(__self__, "backend_ref", backend_ref)

    @property
    @pulumi.getter(name="backendRef")
    def backend_ref(self) -> 'outputs.GRPCRouteSpecRulesFiltersRequestMirrorBackendRef':
        """
        BackendRef references a resource where mirrored requests are sent. 
         Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        """
        return pulumi.get(self, "backend_ref")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersRequestMirrorBackendRef(dict):
    """
    BackendRef references a resource where mirrored requests are sent. 
     Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
     If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
     If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
     In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
     Support: Extended for Kubernetes Service 
     Support: Implementation-specific for any other resource
    """
    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None):
        """
        BackendRef references a resource where mirrored requests are sent. 
         Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        :param str name: Name is the name of the referent.
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param str namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param int port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersResponseHeaderModifier(dict):
    """
    ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
     Support: Extended
    """
    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd']] = None,
                 remove: Optional[Sequence[str]] = None,
                 set: Optional[Sequence['outputs.GRPCRouteSpecRulesFiltersResponseHeaderModifierSet']] = None):
        """
        ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         Support: Extended
        :param Sequence['GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs'] add: Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: add: - name: "my-header" value: "bar,baz" 
                Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        :param Sequence[str] remove: Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
                Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
                Config: remove: ["my-header1", "my-header3"] 
                Output: GET /foo HTTP/1.1 my-header2: bar
        :param Sequence['GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs'] set: Set overwrites the request with the given header (name, value) before the action. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: set: - name: "my-header" value: "bar" 
                Output: GET /foo HTTP/1.1 my-header: bar
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd']]:
        """
        Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: add: - name: "my-header" value: "bar,baz" 
         Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        """
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def remove(self) -> Optional[Sequence[str]]:
        """
        Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
         Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
         Config: remove: ["my-header1", "my-header3"] 
         Output: GET /foo HTTP/1.1 my-header2: bar
        """
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesFiltersResponseHeaderModifierSet']]:
        """
        Set overwrites the request with the given header (name, value) before the action. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: set: - name: "my-header" value: "bar" 
         Output: GET /foo HTTP/1.1 my-header: bar
        """
        return pulumi.get(self, "set")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd(dict):
    """
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param str name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GRPCRouteSpecRulesFiltersResponseHeaderModifierSet(dict):
    """
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param str name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GRPCRouteSpecRulesMatches(dict):
    """
    GRPCRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied. 
     For example, the match below will match a gRPC request only if its service is `foo` AND it contains the `version: v1` header: 
     ``` matches: - method: type: Exact service: "foo" headers: - name: "version" value "v1" 
     ```
    """
    def __init__(__self__, *,
                 headers: Optional[Sequence['outputs.GRPCRouteSpecRulesMatchesHeaders']] = None,
                 method: Optional['outputs.GRPCRouteSpecRulesMatchesMethod'] = None):
        """
        GRPCRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied. 
         For example, the match below will match a gRPC request only if its service is `foo` AND it contains the `version: v1` header: 
         ``` matches: - method: type: Exact service: "foo" headers: - name: "version" value "v1" 
         ```
        :param Sequence['GRPCRouteSpecRulesMatchesHeadersArgs'] headers: Headers specifies gRPC request header matchers. Multiple match values are ANDed together, meaning, a request MUST match all the specified headers to select the route.
        :param 'GRPCRouteSpecRulesMatchesMethodArgs' method: Method specifies a gRPC request service/method matcher. If this field is not specified, all services and methods will match.
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.GRPCRouteSpecRulesMatchesHeaders']]:
        """
        Headers specifies gRPC request header matchers. Multiple match values are ANDed together, meaning, a request MUST match all the specified headers to select the route.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def method(self) -> Optional['outputs.GRPCRouteSpecRulesMatchesMethod']:
        """
        Method specifies a gRPC request service/method matcher. If this field is not specified, all services and methods will match.
        """
        return pulumi.get(self, "method")


@pulumi.output_type
class GRPCRouteSpecRulesMatchesHeaders(dict):
    """
    GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request headers.
    """
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 type: Optional[str] = None):
        """
        GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request headers.
        :param str name: Name is the name of the gRPC Header to be matched. 
                If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param str value: Value is the value of the gRPC Header to be matched.
        :param str type: Type specifies how to match against the value of the header.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is None:
            type = 'Exact'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the gRPC Header to be matched. 
         If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value is the value of the gRPC Header to be matched.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type specifies how to match against the value of the header.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GRPCRouteSpecRulesMatchesMethod(dict):
    """
    Method specifies a gRPC request service/method matcher. If this field is not specified, all services and methods will match.
    """
    def __init__(__self__, *,
                 method: Optional[str] = None,
                 service: Optional[str] = None,
                 type: Optional[str] = None):
        """
        Method specifies a gRPC request service/method matcher. If this field is not specified, all services and methods will match.
        :param str method: Value of the method to match against. If left empty or omitted, will match all services. 
                At least one of Service and Method MUST be a non-empty string.
        :param str service: Value of the service to match against. If left empty or omitted, will match any service. 
                At least one of Service and Method MUST be a non-empty string.
        :param str type: Type specifies how to match against the service and/or method. Support: Core (Exact with service and method specified) 
                Support: Implementation-specific (Exact with method specified but no service specified) 
                Support: Implementation-specific (RegularExpression)
        """
        if method is not None:
            pulumi.set(__self__, "method", method)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if type is None:
            type = 'Exact'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        Value of the method to match against. If left empty or omitted, will match all services. 
         At least one of Service and Method MUST be a non-empty string.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        """
        Value of the service to match against. If left empty or omitted, will match any service. 
         At least one of Service and Method MUST be a non-empty string.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type specifies how to match against the service and/or method. Support: Core (Exact with service and method specified) 
         Support: Implementation-specific (Exact with method specified but no service specified) 
         Support: Implementation-specific (RegularExpression)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GRPCRouteStatus(dict):
    """
    Status defines the current state of GRPCRoute.
    """
    def __init__(__self__, *,
                 parents: Sequence['outputs.GRPCRouteStatusParents']):
        """
        Status defines the current state of GRPCRoute.
        :param Sequence['GRPCRouteStatusParentsArgs'] parents: Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
                Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
                A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        pulumi.set(__self__, "parents", parents)

    @property
    @pulumi.getter
    def parents(self) -> Sequence['outputs.GRPCRouteStatusParents']:
        """
        Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
         Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
         A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        return pulumi.get(self, "parents")


@pulumi.output_type
class GRPCRouteStatusParents(dict):
    """
    RouteParentStatus describes the status of a route with respect to an associated Parent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerName":
            suggest = "controller_name"
        elif key == "parentRef":
            suggest = "parent_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteStatusParents. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteStatusParents.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteStatusParents.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_name: str,
                 parent_ref: 'outputs.GRPCRouteStatusParentsParentRef',
                 conditions: Optional[Sequence['outputs.GRPCRouteStatusParentsConditions']] = None):
        """
        RouteParentStatus describes the status of a route with respect to an associated Parent.
        :param str controller_name: ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
                Example: "example.net/gateway-controller". 
                The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
                Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        :param 'GRPCRouteStatusParentsParentRefArgs' parent_ref: ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param Sequence['GRPCRouteStatusParentsConditionsArgs'] conditions: Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
                If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
                A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
                There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
                * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        pulumi.set(__self__, "controller_name", controller_name)
        pulumi.set(__self__, "parent_ref", parent_ref)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter(name="controllerName")
    def controller_name(self) -> str:
        """
        ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
         Example: "example.net/gateway-controller". 
         The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
         Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        """
        return pulumi.get(self, "controller_name")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GRPCRouteStatusParentsParentRef':
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.GRPCRouteStatusParentsConditions']]:
        """
        Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
         If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
         A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
         There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
         * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class GRPCRouteStatusParentsConditions(dict):
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteStatusParentsConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteStatusParentsConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteStatusParentsConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 message: str,
                 reason: str,
                 status: str,
                 type: str,
                 observed_generation: Optional[int] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param str last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param str message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param str reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param str status: status of the condition, one of True, False, Unknown.
        :param str type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param int observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class GRPCRouteStatusParentsParentRef(dict):
    """
    ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GRPCRouteStatusParentsParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GRPCRouteStatusParentsParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GRPCRouteStatusParentsParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class ReferenceGrantSpec(dict):
    """
    Spec defines the desired state of ReferenceGrant.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReferenceGrantSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReferenceGrantSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReferenceGrantSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: Sequence['outputs.ReferenceGrantSpecFrom'],
                 to: Sequence['outputs.ReferenceGrantSpecTo']):
        """
        Spec defines the desired state of ReferenceGrant.
        :param Sequence['ReferenceGrantSpecFromArgs'] from_: From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. 
                Support: Core
        :param Sequence['ReferenceGrantSpecToArgs'] to: To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. 
                Support: Core
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Sequence['outputs.ReferenceGrantSpecFrom']:
        """
        From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. 
         Support: Core
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Sequence['outputs.ReferenceGrantSpecTo']:
        """
        To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. 
         Support: Core
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class ReferenceGrantSpecFrom(dict):
    """
    ReferenceGrantFrom describes trusted namespaces and kinds.
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str,
                 namespace: str):
        """
        ReferenceGrantFrom describes trusted namespaces and kinds.
        :param str group: Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
                Support: Core
        :param str kind: Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field. 
                When used to permit a SecretObjectReference: 
                * Gateway 
                When used to permit a BackendObjectReference: 
                * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
        :param str namespace: Namespace is the namespace of the referent. 
                Support: Core
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field. 
         When used to permit a SecretObjectReference: 
         * Gateway 
         When used to permit a BackendObjectReference: 
         * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace is the namespace of the referent. 
         Support: Core
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ReferenceGrantSpecTo(dict):
    """
    ReferenceGrantTo describes what Kinds are allowed as targets of the references.
    """
    def __init__(__self__, *,
                 group: str,
                 kind: str,
                 name: Optional[str] = None):
        """
        ReferenceGrantTo describes what Kinds are allowed as targets of the references.
        :param str group: Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
                Support: Core
        :param str kind: Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field: 
                * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
        :param str name: Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field: 
         * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TCPRouteSpec(dict):
    """
    Spec defines the desired state of TCPRoute.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentRefs":
            suggest = "parent_refs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TCPRouteSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TCPRouteSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TCPRouteSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rules: Sequence['outputs.TCPRouteSpecRules'],
                 parent_refs: Optional[Sequence['outputs.TCPRouteSpecParentRefs']] = None):
        """
        Spec defines the desired state of TCPRoute.
        :param Sequence['TCPRouteSpecRulesArgs'] rules: Rules are a list of TCP matchers and actions.
        :param Sequence['TCPRouteSpecParentRefsArgs'] parent_refs: ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
                ParentRefs must be _distinct_. This means either that: 
                * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
                Some examples: 
                * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
                It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
                Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                
        """
        pulumi.set(__self__, "rules", rules)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.TCPRouteSpecRules']:
        """
        Rules are a list of TCP matchers and actions.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(self) -> Optional[Sequence['outputs.TCPRouteSpecParentRefs']]:
        """
        ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
         ParentRefs must be _distinct_. This means either that: 
         * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
         Some examples: 
         * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
         It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
         Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         
        """
        return pulumi.get(self, "parent_refs")


@pulumi.output_type
class TCPRouteSpecParentRefs(dict):
    """
    ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
     * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
     This API may be extended in the future to support additional kinds of parent resources. 
     The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TCPRouteSpecParentRefs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TCPRouteSpecParentRefs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TCPRouteSpecParentRefs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         This API may be extended in the future to support additional kinds of parent resources. 
         The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class TCPRouteSpecRules(dict):
    """
    TCPRouteRule is the configuration for a given rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendRefs":
            suggest = "backend_refs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TCPRouteSpecRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TCPRouteSpecRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TCPRouteSpecRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_refs: Optional[Sequence['outputs.TCPRouteSpecRulesBackendRefs']] = None):
        """
        TCPRouteRule is the configuration for a given rule.
        :param Sequence['TCPRouteSpecRulesBackendRefsArgs'] backend_refs: BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Connection rejections must respect weight; if an invalid backend is requested to have 80% of connections, then 80% of connections must be rejected instead. 
                Support: Core for Kubernetes Service 
                Support: Extended for Kubernetes ServiceImport 
                Support: Implementation-specific for any other resource 
                Support for weight: Extended
        """
        if backend_refs is not None:
            pulumi.set(__self__, "backend_refs", backend_refs)

    @property
    @pulumi.getter(name="backendRefs")
    def backend_refs(self) -> Optional[Sequence['outputs.TCPRouteSpecRulesBackendRefs']]:
        """
        BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Connection rejections must respect weight; if an invalid backend is requested to have 80% of connections, then 80% of connections must be rejected instead. 
         Support: Core for Kubernetes Service 
         Support: Extended for Kubernetes ServiceImport 
         Support: Implementation-specific for any other resource 
         Support for weight: Extended
        """
        return pulumi.get(self, "backend_refs")


@pulumi.output_type
class TCPRouteSpecRulesBackendRefs(dict):
    """
    BackendRef defines how a Route should forward a request to a Kubernetes resource. 
     Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
     <gateway:experimental:description> 
     When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
     Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
     If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
     If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
     </gateway:experimental:description> 
     Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
    """
    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 weight: Optional[int] = None):
        """
        BackendRef defines how a Route should forward a request to a Kubernetes resource. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         <gateway:experimental:description> 
         When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         </gateway:experimental:description> 
         Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
        :param str name: Name is the name of the referent.
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param str namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param int port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        :param int weight: Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
                If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
                Support for this field varies based on the context where used.
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if weight is None:
            weight = 1
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
         If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
         Support for this field varies based on the context where used.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class TCPRouteStatus(dict):
    """
    Status defines the current state of TCPRoute.
    """
    def __init__(__self__, *,
                 parents: Sequence['outputs.TCPRouteStatusParents']):
        """
        Status defines the current state of TCPRoute.
        :param Sequence['TCPRouteStatusParentsArgs'] parents: Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
                Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
                A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        pulumi.set(__self__, "parents", parents)

    @property
    @pulumi.getter
    def parents(self) -> Sequence['outputs.TCPRouteStatusParents']:
        """
        Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
         Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
         A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        return pulumi.get(self, "parents")


@pulumi.output_type
class TCPRouteStatusParents(dict):
    """
    RouteParentStatus describes the status of a route with respect to an associated Parent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerName":
            suggest = "controller_name"
        elif key == "parentRef":
            suggest = "parent_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TCPRouteStatusParents. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TCPRouteStatusParents.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TCPRouteStatusParents.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_name: str,
                 parent_ref: 'outputs.TCPRouteStatusParentsParentRef',
                 conditions: Optional[Sequence['outputs.TCPRouteStatusParentsConditions']] = None):
        """
        RouteParentStatus describes the status of a route with respect to an associated Parent.
        :param str controller_name: ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
                Example: "example.net/gateway-controller". 
                The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
                Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        :param 'TCPRouteStatusParentsParentRefArgs' parent_ref: ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param Sequence['TCPRouteStatusParentsConditionsArgs'] conditions: Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
                If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
                A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
                There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
                * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        pulumi.set(__self__, "controller_name", controller_name)
        pulumi.set(__self__, "parent_ref", parent_ref)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter(name="controllerName")
    def controller_name(self) -> str:
        """
        ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
         Example: "example.net/gateway-controller". 
         The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
         Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        """
        return pulumi.get(self, "controller_name")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.TCPRouteStatusParentsParentRef':
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.TCPRouteStatusParentsConditions']]:
        """
        Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
         If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
         A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
         There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
         * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class TCPRouteStatusParentsConditions(dict):
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TCPRouteStatusParentsConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TCPRouteStatusParentsConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TCPRouteStatusParentsConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 message: str,
                 reason: str,
                 status: str,
                 type: str,
                 observed_generation: Optional[int] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param str last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param str message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param str reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param str status: status of the condition, one of True, False, Unknown.
        :param str type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param int observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class TCPRouteStatusParentsParentRef(dict):
    """
    ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TCPRouteStatusParentsParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TCPRouteStatusParentsParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TCPRouteStatusParentsParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class TLSRouteSpec(dict):
    """
    Spec defines the desired state of TLSRoute.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentRefs":
            suggest = "parent_refs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TLSRouteSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TLSRouteSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TLSRouteSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rules: Sequence['outputs.TLSRouteSpecRules'],
                 hostnames: Optional[Sequence[str]] = None,
                 parent_refs: Optional[Sequence['outputs.TLSRouteSpecParentRefs']] = None):
        """
        Spec defines the desired state of TLSRoute.
        :param Sequence['TLSRouteSpecRulesArgs'] rules: Rules are a list of TLS matchers and actions.
        :param Sequence[str] hostnames: Hostnames defines a set of SNI names that should match against the SNI attribute of TLS ClientHello message in TLS handshake. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: 
                1. IPs are not allowed in SNI names per RFC 6066. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. 
                If a hostname is specified by both the Listener and TLSRoute, there must be at least one intersecting hostname for the TLSRoute to be attached to the Listener. For example: 
                * A Listener with `test.example.com` as the hostname matches TLSRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches TLSRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `test.example.com` and `*.example.com` would both match. On the other hand, `example.com` and `test.example.net` would not match. 
                If both the Listener and TLSRoute have specified hostnames, any TLSRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the TLSRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
                If both the Listener and TLSRoute have specified hostnames, and none match with the criteria above, then the TLSRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
                Support: Core
        :param Sequence['TLSRouteSpecParentRefsArgs'] parent_refs: ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
                ParentRefs must be _distinct_. This means either that: 
                * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
                Some examples: 
                * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
                It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
                Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                
        """
        pulumi.set(__self__, "rules", rules)
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.TLSRouteSpecRules']:
        """
        Rules are a list of TLS matchers and actions.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[Sequence[str]]:
        """
        Hostnames defines a set of SNI names that should match against the SNI attribute of TLS ClientHello message in TLS handshake. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: 
         1. IPs are not allowed in SNI names per RFC 6066. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. 
         If a hostname is specified by both the Listener and TLSRoute, there must be at least one intersecting hostname for the TLSRoute to be attached to the Listener. For example: 
         * A Listener with `test.example.com` as the hostname matches TLSRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches TLSRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `test.example.com` and `*.example.com` would both match. On the other hand, `example.com` and `test.example.net` would not match. 
         If both the Listener and TLSRoute have specified hostnames, any TLSRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the TLSRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
         If both the Listener and TLSRoute have specified hostnames, and none match with the criteria above, then the TLSRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
         Support: Core
        """
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(self) -> Optional[Sequence['outputs.TLSRouteSpecParentRefs']]:
        """
        ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
         ParentRefs must be _distinct_. This means either that: 
         * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
         Some examples: 
         * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
         It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
         Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         
        """
        return pulumi.get(self, "parent_refs")


@pulumi.output_type
class TLSRouteSpecParentRefs(dict):
    """
    ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
     * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
     This API may be extended in the future to support additional kinds of parent resources. 
     The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TLSRouteSpecParentRefs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TLSRouteSpecParentRefs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TLSRouteSpecParentRefs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         This API may be extended in the future to support additional kinds of parent resources. 
         The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class TLSRouteSpecRules(dict):
    """
    TLSRouteRule is the configuration for a given rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendRefs":
            suggest = "backend_refs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TLSRouteSpecRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TLSRouteSpecRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TLSRouteSpecRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_refs: Optional[Sequence['outputs.TLSRouteSpecRulesBackendRefs']] = None):
        """
        TLSRouteRule is the configuration for a given rule.
        :param Sequence['TLSRouteSpecRulesBackendRefsArgs'] backend_refs: BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the rule performs no forwarding; if no filters are specified that would result in a response being sent, the underlying implementation must actively reject request attempts to this backend, by rejecting the connection or returning a 500 status code. Request rejections must respect weight; if an invalid backend is requested to have 80% of requests, then 80% of requests must be rejected instead. 
                Support: Core for Kubernetes Service 
                Support: Extended for Kubernetes ServiceImport 
                Support: Implementation-specific for any other resource 
                Support for weight: Extended
        """
        if backend_refs is not None:
            pulumi.set(__self__, "backend_refs", backend_refs)

    @property
    @pulumi.getter(name="backendRefs")
    def backend_refs(self) -> Optional[Sequence['outputs.TLSRouteSpecRulesBackendRefs']]:
        """
        BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the rule performs no forwarding; if no filters are specified that would result in a response being sent, the underlying implementation must actively reject request attempts to this backend, by rejecting the connection or returning a 500 status code. Request rejections must respect weight; if an invalid backend is requested to have 80% of requests, then 80% of requests must be rejected instead. 
         Support: Core for Kubernetes Service 
         Support: Extended for Kubernetes ServiceImport 
         Support: Implementation-specific for any other resource 
         Support for weight: Extended
        """
        return pulumi.get(self, "backend_refs")


@pulumi.output_type
class TLSRouteSpecRulesBackendRefs(dict):
    """
    BackendRef defines how a Route should forward a request to a Kubernetes resource. 
     Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
     <gateway:experimental:description> 
     When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
     Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
     If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
     If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
     </gateway:experimental:description> 
     Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
    """
    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 weight: Optional[int] = None):
        """
        BackendRef defines how a Route should forward a request to a Kubernetes resource. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         <gateway:experimental:description> 
         When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         </gateway:experimental:description> 
         Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
        :param str name: Name is the name of the referent.
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param str namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param int port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        :param int weight: Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
                If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
                Support for this field varies based on the context where used.
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if weight is None:
            weight = 1
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
         If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
         Support for this field varies based on the context where used.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class TLSRouteStatus(dict):
    """
    Status defines the current state of TLSRoute.
    """
    def __init__(__self__, *,
                 parents: Sequence['outputs.TLSRouteStatusParents']):
        """
        Status defines the current state of TLSRoute.
        :param Sequence['TLSRouteStatusParentsArgs'] parents: Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
                Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
                A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        pulumi.set(__self__, "parents", parents)

    @property
    @pulumi.getter
    def parents(self) -> Sequence['outputs.TLSRouteStatusParents']:
        """
        Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
         Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
         A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        return pulumi.get(self, "parents")


@pulumi.output_type
class TLSRouteStatusParents(dict):
    """
    RouteParentStatus describes the status of a route with respect to an associated Parent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerName":
            suggest = "controller_name"
        elif key == "parentRef":
            suggest = "parent_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TLSRouteStatusParents. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TLSRouteStatusParents.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TLSRouteStatusParents.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_name: str,
                 parent_ref: 'outputs.TLSRouteStatusParentsParentRef',
                 conditions: Optional[Sequence['outputs.TLSRouteStatusParentsConditions']] = None):
        """
        RouteParentStatus describes the status of a route with respect to an associated Parent.
        :param str controller_name: ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
                Example: "example.net/gateway-controller". 
                The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
                Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        :param 'TLSRouteStatusParentsParentRefArgs' parent_ref: ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param Sequence['TLSRouteStatusParentsConditionsArgs'] conditions: Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
                If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
                A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
                There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
                * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        pulumi.set(__self__, "controller_name", controller_name)
        pulumi.set(__self__, "parent_ref", parent_ref)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter(name="controllerName")
    def controller_name(self) -> str:
        """
        ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
         Example: "example.net/gateway-controller". 
         The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
         Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        """
        return pulumi.get(self, "controller_name")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.TLSRouteStatusParentsParentRef':
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.TLSRouteStatusParentsConditions']]:
        """
        Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
         If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
         A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
         There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
         * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class TLSRouteStatusParentsConditions(dict):
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TLSRouteStatusParentsConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TLSRouteStatusParentsConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TLSRouteStatusParentsConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 message: str,
                 reason: str,
                 status: str,
                 type: str,
                 observed_generation: Optional[int] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param str last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param str message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param str reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param str status: status of the condition, one of True, False, Unknown.
        :param str type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param int observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class TLSRouteStatusParentsParentRef(dict):
    """
    ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TLSRouteStatusParentsParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TLSRouteStatusParentsParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TLSRouteStatusParentsParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class UDPRouteSpec(dict):
    """
    Spec defines the desired state of UDPRoute.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentRefs":
            suggest = "parent_refs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UDPRouteSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UDPRouteSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UDPRouteSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rules: Sequence['outputs.UDPRouteSpecRules'],
                 parent_refs: Optional[Sequence['outputs.UDPRouteSpecParentRefs']] = None):
        """
        Spec defines the desired state of UDPRoute.
        :param Sequence['UDPRouteSpecRulesArgs'] rules: Rules are a list of UDP matchers and actions.
        :param Sequence['UDPRouteSpecParentRefsArgs'] parent_refs: ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
                ParentRefs must be _distinct_. This means either that: 
                * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
                Some examples: 
                * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
                It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
                Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                
        """
        pulumi.set(__self__, "rules", rules)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.UDPRouteSpecRules']:
        """
        Rules are a list of UDP matchers and actions.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(self) -> Optional[Sequence['outputs.UDPRouteSpecParentRefs']]:
        """
        ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
         ParentRefs must be _distinct_. This means either that: 
         * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
         Some examples: 
         * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
         It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
         Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         
        """
        return pulumi.get(self, "parent_refs")


@pulumi.output_type
class UDPRouteSpecParentRefs(dict):
    """
    ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
     * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
     This API may be extended in the future to support additional kinds of parent resources. 
     The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UDPRouteSpecParentRefs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UDPRouteSpecParentRefs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UDPRouteSpecParentRefs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         This API may be extended in the future to support additional kinds of parent resources. 
         The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class UDPRouteSpecRules(dict):
    """
    UDPRouteRule is the configuration for a given rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendRefs":
            suggest = "backend_refs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UDPRouteSpecRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UDPRouteSpecRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UDPRouteSpecRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_refs: Optional[Sequence['outputs.UDPRouteSpecRulesBackendRefs']] = None):
        """
        UDPRouteRule is the configuration for a given rule.
        :param Sequence['UDPRouteSpecRulesBackendRefsArgs'] backend_refs: BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Packet drops must respect weight; if an invalid backend is requested to have 80% of the packets, then 80% of packets must be dropped instead. 
                Support: Core for Kubernetes Service 
                Support: Extended for Kubernetes ServiceImport 
                Support: Implementation-specific for any other resource 
                Support for weight: Extended
        """
        if backend_refs is not None:
            pulumi.set(__self__, "backend_refs", backend_refs)

    @property
    @pulumi.getter(name="backendRefs")
    def backend_refs(self) -> Optional[Sequence['outputs.UDPRouteSpecRulesBackendRefs']]:
        """
        BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Packet drops must respect weight; if an invalid backend is requested to have 80% of the packets, then 80% of packets must be dropped instead. 
         Support: Core for Kubernetes Service 
         Support: Extended for Kubernetes ServiceImport 
         Support: Implementation-specific for any other resource 
         Support for weight: Extended
        """
        return pulumi.get(self, "backend_refs")


@pulumi.output_type
class UDPRouteSpecRulesBackendRefs(dict):
    """
    BackendRef defines how a Route should forward a request to a Kubernetes resource. 
     Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
     <gateway:experimental:description> 
     When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
     Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
     If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
     If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
     </gateway:experimental:description> 
     Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
    """
    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 weight: Optional[int] = None):
        """
        BackendRef defines how a Route should forward a request to a Kubernetes resource. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         <gateway:experimental:description> 
         When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         </gateway:experimental:description> 
         Note that when the BackendTLSPolicy object is enabled by the implementation, there are some extra rules about validity to consider here. See the fields where this struct is used for more information about the exact behavior.
        :param str name: Name is the name of the referent.
        :param str group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param str kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param str namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param int port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        :param int weight: Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
                If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
                Support for this field varies based on the context where used.
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if weight is None:
            weight = 1
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
         If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
         Support for this field varies based on the context where used.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class UDPRouteStatus(dict):
    """
    Status defines the current state of UDPRoute.
    """
    def __init__(__self__, *,
                 parents: Sequence['outputs.UDPRouteStatusParents']):
        """
        Status defines the current state of UDPRoute.
        :param Sequence['UDPRouteStatusParentsArgs'] parents: Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
                Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
                A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        pulumi.set(__self__, "parents", parents)

    @property
    @pulumi.getter
    def parents(self) -> Sequence['outputs.UDPRouteStatusParents']:
        """
        Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
         Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
         A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        return pulumi.get(self, "parents")


@pulumi.output_type
class UDPRouteStatusParents(dict):
    """
    RouteParentStatus describes the status of a route with respect to an associated Parent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerName":
            suggest = "controller_name"
        elif key == "parentRef":
            suggest = "parent_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UDPRouteStatusParents. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UDPRouteStatusParents.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UDPRouteStatusParents.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_name: str,
                 parent_ref: 'outputs.UDPRouteStatusParentsParentRef',
                 conditions: Optional[Sequence['outputs.UDPRouteStatusParentsConditions']] = None):
        """
        RouteParentStatus describes the status of a route with respect to an associated Parent.
        :param str controller_name: ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
                Example: "example.net/gateway-controller". 
                The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
                Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        :param 'UDPRouteStatusParentsParentRefArgs' parent_ref: ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param Sequence['UDPRouteStatusParentsConditionsArgs'] conditions: Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
                If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
                A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
                There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
                * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        pulumi.set(__self__, "controller_name", controller_name)
        pulumi.set(__self__, "parent_ref", parent_ref)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter(name="controllerName")
    def controller_name(self) -> str:
        """
        ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
         Example: "example.net/gateway-controller". 
         The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
         Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        """
        return pulumi.get(self, "controller_name")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.UDPRouteStatusParentsParentRef':
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.UDPRouteStatusParentsConditions']]:
        """
        Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
         If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
         A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
         There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
         * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class UDPRouteStatusParentsConditions(dict):
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
     type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UDPRouteStatusParentsConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UDPRouteStatusParentsConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UDPRouteStatusParentsConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 message: str,
                 reason: str,
                 status: str,
                 type: str,
                 observed_generation: Optional[int] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param str last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param str message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param str reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param str status: status of the condition, one of True, False, Unknown.
        :param str type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param int observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class UDPRouteStatusParentsParentRef(dict):
    """
    ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UDPRouteStatusParentsParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UDPRouteStatusParentsParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UDPRouteStatusParentsParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


