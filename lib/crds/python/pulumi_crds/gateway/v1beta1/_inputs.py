# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GatewayClassSpecParametersRefArgs',
    'GatewayClassSpecArgs',
    'GatewayClassStatusConditionsArgs',
    'GatewayClassStatusArgs',
    'GatewaySpecInfrastructureArgs',
    'GatewaySpecListenersAllowedRoutesKindsArgs',
    'GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs',
    'GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs',
    'GatewaySpecListenersAllowedRoutesNamespacesArgs',
    'GatewaySpecListenersAllowedRoutesArgs',
    'GatewaySpecListenersTlsCertificateRefsArgs',
    'GatewaySpecListenersTlsArgs',
    'GatewaySpecListenersArgs',
    'GatewaySpecArgs',
    'GatewayStatusConditionsArgs',
    'GatewayStatusListenersConditionsArgs',
    'GatewayStatusListenersSupportedKindsArgs',
    'GatewayStatusListenersArgs',
    'GatewayStatusArgs',
    'HTTPRouteSpecParentRefsArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs',
    'HTTPRouteSpecRulesBackendRefsFiltersArgs',
    'HTTPRouteSpecRulesBackendRefsArgs',
    'HTTPRouteSpecRulesFiltersExtensionRefArgs',
    'HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs',
    'HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs',
    'HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs',
    'HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs',
    'HTTPRouteSpecRulesFiltersRequestMirrorArgs',
    'HTTPRouteSpecRulesFiltersRequestRedirectPathArgs',
    'HTTPRouteSpecRulesFiltersRequestRedirectArgs',
    'HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs',
    'HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs',
    'HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs',
    'HTTPRouteSpecRulesFiltersUrlRewritePathArgs',
    'HTTPRouteSpecRulesFiltersUrlRewriteArgs',
    'HTTPRouteSpecRulesFiltersArgs',
    'HTTPRouteSpecRulesMatchesHeadersArgs',
    'HTTPRouteSpecRulesMatchesPathArgs',
    'HTTPRouteSpecRulesMatchesQueryParamsArgs',
    'HTTPRouteSpecRulesMatchesArgs',
    'HTTPRouteSpecRulesTimeoutsArgs',
    'HTTPRouteSpecRulesArgs',
    'HTTPRouteSpecArgs',
    'HTTPRouteStatusParentsConditionsArgs',
    'HTTPRouteStatusParentsParentRefArgs',
    'HTTPRouteStatusParentsArgs',
    'HTTPRouteStatusArgs',
    'ReferenceGrantSpecFromArgs',
    'ReferenceGrantSpecToArgs',
    'ReferenceGrantSpecArgs',
]

@pulumi.input_type
class GatewayClassSpecParametersRefArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. 
         ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. 
         If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true. 
         Support: Implementation-specific
        :param pulumi.Input[str] group: Group is the group of the referent.
        :param pulumi.Input[str] kind: Kind is kind of the referent.
        :param pulumi.Input[str] name: Name is the name of the referent.
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        Group is the group of the referent.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is kind of the referent.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GatewayClassSpecArgs:
    def __init__(__self__, *,
                 controller_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 parameters_ref: Optional[pulumi.Input['GatewayClassSpecParametersRefArgs']] = None):
        """
        Spec defines the desired state of GatewayClass.
        :param pulumi.Input[str] controller_name: ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. 
                Example: "example.net/gateway-controller". 
                This field is not mutable and cannot be empty. 
                Support: Core
        :param pulumi.Input[str] description: Description helps describe a GatewayClass with more details.
        :param pulumi.Input['GatewayClassSpecParametersRefArgs'] parameters_ref: ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. 
                ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. 
                If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true. 
                Support: Implementation-specific
        """
        pulumi.set(__self__, "controller_name", controller_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if parameters_ref is not None:
            pulumi.set(__self__, "parameters_ref", parameters_ref)

    @property
    @pulumi.getter(name="controllerName")
    def controller_name(self) -> pulumi.Input[str]:
        """
        ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path. 
         Example: "example.net/gateway-controller". 
         This field is not mutable and cannot be empty. 
         Support: Core
        """
        return pulumi.get(self, "controller_name")

    @controller_name.setter
    def controller_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "controller_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description helps describe a GatewayClass with more details.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="parametersRef")
    def parameters_ref(self) -> Optional[pulumi.Input['GatewayClassSpecParametersRefArgs']]:
        """
        ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration. 
         ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped. 
         If the referent cannot be found, the GatewayClass's "InvalidParameters" status condition will be true. 
         Support: Implementation-specific
        """
        return pulumi.get(self, "parameters_ref")

    @parameters_ref.setter
    def parameters_ref(self, value: Optional[pulumi.Input['GatewayClassSpecParametersRefArgs']]):
        pulumi.set(self, "parameters_ref", value)


@pulumi.input_type
class GatewayClassStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 message: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 observed_generation: Optional[pulumi.Input[int]] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param pulumi.Input[str] last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param pulumi.Input[str] message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param pulumi.Input[str] reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param pulumi.Input[str] status: status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param pulumi.Input[int] observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)


@pulumi.input_type
class GatewayClassStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayClassStatusConditionsArgs']]]] = None,
                 supported_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Status defines the current state of GatewayClass. 
         Implementations MUST populate status on all GatewayClass resources which specify their controller name.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayClassStatusConditionsArgs']]] conditions: Conditions is the current status from the controller for this GatewayClass. 
                Controllers should prefer to publish conditions using values of GatewayClassConditionType for the type of each Condition.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_features: SupportedFeatures is the set of features the GatewayClass support. It MUST be sorted in ascending alphabetical order. 
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if supported_features is not None:
            pulumi.set(__self__, "supported_features", supported_features)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayClassStatusConditionsArgs']]]]:
        """
        Conditions is the current status from the controller for this GatewayClass. 
         Controllers should prefer to publish conditions using values of GatewayClassConditionType for the type of each Condition.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayClassStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="supportedFeatures")
    def supported_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SupportedFeatures is the set of features the GatewayClass support. It MUST be sorted in ascending alphabetical order. 
        """
        return pulumi.get(self, "supported_features")

    @supported_features.setter
    def supported_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_features", value)


@pulumi.input_type
class GatewaySpecInfrastructureArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Infrastructure defines infrastructure level attributes about this Gateway instance. 
         Support: Core 
         
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that SHOULD be applied to any resources created in response to this Gateway. 
                For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources. For other implementations, this refers to any relevant (implementation specific) "annotations" concepts. 
                An implementation may chose to add additional implementation-specific annotations as they see fit. 
                Support: Extended
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that SHOULD be applied to any resources created in response to this Gateway. 
                For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources. For other implementations, this refers to any relevant (implementation specific) "labels" concepts. 
                An implementation may chose to add additional implementation-specific labels as they see fit. 
                Support: Extended
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that SHOULD be applied to any resources created in response to this Gateway. 
         For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources. For other implementations, this refers to any relevant (implementation specific) "annotations" concepts. 
         An implementation may chose to add additional implementation-specific annotations as they see fit. 
         Support: Extended
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that SHOULD be applied to any resources created in response to this Gateway. 
         For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources. For other implementations, this refers to any relevant (implementation specific) "labels" concepts. 
         An implementation may chose to add additional implementation-specific labels as they see fit. 
         Support: Extended
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class GatewaySpecListenersAllowedRoutesKindsArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None):
        """
        RouteGroupKind indicates the group and kind of a Route resource.
        :param pulumi.Input[str] kind: Kind is the kind of the Route.
        :param pulumi.Input[str] group: Group is the group of the Route.
        """
        pulumi.set(__self__, "kind", kind)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the kind of the Route.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the Route.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)


@pulumi.input_type
class GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From". 
         Support: Core
        :param pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class GatewaySpecListenersAllowedRoutesNamespacesArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[str]] = None,
                 selector: Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs']] = None):
        """
        Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. 
         Support: Core
        :param pulumi.Input[str] from_: From indicates where Routes will be selected for this Gateway. Possible values are: 
                * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. 
                Support: Core
        :param pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs'] selector: Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From". 
                Support: Core
        """
        if from_ is None:
            from_ = 'Same'
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        From indicates where Routes will be selected for this Gateway. Possible values are: 
         * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway. 
         Support: Core
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs']]:
        """
        Selector must be specified when From is set to "Selector". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of "From". 
         Support: Core
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesSelectorArgs']]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class GatewaySpecListenersAllowedRoutesArgs:
    def __init__(__self__, *,
                 kinds: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersAllowedRoutesKindsArgs']]]] = None,
                 namespaces: Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesArgs']] = None):
        """
        AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. 
         Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: 
         * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of "2020-09-08 01:02:03" is given precedence over a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. 
         All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. 
         Support: Core
        :param pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersAllowedRoutesKindsArgs']]] kinds: Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. 
                A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the "ResolvedRefs" condition to False for this Listener with the "InvalidRouteKinds" reason. 
                Support: Core
        :param pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesArgs'] namespaces: Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. 
                Support: Core
        """
        if kinds is not None:
            pulumi.set(__self__, "kinds", kinds)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter
    def kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersAllowedRoutesKindsArgs']]]]:
        """
        Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol. 
         A RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the "ResolvedRefs" condition to False for this Listener with the "InvalidRouteKinds" reason. 
         Support: Core
        """
        return pulumi.get(self, "kinds")

    @kinds.setter
    def kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersAllowedRoutesKindsArgs']]]]):
        pulumi.set(self, "kinds", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesArgs']]:
        """
        Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default. 
         Support: Core
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesNamespacesArgs']]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class GatewaySpecListenersTlsCertificateRefsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretObjectReference identifies an API object including its namespace, defaulting to Secret. 
         The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
        :param pulumi.Input[str] name: Name is the name of the referent.
        :param pulumi.Input[str] group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param pulumi.Input[str] kind: Kind is kind of the referent. For example "Secret".
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Secret'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent. For example "Secret".
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GatewaySpecListenersTlsArgs:
    def __init__(__self__, *,
                 certificate_refs: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersTlsCertificateRefsArgs']]]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP". 
         The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. 
         The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. 
         Support: Core
        :param pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersTlsCertificateRefsArgs']]] certificate_refs: CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. 
                A single CertificateRef to a Kubernetes Secret has "Core" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. 
                References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the "ResolvedRefs" condition MUST be set to False for this listener with the "RefNotPermitted" reason. 
                This field is required to have at least one element when the mode is set to "Terminate" (default) and is optional otherwise. 
                CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. 
                Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls 
                Support: Implementation-specific (More than one reference or other resource types)
        :param pulumi.Input[str] mode: Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: 
                - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. 
                Support: Core
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] options: Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. 
                A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as `example.com/my-custom-option`. Un-prefixed names are reserved for key names defined by Gateway API. 
                Support: Implementation-specific
        """
        if certificate_refs is not None:
            pulumi.set(__self__, "certificate_refs", certificate_refs)
        if mode is None:
            mode = 'Terminate'
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="certificateRefs")
    def certificate_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersTlsCertificateRefsArgs']]]]:
        """
        CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener. 
         A single CertificateRef to a Kubernetes Secret has "Core" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific. 
         References to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the "ResolvedRefs" condition MUST be set to False for this listener with the "RefNotPermitted" reason. 
         This field is required to have at least one element when the mode is set to "Terminate" (default) and is optional otherwise. 
         CertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources. 
         Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls 
         Support: Implementation-specific (More than one reference or other resource types)
        """
        return pulumi.get(self, "certificate_refs")

    @certificate_refs.setter
    def certificate_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersTlsCertificateRefsArgs']]]]):
        pulumi.set(self, "certificate_refs", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes: 
         - Terminate: The TLS session between the downstream client and the Gateway is terminated at the Gateway. This mode requires certificateRefs to be set and contain at least one element. - Passthrough: The TLS session is NOT terminated by the Gateway. This implies that the Gateway can't decipher the TLS stream except for the ClientHello message of the TLS protocol. CertificateRefs field is ignored in this mode. 
         Support: Core
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites. 
         A set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as `example.com/my-custom-option`. Un-prefixed names are reserved for key names defined by Gateway API. 
         Support: Implementation-specific
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class GatewaySpecListenersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 allowed_routes: Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesArgs']] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['GatewaySpecListenersTlsArgs']] = None):
        """
        Listener embodies the concept of a logical endpoint where a Gateway accepts network connections.
        :param pulumi.Input[str] name: Name is the name of the Listener. This name MUST be unique within a Gateway. 
                Support: Core
        :param pulumi.Input[int] port: Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. 
                Support: Core
        :param pulumi.Input[str] protocol: Protocol specifies the network protocol this listener expects to receive. 
                Support: Core
        :param pulumi.Input['GatewaySpecListenersAllowedRoutesArgs'] allowed_routes: AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. 
                Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: 
                * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of "2020-09-08 01:02:03" is given precedence over a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. 
                All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. 
                Support: Core
        :param pulumi.Input[str] hostname: Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. 
                Implementations MUST apply Hostname matching appropriately for each of the following protocols: 
                * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. 
                For HTTPRoute and TLSRoute resources, there is an interaction with the `spec.hostnames` array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. 
                Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
                Support: Core
        :param pulumi.Input['GatewaySpecListenersTlsArgs'] tls: TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP". 
                The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. 
                The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if allowed_routes is not None:
            pulumi.set(__self__, "allowed_routes", allowed_routes)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the Listener. This name MUST be unique within a Gateway. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules. 
         Support: Core
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol specifies the network protocol this listener expects to receive. 
         Support: Core
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="allowedRoutes")
    def allowed_routes(self) -> Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesArgs']]:
        """
        AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present. 
         Although a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria: 
         * The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with a creation timestamp of "2020-09-08 01:02:03" is given precedence over a Route with a creation timestamp of "2020-09-08 01:02:04". * If everything else is equivalent, the Route appearing first in alphabetical order (namespace/name) should be given precedence. For example, foo/bar is given precedence over foo/baz. 
         All valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported. 
         Support: Core
        """
        return pulumi.get(self, "allowed_routes")

    @allowed_routes.setter
    def allowed_routes(self, value: Optional[pulumi.Input['GatewaySpecListenersAllowedRoutesArgs']]):
        pulumi.set(self, "allowed_routes", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching. 
         Implementations MUST apply Hostname matching appropriately for each of the following protocols: 
         * TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP protocol layers as described above. If an implementation does not ensure that both the SNI and Host header match the Listener hostname, it MUST clearly document that. 
         For HTTPRoute and TLSRoute resources, there is an interaction with the `spec.hostnames` array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation. 
         Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
         Support: Core
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['GatewaySpecListenersTlsArgs']]:
        """
        TLS is the TLS configuration for the Listener. This field is required if the Protocol field is "HTTPS" or "TLS". It is invalid to set this field if the Protocol field is "HTTP", "TCP", or "UDP". 
         The association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener. 
         The GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake. 
         Support: Core
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['GatewaySpecListenersTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class GatewaySpecArgs:
    def __init__(__self__, *,
                 gateway_class_name: pulumi.Input[str],
                 listeners: pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersArgs']]],
                 addresses: Optional[pulumi.Input[Sequence[Any]]] = None,
                 infrastructure: Optional[pulumi.Input['GatewaySpecInfrastructureArgs']] = None):
        """
        Spec defines the desired state of Gateway.
        :param pulumi.Input[str] gateway_class_name: GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.
        :param pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersArgs']]] listeners: Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. 
                Each Listener in a set of Listeners (for example, in a single Gateway) MUST be _distinct_, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses "set of Listeners" rather than "Listeners in a single Gateway" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules _also_ apply in that case). 
                Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. 
                Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: 
                HTTP Profile 
                1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided 
                TLS Profile 
                1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough 
                "Distinct" Listeners have the following property: 
                The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. 
                For example, the following Listener scenarios are distinct: 
                1. Multiple Listeners with the same Port that all use the "HTTP" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the "HTTPS" or "TLS" Protocol that all have unique Hostname values. 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener with the same Protocol has the same Port value. 
                Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. 
                When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. 
                When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. 
                Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, `"foo.example.com"` takes precedence over `"*.example.com"`, and `"*.example.com"` takes precedence over `""`. 
                Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. 
                The wildcard character will match any number of characters _and dots_ to the left, however, so `"*.example.com"` will match both `"foo.bar.example.com"` _and_ `"bar.example.com"`. 
                If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the "Conflicted" condition in the Listener Status to "True". 
                Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out *all* the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. 
                The implementation MUST set a "ListenersNotValid" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. 
                A Gateway's Listeners are considered "compatible" if: 
                1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. 
                Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. 
                For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. 
                Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for "foo.example.com" and "*.example.com", a request to "foo.example.com" SHOULD only be routed using routes attached to the "foo.example.com" Listener (and not the "*.example.com" Listener). This concept is known as "Listener Isolation". Implementations that do not support Listener Isolation MUST clearly document this. 
                Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. 
                Support: Core
        :param pulumi.Input[Sequence[Any]] addresses: Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. 
                The Addresses field represents a request for the address(es) on the "outside of the Gateway", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. 
                If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. 
                The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. 
                Support: Extended 
                
        :param pulumi.Input['GatewaySpecInfrastructureArgs'] infrastructure: Infrastructure defines infrastructure level attributes about this Gateway instance. 
                Support: Core 
                
        """
        pulumi.set(__self__, "gateway_class_name", gateway_class_name)
        pulumi.set(__self__, "listeners", listeners)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if infrastructure is not None:
            pulumi.set(__self__, "infrastructure", infrastructure)

    @property
    @pulumi.getter(name="gatewayClassName")
    def gateway_class_name(self) -> pulumi.Input[str]:
        """
        GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.
        """
        return pulumi.get(self, "gateway_class_name")

    @gateway_class_name.setter
    def gateway_class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_class_name", value)

    @property
    @pulumi.getter
    def listeners(self) -> pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersArgs']]]:
        """
        Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified. 
         Each Listener in a set of Listeners (for example, in a single Gateway) MUST be _distinct_, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses "set of Listeners" rather than "Listeners in a single Gateway" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules _also_ apply in that case). 
         Practically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname. 
         Some combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile: 
         HTTP Profile 
         1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided 
         TLS Profile 
         1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough 
         "Distinct" Listeners have the following property: 
         The implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields. 
         For example, the following Listener scenarios are distinct: 
         1. Multiple Listeners with the same Port that all use the "HTTP" Protocol that all have unique Hostname values. 2. Multiple Listeners with the same Port that use either the "HTTPS" or "TLS" Protocol that all have unique Hostname values. 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener with the same Protocol has the same Port value. 
         Some fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols. 
         When using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct. 
         When the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes. 
         Exact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, `"foo.example.com"` takes precedence over `"*.example.com"`, and `"*.example.com"` takes precedence over `""`. 
         Additionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence. 
         The wildcard character will match any number of characters _and dots_ to the left, however, so `"*.example.com"` will match both `"foo.bar.example.com"` _and_ `"bar.example.com"`. 
         If a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the "Conflicted" condition in the Listener Status to "True". 
         Implementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out *all* the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present. 
         The implementation MUST set a "ListenersNotValid" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted. 
         A Gateway's Listeners are considered "compatible" if: 
         1. They are distinct. 2. The implementation can serve them in compliance with the Addresses requirement that all Listeners are available on all assigned addresses. 
         Compatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another. 
         For example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct. 
         Note that requests SHOULD match at most one Listener. For example, if Listeners are defined for "foo.example.com" and "*.example.com", a request to "foo.example.com" SHOULD only be routed using routes attached to the "foo.example.com" Listener (and not the "*.example.com" Listener). This concept is known as "Listener Isolation". Implementations that do not support Listener Isolation MUST clearly document this. 
         Implementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible. 
         Support: Core
        """
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: pulumi.Input[Sequence[pulumi.Input['GatewaySpecListenersArgs']]]):
        pulumi.set(self, "listeners", value)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        """
        Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses. 
         The Addresses field represents a request for the address(es) on the "outside of the Gateway", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to. 
         If no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses. 
         The implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses. 
         Support: Extended 
         
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter
    def infrastructure(self) -> Optional[pulumi.Input['GatewaySpecInfrastructureArgs']]:
        """
        Infrastructure defines infrastructure level attributes about this Gateway instance. 
         Support: Core 
         
        """
        return pulumi.get(self, "infrastructure")

    @infrastructure.setter
    def infrastructure(self, value: Optional[pulumi.Input['GatewaySpecInfrastructureArgs']]):
        pulumi.set(self, "infrastructure", value)


@pulumi.input_type
class GatewayStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 message: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 observed_generation: Optional[pulumi.Input[int]] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param pulumi.Input[str] last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param pulumi.Input[str] message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param pulumi.Input[str] reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param pulumi.Input[str] status: status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param pulumi.Input[int] observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)


@pulumi.input_type
class GatewayStatusListenersConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 message: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 observed_generation: Optional[pulumi.Input[int]] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param pulumi.Input[str] last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param pulumi.Input[str] message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param pulumi.Input[str] reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param pulumi.Input[str] status: status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param pulumi.Input[int] observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)


@pulumi.input_type
class GatewayStatusListenersSupportedKindsArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None):
        """
        RouteGroupKind indicates the group and kind of a Route resource.
        :param pulumi.Input[str] kind: Kind is the kind of the Route.
        :param pulumi.Input[str] group: Group is the group of the Route.
        """
        pulumi.set(__self__, "kind", kind)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the kind of the Route.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the Route.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)


@pulumi.input_type
class GatewayStatusListenersArgs:
    def __init__(__self__, *,
                 attached_routes: pulumi.Input[int],
                 conditions: pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersConditionsArgs']]],
                 name: pulumi.Input[str],
                 supported_kinds: pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersSupportedKindsArgs']]]):
        """
        ListenerStatus is the status associated with a Listener.
        :param pulumi.Input[int] attached_routes: AttachedRoutes represents the total number of Routes that have been successfully attached to this Listener. 
                Successful attachment of a Route to a Listener is based solely on the combination of the AllowedRoutes field on the corresponding Listener and the Route's ParentRefs field. A Route is successfully attached to a Listener when it is selected by the Listener's AllowedRoutes field AND the Route has a valid ParentRef selecting the whole Gateway resource or a specific Listener as a parent resource (more detail on attachment semantics can be found in the documentation on the various Route kinds ParentRefs fields). Listener or Route status does not impact successful attachment, i.e. the AttachedRoutes field count MUST be set for Listeners with condition Accepted: false and MUST count successfully attached Routes that may themselves have Accepted: false conditions. 
                Uses for this field include troubleshooting Route attachment and measuring blast radius/impact of changes to a Listener.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersConditionsArgs']]] conditions: Conditions describe the current condition of this listener.
        :param pulumi.Input[str] name: Name is the name of the Listener that this status corresponds to.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersSupportedKindsArgs']]] supported_kinds: SupportedKinds is the list indicating the Kinds supported by this listener. This MUST represent the kinds an implementation supports for that Listener configuration. 
                If kinds are specified in Spec that are not supported, they MUST NOT appear in this list and an implementation MUST set the "ResolvedRefs" condition to "False" with the "InvalidRouteKinds" reason. If both valid and invalid Route kinds are specified, the implementation MUST reference the valid Route kinds that have been specified.
        """
        pulumi.set(__self__, "attached_routes", attached_routes)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "supported_kinds", supported_kinds)

    @property
    @pulumi.getter(name="attachedRoutes")
    def attached_routes(self) -> pulumi.Input[int]:
        """
        AttachedRoutes represents the total number of Routes that have been successfully attached to this Listener. 
         Successful attachment of a Route to a Listener is based solely on the combination of the AllowedRoutes field on the corresponding Listener and the Route's ParentRefs field. A Route is successfully attached to a Listener when it is selected by the Listener's AllowedRoutes field AND the Route has a valid ParentRef selecting the whole Gateway resource or a specific Listener as a parent resource (more detail on attachment semantics can be found in the documentation on the various Route kinds ParentRefs fields). Listener or Route status does not impact successful attachment, i.e. the AttachedRoutes field count MUST be set for Listeners with condition Accepted: false and MUST count successfully attached Routes that may themselves have Accepted: false conditions. 
         Uses for this field include troubleshooting Route attachment and measuring blast radius/impact of changes to a Listener.
        """
        return pulumi.get(self, "attached_routes")

    @attached_routes.setter
    def attached_routes(self, value: pulumi.Input[int]):
        pulumi.set(self, "attached_routes", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersConditionsArgs']]]:
        """
        Conditions describe the current condition of this listener.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the Listener that this status corresponds to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="supportedKinds")
    def supported_kinds(self) -> pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersSupportedKindsArgs']]]:
        """
        SupportedKinds is the list indicating the Kinds supported by this listener. This MUST represent the kinds an implementation supports for that Listener configuration. 
         If kinds are specified in Spec that are not supported, they MUST NOT appear in this list and an implementation MUST set the "ResolvedRefs" condition to "False" with the "InvalidRouteKinds" reason. If both valid and invalid Route kinds are specified, the implementation MUST reference the valid Route kinds that have been specified.
        """
        return pulumi.get(self, "supported_kinds")

    @supported_kinds.setter
    def supported_kinds(self, value: pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersSupportedKindsArgs']]]):
        pulumi.set(self, "supported_kinds", value)


@pulumi.input_type
class GatewayStatusArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[Any]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayStatusConditionsArgs']]]] = None,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersArgs']]]] = None):
        """
        Status defines the current state of Gateway.
        :param pulumi.Input[Sequence[Any]] addresses: Addresses lists the network addresses that have been bound to the Gateway. 
                This list may differ from the addresses provided in the spec under some conditions: 
                * no addresses are specified, all addresses are dynamically assigned * a combination of specified and dynamic addresses are assigned * a specified address was unusable (e.g. already in use) 
                
        :param pulumi.Input[Sequence[pulumi.Input['GatewayStatusConditionsArgs']]] conditions: Conditions describe the current conditions of the Gateway. 
                Implementations should prefer to express Gateway conditions using the `GatewayConditionType` and `GatewayConditionReason` constants so that operators and tools can converge on a common vocabulary to describe Gateway state. 
                Known condition types are: 
                * "Accepted" * "Programmed" * "Ready"
        :param pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersArgs']]] listeners: Listeners provide status for each unique listener port defined in the Spec.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        """
        Addresses lists the network addresses that have been bound to the Gateway. 
         This list may differ from the addresses provided in the spec under some conditions: 
         * no addresses are specified, all addresses are dynamically assigned * a combination of specified and dynamic addresses are assigned * a specified address was unusable (e.g. already in use) 
         
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayStatusConditionsArgs']]]]:
        """
        Conditions describe the current conditions of the Gateway. 
         Implementations should prefer to express Gateway conditions using the `GatewayConditionType` and `GatewayConditionReason` constants so that operators and tools can converge on a common vocabulary to describe Gateway state. 
         Known condition types are: 
         * "Accepted" * "Programmed" * "Ready"
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersArgs']]]]:
        """
        Listeners provide status for each unique listener port defined in the Spec.
        """
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayStatusListenersArgs']]]]):
        pulumi.set(self, "listeners", value)


@pulumi.input_type
class HTTPRouteSpecParentRefsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 section_name: Optional[pulumi.Input[str]] = None):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         This API may be extended in the future to support additional kinds of parent resources. 
         The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
        :param pulumi.Input[str] name: Name is the name of the referent. 
                Support: Core
        :param pulumi.Input[str] group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param pulumi.Input[str] kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param pulumi.Input[int] port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param pulumi.Input[str] section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[pulumi.Input[str]]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")

    @section_name.setter
    def section_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section_name", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         This filter can be used multiple times within the same rule. 
         Support: Implementation-specific
        :param pulumi.Input[str] group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param pulumi.Input[str] kind: Kind is kind of the referent. For example "HTTPRoute" or "Service".
        :param pulumi.Input[str] name: Name is the name of the referent.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is kind of the referent. For example "HTTPRoute" or "Service".
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs']]]] = None,
                 remove: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs']]]] = None):
        """
        RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         Support: Core
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs']]] add: Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: add: - name: "my-header" value: "bar,baz" 
                Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove: Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
                Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
                Config: remove: ["my-header1", "my-header3"] 
                Output: GET /foo HTTP/1.1 my-header2: bar
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs']]] set: Set overwrites the request with the given header (name, value) before the action. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: set: - name: "my-header" value: "bar" 
                Output: GET /foo HTTP/1.1 my-header: bar
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs']]]]:
        """
        Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: add: - name: "my-header" value: "bar,baz" 
         Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
         Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
         Config: remove: ["my-header1", "my-header3"] 
         Output: GET /foo HTTP/1.1 my-header2: bar
        """
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs']]]]:
        """
        Set overwrites the request with the given header (name, value) before the action. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: set: - name: "my-header" value: "bar" 
         Output: GET /foo HTTP/1.1 my-header: bar
        """
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        BackendRef references a resource where mirrored requests are sent. 
         Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        :param pulumi.Input[str] name: Name is the name of the referent.
        :param pulumi.Input[str] group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param pulumi.Input[str] kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param pulumi.Input[str] namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param pulumi.Input[int] port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs:
    def __init__(__self__, *,
                 backend_ref: pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs']):
        """
        RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs'] backend_ref: BackendRef references a resource where mirrored requests are sent. 
                Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
                If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
                If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
                In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
                Support: Extended for Kubernetes Service 
                Support: Implementation-specific for any other resource
        """
        pulumi.set(__self__, "backend_ref", backend_ref)

    @property
    @pulumi.getter(name="backendRef")
    def backend_ref(self) -> pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs']:
        """
        BackendRef references a resource where mirrored requests are sent. 
         Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        """
        return pulumi.get(self, "backend_ref")

    @backend_ref.setter
    def backend_ref(self, value: pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs']):
        pulumi.set(self, "backend_ref", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 replace_full_path: Optional[pulumi.Input[str]] = None,
                 replace_prefix_match: Optional[pulumi.Input[str]] = None):
        """
        Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
         Support: Extended
        :param pulumi.Input[str] type: Type defines the type of path modifier. Additional types may be added in a future release of the API. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        :param pulumi.Input[str] replace_full_path: ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
        :param pulumi.Input[str] replace_prefix_match: ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
                Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
                ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
                Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
        """
        pulumi.set(__self__, "type", type)
        if replace_full_path is not None:
            pulumi.set(__self__, "replace_full_path", replace_full_path)
        if replace_prefix_match is not None:
            pulumi.set(__self__, "replace_prefix_match", replace_prefix_match)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type defines the type of path modifier. Additional types may be added in a future release of the API. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="replaceFullPath")
    def replace_full_path(self) -> Optional[pulumi.Input[str]]:
        """
        ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
        """
        return pulumi.get(self, "replace_full_path")

    @replace_full_path.setter
    def replace_full_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_full_path", value)

    @property
    @pulumi.getter(name="replacePrefixMatch")
    def replace_prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
         Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
         ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
         Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
        """
        return pulumi.get(self, "replace_prefix_match")

    @replace_prefix_match.setter
    def replace_prefix_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_prefix_match", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 status_code: Optional[pulumi.Input[int]] = None):
        """
        RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         Support: Core
        :param pulumi.Input[str] hostname: Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used. 
                Support: Core
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs'] path: Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
                Support: Extended
        :param pulumi.Input[int] port: Port is the port to be used in the value of the `Location` header in the response. 
                If no port is specified, the redirect port MUST be derived using the following rules: 
                * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. 
                Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: 
                * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 443. 
                Support: Extended
        :param pulumi.Input[str] scheme: Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
                Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
                Support: Extended
        :param pulumi.Input[int] status_code: StatusCode is the HTTP status code to be used in response. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
                Support: Core
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if status_code is None:
            status_code = 302
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used. 
         Support: Core
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs']]:
        """
        Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
         Support: Extended
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the port to be used in the value of the `Location` header in the response. 
         If no port is specified, the redirect port MUST be derived using the following rules: 
         * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. 
         Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: 
         * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 443. 
         Support: Extended
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
         Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
         Support: Extended
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[int]]:
        """
        StatusCode is the HTTP status code to be used in response. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
         Support: Core
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_code", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs']]]] = None,
                 remove: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs']]]] = None):
        """
        ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         Support: Extended
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs']]] add: Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: add: - name: "my-header" value: "bar,baz" 
                Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove: Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
                Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
                Config: remove: ["my-header1", "my-header3"] 
                Output: GET /foo HTTP/1.1 my-header2: bar
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs']]] set: Set overwrites the request with the given header (name, value) before the action. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: set: - name: "my-header" value: "bar" 
                Output: GET /foo HTTP/1.1 my-header: bar
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs']]]]:
        """
        Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: add: - name: "my-header" value: "bar,baz" 
         Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
         Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
         Config: remove: ["my-header1", "my-header3"] 
         Output: GET /foo HTTP/1.1 my-header2: bar
        """
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs']]]]:
        """
        Set overwrites the request with the given header (name, value) before the action. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: set: - name: "my-header" value: "bar" 
         Output: GET /foo HTTP/1.1 my-header: bar
        """
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 replace_full_path: Optional[pulumi.Input[str]] = None,
                 replace_prefix_match: Optional[pulumi.Input[str]] = None):
        """
        Path defines a path rewrite. 
         Support: Extended
        :param pulumi.Input[str] type: Type defines the type of path modifier. Additional types may be added in a future release of the API. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        :param pulumi.Input[str] replace_full_path: ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
        :param pulumi.Input[str] replace_prefix_match: ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
                Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
                ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
                Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
        """
        pulumi.set(__self__, "type", type)
        if replace_full_path is not None:
            pulumi.set(__self__, "replace_full_path", replace_full_path)
        if replace_prefix_match is not None:
            pulumi.set(__self__, "replace_prefix_match", replace_prefix_match)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type defines the type of path modifier. Additional types may be added in a future release of the API. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="replaceFullPath")
    def replace_full_path(self) -> Optional[pulumi.Input[str]]:
        """
        ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
        """
        return pulumi.get(self, "replace_full_path")

    @replace_full_path.setter
    def replace_full_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_full_path", value)

    @property
    @pulumi.getter(name="replacePrefixMatch")
    def replace_prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
         Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
         ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
         Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
        """
        return pulumi.get(self, "replace_prefix_match")

    @replace_prefix_match.setter
    def replace_prefix_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_prefix_match", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs']] = None):
        """
        URLRewrite defines a schema for a filter that modifies a request during forwarding. 
         Support: Extended
        :param pulumi.Input[str] hostname: Hostname is the value to be used to replace the Host header value during forwarding. 
                Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs'] path: Path defines a path rewrite. 
                Support: Extended
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname is the value to be used to replace the Host header value during forwarding. 
         Support: Extended
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs']]:
        """
        Path defines a path rewrite. 
         Support: Extended
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathArgs']]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsFiltersArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 extension_ref: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs']] = None,
                 request_header_modifier: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs']] = None,
                 request_mirror: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs']] = None,
                 request_redirect: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs']] = None,
                 response_header_modifier: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs']] = None,
                 url_rewrite: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs']] = None):
        """
        HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
        :param pulumi.Input[str] type: Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
                - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations must support core filters. 
                - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
                - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` should be set to "ExtensionRef" for custom filters. 
                Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
                If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs'] extension_ref: ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
                This filter can be used multiple times within the same rule. 
                Support: Implementation-specific
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs'] request_header_modifier: RequestHeaderModifier defines a schema for a filter that modifies request headers. 
                Support: Core
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs'] request_mirror: RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
                This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
                Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs'] request_redirect: RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
                Support: Core
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs'] response_header_modifier: ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
                Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs'] url_rewrite: URLRewrite defines a schema for a filter that modifies a request during forwarding. 
                Support: Extended
        """
        pulumi.set(__self__, "type", type)
        if extension_ref is not None:
            pulumi.set(__self__, "extension_ref", extension_ref)
        if request_header_modifier is not None:
            pulumi.set(__self__, "request_header_modifier", request_header_modifier)
        if request_mirror is not None:
            pulumi.set(__self__, "request_mirror", request_mirror)
        if request_redirect is not None:
            pulumi.set(__self__, "request_redirect", request_redirect)
        if response_header_modifier is not None:
            pulumi.set(__self__, "response_header_modifier", response_header_modifier)
        if url_rewrite is not None:
            pulumi.set(__self__, "url_rewrite", url_rewrite)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
         - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations must support core filters. 
         - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
         - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` should be set to "ExtensionRef" for custom filters. 
         Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
         If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="extensionRef")
    def extension_ref(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs']]:
        """
        ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         This filter can be used multiple times within the same rule. 
         Support: Implementation-specific
        """
        return pulumi.get(self, "extension_ref")

    @extension_ref.setter
    def extension_ref(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersExtensionRefArgs']]):
        pulumi.set(self, "extension_ref", value)

    @property
    @pulumi.getter(name="requestHeaderModifier")
    def request_header_modifier(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs']]:
        """
        RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         Support: Core
        """
        return pulumi.get(self, "request_header_modifier")

    @request_header_modifier.setter
    def request_header_modifier(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs']]):
        pulumi.set(self, "request_header_modifier", value)

    @property
    @pulumi.getter(name="requestMirror")
    def request_mirror(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs']]:
        """
        RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         Support: Extended
        """
        return pulumi.get(self, "request_mirror")

    @request_mirror.setter
    def request_mirror(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorArgs']]):
        pulumi.set(self, "request_mirror", value)

    @property
    @pulumi.getter(name="requestRedirect")
    def request_redirect(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs']]:
        """
        RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         Support: Core
        """
        return pulumi.get(self, "request_redirect")

    @request_redirect.setter
    def request_redirect(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectArgs']]):
        pulumi.set(self, "request_redirect", value)

    @property
    @pulumi.getter(name="responseHeaderModifier")
    def response_header_modifier(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs']]:
        """
        ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         Support: Extended
        """
        return pulumi.get(self, "response_header_modifier")

    @response_header_modifier.setter
    def response_header_modifier(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs']]):
        pulumi.set(self, "response_header_modifier", value)

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs']]:
        """
        URLRewrite defines a schema for a filter that modifies a request during forwarding. 
         Support: Extended
        """
        return pulumi.get(self, "url_rewrite")

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersUrlRewriteArgs']]):
        pulumi.set(self, "url_rewrite", value)


@pulumi.input_type
class HTTPRouteSpecRulesBackendRefsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersArgs']]]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        HTTPBackendRef defines how a HTTPRoute forwards a HTTP request. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         <gateway:experimental:description> 
         When the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port. 
         Implementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726. 
         If a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service. 
         If a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason. 
         </gateway:experimental:description>
        :param pulumi.Input[str] name: Name is the name of the referent.
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersArgs']]] filters: Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. 
                Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)
        :param pulumi.Input[str] group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param pulumi.Input[str] kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param pulumi.Input[str] namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param pulumi.Input[int] port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        :param pulumi.Input[int] weight: Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
                If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
                Support for this field varies based on the context where used.
        """
        pulumi.set(__self__, "name", name)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if weight is None:
            weight = 1
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersArgs']]]]:
        """
        Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here. 
         Support: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsFiltersArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100. 
         If only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1. 
         Support for this field varies based on the context where used.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersExtensionRefArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         This filter can be used multiple times within the same rule. 
         Support: Implementation-specific
        :param pulumi.Input[str] group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param pulumi.Input[str] kind: Kind is kind of the referent. For example "HTTPRoute" or "Service".
        :param pulumi.Input[str] name: Name is the name of the referent.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is kind of the referent. For example "HTTPRoute" or "Service".
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs']]]] = None,
                 remove: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs']]]] = None):
        """
        RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         Support: Core
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs']]] add: Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: add: - name: "my-header" value: "bar,baz" 
                Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove: Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
                Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
                Config: remove: ["my-header1", "my-header3"] 
                Output: GET /foo HTTP/1.1 my-header2: bar
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs']]] set: Set overwrites the request with the given header (name, value) before the action. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: set: - name: "my-header" value: "bar" 
                Output: GET /foo HTTP/1.1 my-header: bar
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs']]]]:
        """
        Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: add: - name: "my-header" value: "bar,baz" 
         Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
         Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
         Config: remove: ["my-header1", "my-header3"] 
         Output: GET /foo HTTP/1.1 my-header2: bar
        """
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs']]]]:
        """
        Set overwrites the request with the given header (name, value) before the action. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: set: - name: "my-header" value: "bar" 
         Output: GET /foo HTTP/1.1 my-header: bar
        """
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        BackendRef references a resource where mirrored requests are sent. 
         Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        :param pulumi.Input[str] name: Name is the name of the referent.
        :param pulumi.Input[str] group: Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        :param pulumi.Input[str] kind: Kind is the Kubernetes resource kind of the referent. For example "Service". 
                Defaults to "Service" when not specified. 
                ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
                Support: Core (Services with a type other than ExternalName) 
                Support: Implementation-specific (Services with type ExternalName)
        :param pulumi.Input[str] namespace: Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
                Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
                Support: Core
        :param pulumi.Input[int] port: Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = ''
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Service'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent. For example, "gateway.networking.k8s.io". When unspecified or empty string, core API group is inferred.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is the Kubernetes resource kind of the referent. For example "Service". 
         Defaults to "Service" when not specified. 
         ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services. 
         Support: Core (Services with a type other than ExternalName) 
         Support: Implementation-specific (Services with type ExternalName)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the backend. When unspecified, the local namespace is inferred. 
         Note that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersRequestMirrorArgs:
    def __init__(__self__, *,
                 backend_ref: pulumi.Input['HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs']):
        """
        RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs'] backend_ref: BackendRef references a resource where mirrored requests are sent. 
                Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
                If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
                If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
                In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
                Support: Extended for Kubernetes Service 
                Support: Implementation-specific for any other resource
        """
        pulumi.set(__self__, "backend_ref", backend_ref)

    @property
    @pulumi.getter(name="backendRef")
    def backend_ref(self) -> pulumi.Input['HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs']:
        """
        BackendRef references a resource where mirrored requests are sent. 
         Mirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef. 
         If the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the "ResolvedRefs" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation. 
         If there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the "ResolvedRefs"  condition on the Route is set to `status: False`, with the "RefNotPermitted" reason and not configure this backend in the underlying implementation. 
         In either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem. 
         Support: Extended for Kubernetes Service 
         Support: Implementation-specific for any other resource
        """
        return pulumi.get(self, "backend_ref")

    @backend_ref.setter
    def backend_ref(self, value: pulumi.Input['HTTPRouteSpecRulesFiltersRequestMirrorBackendRefArgs']):
        pulumi.set(self, "backend_ref", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersRequestRedirectPathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 replace_full_path: Optional[pulumi.Input[str]] = None,
                 replace_prefix_match: Optional[pulumi.Input[str]] = None):
        """
        Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
         Support: Extended
        :param pulumi.Input[str] type: Type defines the type of path modifier. Additional types may be added in a future release of the API. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        :param pulumi.Input[str] replace_full_path: ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
        :param pulumi.Input[str] replace_prefix_match: ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
                Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
                ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
                Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
        """
        pulumi.set(__self__, "type", type)
        if replace_full_path is not None:
            pulumi.set(__self__, "replace_full_path", replace_full_path)
        if replace_prefix_match is not None:
            pulumi.set(__self__, "replace_prefix_match", replace_prefix_match)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type defines the type of path modifier. Additional types may be added in a future release of the API. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="replaceFullPath")
    def replace_full_path(self) -> Optional[pulumi.Input[str]]:
        """
        ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
        """
        return pulumi.get(self, "replace_full_path")

    @replace_full_path.setter
    def replace_full_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_full_path", value)

    @property
    @pulumi.getter(name="replacePrefixMatch")
    def replace_prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
         Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
         ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
         Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
        """
        return pulumi.get(self, "replace_prefix_match")

    @replace_prefix_match.setter
    def replace_prefix_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_prefix_match", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersRequestRedirectArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestRedirectPathArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 status_code: Optional[pulumi.Input[int]] = None):
        """
        RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         Support: Core
        :param pulumi.Input[str] hostname: Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used. 
                Support: Core
        :param pulumi.Input['HTTPRouteSpecRulesFiltersRequestRedirectPathArgs'] path: Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
                Support: Extended
        :param pulumi.Input[int] port: Port is the port to be used in the value of the `Location` header in the response. 
                If no port is specified, the redirect port MUST be derived using the following rules: 
                * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. 
                Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: 
                * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 443. 
                Support: Extended
        :param pulumi.Input[str] scheme: Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
                Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
                Support: Extended
        :param pulumi.Input[int] status_code: StatusCode is the HTTP status code to be used in response. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
                Support: Core
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if status_code is None:
            status_code = 302
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used. 
         Support: Core
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestRedirectPathArgs']]:
        """
        Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is. 
         Support: Extended
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestRedirectPathArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the port to be used in the value of the `Location` header in the response. 
         If no port is specified, the redirect port MUST be derived using the following rules: 
         * If redirect scheme is not-empty, the redirect port MUST be the well-known port associated with the redirect scheme. Specifically "http" to port 80 and "https" to port 443. If the redirect scheme does not have a well-known port, the listener port of the Gateway SHOULD be used. * If redirect scheme is empty, the redirect port MUST be the Gateway Listener port. 
         Implementations SHOULD NOT add the port number in the 'Location' header in the following cases: 
         * A Location header that will use HTTP (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 80. * A Location header that will use HTTPS (whether that is determined via the Listener protocol or the Scheme field) _and_ use port 443. 
         Support: Extended
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used. 
         Scheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
         Support: Extended
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[int]]:
        """
        StatusCode is the HTTP status code to be used in response. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`. 
         Support: Core
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_code", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs']]]] = None,
                 remove: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs']]]] = None):
        """
        ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         Support: Extended
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs']]] add: Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: add: - name: "my-header" value: "bar,baz" 
                Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove: Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
                Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
                Config: remove: ["my-header1", "my-header3"] 
                Output: GET /foo HTTP/1.1 my-header2: bar
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs']]] set: Set overwrites the request with the given header (name, value) before the action. 
                Input: GET /foo HTTP/1.1 my-header: foo 
                Config: set: - name: "my-header" value: "bar" 
                Output: GET /foo HTTP/1.1 my-header: bar
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs']]]]:
        """
        Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: add: - name: "my-header" value: "bar,baz" 
         Output: GET /foo HTTP/1.1 my-header: foo,bar,baz
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2). 
         Input: GET /foo HTTP/1.1 my-header1: foo my-header2: bar my-header3: baz 
         Config: remove: ["my-header1", "my-header3"] 
         Output: GET /foo HTTP/1.1 my-header2: bar
        """
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs']]]]:
        """
        Set overwrites the request with the given header (name, value) before the action. 
         Input: GET /foo HTTP/1.1 my-header: foo 
         Config: set: - name: "my-header" value: "bar" 
         Output: GET /foo HTTP/1.1 my-header: bar
        """
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersUrlRewritePathArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 replace_full_path: Optional[pulumi.Input[str]] = None,
                 replace_prefix_match: Optional[pulumi.Input[str]] = None):
        """
        Path defines a path rewrite. 
         Support: Extended
        :param pulumi.Input[str] type: Type defines the type of path modifier. Additional types may be added in a future release of the API. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        :param pulumi.Input[str] replace_full_path: ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
        :param pulumi.Input[str] replace_prefix_match: ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
                Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
                ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
                Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
        """
        pulumi.set(__self__, "type", type)
        if replace_full_path is not None:
            pulumi.set(__self__, "replace_full_path", replace_full_path)
        if replace_prefix_match is not None:
            pulumi.set(__self__, "replace_prefix_match", replace_prefix_match)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type defines the type of path modifier. Additional types may be added in a future release of the API. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="replaceFullPath")
    def replace_full_path(self) -> Optional[pulumi.Input[str]]:
        """
        ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.
        """
        return pulumi.get(self, "replace_full_path")

    @replace_full_path.setter
    def replace_full_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_full_path", value)

    @property
    @pulumi.getter(name="replacePrefixMatch")
    def replace_prefix_match(self) -> Optional[pulumi.Input[str]]:
        """
        ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch of "/xyz" would be modified to "/xyz/bar". 
         Note that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not. 
         ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`. 
         Request Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | <empty string> | /bar /foo/        | /foo         | <empty string> | / /foo         | /foo         | <empty string> | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /
        """
        return pulumi.get(self, "replace_prefix_match")

    @replace_prefix_match.setter
    def replace_prefix_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace_prefix_match", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersUrlRewriteArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersUrlRewritePathArgs']] = None):
        """
        URLRewrite defines a schema for a filter that modifies a request during forwarding. 
         Support: Extended
        :param pulumi.Input[str] hostname: Hostname is the value to be used to replace the Host header value during forwarding. 
                Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesFiltersUrlRewritePathArgs'] path: Path defines a path rewrite. 
                Support: Extended
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname is the value to be used to replace the Host header value during forwarding. 
         Support: Extended
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesFiltersUrlRewritePathArgs']]:
        """
        Path defines a path rewrite. 
         Support: Extended
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersUrlRewritePathArgs']]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class HTTPRouteSpecRulesFiltersArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 extension_ref: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersExtensionRefArgs']] = None,
                 request_header_modifier: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs']] = None,
                 request_mirror: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestMirrorArgs']] = None,
                 request_redirect: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestRedirectArgs']] = None,
                 response_header_modifier: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs']] = None,
                 url_rewrite: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersUrlRewriteArgs']] = None):
        """
        HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.
        :param pulumi.Input[str] type: Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
                - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations must support core filters. 
                - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
                - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` should be set to "ExtensionRef" for custom filters. 
                Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
                If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
                Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
                Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        :param pulumi.Input['HTTPRouteSpecRulesFiltersExtensionRefArgs'] extension_ref: ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
                This filter can be used multiple times within the same rule. 
                Support: Implementation-specific
        :param pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs'] request_header_modifier: RequestHeaderModifier defines a schema for a filter that modifies request headers. 
                Support: Core
        :param pulumi.Input['HTTPRouteSpecRulesFiltersRequestMirrorArgs'] request_mirror: RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
                This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
                Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesFiltersRequestRedirectArgs'] request_redirect: RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
                Support: Core
        :param pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs'] response_header_modifier: ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
                Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesFiltersUrlRewriteArgs'] url_rewrite: URLRewrite defines a schema for a filter that modifies a request during forwarding. 
                Support: Extended
        """
        pulumi.set(__self__, "type", type)
        if extension_ref is not None:
            pulumi.set(__self__, "extension_ref", extension_ref)
        if request_header_modifier is not None:
            pulumi.set(__self__, "request_header_modifier", request_header_modifier)
        if request_mirror is not None:
            pulumi.set(__self__, "request_mirror", request_mirror)
        if request_redirect is not None:
            pulumi.set(__self__, "request_redirect", request_redirect)
        if response_header_modifier is not None:
            pulumi.set(__self__, "response_header_modifier", response_header_modifier)
        if url_rewrite is not None:
            pulumi.set(__self__, "url_rewrite", url_rewrite)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels: 
         - Core: Filter types and their corresponding configuration defined by "Support: Core" in this package, e.g. "RequestHeaderModifier". All implementations must support core filters. 
         - Extended: Filter types and their corresponding configuration defined by "Support: Extended" in this package, e.g. "RequestMirror". Implementers are encouraged to support extended filters. 
         - Implementation-specific: Filters that are defined and supported by specific vendors. In the future, filters showing convergence in behavior across multiple implementations will be considered for inclusion in extended or core conformance levels. Filter-specific configuration for such filters is specified using the ExtensionRef field. `Type` should be set to "ExtensionRef" for custom filters. 
         Implementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior. 
         If a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response. 
         Note that values may be added to this enum, implementations must ensure that unknown values will not cause a crash. 
         Unknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="extensionRef")
    def extension_ref(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesFiltersExtensionRefArgs']]:
        """
        ExtensionRef is an optional, implementation-specific extension to the "filter" behavior.  For example, resource "myroutefilter" in group "networking.example.net"). ExtensionRef MUST NOT be used for core and extended filters. 
         This filter can be used multiple times within the same rule. 
         Support: Implementation-specific
        """
        return pulumi.get(self, "extension_ref")

    @extension_ref.setter
    def extension_ref(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersExtensionRefArgs']]):
        pulumi.set(self, "extension_ref", value)

    @property
    @pulumi.getter(name="requestHeaderModifier")
    def request_header_modifier(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs']]:
        """
        RequestHeaderModifier defines a schema for a filter that modifies request headers. 
         Support: Core
        """
        return pulumi.get(self, "request_header_modifier")

    @request_header_modifier.setter
    def request_header_modifier(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestHeaderModifierArgs']]):
        pulumi.set(self, "request_header_modifier", value)

    @property
    @pulumi.getter(name="requestMirror")
    def request_mirror(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestMirrorArgs']]:
        """
        RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored. 
         This filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends. 
         Support: Extended
        """
        return pulumi.get(self, "request_mirror")

    @request_mirror.setter
    def request_mirror(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestMirrorArgs']]):
        pulumi.set(self, "request_mirror", value)

    @property
    @pulumi.getter(name="requestRedirect")
    def request_redirect(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestRedirectArgs']]:
        """
        RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection. 
         Support: Core
        """
        return pulumi.get(self, "request_redirect")

    @request_redirect.setter
    def request_redirect(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersRequestRedirectArgs']]):
        pulumi.set(self, "request_redirect", value)

    @property
    @pulumi.getter(name="responseHeaderModifier")
    def response_header_modifier(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs']]:
        """
        ResponseHeaderModifier defines a schema for a filter that modifies response headers. 
         Support: Extended
        """
        return pulumi.get(self, "response_header_modifier")

    @response_header_modifier.setter
    def response_header_modifier(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersResponseHeaderModifierArgs']]):
        pulumi.set(self, "response_header_modifier", value)

    @property
    @pulumi.getter(name="urlRewrite")
    def url_rewrite(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesFiltersUrlRewriteArgs']]:
        """
        URLRewrite defines a schema for a filter that modifies a request during forwarding. 
         Support: Extended
        """
        return pulumi.get(self, "url_rewrite")

    @url_rewrite.setter
    def url_rewrite(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesFiltersUrlRewriteArgs']]):
        pulumi.set(self, "url_rewrite", value)


@pulumi.input_type
class HTTPRouteSpecRulesMatchesHeadersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request headers.
        :param pulumi.Input[str] name: Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
                If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent. 
                When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for "Set-Cookie".
        :param pulumi.Input[str] value: Value is the value of HTTP Header to be matched.
        :param pulumi.Input[str] type: Type specifies how to match against the value of the header. 
                Support: Core (Exact) 
                Support: Implementation-specific (RegularExpression) 
                Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is None:
            type = 'Exact'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2). 
         If multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, "foo" and "Foo" are considered equivalent. 
         When a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for "Set-Cookie".
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP Header to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type specifies how to match against the value of the header. 
         Support: Core (Exact) 
         Support: Implementation-specific (RegularExpression) 
         Since RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class HTTPRouteSpecRulesMatchesPathArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
        :param pulumi.Input[str] type: Type specifies how to match against the path Value. 
                Support: Core (Exact, PathPrefix) 
                Support: Implementation-specific (RegularExpression)
        :param pulumi.Input[str] value: Value of the HTTP path to match against.
        """
        if type is None:
            type = 'PathPrefix'
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is None:
            value = '/'
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type specifies how to match against the path Value. 
         Support: Core (Exact, PathPrefix) 
         Support: Implementation-specific (RegularExpression)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the HTTP path to match against.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HTTPRouteSpecRulesMatchesQueryParamsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP query parameters.
        :param pulumi.Input[str] name: Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). 
                If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. 
                If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is *recommended* that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. 
                Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.
        :param pulumi.Input[str] value: Value is the value of HTTP query param to be matched.
        :param pulumi.Input[str] type: Type specifies how to match against the value of the query parameter. 
                Support: Extended (Exact) 
                Support: Implementation-specific (RegularExpression) 
                Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is None:
            type = 'Exact'
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3). 
         If multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored. 
         If a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is *recommended* that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API. 
         Users SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value is the value of HTTP query param to be matched.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type specifies how to match against the value of the query parameter. 
         Support: Extended (Exact) 
         Support: Implementation-specific (RegularExpression) 
         Since RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class HTTPRouteSpecRulesMatchesArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesHeadersArgs']]]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input['HTTPRouteSpecRulesMatchesPathArgs']] = None,
                 query_params: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesQueryParamsArgs']]]] = None):
        """
        HTTPRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied. 
         For example, the match below will match a HTTP request only if its path starts with `/foo` AND it contains the `version: v1` header: 
         ``` match: 
         path: value: "/foo" headers: - name: "version" value "v1" 
         ```
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesHeadersArgs']]] headers: Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.
        :param pulumi.Input[str] method: Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. 
                Support: Extended
        :param pulumi.Input['HTTPRouteSpecRulesMatchesPathArgs'] path: Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesQueryParamsArgs']]] query_params: QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. 
                Support: Extended
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query_params is not None:
            pulumi.set(__self__, "query_params", query_params)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesHeadersArgs']]]]:
        """
        Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesHeadersArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method. 
         Support: Extended
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesMatchesPathArgs']]:
        """
        Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the "/" path is provided.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesMatchesPathArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="queryParams")
    def query_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesQueryParamsArgs']]]]:
        """
        QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route. 
         Support: Extended
        """
        return pulumi.get(self, "query_params")

    @query_params.setter
    def query_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesQueryParamsArgs']]]]):
        pulumi.set(self, "query_params", value)


@pulumi.input_type
class HTTPRouteSpecRulesTimeoutsArgs:
    def __init__(__self__, *,
                 backend_request: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None):
        """
        Timeouts defines the timeouts that can be configured for an HTTP request. 
         Support: Extended 
         
        :param pulumi.Input[str] backend_request: BackendRequest specifies a timeout for an individual request from the gateway to a backend. This covers the time from when the request first starts being sent from the gateway to when the full response has been received from the backend. 
                An entire client HTTP transaction with a gateway, covered by the Request timeout, may result in more than one call from the gateway to the destination backend, for example, if automatic retries are supported. 
                Because the Request timeout encompasses the BackendRequest timeout, the value of BackendRequest must be <= the value of Request timeout. 
                Support: Extended
        :param pulumi.Input[str] request: Request specifies the maximum duration for a gateway to respond to an HTTP request. If the gateway has not been able to respond before this deadline is met, the gateway MUST return a timeout error. 
                For example, setting the `rules.timeouts.request` field to the value `10s` in an `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds to complete. 
                This timeout is intended to cover as close to the whole request-response transaction as possible although an implementation MAY choose to start the timeout after the entire request stream has been received instead of immediately after the transaction is initiated by the client. 
                When this field is unspecified, request timeout behavior is implementation-specific. 
                Support: Extended
        """
        if backend_request is not None:
            pulumi.set(__self__, "backend_request", backend_request)
        if request is not None:
            pulumi.set(__self__, "request", request)

    @property
    @pulumi.getter(name="backendRequest")
    def backend_request(self) -> Optional[pulumi.Input[str]]:
        """
        BackendRequest specifies a timeout for an individual request from the gateway to a backend. This covers the time from when the request first starts being sent from the gateway to when the full response has been received from the backend. 
         An entire client HTTP transaction with a gateway, covered by the Request timeout, may result in more than one call from the gateway to the destination backend, for example, if automatic retries are supported. 
         Because the Request timeout encompasses the BackendRequest timeout, the value of BackendRequest must be <= the value of Request timeout. 
         Support: Extended
        """
        return pulumi.get(self, "backend_request")

    @backend_request.setter
    def backend_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_request", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        Request specifies the maximum duration for a gateway to respond to an HTTP request. If the gateway has not been able to respond before this deadline is met, the gateway MUST return a timeout error. 
         For example, setting the `rules.timeouts.request` field to the value `10s` in an `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds to complete. 
         This timeout is intended to cover as close to the whole request-response transaction as possible although an implementation MAY choose to start the timeout after the entire request stream has been received instead of immediately after the transaction is initiated by the client. 
         When this field is unspecified, request timeout behavior is implementation-specific. 
         Support: Extended
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)


@pulumi.input_type
class HTTPRouteSpecRulesArgs:
    def __init__(__self__, *,
                 backend_refs: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsArgs']]]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersArgs']]]] = None,
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['HTTPRouteSpecRulesTimeoutsArgs']] = None):
        """
        HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsArgs']]] backend_refs: BackendRefs defines the backend(s) where matching requests should be sent. 
                Failure behavior here depends on how many BackendRefs are specified and how many are invalid. 
                If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive a 500 status code. 
                See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. 
                When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. 
                For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. 
                Support: Core for Kubernetes Service 
                Support: Extended for Kubernetes ServiceImport 
                Support: Implementation-specific for any other resource 
                Support for weight: Core
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersArgs']]] filters: Filters define the filters that are applied to requests that match this rule. 
                The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
                Conformance-levels at this level are defined based on the type of filter: 
                - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. 
                Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. 
                All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error. 
                Support: Core
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesArgs']]] matches: Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
                For example, take the following matches configuration: 
                ``` matches: - path: value: "/foo" headers: - name: "version" value: "v2" - path: value: "/v2/foo" ``` 
                For a request to match against this rule, a request must satisfy EITHER of the two conditions: 
                - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo` 
                See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. 
                If no matches are specified, the default is a prefix path match on "/", which has the effect of matching every HTTP request. 
                Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: 
                * "Exact" path match. * "Prefix" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. 
                Note: The precedence of RegularExpression path matches are implementation-specific. 
                If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
                * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
                If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. 
                When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.
        :param pulumi.Input['HTTPRouteSpecRulesTimeoutsArgs'] timeouts: Timeouts defines the timeouts that can be configured for an HTTP request. 
                Support: Extended 
                
        """
        if backend_refs is not None:
            pulumi.set(__self__, "backend_refs", backend_refs)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="backendRefs")
    def backend_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsArgs']]]]:
        """
        BackendRefs defines the backend(s) where matching requests should be sent. 
         Failure behavior here depends on how many BackendRefs are specified and how many are invalid. 
         If *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive a 500 status code. 
         See the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid. 
         When a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code. 
         For example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined. 
         Support: Core for Kubernetes Service 
         Support: Extended for Kubernetes ServiceImport 
         Support: Implementation-specific for any other resource 
         Support for weight: Core
        """
        return pulumi.get(self, "backend_refs")

    @backend_refs.setter
    def backend_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesBackendRefsArgs']]]]):
        pulumi.set(self, "backend_refs", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersArgs']]]]:
        """
        Filters define the filters that are applied to requests that match this rule. 
         The effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage. 
         Conformance-levels at this level are defined based on the type of filter: 
         - ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across implementations. 
         Specifying the same filter multiple times is not supported unless explicitly indicated in the filter. 
         All filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error. 
         Support: Core
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesFiltersArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesArgs']]]]:
        """
        Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied. 
         For example, take the following matches configuration: 
         ``` matches: - path: value: "/foo" headers: - name: "version" value: "v2" - path: value: "/v2/foo" ``` 
         For a request to match against this rule, a request must satisfy EITHER of the two conditions: 
         - path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo` 
         See the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together. 
         If no matches are specified, the default is a prefix path match on "/", which has the effect of matching every HTTP request. 
         Proxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having: 
         * "Exact" path match. * "Prefix" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches. 
         Note: The precedence of RegularExpression path matches are implementation-specific. 
         If ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties: 
         * The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by "{namespace}/{name}". 
         If ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria. 
         When no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesMatchesArgs']]]]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['HTTPRouteSpecRulesTimeoutsArgs']]:
        """
        Timeouts defines the timeouts that can be configured for an HTTP request. 
         Support: Extended 
         
        """
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['HTTPRouteSpecRulesTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class HTTPRouteSpecArgs:
    def __init__(__self__, *,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parent_refs: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecParentRefsArgs']]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesArgs']]]] = None):
        """
        Spec defines the desired state of HTTPRoute.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hostnames: Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. 
                Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: 
                1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. 
                If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: 
                * A Listener with `test.example.com` as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `*.example.com`, `test.example.com`, and `foo.test.example.com` would all match. On the other hand, `example.com` and `test.example.net` would not match. 
                Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
                If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
                If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
                In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: 
                * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. 
                If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. 
                Support: Core
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecParentRefsArgs']]] parent_refs: ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
                ParentRefs must be _distinct_. This means either that: 
                * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
                Some examples: 
                * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
                It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
                Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesArgs']]] rules: Rules are a list of HTTP matchers, filters and actions.
        """
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend. 
         Valid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions: 
         1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. 
         If a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example: 
         * A Listener with `test.example.com` as the hostname matches HTTPRoutes that have either not specified any hostnames, or have specified at least one of `test.example.com` or `*.example.com`. * A Listener with `*.example.com` as the hostname matches HTTPRoutes that have either not specified any hostnames or have specified at least one hostname that matches the Listener hostname. For example, `*.example.com`, `test.example.com`, and `foo.test.example.com` would all match. On the other hand, `example.com` and `test.example.net` would not match. 
         Hostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`. 
         If both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match. 
         If both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus. 
         In the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of: 
         * Characters in a matching non-wildcard hostname. * Characters in a matching hostname. 
         If ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over. 
         Support: Core
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hostnames", value)

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecParentRefsArgs']]]]:
        """
        ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a "producer" route, or the mesh implementation must support and allow "consumer" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a "producer" route for a Service in a different namespace from the Route. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile)  * Service (Mesh conformance profile, experimental, ClusterIP Services only)  This API may be extended in the future to support additional kinds of parent resources. 
         ParentRefs must be _distinct_. This means either that: 
         * They select different objects.  If this is the case, then parentRef entries are distinct. In terms of fields, this means that the multi-part key defined by `group`, `kind`, `namespace`, and `name` must be unique across all parentRef entries in the Route. * They do not select different objects, but for each optional field used, each ParentRef that selects the same object must set the same set of optional fields to different values. If one ParentRef sets a combination of optional fields, all must set the same combination. 
         Some examples: 
         * If one ParentRef sets `sectionName`, all ParentRefs referencing the same object must also set `sectionName`. * If one ParentRef sets `port`, all ParentRefs referencing the same object must also set `port`. * If one ParentRef sets `sectionName` and `port`, all ParentRefs referencing the same object must also set `sectionName` and `port`. 
         It is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged. 
         Note that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         
        """
        return pulumi.get(self, "parent_refs")

    @parent_refs.setter
    def parent_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecParentRefsArgs']]]]):
        pulumi.set(self, "parent_refs", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesArgs']]]]:
        """
        Rules are a list of HTTP matchers, filters and actions.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteSpecRulesArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class HTTPRouteStatusParentsConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 message: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 observed_generation: Optional[pulumi.Input[int]] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param pulumi.Input[str] last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param pulumi.Input[str] message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param pulumi.Input[str] reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param pulumi.Input[str] status: status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param pulumi.Input[int] observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)


@pulumi.input_type
class HTTPRouteStatusParentsParentRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 section_name: Optional[pulumi.Input[str]] = None):
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param pulumi.Input[str] name: Name is the name of the referent. 
                Support: Core
        :param pulumi.Input[str] group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param pulumi.Input[str] kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                 ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
                Support: Core
        :param pulumi.Input[int] port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                 When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                
        :param pulumi.Input[str] section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
          ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route.  
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
          When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values.  
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[pulumi.Input[str]]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")

    @section_name.setter
    def section_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section_name", value)


@pulumi.input_type
class HTTPRouteStatusParentsArgs:
    def __init__(__self__, *,
                 controller_name: pulumi.Input[str],
                 parent_ref: pulumi.Input['HTTPRouteStatusParentsParentRefArgs'],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteStatusParentsConditionsArgs']]]] = None):
        """
        RouteParentStatus describes the status of a route with respect to an associated Parent.
        :param pulumi.Input[str] controller_name: ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
                Example: "example.net/gateway-controller". 
                The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
                Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        :param pulumi.Input['HTTPRouteStatusParentsParentRefArgs'] parent_ref: ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteStatusParentsConditionsArgs']]] conditions: Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
                If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
                A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
                There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
                * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        pulumi.set(__self__, "controller_name", controller_name)
        pulumi.set(__self__, "parent_ref", parent_ref)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter(name="controllerName")
    def controller_name(self) -> pulumi.Input[str]:
        """
        ControllerName is a domain/path string that indicates the name of the controller that wrote this status. This corresponds with the controllerName field on GatewayClass. 
         Example: "example.net/gateway-controller". 
         The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are valid Kubernetes names (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names). 
         Controllers MUST populate this field when writing status. Controllers should ensure that entries to status populated with their ControllerName are cleaned up when they are no longer necessary.
        """
        return pulumi.get(self, "controller_name")

    @controller_name.setter
    def controller_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "controller_name", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> pulumi.Input['HTTPRouteStatusParentsParentRefArgs']:
        """
        ParentRef corresponds with a ParentRef in the spec that this RouteParentStatus struct describes the status of.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: pulumi.Input['HTTPRouteStatusParentsParentRefArgs']):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteStatusParentsConditionsArgs']]]]:
        """
        Conditions describes the status of the route with respect to the Gateway. Note that the route's availability is also subject to the Gateway's own status conditions and listener status. 
         If the Route's ParentRef specifies an existing Gateway that supports Routes of this kind AND that Gateway's controller has sufficient access, then that Gateway's controller MUST set the "Accepted" condition on the Route, to indicate whether the route has been accepted or rejected by the Gateway, and why. 
         A Route MUST be considered "Accepted" if at least one of the Route's rules is implemented by the Gateway. 
         There are a number of cases where the "Accepted" condition may not be set due to lack of controller visibility, that includes when: 
         * The Route refers to a non-existent parent. * The Route is of a type that the controller does not support. * The Route is in a namespace the controller does not have access to.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HTTPRouteStatusParentsConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class HTTPRouteStatusArgs:
    def __init__(__self__, *,
                 parents: pulumi.Input[Sequence[pulumi.Input['HTTPRouteStatusParentsArgs']]]):
        """
        Status defines the current state of HTTPRoute.
        :param pulumi.Input[Sequence[pulumi.Input['HTTPRouteStatusParentsArgs']]] parents: Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
                Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
                A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        pulumi.set(__self__, "parents", parents)

    @property
    @pulumi.getter
    def parents(self) -> pulumi.Input[Sequence[pulumi.Input['HTTPRouteStatusParentsArgs']]]:
        """
        Parents is a list of parent resources (usually Gateways) that are associated with the route, and the status of the route with respect to each parent. When this route attaches to a parent, the controller that manages the parent must add an entry to this list when the controller first sees the route and should update the entry as appropriate when the route or gateway is modified. 
         Note that parent references that cannot be resolved by an implementation of this API will not be added to this list. Implementations of this API can only populate Route status for the Gateways/parent resources they are responsible for. 
         A maximum of 32 Gateways will be represented in this list. An empty list means the route has not been attached to any Gateway.
        """
        return pulumi.get(self, "parents")

    @parents.setter
    def parents(self, value: pulumi.Input[Sequence[pulumi.Input['HTTPRouteStatusParentsArgs']]]):
        pulumi.set(self, "parents", value)


@pulumi.input_type
class ReferenceGrantSpecFromArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        ReferenceGrantFrom describes trusted namespaces and kinds.
        :param pulumi.Input[str] group: Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
                Support: Core
        :param pulumi.Input[str] kind: Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field. 
                When used to permit a SecretObjectReference: 
                * Gateway 
                When used to permit a BackendObjectReference: 
                * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
        :param pulumi.Input[str] namespace: Namespace is the namespace of the referent. 
                Support: Core
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
         Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field. 
         When used to permit a SecretObjectReference: 
         * Gateway 
         When used to permit a BackendObjectReference: 
         * GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace is the namespace of the referent. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ReferenceGrantSpecToArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        ReferenceGrantTo describes what Kinds are allowed as targets of the references.
        :param pulumi.Input[str] group: Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
                Support: Core
        :param pulumi.Input[str] kind: Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field: 
                * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
        :param pulumi.Input[str] name: Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        """
        Group is the group of the referent. When empty, the Kubernetes core API group is inferred. 
         Support: Core
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the "Core" support level for this field: 
         * Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ReferenceGrantSpecArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[Sequence[pulumi.Input['ReferenceGrantSpecFromArgs']]],
                 to: pulumi.Input[Sequence[pulumi.Input['ReferenceGrantSpecToArgs']]]):
        """
        Spec defines the desired state of ReferenceGrant.
        :param pulumi.Input[Sequence[pulumi.Input['ReferenceGrantSpecFromArgs']]] from_: From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. 
                Support: Core
        :param pulumi.Input[Sequence[pulumi.Input['ReferenceGrantSpecToArgs']]] to: To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. 
                Support: Core
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[Sequence[pulumi.Input['ReferenceGrantSpecFromArgs']]]:
        """
        From describes the trusted namespaces and kinds that can reference the resources described in "To". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR. 
         Support: Core
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[Sequence[pulumi.Input['ReferenceGrantSpecFromArgs']]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[Sequence[pulumi.Input['ReferenceGrantSpecToArgs']]]:
        """
        To describes the resources that may be referenced by the resources described in "From". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR. 
         Support: Core
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[Sequence[pulumi.Input['ReferenceGrantSpecToArgs']]]):
        pulumi.set(self, "to", value)


