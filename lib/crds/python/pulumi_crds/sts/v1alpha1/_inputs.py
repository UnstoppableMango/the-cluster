# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'PolicyBindingSpecApplicationArgs',
    'PolicyBindingSpecArgs',
    'PolicyBindingStatusUsageArgs',
    'PolicyBindingStatusArgs',
]

@pulumi.input_type
class PolicyBindingSpecApplicationArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 serviceaccount: pulumi.Input[str]):
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "serviceaccount", serviceaccount)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def serviceaccount(self) -> pulumi.Input[str]:
        return pulumi.get(self, "serviceaccount")

    @serviceaccount.setter
    def serviceaccount(self, value: pulumi.Input[str]):
        pulumi.set(self, "serviceaccount", value)


@pulumi.input_type
class PolicyBindingSpecArgs:
    def __init__(__self__, *,
                 application: pulumi.Input['PolicyBindingSpecApplicationArgs'],
                 policies: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter
    def application(self) -> pulumi.Input['PolicyBindingSpecApplicationArgs']:
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: pulumi.Input['PolicyBindingSpecApplicationArgs']):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "policies", value)


@pulumi.input_type
class PolicyBindingStatusUsageArgs:
    def __init__(__self__, *,
                 authotizations: Optional[pulumi.Input[int]] = None):
        if authotizations is not None:
            pulumi.set(__self__, "authotizations", authotizations)

    @property
    @pulumi.getter
    def authotizations(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "authotizations")

    @authotizations.setter
    def authotizations(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authotizations", value)


@pulumi.input_type
class PolicyBindingStatusArgs:
    def __init__(__self__, *,
                 current_state: pulumi.Input[str],
                 usage: pulumi.Input['PolicyBindingStatusUsageArgs']):
        pulumi.set(__self__, "current_state", current_state)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter(name="currentState")
    def current_state(self) -> pulumi.Input[str]:
        return pulumi.get(self, "current_state")

    @current_state.setter
    def current_state(self, value: pulumi.Input[str]):
        pulumi.set(self, "current_state", value)

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Input['PolicyBindingStatusUsageArgs']:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: pulumi.Input['PolicyBindingStatusUsageArgs']):
        pulumi.set(self, "usage", value)


