# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GlobalConfigurationSpecListenersArgs',
    'GlobalConfigurationSpecArgs',
    'PolicySpecAccessControlArgs',
    'PolicySpecBasicAuthArgs',
    'PolicySpecEgressMtlsArgs',
    'PolicySpecIngressMtlsArgs',
    'PolicySpecJwtArgs',
    'PolicySpecOidcArgs',
    'PolicySpecRateLimitArgs',
    'PolicySpecWafSecurityLogsArgs',
    'PolicySpecWafSecurityLogArgs',
    'PolicySpecWafArgs',
    'PolicySpecArgs',
    'PolicyStatusArgs',
    'TransportServerSpecActionArgs',
    'TransportServerSpecListenerArgs',
    'TransportServerSpecSessionParametersArgs',
    'TransportServerSpecTlsArgs',
    'TransportServerSpecUpstreamParametersArgs',
    'TransportServerSpecUpstreamsHealthCheckMatchArgs',
    'TransportServerSpecUpstreamsHealthCheckArgs',
    'TransportServerSpecUpstreamsArgs',
    'TransportServerSpecArgs',
    'TransportServerStatusArgs',
    'VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSetArgs',
    'VirtualServerRouteSpecSubroutesActionProxyRequestHeadersArgs',
    'VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAddArgs',
    'VirtualServerRouteSpecSubroutesActionProxyResponseHeadersArgs',
    'VirtualServerRouteSpecSubroutesActionProxyArgs',
    'VirtualServerRouteSpecSubroutesActionRedirectArgs',
    'VirtualServerRouteSpecSubroutesActionReturnArgs',
    'VirtualServerRouteSpecSubroutesActionArgs',
    'VirtualServerRouteSpecSubroutesErrorPagesRedirectArgs',
    'VirtualServerRouteSpecSubroutesErrorPagesReturnHeadersArgs',
    'VirtualServerRouteSpecSubroutesErrorPagesReturnArgs',
    'VirtualServerRouteSpecSubroutesErrorPagesArgs',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSetArgs',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersArgs',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAddArgs',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersArgs',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyArgs',
    'VirtualServerRouteSpecSubroutesMatchesActionRedirectArgs',
    'VirtualServerRouteSpecSubroutesMatchesActionReturnArgs',
    'VirtualServerRouteSpecSubroutesMatchesActionArgs',
    'VirtualServerRouteSpecSubroutesMatchesConditionsArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSetArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAddArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirectArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionReturnArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionArgs',
    'VirtualServerRouteSpecSubroutesMatchesSplitsArgs',
    'VirtualServerRouteSpecSubroutesMatchesArgs',
    'VirtualServerRouteSpecSubroutesPoliciesArgs',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSetArgs',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersArgs',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAddArgs',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersArgs',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyArgs',
    'VirtualServerRouteSpecSubroutesSplitsActionRedirectArgs',
    'VirtualServerRouteSpecSubroutesSplitsActionReturnArgs',
    'VirtualServerRouteSpecSubroutesSplitsActionArgs',
    'VirtualServerRouteSpecSubroutesSplitsArgs',
    'VirtualServerRouteSpecSubroutesArgs',
    'VirtualServerRouteSpecUpstreamsBuffersArgs',
    'VirtualServerRouteSpecUpstreamsHealthCheckHeadersArgs',
    'VirtualServerRouteSpecUpstreamsHealthCheckTlsArgs',
    'VirtualServerRouteSpecUpstreamsHealthCheckArgs',
    'VirtualServerRouteSpecUpstreamsQueueArgs',
    'VirtualServerRouteSpecUpstreamsSessionCookieArgs',
    'VirtualServerRouteSpecUpstreamsTlsArgs',
    'VirtualServerRouteSpecUpstreamsArgs',
    'VirtualServerRouteSpecArgs',
    'VirtualServerRouteStatusExternalEndpointsArgs',
    'VirtualServerRouteStatusArgs',
    'VirtualServerSpecExternalDnsProviderSpecificArgs',
    'VirtualServerSpecExternalDnsArgs',
    'VirtualServerSpecListenerArgs',
    'VirtualServerSpecPoliciesArgs',
    'VirtualServerSpecRoutesActionProxyRequestHeadersSetArgs',
    'VirtualServerSpecRoutesActionProxyRequestHeadersArgs',
    'VirtualServerSpecRoutesActionProxyResponseHeadersAddArgs',
    'VirtualServerSpecRoutesActionProxyResponseHeadersArgs',
    'VirtualServerSpecRoutesActionProxyArgs',
    'VirtualServerSpecRoutesActionRedirectArgs',
    'VirtualServerSpecRoutesActionReturnArgs',
    'VirtualServerSpecRoutesActionArgs',
    'VirtualServerSpecRoutesErrorPagesRedirectArgs',
    'VirtualServerSpecRoutesErrorPagesReturnHeadersArgs',
    'VirtualServerSpecRoutesErrorPagesReturnArgs',
    'VirtualServerSpecRoutesErrorPagesArgs',
    'VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSetArgs',
    'VirtualServerSpecRoutesMatchesActionProxyRequestHeadersArgs',
    'VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAddArgs',
    'VirtualServerSpecRoutesMatchesActionProxyResponseHeadersArgs',
    'VirtualServerSpecRoutesMatchesActionProxyArgs',
    'VirtualServerSpecRoutesMatchesActionRedirectArgs',
    'VirtualServerSpecRoutesMatchesActionReturnArgs',
    'VirtualServerSpecRoutesMatchesActionArgs',
    'VirtualServerSpecRoutesMatchesConditionsArgs',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSetArgs',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersArgs',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAddArgs',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersArgs',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyArgs',
    'VirtualServerSpecRoutesMatchesSplitsActionRedirectArgs',
    'VirtualServerSpecRoutesMatchesSplitsActionReturnArgs',
    'VirtualServerSpecRoutesMatchesSplitsActionArgs',
    'VirtualServerSpecRoutesMatchesSplitsArgs',
    'VirtualServerSpecRoutesMatchesArgs',
    'VirtualServerSpecRoutesPoliciesArgs',
    'VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSetArgs',
    'VirtualServerSpecRoutesSplitsActionProxyRequestHeadersArgs',
    'VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAddArgs',
    'VirtualServerSpecRoutesSplitsActionProxyResponseHeadersArgs',
    'VirtualServerSpecRoutesSplitsActionProxyArgs',
    'VirtualServerSpecRoutesSplitsActionRedirectArgs',
    'VirtualServerSpecRoutesSplitsActionReturnArgs',
    'VirtualServerSpecRoutesSplitsActionArgs',
    'VirtualServerSpecRoutesSplitsArgs',
    'VirtualServerSpecRoutesArgs',
    'VirtualServerSpecTlsCertManagerArgs',
    'VirtualServerSpecTlsRedirectArgs',
    'VirtualServerSpecTlsArgs',
    'VirtualServerSpecUpstreamsBuffersArgs',
    'VirtualServerSpecUpstreamsHealthCheckHeadersArgs',
    'VirtualServerSpecUpstreamsHealthCheckTlsArgs',
    'VirtualServerSpecUpstreamsHealthCheckArgs',
    'VirtualServerSpecUpstreamsQueueArgs',
    'VirtualServerSpecUpstreamsSessionCookieArgs',
    'VirtualServerSpecUpstreamsTlsArgs',
    'VirtualServerSpecUpstreamsArgs',
    'VirtualServerSpecArgs',
    'VirtualServerStatusExternalEndpointsArgs',
    'VirtualServerStatusArgs',
]

@pulumi.input_type
class GlobalConfigurationSpecListenersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None):
        """
        Listener defines a listener.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)


@pulumi.input_type
class GlobalConfigurationSpecArgs:
    def __init__(__self__, *,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConfigurationSpecListenersArgs']]]] = None):
        """
        GlobalConfigurationSpec is the spec of the GlobalConfiguration resource.
        """
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConfigurationSpecListenersArgs']]]]:
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConfigurationSpecListenersArgs']]]]):
        pulumi.set(self, "listeners", value)


@pulumi.input_type
class PolicySpecAccessControlArgs:
    def __init__(__self__, *,
                 allow: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deny: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        AccessControl defines an access policy based on the source IP of a request.
        """
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if deny is not None:
            pulumi.set(__self__, "deny", deny)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter
    def deny(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "deny")

    @deny.setter
    def deny(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deny", value)


@pulumi.input_type
class PolicySpecBasicAuthArgs:
    def __init__(__self__, *,
                 realm: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        BasicAuth holds HTTP Basic authentication configuration policy status: preview
        """
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class PolicySpecEgressMtlsArgs:
    def __init__(__self__, *,
                 ciphers: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[bool]] = None,
                 session_reuse: Optional[pulumi.Input[bool]] = None,
                 ssl_name: Optional[pulumi.Input[str]] = None,
                 tls_secret: Optional[pulumi.Input[str]] = None,
                 trusted_cert_secret: Optional[pulumi.Input[str]] = None,
                 verify_depth: Optional[pulumi.Input[int]] = None,
                 verify_server: Optional[pulumi.Input[bool]] = None):
        """
        EgressMTLS defines an Egress MTLS policy.
        """
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if session_reuse is not None:
            pulumi.set(__self__, "session_reuse", session_reuse)
        if ssl_name is not None:
            pulumi.set(__self__, "ssl_name", ssl_name)
        if tls_secret is not None:
            pulumi.set(__self__, "tls_secret", tls_secret)
        if trusted_cert_secret is not None:
            pulumi.set(__self__, "trusted_cert_secret", trusted_cert_secret)
        if verify_depth is not None:
            pulumi.set(__self__, "verify_depth", verify_depth)
        if verify_server is not None:
            pulumi.set(__self__, "verify_server", verify_server)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sessionReuse")
    def session_reuse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "session_reuse")

    @session_reuse.setter
    def session_reuse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_reuse", value)

    @property
    @pulumi.getter(name="sslName")
    def ssl_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_name")

    @ssl_name.setter
    def ssl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_name", value)

    @property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_secret")

    @tls_secret.setter
    def tls_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_secret", value)

    @property
    @pulumi.getter(name="trustedCertSecret")
    def trusted_cert_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trusted_cert_secret")

    @trusted_cert_secret.setter
    def trusted_cert_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusted_cert_secret", value)

    @property
    @pulumi.getter(name="verifyDepth")
    def verify_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "verify_depth")

    @verify_depth.setter
    def verify_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "verify_depth", value)

    @property
    @pulumi.getter(name="verifyServer")
    def verify_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify_server")

    @verify_server.setter
    def verify_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_server", value)


@pulumi.input_type
class PolicySpecIngressMtlsArgs:
    def __init__(__self__, *,
                 client_cert_secret: Optional[pulumi.Input[str]] = None,
                 crl_file_name: Optional[pulumi.Input[str]] = None,
                 verify_client: Optional[pulumi.Input[str]] = None,
                 verify_depth: Optional[pulumi.Input[int]] = None):
        """
        IngressMTLS defines an Ingress MTLS policy.
        """
        if client_cert_secret is not None:
            pulumi.set(__self__, "client_cert_secret", client_cert_secret)
        if crl_file_name is not None:
            pulumi.set(__self__, "crl_file_name", crl_file_name)
        if verify_client is not None:
            pulumi.set(__self__, "verify_client", verify_client)
        if verify_depth is not None:
            pulumi.set(__self__, "verify_depth", verify_depth)

    @property
    @pulumi.getter(name="clientCertSecret")
    def client_cert_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_secret")

    @client_cert_secret.setter
    def client_cert_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_secret", value)

    @property
    @pulumi.getter(name="crlFileName")
    def crl_file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "crl_file_name")

    @crl_file_name.setter
    def crl_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crl_file_name", value)

    @property
    @pulumi.getter(name="verifyClient")
    def verify_client(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verify_client")

    @verify_client.setter
    def verify_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_client", value)

    @property
    @pulumi.getter(name="verifyDepth")
    def verify_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "verify_depth")

    @verify_depth.setter
    def verify_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "verify_depth", value)


@pulumi.input_type
class PolicySpecJwtArgs:
    def __init__(__self__, *,
                 jwks_uri: Optional[pulumi.Input[str]] = None,
                 key_cache: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        JWTAuth holds JWT authentication configuration.
        """
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if key_cache is not None:
            pulumi.set(__self__, "key_cache", key_cache)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="jwksURI")
    def jwks_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jwks_uri")

    @jwks_uri.setter
    def jwks_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwks_uri", value)

    @property
    @pulumi.getter(name="keyCache")
    def key_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_cache")

    @key_cache.setter
    def key_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_cache", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class PolicySpecOidcArgs:
    def __init__(__self__, *,
                 access_token_enable: Optional[pulumi.Input[bool]] = None,
                 auth_endpoint: Optional[pulumi.Input[str]] = None,
                 auth_extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 jwks_uri: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 token_endpoint: Optional[pulumi.Input[str]] = None,
                 zone_sync_leeway: Optional[pulumi.Input[int]] = None):
        """
        OIDC defines an Open ID Connect policy.
        """
        if access_token_enable is not None:
            pulumi.set(__self__, "access_token_enable", access_token_enable)
        if auth_endpoint is not None:
            pulumi.set(__self__, "auth_endpoint", auth_endpoint)
        if auth_extra_args is not None:
            pulumi.set(__self__, "auth_extra_args", auth_extra_args)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if zone_sync_leeway is not None:
            pulumi.set(__self__, "zone_sync_leeway", zone_sync_leeway)

    @property
    @pulumi.getter(name="accessTokenEnable")
    def access_token_enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "access_token_enable")

    @access_token_enable.setter
    def access_token_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_token_enable", value)

    @property
    @pulumi.getter(name="authEndpoint")
    def auth_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_endpoint")

    @auth_endpoint.setter
    def auth_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_endpoint", value)

    @property
    @pulumi.getter(name="authExtraArgs")
    def auth_extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "auth_extra_args")

    @auth_extra_args.setter
    def auth_extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auth_extra_args", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="jwksURI")
    def jwks_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jwks_uri")

    @jwks_uri.setter
    def jwks_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwks_uri", value)

    @property
    @pulumi.getter(name="redirectURI")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="zoneSyncLeeway")
    def zone_sync_leeway(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_sync_leeway")

    @zone_sync_leeway.setter
    def zone_sync_leeway(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_sync_leeway", value)


@pulumi.input_type
class PolicySpecRateLimitArgs:
    def __init__(__self__, *,
                 burst: Optional[pulumi.Input[int]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 no_delay: Optional[pulumi.Input[bool]] = None,
                 rate: Optional[pulumi.Input[str]] = None,
                 reject_code: Optional[pulumi.Input[int]] = None,
                 zone_size: Optional[pulumi.Input[str]] = None):
        """
        RateLimit defines a rate limit policy.
        """
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if no_delay is not None:
            pulumi.set(__self__, "no_delay", no_delay)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if reject_code is not None:
            pulumi.set(__self__, "reject_code", reject_code)
        if zone_size is not None:
            pulumi.set(__self__, "zone_size", zone_size)

    @property
    @pulumi.getter
    def burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "burst")

    @burst.setter
    def burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "burst", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="noDelay")
    def no_delay(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_delay")

    @no_delay.setter
    def no_delay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_delay", value)

    @property
    @pulumi.getter
    def rate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate")

    @rate.setter
    def rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate", value)

    @property
    @pulumi.getter(name="rejectCode")
    def reject_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reject_code")

    @reject_code.setter
    def reject_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reject_code", value)

    @property
    @pulumi.getter(name="zoneSize")
    def zone_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone_size")

    @zone_size.setter
    def zone_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_size", value)


@pulumi.input_type
class PolicySpecWafSecurityLogsArgs:
    def __init__(__self__, *,
                 ap_log_conf: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 log_dest: Optional[pulumi.Input[str]] = None):
        """
        SecurityLog defines the security log of a WAF policy.
        """
        if ap_log_conf is not None:
            pulumi.set(__self__, "ap_log_conf", ap_log_conf)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if log_dest is not None:
            pulumi.set(__self__, "log_dest", log_dest)

    @property
    @pulumi.getter(name="apLogConf")
    def ap_log_conf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_log_conf")

    @ap_log_conf.setter
    def ap_log_conf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_log_conf", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="logDest")
    def log_dest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_dest")

    @log_dest.setter
    def log_dest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_dest", value)


@pulumi.input_type
class PolicySpecWafSecurityLogArgs:
    def __init__(__self__, *,
                 ap_log_conf: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 log_dest: Optional[pulumi.Input[str]] = None):
        """
        SecurityLog defines the security log of a WAF policy.
        """
        if ap_log_conf is not None:
            pulumi.set(__self__, "ap_log_conf", ap_log_conf)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if log_dest is not None:
            pulumi.set(__self__, "log_dest", log_dest)

    @property
    @pulumi.getter(name="apLogConf")
    def ap_log_conf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_log_conf")

    @ap_log_conf.setter
    def ap_log_conf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_log_conf", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="logDest")
    def log_dest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_dest")

    @log_dest.setter
    def log_dest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_dest", value)


@pulumi.input_type
class PolicySpecWafArgs:
    def __init__(__self__, *,
                 ap_bundle: Optional[pulumi.Input[str]] = None,
                 ap_policy: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 security_log: Optional[pulumi.Input['PolicySpecWafSecurityLogArgs']] = None,
                 security_logs: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySpecWafSecurityLogsArgs']]]] = None):
        """
        WAF defines an WAF policy.
        :param pulumi.Input['PolicySpecWafSecurityLogArgs'] security_log: SecurityLog defines the security log of a WAF policy.
        """
        if ap_bundle is not None:
            pulumi.set(__self__, "ap_bundle", ap_bundle)
        if ap_policy is not None:
            pulumi.set(__self__, "ap_policy", ap_policy)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if security_log is not None:
            pulumi.set(__self__, "security_log", security_log)
        if security_logs is not None:
            pulumi.set(__self__, "security_logs", security_logs)

    @property
    @pulumi.getter(name="apBundle")
    def ap_bundle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_bundle")

    @ap_bundle.setter
    def ap_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_bundle", value)

    @property
    @pulumi.getter(name="apPolicy")
    def ap_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ap_policy")

    @ap_policy.setter
    def ap_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_policy", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="securityLog")
    def security_log(self) -> Optional[pulumi.Input['PolicySpecWafSecurityLogArgs']]:
        """
        SecurityLog defines the security log of a WAF policy.
        """
        return pulumi.get(self, "security_log")

    @security_log.setter
    def security_log(self, value: Optional[pulumi.Input['PolicySpecWafSecurityLogArgs']]):
        pulumi.set(self, "security_log", value)

    @property
    @pulumi.getter(name="securityLogs")
    def security_logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicySpecWafSecurityLogsArgs']]]]:
        return pulumi.get(self, "security_logs")

    @security_logs.setter
    def security_logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicySpecWafSecurityLogsArgs']]]]):
        pulumi.set(self, "security_logs", value)


@pulumi.input_type
class PolicySpecArgs:
    def __init__(__self__, *,
                 access_control: Optional[pulumi.Input['PolicySpecAccessControlArgs']] = None,
                 basic_auth: Optional[pulumi.Input['PolicySpecBasicAuthArgs']] = None,
                 egress_mtls: Optional[pulumi.Input['PolicySpecEgressMtlsArgs']] = None,
                 ingress_class_name: Optional[pulumi.Input[str]] = None,
                 ingress_mtls: Optional[pulumi.Input['PolicySpecIngressMtlsArgs']] = None,
                 jwt: Optional[pulumi.Input['PolicySpecJwtArgs']] = None,
                 oidc: Optional[pulumi.Input['PolicySpecOidcArgs']] = None,
                 rate_limit: Optional[pulumi.Input['PolicySpecRateLimitArgs']] = None,
                 waf: Optional[pulumi.Input['PolicySpecWafArgs']] = None):
        """
        PolicySpec is the spec of the Policy resource. The spec includes multiple fields, where each field represents a different policy. Only one policy (field) is allowed.
        :param pulumi.Input['PolicySpecAccessControlArgs'] access_control: AccessControl defines an access policy based on the source IP of a request.
        :param pulumi.Input['PolicySpecBasicAuthArgs'] basic_auth: BasicAuth holds HTTP Basic authentication configuration policy status: preview
        :param pulumi.Input['PolicySpecEgressMtlsArgs'] egress_mtls: EgressMTLS defines an Egress MTLS policy.
        :param pulumi.Input['PolicySpecIngressMtlsArgs'] ingress_mtls: IngressMTLS defines an Ingress MTLS policy.
        :param pulumi.Input['PolicySpecJwtArgs'] jwt: JWTAuth holds JWT authentication configuration.
        :param pulumi.Input['PolicySpecOidcArgs'] oidc: OIDC defines an Open ID Connect policy.
        :param pulumi.Input['PolicySpecRateLimitArgs'] rate_limit: RateLimit defines a rate limit policy.
        :param pulumi.Input['PolicySpecWafArgs'] waf: WAF defines an WAF policy.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if egress_mtls is not None:
            pulumi.set(__self__, "egress_mtls", egress_mtls)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_mtls is not None:
            pulumi.set(__self__, "ingress_mtls", ingress_mtls)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if oidc is not None:
            pulumi.set(__self__, "oidc", oidc)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input['PolicySpecAccessControlArgs']]:
        """
        AccessControl defines an access policy based on the source IP of a request.
        """
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input['PolicySpecAccessControlArgs']]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional[pulumi.Input['PolicySpecBasicAuthArgs']]:
        """
        BasicAuth holds HTTP Basic authentication configuration policy status: preview
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: Optional[pulumi.Input['PolicySpecBasicAuthArgs']]):
        pulumi.set(self, "basic_auth", value)

    @property
    @pulumi.getter(name="egressMTLS")
    def egress_mtls(self) -> Optional[pulumi.Input['PolicySpecEgressMtlsArgs']]:
        """
        EgressMTLS defines an Egress MTLS policy.
        """
        return pulumi.get(self, "egress_mtls")

    @egress_mtls.setter
    def egress_mtls(self, value: Optional[pulumi.Input['PolicySpecEgressMtlsArgs']]):
        pulumi.set(self, "egress_mtls", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter(name="ingressMTLS")
    def ingress_mtls(self) -> Optional[pulumi.Input['PolicySpecIngressMtlsArgs']]:
        """
        IngressMTLS defines an Ingress MTLS policy.
        """
        return pulumi.get(self, "ingress_mtls")

    @ingress_mtls.setter
    def ingress_mtls(self, value: Optional[pulumi.Input['PolicySpecIngressMtlsArgs']]):
        pulumi.set(self, "ingress_mtls", value)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[pulumi.Input['PolicySpecJwtArgs']]:
        """
        JWTAuth holds JWT authentication configuration.
        """
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[pulumi.Input['PolicySpecJwtArgs']]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter
    def oidc(self) -> Optional[pulumi.Input['PolicySpecOidcArgs']]:
        """
        OIDC defines an Open ID Connect policy.
        """
        return pulumi.get(self, "oidc")

    @oidc.setter
    def oidc(self, value: Optional[pulumi.Input['PolicySpecOidcArgs']]):
        pulumi.set(self, "oidc", value)

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input['PolicySpecRateLimitArgs']]:
        """
        RateLimit defines a rate limit policy.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input['PolicySpecRateLimitArgs']]):
        pulumi.set(self, "rate_limit", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input['PolicySpecWafArgs']]:
        """
        WAF defines an WAF policy.
        """
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input['PolicySpecWafArgs']]):
        pulumi.set(self, "waf", value)


@pulumi.input_type
class PolicyStatusArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        PolicyStatus is the status of the policy resource
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class TransportServerSpecActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None):
        """
        TransportServerAction defines an action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class TransportServerSpecListenerArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        TransportServerListener defines a listener for a TransportServer.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class TransportServerSpecSessionParametersArgs:
    def __init__(__self__, *,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        SessionParameters defines session parameters.
        """
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class TransportServerSpecTlsArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class TransportServerSpecUpstreamParametersArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 next_upstream: Optional[pulumi.Input[bool]] = None,
                 next_upstream_timeout: Optional[pulumi.Input[str]] = None,
                 next_upstream_tries: Optional[pulumi.Input[int]] = None,
                 udp_requests: Optional[pulumi.Input[int]] = None,
                 udp_responses: Optional[pulumi.Input[int]] = None):
        """
        UpstreamParameters defines parameters for an upstream.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if next_upstream is not None:
            pulumi.set(__self__, "next_upstream", next_upstream)
        if next_upstream_timeout is not None:
            pulumi.set(__self__, "next_upstream_timeout", next_upstream_timeout)
        if next_upstream_tries is not None:
            pulumi.set(__self__, "next_upstream_tries", next_upstream_tries)
        if udp_requests is not None:
            pulumi.set(__self__, "udp_requests", udp_requests)
        if udp_responses is not None:
            pulumi.set(__self__, "udp_responses", udp_responses)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="nextUpstream")
    def next_upstream(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "next_upstream")

    @next_upstream.setter
    def next_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "next_upstream", value)

    @property
    @pulumi.getter(name="nextUpstreamTimeout")
    def next_upstream_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_upstream_timeout")

    @next_upstream_timeout.setter
    def next_upstream_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_upstream_timeout", value)

    @property
    @pulumi.getter(name="nextUpstreamTries")
    def next_upstream_tries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "next_upstream_tries")

    @next_upstream_tries.setter
    def next_upstream_tries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "next_upstream_tries", value)

    @property
    @pulumi.getter(name="udpRequests")
    def udp_requests(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "udp_requests")

    @udp_requests.setter
    def udp_requests(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_requests", value)

    @property
    @pulumi.getter(name="udpResponses")
    def udp_responses(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "udp_responses")

    @udp_responses.setter
    def udp_responses(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_responses", value)


@pulumi.input_type
class TransportServerSpecUpstreamsHealthCheckMatchArgs:
    def __init__(__self__, *,
                 expect: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None):
        """
        TransportServerMatch defines the parameters of a custom health check.
        """
        if expect is not None:
            pulumi.set(__self__, "expect", expect)
        if send is not None:
            pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def expect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expect")

    @expect.setter
    def expect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expect", value)

    @property
    @pulumi.getter
    def send(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send")

    @send.setter
    def send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send", value)


@pulumi.input_type
class TransportServerSpecUpstreamsHealthCheckArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 fails: Optional[pulumi.Input[int]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 jitter: Optional[pulumi.Input[str]] = None,
                 match: Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckMatchArgs']] = None,
                 passes: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        :param pulumi.Input['TransportServerSpecUpstreamsHealthCheckMatchArgs'] match: TransportServerMatch defines the parameters of a custom health check.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fails is not None:
            pulumi.set(__self__, "fails", fails)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def fails(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fails")

    @fails.setter
    def fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fails", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def jitter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jitter")

    @jitter.setter
    def jitter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jitter", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckMatchArgs']]:
        """
        TransportServerMatch defines the parameters of a custom health check.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckMatchArgs']]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def passes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "passes")

    @passes.setter
    def passes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "passes", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class TransportServerSpecUpstreamsArgs:
    def __init__(__self__, *,
                 backup: Optional[pulumi.Input[str]] = None,
                 backup_port: Optional[pulumi.Input[int]] = None,
                 fail_timeout: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckArgs']] = None,
                 load_balancing_method: Optional[pulumi.Input[str]] = None,
                 max_conns: Optional[pulumi.Input[int]] = None,
                 max_fails: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        TransportServerUpstream defines an upstream.
        :param pulumi.Input['TransportServerSpecUpstreamsHealthCheckArgs'] health_check: TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if backup_port is not None:
            pulumi.set(__self__, "backup_port", backup_port)
        if fail_timeout is not None:
            pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if load_balancing_method is not None:
            pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        if max_conns is not None:
            pulumi.set(__self__, "max_conns", max_conns)
        if max_fails is not None:
            pulumi.set(__self__, "max_fails", max_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="backupPort")
    def backup_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backup_port")

    @backup_port.setter
    def backup_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_port", value)

    @property
    @pulumi.getter(name="failTimeout")
    def fail_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_timeout")

    @fail_timeout.setter
    def fail_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_timeout", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckArgs']]:
        """
        TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancing_method")

    @load_balancing_method.setter
    def load_balancing_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_method", value)

    @property
    @pulumi.getter(name="maxConns")
    def max_conns(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_conns")

    @max_conns.setter
    def max_conns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_conns", value)

    @property
    @pulumi.getter(name="maxFails")
    def max_fails(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_fails")

    @max_fails.setter
    def max_fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_fails", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class TransportServerSpecArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['TransportServerSpecActionArgs']] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 ingress_class_name: Optional[pulumi.Input[str]] = None,
                 listener: Optional[pulumi.Input['TransportServerSpecListenerArgs']] = None,
                 server_snippets: Optional[pulumi.Input[str]] = None,
                 session_parameters: Optional[pulumi.Input['TransportServerSpecSessionParametersArgs']] = None,
                 stream_snippets: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['TransportServerSpecTlsArgs']] = None,
                 upstream_parameters: Optional[pulumi.Input['TransportServerSpecUpstreamParametersArgs']] = None,
                 upstreams: Optional[pulumi.Input[Sequence[pulumi.Input['TransportServerSpecUpstreamsArgs']]]] = None):
        """
        TransportServerSpec is the spec of the TransportServer resource.
        :param pulumi.Input['TransportServerSpecActionArgs'] action: TransportServerAction defines an action.
        :param pulumi.Input['TransportServerSpecListenerArgs'] listener: TransportServerListener defines a listener for a TransportServer.
        :param pulumi.Input['TransportServerSpecSessionParametersArgs'] session_parameters: SessionParameters defines session parameters.
        :param pulumi.Input['TransportServerSpecTlsArgs'] tls: TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        :param pulumi.Input['TransportServerSpecUpstreamParametersArgs'] upstream_parameters: UpstreamParameters defines parameters for an upstream.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if server_snippets is not None:
            pulumi.set(__self__, "server_snippets", server_snippets)
        if session_parameters is not None:
            pulumi.set(__self__, "session_parameters", session_parameters)
        if stream_snippets is not None:
            pulumi.set(__self__, "stream_snippets", stream_snippets)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if upstream_parameters is not None:
            pulumi.set(__self__, "upstream_parameters", upstream_parameters)
        if upstreams is not None:
            pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['TransportServerSpecActionArgs']]:
        """
        TransportServerAction defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['TransportServerSpecActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter
    def listener(self) -> Optional[pulumi.Input['TransportServerSpecListenerArgs']]:
        """
        TransportServerListener defines a listener for a TransportServer.
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: Optional[pulumi.Input['TransportServerSpecListenerArgs']]):
        pulumi.set(self, "listener", value)

    @property
    @pulumi.getter(name="serverSnippets")
    def server_snippets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_snippets")

    @server_snippets.setter
    def server_snippets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_snippets", value)

    @property
    @pulumi.getter(name="sessionParameters")
    def session_parameters(self) -> Optional[pulumi.Input['TransportServerSpecSessionParametersArgs']]:
        """
        SessionParameters defines session parameters.
        """
        return pulumi.get(self, "session_parameters")

    @session_parameters.setter
    def session_parameters(self, value: Optional[pulumi.Input['TransportServerSpecSessionParametersArgs']]):
        pulumi.set(self, "session_parameters", value)

    @property
    @pulumi.getter(name="streamSnippets")
    def stream_snippets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stream_snippets")

    @stream_snippets.setter
    def stream_snippets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_snippets", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['TransportServerSpecTlsArgs']]:
        """
        TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['TransportServerSpecTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter(name="upstreamParameters")
    def upstream_parameters(self) -> Optional[pulumi.Input['TransportServerSpecUpstreamParametersArgs']]:
        """
        UpstreamParameters defines parameters for an upstream.
        """
        return pulumi.get(self, "upstream_parameters")

    @upstream_parameters.setter
    def upstream_parameters(self, value: Optional[pulumi.Input['TransportServerSpecUpstreamParametersArgs']]):
        pulumi.set(self, "upstream_parameters", value)

    @property
    @pulumi.getter
    def upstreams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportServerSpecUpstreamsArgs']]]]:
        return pulumi.get(self, "upstreams")

    @upstreams.setter
    def upstreams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportServerSpecUpstreamsArgs']]]]):
        pulumi.set(self, "upstreams", value)


@pulumi.input_type
class TransportServerStatusArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        TransportServerStatus defines the status for the TransportServer resource.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesActionProxyRequestHeadersArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSetArgs']]]] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSetArgs']]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAddArgs:
    def __init__(__self__, *,
                 always: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always")

    @always.setter
    def always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesActionProxyResponseHeadersArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAddArgs']]]] = None,
                 hide: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pass_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAddArgs']]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesActionProxyArgs:
    def __init__(__self__, *,
                 request_headers: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyRequestHeadersArgs']] = None,
                 response_headers: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyResponseHeadersArgs']] = None,
                 rewrite_path: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyRequestHeadersArgs'] request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyResponseHeadersArgs'] response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyRequestHeadersArgs']]:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyRequestHeadersArgs']]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyResponseHeadersArgs']]:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_path")

    @rewrite_path.setter
    def rewrite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_path", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesActionRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesActionReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionReturnArgs']] = None):
        """
        Action defines an action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyArgs'] proxy: ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesActionRedirectArgs'] redirect: ActionRedirect defines a redirect in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesActionReturnArgs'] return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyArgs']]:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionRedirectArgs']]:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionReturnArgs']]:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesErrorPagesRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ErrorPageRedirect defines a redirect for an ErrorPage.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesErrorPagesReturnHeadersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesErrorPagesReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesReturnHeadersArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ErrorPageReturn defines a return for an ErrorPage.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesReturnHeadersArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesReturnHeadersArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesErrorPagesArgs:
    def __init__(__self__, *,
                 codes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 redirect: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesReturnArgs']] = None):
        """
        ErrorPage defines an ErrorPage in a Route.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesRedirectArgs'] redirect: ErrorPageRedirect defines a redirect for an ErrorPage.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesReturnArgs'] return_: ErrorPageReturn defines a return for an ErrorPage.
        """
        if codes is not None:
            pulumi.set(__self__, "codes", codes)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter
    def codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "codes")

    @codes.setter
    def codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "codes", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesRedirectArgs']]:
        """
        ErrorPageRedirect defines a redirect for an ErrorPage.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesReturnArgs']]:
        """
        ErrorPageReturn defines a return for an ErrorPage.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSetArgs']]]] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSetArgs']]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAddArgs:
    def __init__(__self__, *,
                 always: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always")

    @always.setter
    def always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAddArgs']]]] = None,
                 hide: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pass_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAddArgs']]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyArgs:
    def __init__(__self__, *,
                 request_headers: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersArgs']] = None,
                 response_headers: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersArgs']] = None,
                 rewrite_path: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersArgs'] request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersArgs'] response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersArgs']]:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersArgs']]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersArgs']]:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_path")

    @rewrite_path.setter
    def rewrite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_path", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesActionRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesActionReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionReturnArgs']] = None):
        """
        Action defines an action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyArgs'] proxy: ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionRedirectArgs'] redirect: ActionRedirect defines a redirect in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionReturnArgs'] return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyArgs']]:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionRedirectArgs']]:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionReturnArgs']]:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesConditionsArgs:
    def __init__(__self__, *,
                 argument: Optional[pulumi.Input[str]] = None,
                 cookie: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 variable: Optional[pulumi.Input[str]] = None):
        """
        Condition defines a condition in a MatchRule.
        """
        if argument is not None:
            pulumi.set(__self__, "argument", argument)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def argument(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "argument")

    @argument.setter
    def argument(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "argument", value)

    @property
    @pulumi.getter
    def cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSetArgs']]]] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSetArgs']]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAddArgs:
    def __init__(__self__, *,
                 always: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always")

    @always.setter
    def always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAddArgs']]]] = None,
                 hide: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pass_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAddArgs']]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyArgs:
    def __init__(__self__, *,
                 request_headers: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersArgs']] = None,
                 response_headers: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersArgs']] = None,
                 rewrite_path: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersArgs'] request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersArgs'] response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersArgs']]:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersArgs']]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersArgs']]:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_path")

    @rewrite_path.setter
    def rewrite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_path", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionReturnArgs']] = None):
        """
        Action defines an action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyArgs'] proxy: ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirectArgs'] redirect: ActionRedirect defines a redirect in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionReturnArgs'] return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyArgs']]:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirectArgs']]:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionReturnArgs']]:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesSplitsArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionArgs']] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        Split defines a split.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionArgs'] action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionArgs']]:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesMatchesArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionArgs']] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesConditionsArgs']]]] = None,
                 splits: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsArgs']]]] = None):
        """
        Match defines a match.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionArgs'] action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if splits is not None:
            pulumi.set(__self__, "splits", splits)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionArgs']]:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def splits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsArgs']]]]:
        return pulumi.get(self, "splits")

    @splits.setter
    def splits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesSplitsArgs']]]]):
        pulumi.set(self, "splits", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesPoliciesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        PolicyReference references a policy by name and an optional namespace.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSetArgs']]]] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSetArgs']]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAddArgs:
    def __init__(__self__, *,
                 always: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always")

    @always.setter
    def always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAddArgs']]]] = None,
                 hide: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pass_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAddArgs']]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyArgs:
    def __init__(__self__, *,
                 request_headers: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersArgs']] = None,
                 response_headers: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersArgs']] = None,
                 rewrite_path: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersArgs'] request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersArgs'] response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersArgs']]:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersArgs']]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersArgs']]:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_path")

    @rewrite_path.setter
    def rewrite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_path", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsActionRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsActionReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionReturnArgs']] = None):
        """
        Action defines an action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyArgs'] proxy: ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionRedirectArgs'] redirect: ActionRedirect defines a redirect in an Action.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionReturnArgs'] return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyArgs']]:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionRedirectArgs']]:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionReturnArgs']]:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesSplitsArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionArgs']] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        Split defines a split.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionArgs'] action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionArgs']]:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class VirtualServerRouteSpecSubroutesArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionArgs']] = None,
                 dos: Optional[pulumi.Input[str]] = None,
                 error_pages: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesArgs']]]] = None,
                 location_snippets: Optional[pulumi.Input[str]] = None,
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesPoliciesArgs']]]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 splits: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsArgs']]]] = None):
        """
        Route defines a route.
        :param pulumi.Input['VirtualServerRouteSpecSubroutesActionArgs'] action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if dos is not None:
            pulumi.set(__self__, "dos", dos)
        if error_pages is not None:
            pulumi.set(__self__, "error_pages", error_pages)
        if location_snippets is not None:
            pulumi.set(__self__, "location_snippets", location_snippets)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if splits is not None:
            pulumi.set(__self__, "splits", splits)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionArgs']]:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VirtualServerRouteSpecSubroutesActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def dos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dos")

    @dos.setter
    def dos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dos", value)

    @property
    @pulumi.getter(name="errorPages")
    def error_pages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesArgs']]]]:
        return pulumi.get(self, "error_pages")

    @error_pages.setter
    def error_pages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesErrorPagesArgs']]]]):
        pulumi.set(self, "error_pages", value)

    @property
    @pulumi.getter(name="location-snippets")
    def location_snippets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location_snippets")

    @location_snippets.setter
    def location_snippets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_snippets", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesArgs']]]]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesMatchesArgs']]]]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesPoliciesArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesPoliciesArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def splits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsArgs']]]]:
        return pulumi.get(self, "splits")

    @splits.setter
    def splits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesSplitsArgs']]]]):
        pulumi.set(self, "splits", value)


@pulumi.input_type
class VirtualServerRouteSpecUpstreamsBuffersArgs:
    def __init__(__self__, *,
                 number: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None):
        """
        UpstreamBuffers defines Buffer Configuration for an Upstream.
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class VirtualServerRouteSpecUpstreamsHealthCheckHeadersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerRouteSpecUpstreamsHealthCheckTlsArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class VirtualServerRouteSpecUpstreamsHealthCheckArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 fails: Optional[pulumi.Input[int]] = None,
                 grpc_service: Optional[pulumi.Input[str]] = None,
                 grpc_status: Optional[pulumi.Input[int]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckHeadersArgs']]]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 jitter: Optional[pulumi.Input[str]] = None,
                 keepalive_time: Optional[pulumi.Input[str]] = None,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 passes: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 persistent: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_timeout: Optional[pulumi.Input[str]] = None,
                 send_timeout: Optional[pulumi.Input[str]] = None,
                 status_match: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckTlsArgs']] = None):
        """
        HealthCheck defines the parameters for active Upstream HealthChecks.
        :param pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckTlsArgs'] tls: UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fails is not None:
            pulumi.set(__self__, "fails", fails)
        if grpc_service is not None:
            pulumi.set(__self__, "grpc_service", grpc_service)
        if grpc_status is not None:
            pulumi.set(__self__, "grpc_status", grpc_status)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if status_match is not None:
            pulumi.set(__self__, "status_match", status_match)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="connect-timeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def fails(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fails")

    @fails.setter
    def fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fails", value)

    @property
    @pulumi.getter(name="grpcService")
    def grpc_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grpc_service")

    @grpc_service.setter
    def grpc_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grpc_service", value)

    @property
    @pulumi.getter(name="grpcStatus")
    def grpc_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "grpc_status")

    @grpc_status.setter
    def grpc_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grpc_status", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckHeadersArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckHeadersArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def jitter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jitter")

    @jitter.setter
    def jitter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jitter", value)

    @property
    @pulumi.getter(name="keepalive-time")
    def keepalive_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keepalive_time")

    @keepalive_time.setter
    def keepalive_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive_time", value)

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mandatory", value)

    @property
    @pulumi.getter
    def passes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "passes")

    @passes.setter
    def passes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "passes", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def persistent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "persistent")

    @persistent.setter
    def persistent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persistent", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="read-timeout")
    def read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter(name="send-timeout")
    def send_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_timeout")

    @send_timeout.setter
    def send_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_timeout", value)

    @property
    @pulumi.getter(name="statusMatch")
    def status_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_match")

    @status_match.setter
    def status_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_match", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckTlsArgs']]:
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class VirtualServerRouteSpecUpstreamsQueueArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        UpstreamQueue defines Queue Configuration for an Upstream.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class VirtualServerRouteSpecUpstreamsSessionCookieArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 http_only: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 samesite: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None):
        """
        SessionCookie defines the parameters for session persistence.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if samesite is not None:
            pulumi.set(__self__, "samesite", samesite)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "http_only")

    @http_only.setter
    def http_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def samesite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "samesite")

    @samesite.setter
    def samesite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "samesite", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)


@pulumi.input_type
class VirtualServerRouteSpecUpstreamsTlsArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class VirtualServerRouteSpecUpstreamsArgs:
    def __init__(__self__, *,
                 backup: Optional[pulumi.Input[str]] = None,
                 backup_port: Optional[pulumi.Input[int]] = None,
                 buffer_size: Optional[pulumi.Input[str]] = None,
                 buffering: Optional[pulumi.Input[bool]] = None,
                 buffers: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsBuffersArgs']] = None,
                 client_max_body_size: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 fail_timeout: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckArgs']] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 lb_method: Optional[pulumi.Input[str]] = None,
                 max_conns: Optional[pulumi.Input[int]] = None,
                 max_fails: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 next_upstream: Optional[pulumi.Input[str]] = None,
                 next_upstream_timeout: Optional[pulumi.Input[str]] = None,
                 next_upstream_tries: Optional[pulumi.Input[int]] = None,
                 ntlm: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 queue: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsQueueArgs']] = None,
                 read_timeout: Optional[pulumi.Input[str]] = None,
                 send_timeout: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 session_cookie: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsSessionCookieArgs']] = None,
                 slow_start: Optional[pulumi.Input[str]] = None,
                 subselector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsTlsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_cluster_ip: Optional[pulumi.Input[bool]] = None):
        """
        Upstream defines an upstream.
        :param pulumi.Input['VirtualServerRouteSpecUpstreamsBuffersArgs'] buffers: UpstreamBuffers defines Buffer Configuration for an Upstream.
        :param pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckArgs'] health_check: HealthCheck defines the parameters for active Upstream HealthChecks.
        :param pulumi.Input['VirtualServerRouteSpecUpstreamsQueueArgs'] queue: UpstreamQueue defines Queue Configuration for an Upstream.
        :param pulumi.Input['VirtualServerRouteSpecUpstreamsSessionCookieArgs'] session_cookie: SessionCookie defines the parameters for session persistence.
        :param pulumi.Input['VirtualServerRouteSpecUpstreamsTlsArgs'] tls: UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if backup_port is not None:
            pulumi.set(__self__, "backup_port", backup_port)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if buffering is not None:
            pulumi.set(__self__, "buffering", buffering)
        if buffers is not None:
            pulumi.set(__self__, "buffers", buffers)
        if client_max_body_size is not None:
            pulumi.set(__self__, "client_max_body_size", client_max_body_size)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if fail_timeout is not None:
            pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if lb_method is not None:
            pulumi.set(__self__, "lb_method", lb_method)
        if max_conns is not None:
            pulumi.set(__self__, "max_conns", max_conns)
        if max_fails is not None:
            pulumi.set(__self__, "max_fails", max_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_upstream is not None:
            pulumi.set(__self__, "next_upstream", next_upstream)
        if next_upstream_timeout is not None:
            pulumi.set(__self__, "next_upstream_timeout", next_upstream_timeout)
        if next_upstream_tries is not None:
            pulumi.set(__self__, "next_upstream_tries", next_upstream_tries)
        if ntlm is not None:
            pulumi.set(__self__, "ntlm", ntlm)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if session_cookie is not None:
            pulumi.set(__self__, "session_cookie", session_cookie)
        if slow_start is not None:
            pulumi.set(__self__, "slow_start", slow_start)
        if subselector is not None:
            pulumi.set(__self__, "subselector", subselector)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cluster_ip is not None:
            pulumi.set(__self__, "use_cluster_ip", use_cluster_ip)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="backupPort")
    def backup_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backup_port")

    @backup_port.setter
    def backup_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_port", value)

    @property
    @pulumi.getter(name="buffer-size")
    def buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer_size")

    @buffer_size.setter
    def buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer_size", value)

    @property
    @pulumi.getter
    def buffering(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "buffering")

    @buffering.setter
    def buffering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "buffering", value)

    @property
    @pulumi.getter
    def buffers(self) -> Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsBuffersArgs']]:
        """
        UpstreamBuffers defines Buffer Configuration for an Upstream.
        """
        return pulumi.get(self, "buffers")

    @buffers.setter
    def buffers(self, value: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsBuffersArgs']]):
        pulumi.set(self, "buffers", value)

    @property
    @pulumi.getter(name="client-max-body-size")
    def client_max_body_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_max_body_size")

    @client_max_body_size.setter
    def client_max_body_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_max_body_size", value)

    @property
    @pulumi.getter(name="connect-timeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="fail-timeout")
    def fail_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_timeout")

    @fail_timeout.setter
    def fail_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_timeout", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckArgs']]:
        """
        HealthCheck defines the parameters for active Upstream HealthChecks.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter(name="lb-method")
    def lb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lb_method")

    @lb_method.setter
    def lb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_method", value)

    @property
    @pulumi.getter(name="max-conns")
    def max_conns(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_conns")

    @max_conns.setter
    def max_conns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_conns", value)

    @property
    @pulumi.getter(name="max-fails")
    def max_fails(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_fails")

    @max_fails.setter
    def max_fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_fails", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="next-upstream")
    def next_upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_upstream")

    @next_upstream.setter
    def next_upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_upstream", value)

    @property
    @pulumi.getter(name="next-upstream-timeout")
    def next_upstream_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_upstream_timeout")

    @next_upstream_timeout.setter
    def next_upstream_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_upstream_timeout", value)

    @property
    @pulumi.getter(name="next-upstream-tries")
    def next_upstream_tries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "next_upstream_tries")

    @next_upstream_tries.setter
    def next_upstream_tries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "next_upstream_tries", value)

    @property
    @pulumi.getter
    def ntlm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ntlm")

    @ntlm.setter
    def ntlm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ntlm", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsQueueArgs']]:
        """
        UpstreamQueue defines Queue Configuration for an Upstream.
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsQueueArgs']]):
        pulumi.set(self, "queue", value)

    @property
    @pulumi.getter(name="read-timeout")
    def read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter(name="send-timeout")
    def send_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_timeout")

    @send_timeout.setter
    def send_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_timeout", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sessionCookie")
    def session_cookie(self) -> Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsSessionCookieArgs']]:
        """
        SessionCookie defines the parameters for session persistence.
        """
        return pulumi.get(self, "session_cookie")

    @session_cookie.setter
    def session_cookie(self, value: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsSessionCookieArgs']]):
        pulumi.set(self, "session_cookie", value)

    @property
    @pulumi.getter(name="slow-start")
    def slow_start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slow_start")

    @slow_start.setter
    def slow_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slow_start", value)

    @property
    @pulumi.getter
    def subselector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "subselector")

    @subselector.setter
    def subselector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "subselector", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsTlsArgs']]:
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualServerRouteSpecUpstreamsTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="use-cluster-ip")
    def use_cluster_ip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_cluster_ip")

    @use_cluster_ip.setter
    def use_cluster_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cluster_ip", value)


@pulumi.input_type
class VirtualServerRouteSpecArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 ingress_class_name: Optional[pulumi.Input[str]] = None,
                 subroutes: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesArgs']]]] = None,
                 upstreams: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecUpstreamsArgs']]]] = None):
        """
        VirtualServerRouteSpec is the spec of the VirtualServerRoute resource.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if subroutes is not None:
            pulumi.set(__self__, "subroutes", subroutes)
        if upstreams is not None:
            pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter
    def subroutes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesArgs']]]]:
        return pulumi.get(self, "subroutes")

    @subroutes.setter
    def subroutes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecSubroutesArgs']]]]):
        pulumi.set(self, "subroutes", value)

    @property
    @pulumi.getter
    def upstreams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecUpstreamsArgs']]]]:
        return pulumi.get(self, "upstreams")

    @upstreams.setter
    def upstreams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteSpecUpstreamsArgs']]]]):
        pulumi.set(self, "upstreams", value)


@pulumi.input_type
class VirtualServerRouteStatusExternalEndpointsArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None):
        """
        ExternalEndpoint defines the IP/ Hostname and ports used to connect to this resource.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)


@pulumi.input_type
class VirtualServerRouteStatusArgs:
    def __init__(__self__, *,
                 external_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteStatusExternalEndpointsArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 referenced_by: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        VirtualServerRouteStatus defines the status for the VirtualServerRoute resource.
        """
        if external_endpoints is not None:
            pulumi.set(__self__, "external_endpoints", external_endpoints)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if referenced_by is not None:
            pulumi.set(__self__, "referenced_by", referenced_by)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="externalEndpoints")
    def external_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteStatusExternalEndpointsArgs']]]]:
        return pulumi.get(self, "external_endpoints")

    @external_endpoints.setter
    def external_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerRouteStatusExternalEndpointsArgs']]]]):
        pulumi.set(self, "external_endpoints", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="referencedBy")
    def referenced_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "referenced_by")

    @referenced_by.setter
    def referenced_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referenced_by", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class VirtualServerSpecExternalDnsProviderSpecificArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        ProviderSpecificProperty defines specific property for using with ExternalDNS sub-resource.
        :param pulumi.Input[str] name: Name of the property
        :param pulumi.Input[str] value: Value of the property
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the property
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the property
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecExternalDnsArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 provider_specific: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecExternalDnsProviderSpecificArgs']]]] = None,
                 record_ttl: Optional[pulumi.Input[int]] = None,
                 record_type: Optional[pulumi.Input[str]] = None):
        """
        ExternalDNS defines externaldns sub-resource of a virtual server.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels stores labels defined for the Endpoint
        :param pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecExternalDnsProviderSpecificArgs']]] provider_specific: ProviderSpecific stores provider specific config
        :param pulumi.Input[int] record_ttl: TTL for the record
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if provider_specific is not None:
            pulumi.set(__self__, "provider_specific", provider_specific)
        if record_ttl is not None:
            pulumi.set(__self__, "record_ttl", record_ttl)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels stores labels defined for the Endpoint
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="providerSpecific")
    def provider_specific(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecExternalDnsProviderSpecificArgs']]]]:
        """
        ProviderSpecific stores provider specific config
        """
        return pulumi.get(self, "provider_specific")

    @provider_specific.setter
    def provider_specific(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecExternalDnsProviderSpecificArgs']]]]):
        pulumi.set(self, "provider_specific", value)

    @property
    @pulumi.getter(name="recordTTL")
    def record_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL for the record
        """
        return pulumi.get(self, "record_ttl")

    @record_ttl.setter
    def record_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "record_ttl", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_type", value)


@pulumi.input_type
class VirtualServerSpecListenerArgs:
    def __init__(__self__, *,
                 http: Optional[pulumi.Input[str]] = None,
                 https: Optional[pulumi.Input[str]] = None):
        """
        VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if https is not None:
            pulumi.set(__self__, "https", https)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https", value)


@pulumi.input_type
class VirtualServerSpecPoliciesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        PolicyReference references a policy by name and an optional namespace.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class VirtualServerSpecRoutesActionProxyRequestHeadersSetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesActionProxyRequestHeadersArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesActionProxyRequestHeadersSetArgs']]]] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesActionProxyRequestHeadersSetArgs']]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesActionProxyRequestHeadersSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class VirtualServerSpecRoutesActionProxyResponseHeadersAddArgs:
    def __init__(__self__, *,
                 always: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always")

    @always.setter
    def always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesActionProxyResponseHeadersArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesActionProxyResponseHeadersAddArgs']]]] = None,
                 hide: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pass_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesActionProxyResponseHeadersAddArgs']]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesActionProxyResponseHeadersAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class VirtualServerSpecRoutesActionProxyArgs:
    def __init__(__self__, *,
                 request_headers: Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyRequestHeadersArgs']] = None,
                 response_headers: Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyResponseHeadersArgs']] = None,
                 rewrite_path: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesActionProxyRequestHeadersArgs'] request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param pulumi.Input['VirtualServerSpecRoutesActionProxyResponseHeadersArgs'] response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyRequestHeadersArgs']]:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyRequestHeadersArgs']]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyResponseHeadersArgs']]:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_path")

    @rewrite_path.setter
    def rewrite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_path", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)


@pulumi.input_type
class VirtualServerSpecRoutesActionRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerSpecRoutesActionReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerSpecRoutesActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerSpecRoutesActionRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerSpecRoutesActionReturnArgs']] = None):
        """
        Action defines an action.
        :param pulumi.Input['VirtualServerSpecRoutesActionProxyArgs'] proxy: ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesActionRedirectArgs'] redirect: ActionRedirect defines a redirect in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesActionReturnArgs'] return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyArgs']]:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesActionProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesActionRedirectArgs']]:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesActionReturnArgs']]:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesActionReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerSpecRoutesErrorPagesRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ErrorPageRedirect defines a redirect for an ErrorPage.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerSpecRoutesErrorPagesReturnHeadersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesErrorPagesReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesErrorPagesReturnHeadersArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ErrorPageReturn defines a return for an ErrorPage.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesErrorPagesReturnHeadersArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesErrorPagesReturnHeadersArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerSpecRoutesErrorPagesArgs:
    def __init__(__self__, *,
                 codes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 redirect: Optional[pulumi.Input['VirtualServerSpecRoutesErrorPagesRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerSpecRoutesErrorPagesReturnArgs']] = None):
        """
        ErrorPage defines an ErrorPage in a Route.
        :param pulumi.Input['VirtualServerSpecRoutesErrorPagesRedirectArgs'] redirect: ErrorPageRedirect defines a redirect for an ErrorPage.
        :param pulumi.Input['VirtualServerSpecRoutesErrorPagesReturnArgs'] return_: ErrorPageReturn defines a return for an ErrorPage.
        """
        if codes is not None:
            pulumi.set(__self__, "codes", codes)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter
    def codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "codes")

    @codes.setter
    def codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "codes", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesErrorPagesRedirectArgs']]:
        """
        ErrorPageRedirect defines a redirect for an ErrorPage.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesErrorPagesRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesErrorPagesReturnArgs']]:
        """
        ErrorPageReturn defines a return for an ErrorPage.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesErrorPagesReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesActionProxyRequestHeadersArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSetArgs']]]] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSetArgs']]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAddArgs:
    def __init__(__self__, *,
                 always: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always")

    @always.setter
    def always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesActionProxyResponseHeadersArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAddArgs']]]] = None,
                 hide: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pass_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAddArgs']]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesActionProxyArgs:
    def __init__(__self__, *,
                 request_headers: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyRequestHeadersArgs']] = None,
                 response_headers: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyResponseHeadersArgs']] = None,
                 rewrite_path: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyRequestHeadersArgs'] request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyResponseHeadersArgs'] response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyRequestHeadersArgs']]:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyRequestHeadersArgs']]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyResponseHeadersArgs']]:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_path")

    @rewrite_path.setter
    def rewrite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_path", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesActionRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesActionReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionReturnArgs']] = None):
        """
        Action defines an action.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyArgs'] proxy: ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesActionRedirectArgs'] redirect: ActionRedirect defines a redirect in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesActionReturnArgs'] return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyArgs']]:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionRedirectArgs']]:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionReturnArgs']]:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesConditionsArgs:
    def __init__(__self__, *,
                 argument: Optional[pulumi.Input[str]] = None,
                 cookie: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 variable: Optional[pulumi.Input[str]] = None):
        """
        Condition defines a condition in a MatchRule.
        """
        if argument is not None:
            pulumi.set(__self__, "argument", argument)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def argument(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "argument")

    @argument.setter
    def argument(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "argument", value)

    @property
    @pulumi.getter
    def cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSetArgs']]]] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSetArgs']]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAddArgs:
    def __init__(__self__, *,
                 always: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always")

    @always.setter
    def always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAddArgs']]]] = None,
                 hide: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pass_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAddArgs']]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyArgs:
    def __init__(__self__, *,
                 request_headers: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersArgs']] = None,
                 response_headers: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersArgs']] = None,
                 rewrite_path: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersArgs'] request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersArgs'] response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersArgs']]:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersArgs']]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersArgs']]:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_path")

    @rewrite_path.setter
    def rewrite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_path", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsActionRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsActionReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionReturnArgs']] = None):
        """
        Action defines an action.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyArgs'] proxy: ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionRedirectArgs'] redirect: ActionRedirect defines a redirect in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionReturnArgs'] return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyArgs']]:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionRedirectArgs']]:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionReturnArgs']]:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesSplitsArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionArgs']] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        Split defines a split.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionArgs'] action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionArgs']]:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class VirtualServerSpecRoutesMatchesArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionArgs']] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesConditionsArgs']]]] = None,
                 splits: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsArgs']]]] = None):
        """
        Match defines a match.
        :param pulumi.Input['VirtualServerSpecRoutesMatchesActionArgs'] action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if splits is not None:
            pulumi.set(__self__, "splits", splits)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionArgs']]:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesMatchesActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def splits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsArgs']]]]:
        return pulumi.get(self, "splits")

    @splits.setter
    def splits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesSplitsArgs']]]]):
        pulumi.set(self, "splits", value)


@pulumi.input_type
class VirtualServerSpecRoutesPoliciesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        PolicyReference references a policy by name and an optional namespace.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsActionProxyRequestHeadersArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSetArgs']]]] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSetArgs']]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSetArgs']]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAddArgs:
    def __init__(__self__, *,
                 always: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always")

    @always.setter
    def always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsActionProxyResponseHeadersArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAddArgs']]]] = None,
                 hide: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pass_: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAddArgs']]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAddArgs']]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsActionProxyArgs:
    def __init__(__self__, *,
                 request_headers: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyRequestHeadersArgs']] = None,
                 response_headers: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyResponseHeadersArgs']] = None,
                 rewrite_path: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyRequestHeadersArgs'] request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyResponseHeadersArgs'] response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyRequestHeadersArgs']]:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyRequestHeadersArgs']]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyResponseHeadersArgs']]:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rewrite_path")

    @rewrite_path.setter
    def rewrite_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_path", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsActionRedirectArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsActionReturnArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionRedirectArgs']] = None,
                 return_: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionReturnArgs']] = None):
        """
        Action defines an action.
        :param pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyArgs'] proxy: ActionProxy defines a proxy in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesSplitsActionRedirectArgs'] redirect: ActionRedirect defines a redirect in an Action.
        :param pulumi.Input['VirtualServerSpecRoutesSplitsActionReturnArgs'] return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyArgs']]:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionRedirectArgs']]:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionReturnArgs']]:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")

    @return_.setter
    def return_(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionReturnArgs']]):
        pulumi.set(self, "return_", value)


@pulumi.input_type
class VirtualServerSpecRoutesSplitsArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionArgs']] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        Split defines a split.
        :param pulumi.Input['VirtualServerSpecRoutesSplitsActionArgs'] action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionArgs']]:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesSplitsActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class VirtualServerSpecRoutesArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['VirtualServerSpecRoutesActionArgs']] = None,
                 dos: Optional[pulumi.Input[str]] = None,
                 error_pages: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesErrorPagesArgs']]]] = None,
                 location_snippets: Optional[pulumi.Input[str]] = None,
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesPoliciesArgs']]]] = None,
                 route: Optional[pulumi.Input[str]] = None,
                 splits: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsArgs']]]] = None):
        """
        Route defines a route.
        :param pulumi.Input['VirtualServerSpecRoutesActionArgs'] action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if dos is not None:
            pulumi.set(__self__, "dos", dos)
        if error_pages is not None:
            pulumi.set(__self__, "error_pages", error_pages)
        if location_snippets is not None:
            pulumi.set(__self__, "location_snippets", location_snippets)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if splits is not None:
            pulumi.set(__self__, "splits", splits)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['VirtualServerSpecRoutesActionArgs']]:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['VirtualServerSpecRoutesActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def dos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dos")

    @dos.setter
    def dos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dos", value)

    @property
    @pulumi.getter(name="errorPages")
    def error_pages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesErrorPagesArgs']]]]:
        return pulumi.get(self, "error_pages")

    @error_pages.setter
    def error_pages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesErrorPagesArgs']]]]):
        pulumi.set(self, "error_pages", value)

    @property
    @pulumi.getter(name="location-snippets")
    def location_snippets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location_snippets")

    @location_snippets.setter
    def location_snippets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_snippets", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesArgs']]]]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesMatchesArgs']]]]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesPoliciesArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesPoliciesArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter
    def splits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsArgs']]]]:
        return pulumi.get(self, "splits")

    @splits.setter
    def splits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesSplitsArgs']]]]):
        pulumi.set(self, "splits", value)


@pulumi.input_type
class VirtualServerSpecTlsCertManagerArgs:
    def __init__(__self__, *,
                 cluster_issuer: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 issue_temp_cert: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 issuer_group: Optional[pulumi.Input[str]] = None,
                 issuer_kind: Optional[pulumi.Input[str]] = None,
                 renew_before: Optional[pulumi.Input[str]] = None,
                 usages: Optional[pulumi.Input[str]] = None):
        """
        CertManager defines a cert manager config for a TLS.
        """
        if cluster_issuer is not None:
            pulumi.set(__self__, "cluster_issuer", cluster_issuer)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if issue_temp_cert is not None:
            pulumi.set(__self__, "issue_temp_cert", issue_temp_cert)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if issuer_group is not None:
            pulumi.set(__self__, "issuer_group", issuer_group)
        if issuer_kind is not None:
            pulumi.set(__self__, "issuer_kind", issuer_kind)
        if renew_before is not None:
            pulumi.set(__self__, "renew_before", renew_before)
        if usages is not None:
            pulumi.set(__self__, "usages", usages)

    @property
    @pulumi.getter(name="cluster-issuer")
    def cluster_issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_issuer")

    @cluster_issuer.setter
    def cluster_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_issuer", value)

    @property
    @pulumi.getter(name="common-name")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="issue-temp-cert")
    def issue_temp_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "issue_temp_cert")

    @issue_temp_cert.setter
    def issue_temp_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "issue_temp_cert", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="issuer-group")
    def issuer_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_group")

    @issuer_group.setter
    def issuer_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_group", value)

    @property
    @pulumi.getter(name="issuer-kind")
    def issuer_kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_kind")

    @issuer_kind.setter
    def issuer_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_kind", value)

    @property
    @pulumi.getter(name="renew-before")
    def renew_before(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renew_before")

    @renew_before.setter
    def renew_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_before", value)

    @property
    @pulumi.getter
    def usages(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "usages")

    @usages.setter
    def usages(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usages", value)


@pulumi.input_type
class VirtualServerSpecTlsRedirectArgs:
    def __init__(__self__, *,
                 based_on: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        TLSRedirect defines a redirect for a TLS.
        """
        if based_on is not None:
            pulumi.set(__self__, "based_on", based_on)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="basedOn")
    def based_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "based_on")

    @based_on.setter
    def based_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "based_on", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class VirtualServerSpecTlsArgs:
    def __init__(__self__, *,
                 cert_manager: Optional[pulumi.Input['VirtualServerSpecTlsCertManagerArgs']] = None,
                 redirect: Optional[pulumi.Input['VirtualServerSpecTlsRedirectArgs']] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        TLS defines TLS configuration for a VirtualServer.
        :param pulumi.Input['VirtualServerSpecTlsCertManagerArgs'] cert_manager: CertManager defines a cert manager config for a TLS.
        :param pulumi.Input['VirtualServerSpecTlsRedirectArgs'] redirect: TLSRedirect defines a redirect for a TLS.
        """
        if cert_manager is not None:
            pulumi.set(__self__, "cert_manager", cert_manager)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="cert-manager")
    def cert_manager(self) -> Optional[pulumi.Input['VirtualServerSpecTlsCertManagerArgs']]:
        """
        CertManager defines a cert manager config for a TLS.
        """
        return pulumi.get(self, "cert_manager")

    @cert_manager.setter
    def cert_manager(self, value: Optional[pulumi.Input['VirtualServerSpecTlsCertManagerArgs']]):
        pulumi.set(self, "cert_manager", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['VirtualServerSpecTlsRedirectArgs']]:
        """
        TLSRedirect defines a redirect for a TLS.
        """
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['VirtualServerSpecTlsRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class VirtualServerSpecUpstreamsBuffersArgs:
    def __init__(__self__, *,
                 number: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None):
        """
        UpstreamBuffers defines Buffer Configuration for an Upstream.
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class VirtualServerSpecUpstreamsHealthCheckHeadersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualServerSpecUpstreamsHealthCheckTlsArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class VirtualServerSpecUpstreamsHealthCheckArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 fails: Optional[pulumi.Input[int]] = None,
                 grpc_service: Optional[pulumi.Input[str]] = None,
                 grpc_status: Optional[pulumi.Input[int]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckHeadersArgs']]]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 jitter: Optional[pulumi.Input[str]] = None,
                 keepalive_time: Optional[pulumi.Input[str]] = None,
                 mandatory: Optional[pulumi.Input[bool]] = None,
                 passes: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 persistent: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_timeout: Optional[pulumi.Input[str]] = None,
                 send_timeout: Optional[pulumi.Input[str]] = None,
                 status_match: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckTlsArgs']] = None):
        """
        HealthCheck defines the parameters for active Upstream HealthChecks.
        :param pulumi.Input['VirtualServerSpecUpstreamsHealthCheckTlsArgs'] tls: UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fails is not None:
            pulumi.set(__self__, "fails", fails)
        if grpc_service is not None:
            pulumi.set(__self__, "grpc_service", grpc_service)
        if grpc_status is not None:
            pulumi.set(__self__, "grpc_status", grpc_status)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if status_match is not None:
            pulumi.set(__self__, "status_match", status_match)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="connect-timeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def fails(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fails")

    @fails.setter
    def fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fails", value)

    @property
    @pulumi.getter(name="grpcService")
    def grpc_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grpc_service")

    @grpc_service.setter
    def grpc_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grpc_service", value)

    @property
    @pulumi.getter(name="grpcStatus")
    def grpc_status(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "grpc_status")

    @grpc_status.setter
    def grpc_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grpc_status", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckHeadersArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckHeadersArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def jitter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jitter")

    @jitter.setter
    def jitter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jitter", value)

    @property
    @pulumi.getter(name="keepalive-time")
    def keepalive_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keepalive_time")

    @keepalive_time.setter
    def keepalive_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive_time", value)

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mandatory", value)

    @property
    @pulumi.getter
    def passes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "passes")

    @passes.setter
    def passes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "passes", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def persistent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "persistent")

    @persistent.setter
    def persistent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persistent", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="read-timeout")
    def read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter(name="send-timeout")
    def send_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_timeout")

    @send_timeout.setter
    def send_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_timeout", value)

    @property
    @pulumi.getter(name="statusMatch")
    def status_match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_match")

    @status_match.setter
    def status_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_match", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckTlsArgs']]:
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckTlsArgs']]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class VirtualServerSpecUpstreamsQueueArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        UpstreamQueue defines Queue Configuration for an Upstream.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class VirtualServerSpecUpstreamsSessionCookieArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 expires: Optional[pulumi.Input[str]] = None,
                 http_only: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 samesite: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None):
        """
        SessionCookie defines the parameters for session persistence.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if samesite is not None:
            pulumi.set(__self__, "samesite", samesite)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def expires(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expires")

    @expires.setter
    def expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires", value)

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "http_only")

    @http_only.setter
    def http_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def samesite(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "samesite")

    @samesite.setter
    def samesite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "samesite", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)


@pulumi.input_type
class VirtualServerSpecUpstreamsTlsArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class VirtualServerSpecUpstreamsArgs:
    def __init__(__self__, *,
                 backup: Optional[pulumi.Input[str]] = None,
                 backup_port: Optional[pulumi.Input[int]] = None,
                 buffer_size: Optional[pulumi.Input[str]] = None,
                 buffering: Optional[pulumi.Input[bool]] = None,
                 buffers: Optional[pulumi.Input['VirtualServerSpecUpstreamsBuffersArgs']] = None,
                 client_max_body_size: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 fail_timeout: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckArgs']] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 lb_method: Optional[pulumi.Input[str]] = None,
                 max_conns: Optional[pulumi.Input[int]] = None,
                 max_fails: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 next_upstream: Optional[pulumi.Input[str]] = None,
                 next_upstream_timeout: Optional[pulumi.Input[str]] = None,
                 next_upstream_tries: Optional[pulumi.Input[int]] = None,
                 ntlm: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 queue: Optional[pulumi.Input['VirtualServerSpecUpstreamsQueueArgs']] = None,
                 read_timeout: Optional[pulumi.Input[str]] = None,
                 send_timeout: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 session_cookie: Optional[pulumi.Input['VirtualServerSpecUpstreamsSessionCookieArgs']] = None,
                 slow_start: Optional[pulumi.Input[str]] = None,
                 subselector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls: Optional[pulumi.Input['VirtualServerSpecUpstreamsTlsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_cluster_ip: Optional[pulumi.Input[bool]] = None):
        """
        Upstream defines an upstream.
        :param pulumi.Input['VirtualServerSpecUpstreamsBuffersArgs'] buffers: UpstreamBuffers defines Buffer Configuration for an Upstream.
        :param pulumi.Input['VirtualServerSpecUpstreamsHealthCheckArgs'] health_check: HealthCheck defines the parameters for active Upstream HealthChecks.
        :param pulumi.Input['VirtualServerSpecUpstreamsQueueArgs'] queue: UpstreamQueue defines Queue Configuration for an Upstream.
        :param pulumi.Input['VirtualServerSpecUpstreamsSessionCookieArgs'] session_cookie: SessionCookie defines the parameters for session persistence.
        :param pulumi.Input['VirtualServerSpecUpstreamsTlsArgs'] tls: UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if backup_port is not None:
            pulumi.set(__self__, "backup_port", backup_port)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if buffering is not None:
            pulumi.set(__self__, "buffering", buffering)
        if buffers is not None:
            pulumi.set(__self__, "buffers", buffers)
        if client_max_body_size is not None:
            pulumi.set(__self__, "client_max_body_size", client_max_body_size)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if fail_timeout is not None:
            pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if lb_method is not None:
            pulumi.set(__self__, "lb_method", lb_method)
        if max_conns is not None:
            pulumi.set(__self__, "max_conns", max_conns)
        if max_fails is not None:
            pulumi.set(__self__, "max_fails", max_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_upstream is not None:
            pulumi.set(__self__, "next_upstream", next_upstream)
        if next_upstream_timeout is not None:
            pulumi.set(__self__, "next_upstream_timeout", next_upstream_timeout)
        if next_upstream_tries is not None:
            pulumi.set(__self__, "next_upstream_tries", next_upstream_tries)
        if ntlm is not None:
            pulumi.set(__self__, "ntlm", ntlm)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if session_cookie is not None:
            pulumi.set(__self__, "session_cookie", session_cookie)
        if slow_start is not None:
            pulumi.set(__self__, "slow_start", slow_start)
        if subselector is not None:
            pulumi.set(__self__, "subselector", subselector)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cluster_ip is not None:
            pulumi.set(__self__, "use_cluster_ip", use_cluster_ip)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="backupPort")
    def backup_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backup_port")

    @backup_port.setter
    def backup_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_port", value)

    @property
    @pulumi.getter(name="buffer-size")
    def buffer_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "buffer_size")

    @buffer_size.setter
    def buffer_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer_size", value)

    @property
    @pulumi.getter
    def buffering(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "buffering")

    @buffering.setter
    def buffering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "buffering", value)

    @property
    @pulumi.getter
    def buffers(self) -> Optional[pulumi.Input['VirtualServerSpecUpstreamsBuffersArgs']]:
        """
        UpstreamBuffers defines Buffer Configuration for an Upstream.
        """
        return pulumi.get(self, "buffers")

    @buffers.setter
    def buffers(self, value: Optional[pulumi.Input['VirtualServerSpecUpstreamsBuffersArgs']]):
        pulumi.set(self, "buffers", value)

    @property
    @pulumi.getter(name="client-max-body-size")
    def client_max_body_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_max_body_size")

    @client_max_body_size.setter
    def client_max_body_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_max_body_size", value)

    @property
    @pulumi.getter(name="connect-timeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="fail-timeout")
    def fail_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_timeout")

    @fail_timeout.setter
    def fail_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_timeout", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckArgs']]:
        """
        HealthCheck defines the parameters for active Upstream HealthChecks.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['VirtualServerSpecUpstreamsHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter(name="lb-method")
    def lb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lb_method")

    @lb_method.setter
    def lb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_method", value)

    @property
    @pulumi.getter(name="max-conns")
    def max_conns(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_conns")

    @max_conns.setter
    def max_conns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_conns", value)

    @property
    @pulumi.getter(name="max-fails")
    def max_fails(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_fails")

    @max_fails.setter
    def max_fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_fails", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="next-upstream")
    def next_upstream(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_upstream")

    @next_upstream.setter
    def next_upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_upstream", value)

    @property
    @pulumi.getter(name="next-upstream-timeout")
    def next_upstream_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_upstream_timeout")

    @next_upstream_timeout.setter
    def next_upstream_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_upstream_timeout", value)

    @property
    @pulumi.getter(name="next-upstream-tries")
    def next_upstream_tries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "next_upstream_tries")

    @next_upstream_tries.setter
    def next_upstream_tries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "next_upstream_tries", value)

    @property
    @pulumi.getter
    def ntlm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ntlm")

    @ntlm.setter
    def ntlm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ntlm", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input['VirtualServerSpecUpstreamsQueueArgs']]:
        """
        UpstreamQueue defines Queue Configuration for an Upstream.
        """
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input['VirtualServerSpecUpstreamsQueueArgs']]):
        pulumi.set(self, "queue", value)

    @property
    @pulumi.getter(name="read-timeout")
    def read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter(name="send-timeout")
    def send_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_timeout")

    @send_timeout.setter
    def send_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_timeout", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sessionCookie")
    def session_cookie(self) -> Optional[pulumi.Input['VirtualServerSpecUpstreamsSessionCookieArgs']]:
        """
        SessionCookie defines the parameters for session persistence.
        """
        return pulumi.get(self, "session_cookie")

    @session_cookie.setter
    def session_cookie(self, value: Optional[pulumi.Input['VirtualServerSpecUpstreamsSessionCookieArgs']]):
        pulumi.set(self, "session_cookie", value)

    @property
    @pulumi.getter(name="slow-start")
    def slow_start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slow_start")

    @slow_start.setter
    def slow_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slow_start", value)

    @property
    @pulumi.getter
    def subselector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "subselector")

    @subselector.setter
    def subselector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "subselector", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualServerSpecUpstreamsTlsArgs']]:
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualServerSpecUpstreamsTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="use-cluster-ip")
    def use_cluster_ip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_cluster_ip")

    @use_cluster_ip.setter
    def use_cluster_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_cluster_ip", value)


@pulumi.input_type
class VirtualServerSpecArgs:
    def __init__(__self__, *,
                 dos: Optional[pulumi.Input[str]] = None,
                 external_dns: Optional[pulumi.Input['VirtualServerSpecExternalDnsArgs']] = None,
                 gunzip: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 http_snippets: Optional[pulumi.Input[str]] = None,
                 ingress_class_name: Optional[pulumi.Input[str]] = None,
                 internal_route: Optional[pulumi.Input[bool]] = None,
                 listener: Optional[pulumi.Input['VirtualServerSpecListenerArgs']] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecPoliciesArgs']]]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesArgs']]]] = None,
                 server_snippets: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['VirtualServerSpecTlsArgs']] = None,
                 upstreams: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecUpstreamsArgs']]]] = None):
        """
        VirtualServerSpec is the spec of the VirtualServer resource.
        :param pulumi.Input['VirtualServerSpecExternalDnsArgs'] external_dns: ExternalDNS defines externaldns sub-resource of a virtual server.
        :param pulumi.Input[bool] internal_route: InternalRoute allows for the configuration of internal routing.
        :param pulumi.Input['VirtualServerSpecListenerArgs'] listener: VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
        :param pulumi.Input['VirtualServerSpecTlsArgs'] tls: TLS defines TLS configuration for a VirtualServer.
        """
        if dos is not None:
            pulumi.set(__self__, "dos", dos)
        if external_dns is not None:
            pulumi.set(__self__, "external_dns", external_dns)
        if gunzip is not None:
            pulumi.set(__self__, "gunzip", gunzip)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_snippets is not None:
            pulumi.set(__self__, "http_snippets", http_snippets)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if internal_route is not None:
            pulumi.set(__self__, "internal_route", internal_route)
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if server_snippets is not None:
            pulumi.set(__self__, "server_snippets", server_snippets)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if upstreams is not None:
            pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def dos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dos")

    @dos.setter
    def dos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dos", value)

    @property
    @pulumi.getter(name="externalDNS")
    def external_dns(self) -> Optional[pulumi.Input['VirtualServerSpecExternalDnsArgs']]:
        """
        ExternalDNS defines externaldns sub-resource of a virtual server.
        """
        return pulumi.get(self, "external_dns")

    @external_dns.setter
    def external_dns(self, value: Optional[pulumi.Input['VirtualServerSpecExternalDnsArgs']]):
        pulumi.set(self, "external_dns", value)

    @property
    @pulumi.getter
    def gunzip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "gunzip")

    @gunzip.setter
    def gunzip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gunzip", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="http-snippets")
    def http_snippets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_snippets")

    @http_snippets.setter
    def http_snippets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_snippets", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter(name="internalRoute")
    def internal_route(self) -> Optional[pulumi.Input[bool]]:
        """
        InternalRoute allows for the configuration of internal routing.
        """
        return pulumi.get(self, "internal_route")

    @internal_route.setter
    def internal_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "internal_route", value)

    @property
    @pulumi.getter
    def listener(self) -> Optional[pulumi.Input['VirtualServerSpecListenerArgs']]:
        """
        VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: Optional[pulumi.Input['VirtualServerSpecListenerArgs']]):
        pulumi.set(self, "listener", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecPoliciesArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecPoliciesArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesArgs']]]]:
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecRoutesArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="server-snippets")
    def server_snippets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_snippets")

    @server_snippets.setter
    def server_snippets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_snippets", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['VirtualServerSpecTlsArgs']]:
        """
        TLS defines TLS configuration for a VirtualServer.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['VirtualServerSpecTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def upstreams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecUpstreamsArgs']]]]:
        return pulumi.get(self, "upstreams")

    @upstreams.setter
    def upstreams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerSpecUpstreamsArgs']]]]):
        pulumi.set(self, "upstreams", value)


@pulumi.input_type
class VirtualServerStatusExternalEndpointsArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None):
        """
        ExternalEndpoint defines the IP/ Hostname and ports used to connect to this resource.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)


@pulumi.input_type
class VirtualServerStatusArgs:
    def __init__(__self__, *,
                 external_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerStatusExternalEndpointsArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        VirtualServerStatus defines the status for the VirtualServer resource.
        """
        if external_endpoints is not None:
            pulumi.set(__self__, "external_endpoints", external_endpoints)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="externalEndpoints")
    def external_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerStatusExternalEndpointsArgs']]]]:
        return pulumi.get(self, "external_endpoints")

    @external_endpoints.setter
    def external_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualServerStatusExternalEndpointsArgs']]]]):
        pulumi.set(self, "external_endpoints", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


