# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GlobalConfigurationSpec',
    'GlobalConfigurationSpecListeners',
    'PolicySpec',
    'PolicySpecAccessControl',
    'PolicySpecBasicAuth',
    'PolicySpecEgressMtls',
    'PolicySpecIngressMtls',
    'PolicySpecJwt',
    'PolicySpecOidc',
    'PolicySpecRateLimit',
    'PolicySpecWaf',
    'PolicySpecWafSecurityLog',
    'PolicySpecWafSecurityLogs',
    'PolicyStatus',
    'TransportServerSpec',
    'TransportServerSpecAction',
    'TransportServerSpecListener',
    'TransportServerSpecSessionParameters',
    'TransportServerSpecTls',
    'TransportServerSpecUpstreamParameters',
    'TransportServerSpecUpstreams',
    'TransportServerSpecUpstreamsHealthCheck',
    'TransportServerSpecUpstreamsHealthCheckMatch',
    'TransportServerStatus',
    'VirtualServerRouteSpec',
    'VirtualServerRouteSpecSubroutes',
    'VirtualServerRouteSpecSubroutesAction',
    'VirtualServerRouteSpecSubroutesActionProxy',
    'VirtualServerRouteSpecSubroutesActionProxyRequestHeaders',
    'VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSet',
    'VirtualServerRouteSpecSubroutesActionProxyResponseHeaders',
    'VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAdd',
    'VirtualServerRouteSpecSubroutesActionRedirect',
    'VirtualServerRouteSpecSubroutesActionReturn',
    'VirtualServerRouteSpecSubroutesErrorPages',
    'VirtualServerRouteSpecSubroutesErrorPagesRedirect',
    'VirtualServerRouteSpecSubroutesErrorPagesReturn',
    'VirtualServerRouteSpecSubroutesErrorPagesReturnHeaders',
    'VirtualServerRouteSpecSubroutesMatches',
    'VirtualServerRouteSpecSubroutesMatchesAction',
    'VirtualServerRouteSpecSubroutesMatchesActionProxy',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeaders',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSet',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeaders',
    'VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAdd',
    'VirtualServerRouteSpecSubroutesMatchesActionRedirect',
    'VirtualServerRouteSpecSubroutesMatchesActionReturn',
    'VirtualServerRouteSpecSubroutesMatchesConditions',
    'VirtualServerRouteSpecSubroutesMatchesSplits',
    'VirtualServerRouteSpecSubroutesMatchesSplitsAction',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxy',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeaders',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSet',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeaders',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAdd',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirect',
    'VirtualServerRouteSpecSubroutesMatchesSplitsActionReturn',
    'VirtualServerRouteSpecSubroutesPolicies',
    'VirtualServerRouteSpecSubroutesSplits',
    'VirtualServerRouteSpecSubroutesSplitsAction',
    'VirtualServerRouteSpecSubroutesSplitsActionProxy',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeaders',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSet',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeaders',
    'VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAdd',
    'VirtualServerRouteSpecSubroutesSplitsActionRedirect',
    'VirtualServerRouteSpecSubroutesSplitsActionReturn',
    'VirtualServerRouteSpecUpstreams',
    'VirtualServerRouteSpecUpstreamsBuffers',
    'VirtualServerRouteSpecUpstreamsHealthCheck',
    'VirtualServerRouteSpecUpstreamsHealthCheckHeaders',
    'VirtualServerRouteSpecUpstreamsHealthCheckTls',
    'VirtualServerRouteSpecUpstreamsQueue',
    'VirtualServerRouteSpecUpstreamsSessionCookie',
    'VirtualServerRouteSpecUpstreamsTls',
    'VirtualServerRouteStatus',
    'VirtualServerRouteStatusExternalEndpoints',
    'VirtualServerSpec',
    'VirtualServerSpecExternalDns',
    'VirtualServerSpecExternalDnsProviderSpecific',
    'VirtualServerSpecListener',
    'VirtualServerSpecPolicies',
    'VirtualServerSpecRoutes',
    'VirtualServerSpecRoutesAction',
    'VirtualServerSpecRoutesActionProxy',
    'VirtualServerSpecRoutesActionProxyRequestHeaders',
    'VirtualServerSpecRoutesActionProxyRequestHeadersSet',
    'VirtualServerSpecRoutesActionProxyResponseHeaders',
    'VirtualServerSpecRoutesActionProxyResponseHeadersAdd',
    'VirtualServerSpecRoutesActionRedirect',
    'VirtualServerSpecRoutesActionReturn',
    'VirtualServerSpecRoutesErrorPages',
    'VirtualServerSpecRoutesErrorPagesRedirect',
    'VirtualServerSpecRoutesErrorPagesReturn',
    'VirtualServerSpecRoutesErrorPagesReturnHeaders',
    'VirtualServerSpecRoutesMatches',
    'VirtualServerSpecRoutesMatchesAction',
    'VirtualServerSpecRoutesMatchesActionProxy',
    'VirtualServerSpecRoutesMatchesActionProxyRequestHeaders',
    'VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSet',
    'VirtualServerSpecRoutesMatchesActionProxyResponseHeaders',
    'VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAdd',
    'VirtualServerSpecRoutesMatchesActionRedirect',
    'VirtualServerSpecRoutesMatchesActionReturn',
    'VirtualServerSpecRoutesMatchesConditions',
    'VirtualServerSpecRoutesMatchesSplits',
    'VirtualServerSpecRoutesMatchesSplitsAction',
    'VirtualServerSpecRoutesMatchesSplitsActionProxy',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeaders',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSet',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeaders',
    'VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAdd',
    'VirtualServerSpecRoutesMatchesSplitsActionRedirect',
    'VirtualServerSpecRoutesMatchesSplitsActionReturn',
    'VirtualServerSpecRoutesPolicies',
    'VirtualServerSpecRoutesSplits',
    'VirtualServerSpecRoutesSplitsAction',
    'VirtualServerSpecRoutesSplitsActionProxy',
    'VirtualServerSpecRoutesSplitsActionProxyRequestHeaders',
    'VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSet',
    'VirtualServerSpecRoutesSplitsActionProxyResponseHeaders',
    'VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAdd',
    'VirtualServerSpecRoutesSplitsActionRedirect',
    'VirtualServerSpecRoutesSplitsActionReturn',
    'VirtualServerSpecTls',
    'VirtualServerSpecTlsCertManager',
    'VirtualServerSpecTlsRedirect',
    'VirtualServerSpecUpstreams',
    'VirtualServerSpecUpstreamsBuffers',
    'VirtualServerSpecUpstreamsHealthCheck',
    'VirtualServerSpecUpstreamsHealthCheckHeaders',
    'VirtualServerSpecUpstreamsHealthCheckTls',
    'VirtualServerSpecUpstreamsQueue',
    'VirtualServerSpecUpstreamsSessionCookie',
    'VirtualServerSpecUpstreamsTls',
    'VirtualServerStatus',
    'VirtualServerStatusExternalEndpoints',
]

@pulumi.output_type
class GlobalConfigurationSpec(dict):
    """
    GlobalConfigurationSpec is the spec of the GlobalConfiguration resource.
    """
    def __init__(__self__, *,
                 listeners: Optional[Sequence['outputs.GlobalConfigurationSpecListeners']] = None):
        """
        GlobalConfigurationSpec is the spec of the GlobalConfiguration resource.
        """
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[Sequence['outputs.GlobalConfigurationSpecListeners']]:
        return pulumi.get(self, "listeners")


@pulumi.output_type
class GlobalConfigurationSpecListeners(dict):
    """
    Listener defines a listener.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 ssl: Optional[bool] = None):
        """
        Listener defines a listener.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def ssl(self) -> Optional[bool]:
        return pulumi.get(self, "ssl")


@pulumi.output_type
class PolicySpec(dict):
    """
    PolicySpec is the spec of the Policy resource. The spec includes multiple fields, where each field represents a different policy. Only one policy (field) is allowed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessControl":
            suggest = "access_control"
        elif key == "basicAuth":
            suggest = "basic_auth"
        elif key == "egressMTLS":
            suggest = "egress_mtls"
        elif key == "ingressClassName":
            suggest = "ingress_class_name"
        elif key == "ingressMTLS":
            suggest = "ingress_mtls"
        elif key == "rateLimit":
            suggest = "rate_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_control: Optional['outputs.PolicySpecAccessControl'] = None,
                 basic_auth: Optional['outputs.PolicySpecBasicAuth'] = None,
                 egress_mtls: Optional['outputs.PolicySpecEgressMtls'] = None,
                 ingress_class_name: Optional[str] = None,
                 ingress_mtls: Optional['outputs.PolicySpecIngressMtls'] = None,
                 jwt: Optional['outputs.PolicySpecJwt'] = None,
                 oidc: Optional['outputs.PolicySpecOidc'] = None,
                 rate_limit: Optional['outputs.PolicySpecRateLimit'] = None,
                 waf: Optional['outputs.PolicySpecWaf'] = None):
        """
        PolicySpec is the spec of the Policy resource. The spec includes multiple fields, where each field represents a different policy. Only one policy (field) is allowed.
        :param 'PolicySpecAccessControlArgs' access_control: AccessControl defines an access policy based on the source IP of a request.
        :param 'PolicySpecBasicAuthArgs' basic_auth: BasicAuth holds HTTP Basic authentication configuration policy status: preview
        :param 'PolicySpecEgressMtlsArgs' egress_mtls: EgressMTLS defines an Egress MTLS policy.
        :param 'PolicySpecIngressMtlsArgs' ingress_mtls: IngressMTLS defines an Ingress MTLS policy.
        :param 'PolicySpecJwtArgs' jwt: JWTAuth holds JWT authentication configuration.
        :param 'PolicySpecOidcArgs' oidc: OIDC defines an Open ID Connect policy.
        :param 'PolicySpecRateLimitArgs' rate_limit: RateLimit defines a rate limit policy.
        :param 'PolicySpecWafArgs' waf: WAF defines an WAF policy.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if egress_mtls is not None:
            pulumi.set(__self__, "egress_mtls", egress_mtls)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_mtls is not None:
            pulumi.set(__self__, "ingress_mtls", ingress_mtls)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if oidc is not None:
            pulumi.set(__self__, "oidc", oidc)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional['outputs.PolicySpecAccessControl']:
        """
        AccessControl defines an access policy based on the source IP of a request.
        """
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.PolicySpecBasicAuth']:
        """
        BasicAuth holds HTTP Basic authentication configuration policy status: preview
        """
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter(name="egressMTLS")
    def egress_mtls(self) -> Optional['outputs.PolicySpecEgressMtls']:
        """
        EgressMTLS defines an Egress MTLS policy.
        """
        return pulumi.get(self, "egress_mtls")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter(name="ingressMTLS")
    def ingress_mtls(self) -> Optional['outputs.PolicySpecIngressMtls']:
        """
        IngressMTLS defines an Ingress MTLS policy.
        """
        return pulumi.get(self, "ingress_mtls")

    @property
    @pulumi.getter
    def jwt(self) -> Optional['outputs.PolicySpecJwt']:
        """
        JWTAuth holds JWT authentication configuration.
        """
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def oidc(self) -> Optional['outputs.PolicySpecOidc']:
        """
        OIDC defines an Open ID Connect policy.
        """
        return pulumi.get(self, "oidc")

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional['outputs.PolicySpecRateLimit']:
        """
        RateLimit defines a rate limit policy.
        """
        return pulumi.get(self, "rate_limit")

    @property
    @pulumi.getter
    def waf(self) -> Optional['outputs.PolicySpecWaf']:
        """
        WAF defines an WAF policy.
        """
        return pulumi.get(self, "waf")


@pulumi.output_type
class PolicySpecAccessControl(dict):
    """
    AccessControl defines an access policy based on the source IP of a request.
    """
    def __init__(__self__, *,
                 allow: Optional[Sequence[str]] = None,
                 deny: Optional[Sequence[str]] = None):
        """
        AccessControl defines an access policy based on the source IP of a request.
        """
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if deny is not None:
            pulumi.set(__self__, "deny", deny)

    @property
    @pulumi.getter
    def allow(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter
    def deny(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "deny")


@pulumi.output_type
class PolicySpecBasicAuth(dict):
    """
    BasicAuth holds HTTP Basic authentication configuration policy status: preview
    """
    def __init__(__self__, *,
                 realm: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        BasicAuth holds HTTP Basic authentication configuration policy status: preview
        """
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def realm(self) -> Optional[str]:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")


@pulumi.output_type
class PolicySpecEgressMtls(dict):
    """
    EgressMTLS defines an Egress MTLS policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverName":
            suggest = "server_name"
        elif key == "sessionReuse":
            suggest = "session_reuse"
        elif key == "sslName":
            suggest = "ssl_name"
        elif key == "tlsSecret":
            suggest = "tls_secret"
        elif key == "trustedCertSecret":
            suggest = "trusted_cert_secret"
        elif key == "verifyDepth":
            suggest = "verify_depth"
        elif key == "verifyServer":
            suggest = "verify_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecEgressMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecEgressMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecEgressMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ciphers: Optional[str] = None,
                 protocols: Optional[str] = None,
                 server_name: Optional[bool] = None,
                 session_reuse: Optional[bool] = None,
                 ssl_name: Optional[str] = None,
                 tls_secret: Optional[str] = None,
                 trusted_cert_secret: Optional[str] = None,
                 verify_depth: Optional[int] = None,
                 verify_server: Optional[bool] = None):
        """
        EgressMTLS defines an Egress MTLS policy.
        """
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if session_reuse is not None:
            pulumi.set(__self__, "session_reuse", session_reuse)
        if ssl_name is not None:
            pulumi.set(__self__, "ssl_name", ssl_name)
        if tls_secret is not None:
            pulumi.set(__self__, "tls_secret", tls_secret)
        if trusted_cert_secret is not None:
            pulumi.set(__self__, "trusted_cert_secret", trusted_cert_secret)
        if verify_depth is not None:
            pulumi.set(__self__, "verify_depth", verify_depth)
        if verify_server is not None:
            pulumi.set(__self__, "verify_server", verify_server)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[str]:
        return pulumi.get(self, "ciphers")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[str]:
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[bool]:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sessionReuse")
    def session_reuse(self) -> Optional[bool]:
        return pulumi.get(self, "session_reuse")

    @property
    @pulumi.getter(name="sslName")
    def ssl_name(self) -> Optional[str]:
        return pulumi.get(self, "ssl_name")

    @property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> Optional[str]:
        return pulumi.get(self, "tls_secret")

    @property
    @pulumi.getter(name="trustedCertSecret")
    def trusted_cert_secret(self) -> Optional[str]:
        return pulumi.get(self, "trusted_cert_secret")

    @property
    @pulumi.getter(name="verifyDepth")
    def verify_depth(self) -> Optional[int]:
        return pulumi.get(self, "verify_depth")

    @property
    @pulumi.getter(name="verifyServer")
    def verify_server(self) -> Optional[bool]:
        return pulumi.get(self, "verify_server")


@pulumi.output_type
class PolicySpecIngressMtls(dict):
    """
    IngressMTLS defines an Ingress MTLS policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertSecret":
            suggest = "client_cert_secret"
        elif key == "crlFileName":
            suggest = "crl_file_name"
        elif key == "verifyClient":
            suggest = "verify_client"
        elif key == "verifyDepth":
            suggest = "verify_depth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecIngressMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecIngressMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecIngressMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_cert_secret: Optional[str] = None,
                 crl_file_name: Optional[str] = None,
                 verify_client: Optional[str] = None,
                 verify_depth: Optional[int] = None):
        """
        IngressMTLS defines an Ingress MTLS policy.
        """
        if client_cert_secret is not None:
            pulumi.set(__self__, "client_cert_secret", client_cert_secret)
        if crl_file_name is not None:
            pulumi.set(__self__, "crl_file_name", crl_file_name)
        if verify_client is not None:
            pulumi.set(__self__, "verify_client", verify_client)
        if verify_depth is not None:
            pulumi.set(__self__, "verify_depth", verify_depth)

    @property
    @pulumi.getter(name="clientCertSecret")
    def client_cert_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_cert_secret")

    @property
    @pulumi.getter(name="crlFileName")
    def crl_file_name(self) -> Optional[str]:
        return pulumi.get(self, "crl_file_name")

    @property
    @pulumi.getter(name="verifyClient")
    def verify_client(self) -> Optional[str]:
        return pulumi.get(self, "verify_client")

    @property
    @pulumi.getter(name="verifyDepth")
    def verify_depth(self) -> Optional[int]:
        return pulumi.get(self, "verify_depth")


@pulumi.output_type
class PolicySpecJwt(dict):
    """
    JWTAuth holds JWT authentication configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jwksURI":
            suggest = "jwks_uri"
        elif key == "keyCache":
            suggest = "key_cache"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecJwt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecJwt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecJwt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jwks_uri: Optional[str] = None,
                 key_cache: Optional[str] = None,
                 realm: Optional[str] = None,
                 secret: Optional[str] = None,
                 token: Optional[str] = None):
        """
        JWTAuth holds JWT authentication configuration.
        """
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if key_cache is not None:
            pulumi.set(__self__, "key_cache", key_cache)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="jwksURI")
    def jwks_uri(self) -> Optional[str]:
        return pulumi.get(self, "jwks_uri")

    @property
    @pulumi.getter(name="keyCache")
    def key_cache(self) -> Optional[str]:
        return pulumi.get(self, "key_cache")

    @property
    @pulumi.getter
    def realm(self) -> Optional[str]:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")


@pulumi.output_type
class PolicySpecOidc(dict):
    """
    OIDC defines an Open ID Connect policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTokenEnable":
            suggest = "access_token_enable"
        elif key == "authEndpoint":
            suggest = "auth_endpoint"
        elif key == "authExtraArgs":
            suggest = "auth_extra_args"
        elif key == "clientID":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "jwksURI":
            suggest = "jwks_uri"
        elif key == "redirectURI":
            suggest = "redirect_uri"
        elif key == "tokenEndpoint":
            suggest = "token_endpoint"
        elif key == "zoneSyncLeeway":
            suggest = "zone_sync_leeway"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecOidc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecOidc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecOidc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token_enable: Optional[bool] = None,
                 auth_endpoint: Optional[str] = None,
                 auth_extra_args: Optional[Sequence[str]] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None,
                 jwks_uri: Optional[str] = None,
                 redirect_uri: Optional[str] = None,
                 scope: Optional[str] = None,
                 token_endpoint: Optional[str] = None,
                 zone_sync_leeway: Optional[int] = None):
        """
        OIDC defines an Open ID Connect policy.
        """
        if access_token_enable is not None:
            pulumi.set(__self__, "access_token_enable", access_token_enable)
        if auth_endpoint is not None:
            pulumi.set(__self__, "auth_endpoint", auth_endpoint)
        if auth_extra_args is not None:
            pulumi.set(__self__, "auth_extra_args", auth_extra_args)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if zone_sync_leeway is not None:
            pulumi.set(__self__, "zone_sync_leeway", zone_sync_leeway)

    @property
    @pulumi.getter(name="accessTokenEnable")
    def access_token_enable(self) -> Optional[bool]:
        return pulumi.get(self, "access_token_enable")

    @property
    @pulumi.getter(name="authEndpoint")
    def auth_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "auth_endpoint")

    @property
    @pulumi.getter(name="authExtraArgs")
    def auth_extra_args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "auth_extra_args")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="jwksURI")
    def jwks_uri(self) -> Optional[str]:
        return pulumi.get(self, "jwks_uri")

    @property
    @pulumi.getter(name="redirectURI")
    def redirect_uri(self) -> Optional[str]:
        return pulumi.get(self, "redirect_uri")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "token_endpoint")

    @property
    @pulumi.getter(name="zoneSyncLeeway")
    def zone_sync_leeway(self) -> Optional[int]:
        return pulumi.get(self, "zone_sync_leeway")


@pulumi.output_type
class PolicySpecRateLimit(dict):
    """
    RateLimit defines a rate limit policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dryRun":
            suggest = "dry_run"
        elif key == "logLevel":
            suggest = "log_level"
        elif key == "noDelay":
            suggest = "no_delay"
        elif key == "rejectCode":
            suggest = "reject_code"
        elif key == "zoneSize":
            suggest = "zone_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecRateLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecRateLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecRateLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst: Optional[int] = None,
                 delay: Optional[int] = None,
                 dry_run: Optional[bool] = None,
                 key: Optional[str] = None,
                 log_level: Optional[str] = None,
                 no_delay: Optional[bool] = None,
                 rate: Optional[str] = None,
                 reject_code: Optional[int] = None,
                 zone_size: Optional[str] = None):
        """
        RateLimit defines a rate limit policy.
        """
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if no_delay is not None:
            pulumi.set(__self__, "no_delay", no_delay)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if reject_code is not None:
            pulumi.set(__self__, "reject_code", reject_code)
        if zone_size is not None:
            pulumi.set(__self__, "zone_size", zone_size)

    @property
    @pulumi.getter
    def burst(self) -> Optional[int]:
        return pulumi.get(self, "burst")

    @property
    @pulumi.getter
    def delay(self) -> Optional[int]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[bool]:
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="noDelay")
    def no_delay(self) -> Optional[bool]:
        return pulumi.get(self, "no_delay")

    @property
    @pulumi.getter
    def rate(self) -> Optional[str]:
        return pulumi.get(self, "rate")

    @property
    @pulumi.getter(name="rejectCode")
    def reject_code(self) -> Optional[int]:
        return pulumi.get(self, "reject_code")

    @property
    @pulumi.getter(name="zoneSize")
    def zone_size(self) -> Optional[str]:
        return pulumi.get(self, "zone_size")


@pulumi.output_type
class PolicySpecWaf(dict):
    """
    WAF defines an WAF policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apBundle":
            suggest = "ap_bundle"
        elif key == "apPolicy":
            suggest = "ap_policy"
        elif key == "securityLog":
            suggest = "security_log"
        elif key == "securityLogs":
            suggest = "security_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecWaf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecWaf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecWaf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ap_bundle: Optional[str] = None,
                 ap_policy: Optional[str] = None,
                 enable: Optional[bool] = None,
                 security_log: Optional['outputs.PolicySpecWafSecurityLog'] = None,
                 security_logs: Optional[Sequence['outputs.PolicySpecWafSecurityLogs']] = None):
        """
        WAF defines an WAF policy.
        :param 'PolicySpecWafSecurityLogArgs' security_log: SecurityLog defines the security log of a WAF policy.
        """
        if ap_bundle is not None:
            pulumi.set(__self__, "ap_bundle", ap_bundle)
        if ap_policy is not None:
            pulumi.set(__self__, "ap_policy", ap_policy)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if security_log is not None:
            pulumi.set(__self__, "security_log", security_log)
        if security_logs is not None:
            pulumi.set(__self__, "security_logs", security_logs)

    @property
    @pulumi.getter(name="apBundle")
    def ap_bundle(self) -> Optional[str]:
        return pulumi.get(self, "ap_bundle")

    @property
    @pulumi.getter(name="apPolicy")
    def ap_policy(self) -> Optional[str]:
        return pulumi.get(self, "ap_policy")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="securityLog")
    def security_log(self) -> Optional['outputs.PolicySpecWafSecurityLog']:
        """
        SecurityLog defines the security log of a WAF policy.
        """
        return pulumi.get(self, "security_log")

    @property
    @pulumi.getter(name="securityLogs")
    def security_logs(self) -> Optional[Sequence['outputs.PolicySpecWafSecurityLogs']]:
        return pulumi.get(self, "security_logs")


@pulumi.output_type
class PolicySpecWafSecurityLog(dict):
    """
    SecurityLog defines the security log of a WAF policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apLogConf":
            suggest = "ap_log_conf"
        elif key == "logDest":
            suggest = "log_dest"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecWafSecurityLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecWafSecurityLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecWafSecurityLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ap_log_conf: Optional[str] = None,
                 enable: Optional[bool] = None,
                 log_dest: Optional[str] = None):
        """
        SecurityLog defines the security log of a WAF policy.
        """
        if ap_log_conf is not None:
            pulumi.set(__self__, "ap_log_conf", ap_log_conf)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if log_dest is not None:
            pulumi.set(__self__, "log_dest", log_dest)

    @property
    @pulumi.getter(name="apLogConf")
    def ap_log_conf(self) -> Optional[str]:
        return pulumi.get(self, "ap_log_conf")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="logDest")
    def log_dest(self) -> Optional[str]:
        return pulumi.get(self, "log_dest")


@pulumi.output_type
class PolicySpecWafSecurityLogs(dict):
    """
    SecurityLog defines the security log of a WAF policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apLogConf":
            suggest = "ap_log_conf"
        elif key == "logDest":
            suggest = "log_dest"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecWafSecurityLogs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecWafSecurityLogs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecWafSecurityLogs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ap_log_conf: Optional[str] = None,
                 enable: Optional[bool] = None,
                 log_dest: Optional[str] = None):
        """
        SecurityLog defines the security log of a WAF policy.
        """
        if ap_log_conf is not None:
            pulumi.set(__self__, "ap_log_conf", ap_log_conf)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if log_dest is not None:
            pulumi.set(__self__, "log_dest", log_dest)

    @property
    @pulumi.getter(name="apLogConf")
    def ap_log_conf(self) -> Optional[str]:
        return pulumi.get(self, "ap_log_conf")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="logDest")
    def log_dest(self) -> Optional[str]:
        return pulumi.get(self, "log_dest")


@pulumi.output_type
class PolicyStatus(dict):
    """
    PolicyStatus is the status of the policy resource
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 state: Optional[str] = None):
        """
        PolicyStatus is the status of the policy resource
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class TransportServerSpec(dict):
    """
    TransportServerSpec is the spec of the TransportServer resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressClassName":
            suggest = "ingress_class_name"
        elif key == "serverSnippets":
            suggest = "server_snippets"
        elif key == "sessionParameters":
            suggest = "session_parameters"
        elif key == "streamSnippets":
            suggest = "stream_snippets"
        elif key == "upstreamParameters":
            suggest = "upstream_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportServerSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportServerSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportServerSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional['outputs.TransportServerSpecAction'] = None,
                 host: Optional[str] = None,
                 ingress_class_name: Optional[str] = None,
                 listener: Optional['outputs.TransportServerSpecListener'] = None,
                 server_snippets: Optional[str] = None,
                 session_parameters: Optional['outputs.TransportServerSpecSessionParameters'] = None,
                 stream_snippets: Optional[str] = None,
                 tls: Optional['outputs.TransportServerSpecTls'] = None,
                 upstream_parameters: Optional['outputs.TransportServerSpecUpstreamParameters'] = None,
                 upstreams: Optional[Sequence['outputs.TransportServerSpecUpstreams']] = None):
        """
        TransportServerSpec is the spec of the TransportServer resource.
        :param 'TransportServerSpecActionArgs' action: TransportServerAction defines an action.
        :param 'TransportServerSpecListenerArgs' listener: TransportServerListener defines a listener for a TransportServer.
        :param 'TransportServerSpecSessionParametersArgs' session_parameters: SessionParameters defines session parameters.
        :param 'TransportServerSpecTlsArgs' tls: TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        :param 'TransportServerSpecUpstreamParametersArgs' upstream_parameters: UpstreamParameters defines parameters for an upstream.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if server_snippets is not None:
            pulumi.set(__self__, "server_snippets", server_snippets)
        if session_parameters is not None:
            pulumi.set(__self__, "session_parameters", session_parameters)
        if stream_snippets is not None:
            pulumi.set(__self__, "stream_snippets", stream_snippets)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if upstream_parameters is not None:
            pulumi.set(__self__, "upstream_parameters", upstream_parameters)
        if upstreams is not None:
            pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.TransportServerSpecAction']:
        """
        TransportServerAction defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter
    def listener(self) -> Optional['outputs.TransportServerSpecListener']:
        """
        TransportServerListener defines a listener for a TransportServer.
        """
        return pulumi.get(self, "listener")

    @property
    @pulumi.getter(name="serverSnippets")
    def server_snippets(self) -> Optional[str]:
        return pulumi.get(self, "server_snippets")

    @property
    @pulumi.getter(name="sessionParameters")
    def session_parameters(self) -> Optional['outputs.TransportServerSpecSessionParameters']:
        """
        SessionParameters defines session parameters.
        """
        return pulumi.get(self, "session_parameters")

    @property
    @pulumi.getter(name="streamSnippets")
    def stream_snippets(self) -> Optional[str]:
        return pulumi.get(self, "stream_snippets")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.TransportServerSpecTls']:
        """
        TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter(name="upstreamParameters")
    def upstream_parameters(self) -> Optional['outputs.TransportServerSpecUpstreamParameters']:
        """
        UpstreamParameters defines parameters for an upstream.
        """
        return pulumi.get(self, "upstream_parameters")

    @property
    @pulumi.getter
    def upstreams(self) -> Optional[Sequence['outputs.TransportServerSpecUpstreams']]:
        return pulumi.get(self, "upstreams")


@pulumi.output_type
class TransportServerSpecAction(dict):
    """
    TransportServerAction defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportServerSpecAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportServerSpecAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportServerSpecAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None):
        """
        TransportServerAction defines an action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class TransportServerSpecListener(dict):
    """
    TransportServerListener defines a listener for a TransportServer.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        TransportServerListener defines a listener for a TransportServer.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class TransportServerSpecSessionParameters(dict):
    """
    SessionParameters defines session parameters.
    """
    def __init__(__self__, *,
                 timeout: Optional[str] = None):
        """
        SessionParameters defines session parameters.
        """
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class TransportServerSpecTls(dict):
    """
    TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
    """
    def __init__(__self__, *,
                 secret: Optional[str] = None):
        """
        TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")


@pulumi.output_type
class TransportServerSpecUpstreamParameters(dict):
    """
    UpstreamParameters defines parameters for an upstream.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectTimeout":
            suggest = "connect_timeout"
        elif key == "nextUpstream":
            suggest = "next_upstream"
        elif key == "nextUpstreamTimeout":
            suggest = "next_upstream_timeout"
        elif key == "nextUpstreamTries":
            suggest = "next_upstream_tries"
        elif key == "udpRequests":
            suggest = "udp_requests"
        elif key == "udpResponses":
            suggest = "udp_responses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportServerSpecUpstreamParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportServerSpecUpstreamParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportServerSpecUpstreamParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_timeout: Optional[str] = None,
                 next_upstream: Optional[bool] = None,
                 next_upstream_timeout: Optional[str] = None,
                 next_upstream_tries: Optional[int] = None,
                 udp_requests: Optional[int] = None,
                 udp_responses: Optional[int] = None):
        """
        UpstreamParameters defines parameters for an upstream.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if next_upstream is not None:
            pulumi.set(__self__, "next_upstream", next_upstream)
        if next_upstream_timeout is not None:
            pulumi.set(__self__, "next_upstream_timeout", next_upstream_timeout)
        if next_upstream_tries is not None:
            pulumi.set(__self__, "next_upstream_tries", next_upstream_tries)
        if udp_requests is not None:
            pulumi.set(__self__, "udp_requests", udp_requests)
        if udp_responses is not None:
            pulumi.set(__self__, "udp_responses", udp_responses)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="nextUpstream")
    def next_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "next_upstream")

    @property
    @pulumi.getter(name="nextUpstreamTimeout")
    def next_upstream_timeout(self) -> Optional[str]:
        return pulumi.get(self, "next_upstream_timeout")

    @property
    @pulumi.getter(name="nextUpstreamTries")
    def next_upstream_tries(self) -> Optional[int]:
        return pulumi.get(self, "next_upstream_tries")

    @property
    @pulumi.getter(name="udpRequests")
    def udp_requests(self) -> Optional[int]:
        return pulumi.get(self, "udp_requests")

    @property
    @pulumi.getter(name="udpResponses")
    def udp_responses(self) -> Optional[int]:
        return pulumi.get(self, "udp_responses")


@pulumi.output_type
class TransportServerSpecUpstreams(dict):
    """
    TransportServerUpstream defines an upstream.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPort":
            suggest = "backup_port"
        elif key == "failTimeout":
            suggest = "fail_timeout"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "loadBalancingMethod":
            suggest = "load_balancing_method"
        elif key == "maxConns":
            suggest = "max_conns"
        elif key == "maxFails":
            suggest = "max_fails"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportServerSpecUpstreams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportServerSpecUpstreams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportServerSpecUpstreams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup: Optional[str] = None,
                 backup_port: Optional[int] = None,
                 fail_timeout: Optional[str] = None,
                 health_check: Optional['outputs.TransportServerSpecUpstreamsHealthCheck'] = None,
                 load_balancing_method: Optional[str] = None,
                 max_conns: Optional[int] = None,
                 max_fails: Optional[int] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 service: Optional[str] = None):
        """
        TransportServerUpstream defines an upstream.
        :param 'TransportServerSpecUpstreamsHealthCheckArgs' health_check: TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if backup_port is not None:
            pulumi.set(__self__, "backup_port", backup_port)
        if fail_timeout is not None:
            pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if load_balancing_method is not None:
            pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        if max_conns is not None:
            pulumi.set(__self__, "max_conns", max_conns)
        if max_fails is not None:
            pulumi.set(__self__, "max_fails", max_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def backup(self) -> Optional[str]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter(name="backupPort")
    def backup_port(self) -> Optional[int]:
        return pulumi.get(self, "backup_port")

    @property
    @pulumi.getter(name="failTimeout")
    def fail_timeout(self) -> Optional[str]:
        return pulumi.get(self, "fail_timeout")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional['outputs.TransportServerSpecUpstreamsHealthCheck']:
        """
        TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> Optional[str]:
        return pulumi.get(self, "load_balancing_method")

    @property
    @pulumi.getter(name="maxConns")
    def max_conns(self) -> Optional[int]:
        return pulumi.get(self, "max_conns")

    @property
    @pulumi.getter(name="maxFails")
    def max_fails(self) -> Optional[int]:
        return pulumi.get(self, "max_fails")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class TransportServerSpecUpstreamsHealthCheck(dict):
    """
    TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
    """
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 fails: Optional[int] = None,
                 interval: Optional[str] = None,
                 jitter: Optional[str] = None,
                 match: Optional['outputs.TransportServerSpecUpstreamsHealthCheckMatch'] = None,
                 passes: Optional[int] = None,
                 port: Optional[int] = None,
                 timeout: Optional[str] = None):
        """
        TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        :param 'TransportServerSpecUpstreamsHealthCheckMatchArgs' match: TransportServerMatch defines the parameters of a custom health check.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fails is not None:
            pulumi.set(__self__, "fails", fails)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def fails(self) -> Optional[int]:
        return pulumi.get(self, "fails")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def jitter(self) -> Optional[str]:
        return pulumi.get(self, "jitter")

    @property
    @pulumi.getter
    def match(self) -> Optional['outputs.TransportServerSpecUpstreamsHealthCheckMatch']:
        """
        TransportServerMatch defines the parameters of a custom health check.
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def passes(self) -> Optional[int]:
        return pulumi.get(self, "passes")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class TransportServerSpecUpstreamsHealthCheckMatch(dict):
    """
    TransportServerMatch defines the parameters of a custom health check.
    """
    def __init__(__self__, *,
                 expect: Optional[str] = None,
                 send: Optional[str] = None):
        """
        TransportServerMatch defines the parameters of a custom health check.
        """
        if expect is not None:
            pulumi.set(__self__, "expect", expect)
        if send is not None:
            pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def expect(self) -> Optional[str]:
        return pulumi.get(self, "expect")

    @property
    @pulumi.getter
    def send(self) -> Optional[str]:
        return pulumi.get(self, "send")


@pulumi.output_type
class TransportServerStatus(dict):
    """
    TransportServerStatus defines the status for the TransportServer resource.
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 state: Optional[str] = None):
        """
        TransportServerStatus defines the status for the TransportServer resource.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class VirtualServerRouteSpec(dict):
    """
    VirtualServerRouteSpec is the spec of the VirtualServerRoute resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressClassName":
            suggest = "ingress_class_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: Optional[str] = None,
                 ingress_class_name: Optional[str] = None,
                 subroutes: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutes']] = None,
                 upstreams: Optional[Sequence['outputs.VirtualServerRouteSpecUpstreams']] = None):
        """
        VirtualServerRouteSpec is the spec of the VirtualServerRoute resource.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if subroutes is not None:
            pulumi.set(__self__, "subroutes", subroutes)
        if upstreams is not None:
            pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter
    def subroutes(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutes']]:
        return pulumi.get(self, "subroutes")

    @property
    @pulumi.getter
    def upstreams(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecUpstreams']]:
        return pulumi.get(self, "upstreams")


@pulumi.output_type
class VirtualServerRouteSpecSubroutes(dict):
    """
    Route defines a route.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorPages":
            suggest = "error_pages"
        elif key == "location-snippets":
            suggest = "location_snippets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional['outputs.VirtualServerRouteSpecSubroutesAction'] = None,
                 dos: Optional[str] = None,
                 error_pages: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesErrorPages']] = None,
                 location_snippets: Optional[str] = None,
                 matches: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatches']] = None,
                 path: Optional[str] = None,
                 policies: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesPolicies']] = None,
                 route: Optional[str] = None,
                 splits: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesSplits']] = None):
        """
        Route defines a route.
        :param 'VirtualServerRouteSpecSubroutesActionArgs' action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if dos is not None:
            pulumi.set(__self__, "dos", dos)
        if error_pages is not None:
            pulumi.set(__self__, "error_pages", error_pages)
        if location_snippets is not None:
            pulumi.set(__self__, "location_snippets", location_snippets)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if splits is not None:
            pulumi.set(__self__, "splits", splits)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesAction']:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def dos(self) -> Optional[str]:
        return pulumi.get(self, "dos")

    @property
    @pulumi.getter(name="errorPages")
    def error_pages(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesErrorPages']]:
        return pulumi.get(self, "error_pages")

    @property
    @pulumi.getter(name="location-snippets")
    def location_snippets(self) -> Optional[str]:
        return pulumi.get(self, "location_snippets")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatches']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesPolicies']]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def route(self) -> Optional[str]:
        return pulumi.get(self, "route")

    @property
    @pulumi.getter
    def splits(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesSplits']]:
        return pulumi.get(self, "splits")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesAction(dict):
    """
    Action defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"
        elif key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 proxy: Optional['outputs.VirtualServerRouteSpecSubroutesActionProxy'] = None,
                 redirect: Optional['outputs.VirtualServerRouteSpecSubroutesActionRedirect'] = None,
                 return_: Optional['outputs.VirtualServerRouteSpecSubroutesActionReturn'] = None):
        """
        Action defines an action.
        :param 'VirtualServerRouteSpecSubroutesActionProxyArgs' proxy: ActionProxy defines a proxy in an Action.
        :param 'VirtualServerRouteSpecSubroutesActionRedirectArgs' redirect: ActionRedirect defines a redirect in an Action.
        :param 'VirtualServerRouteSpecSubroutesActionReturnArgs' return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesActionProxy']:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesActionRedirect']:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesActionReturn']:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesActionProxy(dict):
    """
    ActionProxy defines a proxy in an Action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHeaders":
            suggest = "request_headers"
        elif key == "responseHeaders":
            suggest = "response_headers"
        elif key == "rewritePath":
            suggest = "rewrite_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesActionProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesActionProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesActionProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_headers: Optional['outputs.VirtualServerRouteSpecSubroutesActionProxyRequestHeaders'] = None,
                 response_headers: Optional['outputs.VirtualServerRouteSpecSubroutesActionProxyResponseHeaders'] = None,
                 rewrite_path: Optional[str] = None,
                 upstream: Optional[str] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param 'VirtualServerRouteSpecSubroutesActionProxyRequestHeadersArgs' request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param 'VirtualServerRouteSpecSubroutesActionProxyResponseHeadersArgs' response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesActionProxyRequestHeaders']:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesActionProxyResponseHeaders']:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[str]:
        return pulumi.get(self, "rewrite_path")

    @property
    @pulumi.getter
    def upstream(self) -> Optional[str]:
        return pulumi.get(self, "upstream")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesActionProxyRequestHeaders(dict):
    """
    ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesActionProxyRequestHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesActionProxyRequestHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesActionProxyRequestHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[bool] = None,
                 set: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSet']] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[bool]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSet']]:
        return pulumi.get(self, "set")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesActionProxyRequestHeadersSet(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesActionProxyResponseHeaders(dict):
    """
    ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesActionProxyResponseHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesActionProxyResponseHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesActionProxyResponseHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAdd']] = None,
                 hide: Optional[Sequence[str]] = None,
                 ignore: Optional[Sequence[str]] = None,
                 pass_: Optional[Sequence[str]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAdd']]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def hide(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesActionProxyResponseHeadersAdd(dict):
    """
    AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
    """
    def __init__(__self__, *,
                 always: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[bool]:
        return pulumi.get(self, "always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesActionRedirect(dict):
    """
    ActionRedirect defines a redirect in an Action.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesActionReturn(dict):
    """
    ActionReturn defines a return in an Action.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesErrorPages(dict):
    """
    ErrorPage defines an ErrorPage in a Route.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesErrorPages. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesErrorPages.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesErrorPages.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codes: Optional[Sequence[int]] = None,
                 redirect: Optional['outputs.VirtualServerRouteSpecSubroutesErrorPagesRedirect'] = None,
                 return_: Optional['outputs.VirtualServerRouteSpecSubroutesErrorPagesReturn'] = None):
        """
        ErrorPage defines an ErrorPage in a Route.
        :param 'VirtualServerRouteSpecSubroutesErrorPagesRedirectArgs' redirect: ErrorPageRedirect defines a redirect for an ErrorPage.
        :param 'VirtualServerRouteSpecSubroutesErrorPagesReturnArgs' return_: ErrorPageReturn defines a return for an ErrorPage.
        """
        if codes is not None:
            pulumi.set(__self__, "codes", codes)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter
    def codes(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "codes")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesErrorPagesRedirect']:
        """
        ErrorPageRedirect defines a redirect for an ErrorPage.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesErrorPagesReturn']:
        """
        ErrorPageReturn defines a return for an ErrorPage.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesErrorPagesRedirect(dict):
    """
    ErrorPageRedirect defines a redirect for an ErrorPage.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ErrorPageRedirect defines a redirect for an ErrorPage.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesErrorPagesReturn(dict):
    """
    ErrorPageReturn defines a return for an ErrorPage.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 headers: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesErrorPagesReturnHeaders']] = None,
                 type: Optional[str] = None):
        """
        ErrorPageReturn defines a return for an ErrorPage.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesErrorPagesReturnHeaders']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesErrorPagesReturnHeaders(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatches(dict):
    """
    Match defines a match.
    """
    def __init__(__self__, *,
                 action: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesAction'] = None,
                 conditions: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesConditions']] = None,
                 splits: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesSplits']] = None):
        """
        Match defines a match.
        :param 'VirtualServerRouteSpecSubroutesMatchesActionArgs' action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if splits is not None:
            pulumi.set(__self__, "splits", splits)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesAction']:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def splits(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesSplits']]:
        return pulumi.get(self, "splits")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesAction(dict):
    """
    Action defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"
        elif key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesMatchesAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesMatchesAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesMatchesAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 proxy: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxy'] = None,
                 redirect: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionRedirect'] = None,
                 return_: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionReturn'] = None):
        """
        Action defines an action.
        :param 'VirtualServerRouteSpecSubroutesMatchesActionProxyArgs' proxy: ActionProxy defines a proxy in an Action.
        :param 'VirtualServerRouteSpecSubroutesMatchesActionRedirectArgs' redirect: ActionRedirect defines a redirect in an Action.
        :param 'VirtualServerRouteSpecSubroutesMatchesActionReturnArgs' return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxy']:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionRedirect']:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionReturn']:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesActionProxy(dict):
    """
    ActionProxy defines a proxy in an Action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHeaders":
            suggest = "request_headers"
        elif key == "responseHeaders":
            suggest = "response_headers"
        elif key == "rewritePath":
            suggest = "rewrite_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesMatchesActionProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesMatchesActionProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesMatchesActionProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_headers: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeaders'] = None,
                 response_headers: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeaders'] = None,
                 rewrite_path: Optional[str] = None,
                 upstream: Optional[str] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param 'VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersArgs' request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param 'VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersArgs' response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeaders']:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeaders']:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[str]:
        return pulumi.get(self, "rewrite_path")

    @property
    @pulumi.getter
    def upstream(self) -> Optional[str]:
        return pulumi.get(self, "upstream")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeaders(dict):
    """
    ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[bool] = None,
                 set: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSet']] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[bool]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSet']]:
        return pulumi.get(self, "set")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyRequestHeadersSet(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeaders(dict):
    """
    ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAdd']] = None,
                 hide: Optional[Sequence[str]] = None,
                 ignore: Optional[Sequence[str]] = None,
                 pass_: Optional[Sequence[str]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAdd']]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def hide(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesActionProxyResponseHeadersAdd(dict):
    """
    AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
    """
    def __init__(__self__, *,
                 always: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[bool]:
        return pulumi.get(self, "always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesActionRedirect(dict):
    """
    ActionRedirect defines a redirect in an Action.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesActionReturn(dict):
    """
    ActionReturn defines a return in an Action.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesConditions(dict):
    """
    Condition defines a condition in a MatchRule.
    """
    def __init__(__self__, *,
                 argument: Optional[str] = None,
                 cookie: Optional[str] = None,
                 header: Optional[str] = None,
                 value: Optional[str] = None,
                 variable: Optional[str] = None):
        """
        Condition defines a condition in a MatchRule.
        """
        if argument is not None:
            pulumi.set(__self__, "argument", argument)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def argument(self) -> Optional[str]:
        return pulumi.get(self, "argument")

    @property
    @pulumi.getter
    def cookie(self) -> Optional[str]:
        return pulumi.get(self, "cookie")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplits(dict):
    """
    Split defines a split.
    """
    def __init__(__self__, *,
                 action: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsAction'] = None,
                 weight: Optional[int] = None):
        """
        Split defines a split.
        :param 'VirtualServerRouteSpecSubroutesMatchesSplitsActionArgs' action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsAction']:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplitsAction(dict):
    """
    Action defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"
        elif key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesMatchesSplitsAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesMatchesSplitsAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesMatchesSplitsAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 proxy: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxy'] = None,
                 redirect: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirect'] = None,
                 return_: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionReturn'] = None):
        """
        Action defines an action.
        :param 'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyArgs' proxy: ActionProxy defines a proxy in an Action.
        :param 'VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirectArgs' redirect: ActionRedirect defines a redirect in an Action.
        :param 'VirtualServerRouteSpecSubroutesMatchesSplitsActionReturnArgs' return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxy']:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirect']:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionReturn']:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxy(dict):
    """
    ActionProxy defines a proxy in an Action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHeaders":
            suggest = "request_headers"
        elif key == "responseHeaders":
            suggest = "response_headers"
        elif key == "rewritePath":
            suggest = "rewrite_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesMatchesSplitsActionProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesMatchesSplitsActionProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesMatchesSplitsActionProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_headers: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeaders'] = None,
                 response_headers: Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeaders'] = None,
                 rewrite_path: Optional[str] = None,
                 upstream: Optional[str] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param 'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersArgs' request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param 'VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersArgs' response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeaders']:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeaders']:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[str]:
        return pulumi.get(self, "rewrite_path")

    @property
    @pulumi.getter
    def upstream(self) -> Optional[str]:
        return pulumi.get(self, "upstream")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeaders(dict):
    """
    ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[bool] = None,
                 set: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSet']] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[bool]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSet']]:
        return pulumi.get(self, "set")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyRequestHeadersSet(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeaders(dict):
    """
    ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAdd']] = None,
                 hide: Optional[Sequence[str]] = None,
                 ignore: Optional[Sequence[str]] = None,
                 pass_: Optional[Sequence[str]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAdd']]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def hide(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionProxyResponseHeadersAdd(dict):
    """
    AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
    """
    def __init__(__self__, *,
                 always: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[bool]:
        return pulumi.get(self, "always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionRedirect(dict):
    """
    ActionRedirect defines a redirect in an Action.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesMatchesSplitsActionReturn(dict):
    """
    ActionReturn defines a return in an Action.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesPolicies(dict):
    """
    PolicyReference references a policy by name and an optional namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        PolicyReference references a policy by name and an optional namespace.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplits(dict):
    """
    Split defines a split.
    """
    def __init__(__self__, *,
                 action: Optional['outputs.VirtualServerRouteSpecSubroutesSplitsAction'] = None,
                 weight: Optional[int] = None):
        """
        Split defines a split.
        :param 'VirtualServerRouteSpecSubroutesSplitsActionArgs' action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesSplitsAction']:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplitsAction(dict):
    """
    Action defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"
        elif key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesSplitsAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesSplitsAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesSplitsAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 proxy: Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxy'] = None,
                 redirect: Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionRedirect'] = None,
                 return_: Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionReturn'] = None):
        """
        Action defines an action.
        :param 'VirtualServerRouteSpecSubroutesSplitsActionProxyArgs' proxy: ActionProxy defines a proxy in an Action.
        :param 'VirtualServerRouteSpecSubroutesSplitsActionRedirectArgs' redirect: ActionRedirect defines a redirect in an Action.
        :param 'VirtualServerRouteSpecSubroutesSplitsActionReturnArgs' return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxy']:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionRedirect']:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionReturn']:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplitsActionProxy(dict):
    """
    ActionProxy defines a proxy in an Action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHeaders":
            suggest = "request_headers"
        elif key == "responseHeaders":
            suggest = "response_headers"
        elif key == "rewritePath":
            suggest = "rewrite_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesSplitsActionProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesSplitsActionProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesSplitsActionProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_headers: Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeaders'] = None,
                 response_headers: Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeaders'] = None,
                 rewrite_path: Optional[str] = None,
                 upstream: Optional[str] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param 'VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersArgs' request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param 'VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersArgs' response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeaders']:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeaders']:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[str]:
        return pulumi.get(self, "rewrite_path")

    @property
    @pulumi.getter
    def upstream(self) -> Optional[str]:
        return pulumi.get(self, "upstream")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeaders(dict):
    """
    ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[bool] = None,
                 set: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSet']] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[bool]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSet']]:
        return pulumi.get(self, "set")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyRequestHeadersSet(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeaders(dict):
    """
    ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAdd']] = None,
                 hide: Optional[Sequence[str]] = None,
                 ignore: Optional[Sequence[str]] = None,
                 pass_: Optional[Sequence[str]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAdd']]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def hide(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplitsActionProxyResponseHeadersAdd(dict):
    """
    AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
    """
    def __init__(__self__, *,
                 always: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[bool]:
        return pulumi.get(self, "always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplitsActionRedirect(dict):
    """
    ActionRedirect defines a redirect in an Action.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerRouteSpecSubroutesSplitsActionReturn(dict):
    """
    ActionReturn defines a return in an Action.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerRouteSpecUpstreams(dict):
    """
    Upstream defines an upstream.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPort":
            suggest = "backup_port"
        elif key == "buffer-size":
            suggest = "buffer_size"
        elif key == "client-max-body-size":
            suggest = "client_max_body_size"
        elif key == "connect-timeout":
            suggest = "connect_timeout"
        elif key == "fail-timeout":
            suggest = "fail_timeout"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "lb-method":
            suggest = "lb_method"
        elif key == "max-conns":
            suggest = "max_conns"
        elif key == "max-fails":
            suggest = "max_fails"
        elif key == "next-upstream":
            suggest = "next_upstream"
        elif key == "next-upstream-timeout":
            suggest = "next_upstream_timeout"
        elif key == "next-upstream-tries":
            suggest = "next_upstream_tries"
        elif key == "read-timeout":
            suggest = "read_timeout"
        elif key == "send-timeout":
            suggest = "send_timeout"
        elif key == "sessionCookie":
            suggest = "session_cookie"
        elif key == "slow-start":
            suggest = "slow_start"
        elif key == "use-cluster-ip":
            suggest = "use_cluster_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecUpstreams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecUpstreams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecUpstreams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup: Optional[str] = None,
                 backup_port: Optional[int] = None,
                 buffer_size: Optional[str] = None,
                 buffering: Optional[bool] = None,
                 buffers: Optional['outputs.VirtualServerRouteSpecUpstreamsBuffers'] = None,
                 client_max_body_size: Optional[str] = None,
                 connect_timeout: Optional[str] = None,
                 fail_timeout: Optional[str] = None,
                 health_check: Optional['outputs.VirtualServerRouteSpecUpstreamsHealthCheck'] = None,
                 keepalive: Optional[int] = None,
                 lb_method: Optional[str] = None,
                 max_conns: Optional[int] = None,
                 max_fails: Optional[int] = None,
                 name: Optional[str] = None,
                 next_upstream: Optional[str] = None,
                 next_upstream_timeout: Optional[str] = None,
                 next_upstream_tries: Optional[int] = None,
                 ntlm: Optional[bool] = None,
                 port: Optional[int] = None,
                 queue: Optional['outputs.VirtualServerRouteSpecUpstreamsQueue'] = None,
                 read_timeout: Optional[str] = None,
                 send_timeout: Optional[str] = None,
                 service: Optional[str] = None,
                 session_cookie: Optional['outputs.VirtualServerRouteSpecUpstreamsSessionCookie'] = None,
                 slow_start: Optional[str] = None,
                 subselector: Optional[Mapping[str, str]] = None,
                 tls: Optional['outputs.VirtualServerRouteSpecUpstreamsTls'] = None,
                 type: Optional[str] = None,
                 use_cluster_ip: Optional[bool] = None):
        """
        Upstream defines an upstream.
        :param 'VirtualServerRouteSpecUpstreamsBuffersArgs' buffers: UpstreamBuffers defines Buffer Configuration for an Upstream.
        :param 'VirtualServerRouteSpecUpstreamsHealthCheckArgs' health_check: HealthCheck defines the parameters for active Upstream HealthChecks.
        :param 'VirtualServerRouteSpecUpstreamsQueueArgs' queue: UpstreamQueue defines Queue Configuration for an Upstream.
        :param 'VirtualServerRouteSpecUpstreamsSessionCookieArgs' session_cookie: SessionCookie defines the parameters for session persistence.
        :param 'VirtualServerRouteSpecUpstreamsTlsArgs' tls: UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if backup_port is not None:
            pulumi.set(__self__, "backup_port", backup_port)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if buffering is not None:
            pulumi.set(__self__, "buffering", buffering)
        if buffers is not None:
            pulumi.set(__self__, "buffers", buffers)
        if client_max_body_size is not None:
            pulumi.set(__self__, "client_max_body_size", client_max_body_size)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if fail_timeout is not None:
            pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if lb_method is not None:
            pulumi.set(__self__, "lb_method", lb_method)
        if max_conns is not None:
            pulumi.set(__self__, "max_conns", max_conns)
        if max_fails is not None:
            pulumi.set(__self__, "max_fails", max_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_upstream is not None:
            pulumi.set(__self__, "next_upstream", next_upstream)
        if next_upstream_timeout is not None:
            pulumi.set(__self__, "next_upstream_timeout", next_upstream_timeout)
        if next_upstream_tries is not None:
            pulumi.set(__self__, "next_upstream_tries", next_upstream_tries)
        if ntlm is not None:
            pulumi.set(__self__, "ntlm", ntlm)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if session_cookie is not None:
            pulumi.set(__self__, "session_cookie", session_cookie)
        if slow_start is not None:
            pulumi.set(__self__, "slow_start", slow_start)
        if subselector is not None:
            pulumi.set(__self__, "subselector", subselector)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cluster_ip is not None:
            pulumi.set(__self__, "use_cluster_ip", use_cluster_ip)

    @property
    @pulumi.getter
    def backup(self) -> Optional[str]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter(name="backupPort")
    def backup_port(self) -> Optional[int]:
        return pulumi.get(self, "backup_port")

    @property
    @pulumi.getter(name="buffer-size")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter
    def buffering(self) -> Optional[bool]:
        return pulumi.get(self, "buffering")

    @property
    @pulumi.getter
    def buffers(self) -> Optional['outputs.VirtualServerRouteSpecUpstreamsBuffers']:
        """
        UpstreamBuffers defines Buffer Configuration for an Upstream.
        """
        return pulumi.get(self, "buffers")

    @property
    @pulumi.getter(name="client-max-body-size")
    def client_max_body_size(self) -> Optional[str]:
        return pulumi.get(self, "client_max_body_size")

    @property
    @pulumi.getter(name="connect-timeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="fail-timeout")
    def fail_timeout(self) -> Optional[str]:
        return pulumi.get(self, "fail_timeout")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional['outputs.VirtualServerRouteSpecUpstreamsHealthCheck']:
        """
        HealthCheck defines the parameters for active Upstream HealthChecks.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[int]:
        return pulumi.get(self, "keepalive")

    @property
    @pulumi.getter(name="lb-method")
    def lb_method(self) -> Optional[str]:
        return pulumi.get(self, "lb_method")

    @property
    @pulumi.getter(name="max-conns")
    def max_conns(self) -> Optional[int]:
        return pulumi.get(self, "max_conns")

    @property
    @pulumi.getter(name="max-fails")
    def max_fails(self) -> Optional[int]:
        return pulumi.get(self, "max_fails")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="next-upstream")
    def next_upstream(self) -> Optional[str]:
        return pulumi.get(self, "next_upstream")

    @property
    @pulumi.getter(name="next-upstream-timeout")
    def next_upstream_timeout(self) -> Optional[str]:
        return pulumi.get(self, "next_upstream_timeout")

    @property
    @pulumi.getter(name="next-upstream-tries")
    def next_upstream_tries(self) -> Optional[int]:
        return pulumi.get(self, "next_upstream_tries")

    @property
    @pulumi.getter
    def ntlm(self) -> Optional[bool]:
        return pulumi.get(self, "ntlm")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def queue(self) -> Optional['outputs.VirtualServerRouteSpecUpstreamsQueue']:
        """
        UpstreamQueue defines Queue Configuration for an Upstream.
        """
        return pulumi.get(self, "queue")

    @property
    @pulumi.getter(name="read-timeout")
    def read_timeout(self) -> Optional[str]:
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter(name="send-timeout")
    def send_timeout(self) -> Optional[str]:
        return pulumi.get(self, "send_timeout")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="sessionCookie")
    def session_cookie(self) -> Optional['outputs.VirtualServerRouteSpecUpstreamsSessionCookie']:
        """
        SessionCookie defines the parameters for session persistence.
        """
        return pulumi.get(self, "session_cookie")

    @property
    @pulumi.getter(name="slow-start")
    def slow_start(self) -> Optional[str]:
        return pulumi.get(self, "slow_start")

    @property
    @pulumi.getter
    def subselector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "subselector")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.VirtualServerRouteSpecUpstreamsTls']:
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="use-cluster-ip")
    def use_cluster_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_cluster_ip")


@pulumi.output_type
class VirtualServerRouteSpecUpstreamsBuffers(dict):
    """
    UpstreamBuffers defines Buffer Configuration for an Upstream.
    """
    def __init__(__self__, *,
                 number: Optional[int] = None,
                 size: Optional[str] = None):
        """
        UpstreamBuffers defines Buffer Configuration for an Upstream.
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def number(self) -> Optional[int]:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")


@pulumi.output_type
class VirtualServerRouteSpecUpstreamsHealthCheck(dict):
    """
    HealthCheck defines the parameters for active Upstream HealthChecks.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connect-timeout":
            suggest = "connect_timeout"
        elif key == "grpcService":
            suggest = "grpc_service"
        elif key == "grpcStatus":
            suggest = "grpc_status"
        elif key == "keepalive-time":
            suggest = "keepalive_time"
        elif key == "read-timeout":
            suggest = "read_timeout"
        elif key == "send-timeout":
            suggest = "send_timeout"
        elif key == "statusMatch":
            suggest = "status_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecUpstreamsHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecUpstreamsHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecUpstreamsHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_timeout: Optional[str] = None,
                 enable: Optional[bool] = None,
                 fails: Optional[int] = None,
                 grpc_service: Optional[str] = None,
                 grpc_status: Optional[int] = None,
                 headers: Optional[Sequence['outputs.VirtualServerRouteSpecUpstreamsHealthCheckHeaders']] = None,
                 interval: Optional[str] = None,
                 jitter: Optional[str] = None,
                 keepalive_time: Optional[str] = None,
                 mandatory: Optional[bool] = None,
                 passes: Optional[int] = None,
                 path: Optional[str] = None,
                 persistent: Optional[bool] = None,
                 port: Optional[int] = None,
                 read_timeout: Optional[str] = None,
                 send_timeout: Optional[str] = None,
                 status_match: Optional[str] = None,
                 tls: Optional['outputs.VirtualServerRouteSpecUpstreamsHealthCheckTls'] = None):
        """
        HealthCheck defines the parameters for active Upstream HealthChecks.
        :param 'VirtualServerRouteSpecUpstreamsHealthCheckTlsArgs' tls: UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fails is not None:
            pulumi.set(__self__, "fails", fails)
        if grpc_service is not None:
            pulumi.set(__self__, "grpc_service", grpc_service)
        if grpc_status is not None:
            pulumi.set(__self__, "grpc_status", grpc_status)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if status_match is not None:
            pulumi.set(__self__, "status_match", status_match)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="connect-timeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def fails(self) -> Optional[int]:
        return pulumi.get(self, "fails")

    @property
    @pulumi.getter(name="grpcService")
    def grpc_service(self) -> Optional[str]:
        return pulumi.get(self, "grpc_service")

    @property
    @pulumi.getter(name="grpcStatus")
    def grpc_status(self) -> Optional[int]:
        return pulumi.get(self, "grpc_status")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.VirtualServerRouteSpecUpstreamsHealthCheckHeaders']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def jitter(self) -> Optional[str]:
        return pulumi.get(self, "jitter")

    @property
    @pulumi.getter(name="keepalive-time")
    def keepalive_time(self) -> Optional[str]:
        return pulumi.get(self, "keepalive_time")

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[bool]:
        return pulumi.get(self, "mandatory")

    @property
    @pulumi.getter
    def passes(self) -> Optional[int]:
        return pulumi.get(self, "passes")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def persistent(self) -> Optional[bool]:
        return pulumi.get(self, "persistent")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="read-timeout")
    def read_timeout(self) -> Optional[str]:
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter(name="send-timeout")
    def send_timeout(self) -> Optional[str]:
        return pulumi.get(self, "send_timeout")

    @property
    @pulumi.getter(name="statusMatch")
    def status_match(self) -> Optional[str]:
        return pulumi.get(self, "status_match")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.VirtualServerRouteSpecUpstreamsHealthCheckTls']:
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class VirtualServerRouteSpecUpstreamsHealthCheckHeaders(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerRouteSpecUpstreamsHealthCheckTls(dict):
    """
    UpstreamTLS defines a TLS configuration for an Upstream.
    """
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")


@pulumi.output_type
class VirtualServerRouteSpecUpstreamsQueue(dict):
    """
    UpstreamQueue defines Queue Configuration for an Upstream.
    """
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 timeout: Optional[str] = None):
        """
        UpstreamQueue defines Queue Configuration for an Upstream.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class VirtualServerRouteSpecUpstreamsSessionCookie(dict):
    """
    SessionCookie defines the parameters for session persistence.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpOnly":
            suggest = "http_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteSpecUpstreamsSessionCookie. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteSpecUpstreamsSessionCookie.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteSpecUpstreamsSessionCookie.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 enable: Optional[bool] = None,
                 expires: Optional[str] = None,
                 http_only: Optional[bool] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 samesite: Optional[str] = None,
                 secure: Optional[bool] = None):
        """
        SessionCookie defines the parameters for session persistence.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if samesite is not None:
            pulumi.set(__self__, "samesite", samesite)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        return pulumi.get(self, "http_only")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def samesite(self) -> Optional[str]:
        return pulumi.get(self, "samesite")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")


@pulumi.output_type
class VirtualServerRouteSpecUpstreamsTls(dict):
    """
    UpstreamTLS defines a TLS configuration for an Upstream.
    """
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")


@pulumi.output_type
class VirtualServerRouteStatus(dict):
    """
    VirtualServerRouteStatus defines the status for the VirtualServerRoute resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalEndpoints":
            suggest = "external_endpoints"
        elif key == "referencedBy":
            suggest = "referenced_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerRouteStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerRouteStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerRouteStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_endpoints: Optional[Sequence['outputs.VirtualServerRouteStatusExternalEndpoints']] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 referenced_by: Optional[str] = None,
                 state: Optional[str] = None):
        """
        VirtualServerRouteStatus defines the status for the VirtualServerRoute resource.
        """
        if external_endpoints is not None:
            pulumi.set(__self__, "external_endpoints", external_endpoints)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if referenced_by is not None:
            pulumi.set(__self__, "referenced_by", referenced_by)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="externalEndpoints")
    def external_endpoints(self) -> Optional[Sequence['outputs.VirtualServerRouteStatusExternalEndpoints']]:
        return pulumi.get(self, "external_endpoints")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="referencedBy")
    def referenced_by(self) -> Optional[str]:
        return pulumi.get(self, "referenced_by")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class VirtualServerRouteStatusExternalEndpoints(dict):
    """
    ExternalEndpoint defines the IP/ Hostname and ports used to connect to this resource.
    """
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None,
                 ports: Optional[str] = None):
        """
        ExternalEndpoint defines the IP/ Hostname and ports used to connect to this resource.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class VirtualServerSpec(dict):
    """
    VirtualServerSpec is the spec of the VirtualServer resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalDNS":
            suggest = "external_dns"
        elif key == "http-snippets":
            suggest = "http_snippets"
        elif key == "ingressClassName":
            suggest = "ingress_class_name"
        elif key == "internalRoute":
            suggest = "internal_route"
        elif key == "server-snippets":
            suggest = "server_snippets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dos: Optional[str] = None,
                 external_dns: Optional['outputs.VirtualServerSpecExternalDns'] = None,
                 gunzip: Optional[bool] = None,
                 host: Optional[str] = None,
                 http_snippets: Optional[str] = None,
                 ingress_class_name: Optional[str] = None,
                 internal_route: Optional[bool] = None,
                 listener: Optional['outputs.VirtualServerSpecListener'] = None,
                 policies: Optional[Sequence['outputs.VirtualServerSpecPolicies']] = None,
                 routes: Optional[Sequence['outputs.VirtualServerSpecRoutes']] = None,
                 server_snippets: Optional[str] = None,
                 tls: Optional['outputs.VirtualServerSpecTls'] = None,
                 upstreams: Optional[Sequence['outputs.VirtualServerSpecUpstreams']] = None):
        """
        VirtualServerSpec is the spec of the VirtualServer resource.
        :param 'VirtualServerSpecExternalDnsArgs' external_dns: ExternalDNS defines externaldns sub-resource of a virtual server.
        :param bool internal_route: InternalRoute allows for the configuration of internal routing.
        :param 'VirtualServerSpecListenerArgs' listener: VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
        :param 'VirtualServerSpecTlsArgs' tls: TLS defines TLS configuration for a VirtualServer.
        """
        if dos is not None:
            pulumi.set(__self__, "dos", dos)
        if external_dns is not None:
            pulumi.set(__self__, "external_dns", external_dns)
        if gunzip is not None:
            pulumi.set(__self__, "gunzip", gunzip)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_snippets is not None:
            pulumi.set(__self__, "http_snippets", http_snippets)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if internal_route is not None:
            pulumi.set(__self__, "internal_route", internal_route)
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if server_snippets is not None:
            pulumi.set(__self__, "server_snippets", server_snippets)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if upstreams is not None:
            pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def dos(self) -> Optional[str]:
        return pulumi.get(self, "dos")

    @property
    @pulumi.getter(name="externalDNS")
    def external_dns(self) -> Optional['outputs.VirtualServerSpecExternalDns']:
        """
        ExternalDNS defines externaldns sub-resource of a virtual server.
        """
        return pulumi.get(self, "external_dns")

    @property
    @pulumi.getter
    def gunzip(self) -> Optional[bool]:
        return pulumi.get(self, "gunzip")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="http-snippets")
    def http_snippets(self) -> Optional[str]:
        return pulumi.get(self, "http_snippets")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter(name="internalRoute")
    def internal_route(self) -> Optional[bool]:
        """
        InternalRoute allows for the configuration of internal routing.
        """
        return pulumi.get(self, "internal_route")

    @property
    @pulumi.getter
    def listener(self) -> Optional['outputs.VirtualServerSpecListener']:
        """
        VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
        """
        return pulumi.get(self, "listener")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.VirtualServerSpecPolicies']]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutes']]:
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="server-snippets")
    def server_snippets(self) -> Optional[str]:
        return pulumi.get(self, "server_snippets")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.VirtualServerSpecTls']:
        """
        TLS defines TLS configuration for a VirtualServer.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def upstreams(self) -> Optional[Sequence['outputs.VirtualServerSpecUpstreams']]:
        return pulumi.get(self, "upstreams")


@pulumi.output_type
class VirtualServerSpecExternalDns(dict):
    """
    ExternalDNS defines externaldns sub-resource of a virtual server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "providerSpecific":
            suggest = "provider_specific"
        elif key == "recordTTL":
            suggest = "record_ttl"
        elif key == "recordType":
            suggest = "record_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecExternalDns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecExternalDns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecExternalDns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 provider_specific: Optional[Sequence['outputs.VirtualServerSpecExternalDnsProviderSpecific']] = None,
                 record_ttl: Optional[int] = None,
                 record_type: Optional[str] = None):
        """
        ExternalDNS defines externaldns sub-resource of a virtual server.
        :param Mapping[str, str] labels: Labels stores labels defined for the Endpoint
        :param Sequence['VirtualServerSpecExternalDnsProviderSpecificArgs'] provider_specific: ProviderSpecific stores provider specific config
        :param int record_ttl: TTL for the record
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if provider_specific is not None:
            pulumi.set(__self__, "provider_specific", provider_specific)
        if record_ttl is not None:
            pulumi.set(__self__, "record_ttl", record_ttl)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels stores labels defined for the Endpoint
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="providerSpecific")
    def provider_specific(self) -> Optional[Sequence['outputs.VirtualServerSpecExternalDnsProviderSpecific']]:
        """
        ProviderSpecific stores provider specific config
        """
        return pulumi.get(self, "provider_specific")

    @property
    @pulumi.getter(name="recordTTL")
    def record_ttl(self) -> Optional[int]:
        """
        TTL for the record
        """
        return pulumi.get(self, "record_ttl")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[str]:
        return pulumi.get(self, "record_type")


@pulumi.output_type
class VirtualServerSpecExternalDnsProviderSpecific(dict):
    """
    ProviderSpecificProperty defines specific property for using with ExternalDNS sub-resource.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        ProviderSpecificProperty defines specific property for using with ExternalDNS sub-resource.
        :param str name: Name of the property
        :param str value: Value of the property
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the property
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the property
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecListener(dict):
    """
    VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
    """
    def __init__(__self__, *,
                 http: Optional[str] = None,
                 https: Optional[str] = None):
        """
        VirtualServerListener references a custom http and/or https listener defined in GlobalConfiguration.
        """
        if http is not None:
            pulumi.set(__self__, "http", http)
        if https is not None:
            pulumi.set(__self__, "https", https)

    @property
    @pulumi.getter
    def http(self) -> Optional[str]:
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def https(self) -> Optional[str]:
        return pulumi.get(self, "https")


@pulumi.output_type
class VirtualServerSpecPolicies(dict):
    """
    PolicyReference references a policy by name and an optional namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        PolicyReference references a policy by name and an optional namespace.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class VirtualServerSpecRoutes(dict):
    """
    Route defines a route.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorPages":
            suggest = "error_pages"
        elif key == "location-snippets":
            suggest = "location_snippets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional['outputs.VirtualServerSpecRoutesAction'] = None,
                 dos: Optional[str] = None,
                 error_pages: Optional[Sequence['outputs.VirtualServerSpecRoutesErrorPages']] = None,
                 location_snippets: Optional[str] = None,
                 matches: Optional[Sequence['outputs.VirtualServerSpecRoutesMatches']] = None,
                 path: Optional[str] = None,
                 policies: Optional[Sequence['outputs.VirtualServerSpecRoutesPolicies']] = None,
                 route: Optional[str] = None,
                 splits: Optional[Sequence['outputs.VirtualServerSpecRoutesSplits']] = None):
        """
        Route defines a route.
        :param 'VirtualServerSpecRoutesActionArgs' action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if dos is not None:
            pulumi.set(__self__, "dos", dos)
        if error_pages is not None:
            pulumi.set(__self__, "error_pages", error_pages)
        if location_snippets is not None:
            pulumi.set(__self__, "location_snippets", location_snippets)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if route is not None:
            pulumi.set(__self__, "route", route)
        if splits is not None:
            pulumi.set(__self__, "splits", splits)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VirtualServerSpecRoutesAction']:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def dos(self) -> Optional[str]:
        return pulumi.get(self, "dos")

    @property
    @pulumi.getter(name="errorPages")
    def error_pages(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesErrorPages']]:
        return pulumi.get(self, "error_pages")

    @property
    @pulumi.getter(name="location-snippets")
    def location_snippets(self) -> Optional[str]:
        return pulumi.get(self, "location_snippets")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesMatches']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesPolicies']]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def route(self) -> Optional[str]:
        return pulumi.get(self, "route")

    @property
    @pulumi.getter
    def splits(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesSplits']]:
        return pulumi.get(self, "splits")


@pulumi.output_type
class VirtualServerSpecRoutesAction(dict):
    """
    Action defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"
        elif key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 proxy: Optional['outputs.VirtualServerSpecRoutesActionProxy'] = None,
                 redirect: Optional['outputs.VirtualServerSpecRoutesActionRedirect'] = None,
                 return_: Optional['outputs.VirtualServerSpecRoutesActionReturn'] = None):
        """
        Action defines an action.
        :param 'VirtualServerSpecRoutesActionProxyArgs' proxy: ActionProxy defines a proxy in an Action.
        :param 'VirtualServerSpecRoutesActionRedirectArgs' redirect: ActionRedirect defines a redirect in an Action.
        :param 'VirtualServerSpecRoutesActionReturnArgs' return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.VirtualServerSpecRoutesActionProxy']:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerSpecRoutesActionRedirect']:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerSpecRoutesActionReturn']:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerSpecRoutesActionProxy(dict):
    """
    ActionProxy defines a proxy in an Action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHeaders":
            suggest = "request_headers"
        elif key == "responseHeaders":
            suggest = "response_headers"
        elif key == "rewritePath":
            suggest = "rewrite_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesActionProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesActionProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesActionProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_headers: Optional['outputs.VirtualServerSpecRoutesActionProxyRequestHeaders'] = None,
                 response_headers: Optional['outputs.VirtualServerSpecRoutesActionProxyResponseHeaders'] = None,
                 rewrite_path: Optional[str] = None,
                 upstream: Optional[str] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param 'VirtualServerSpecRoutesActionProxyRequestHeadersArgs' request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param 'VirtualServerSpecRoutesActionProxyResponseHeadersArgs' response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional['outputs.VirtualServerSpecRoutesActionProxyRequestHeaders']:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional['outputs.VirtualServerSpecRoutesActionProxyResponseHeaders']:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[str]:
        return pulumi.get(self, "rewrite_path")

    @property
    @pulumi.getter
    def upstream(self) -> Optional[str]:
        return pulumi.get(self, "upstream")


@pulumi.output_type
class VirtualServerSpecRoutesActionProxyRequestHeaders(dict):
    """
    ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesActionProxyRequestHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesActionProxyRequestHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesActionProxyRequestHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[bool] = None,
                 set: Optional[Sequence['outputs.VirtualServerSpecRoutesActionProxyRequestHeadersSet']] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[bool]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesActionProxyRequestHeadersSet']]:
        return pulumi.get(self, "set")


@pulumi.output_type
class VirtualServerSpecRoutesActionProxyRequestHeadersSet(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesActionProxyResponseHeaders(dict):
    """
    ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesActionProxyResponseHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesActionProxyResponseHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesActionProxyResponseHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.VirtualServerSpecRoutesActionProxyResponseHeadersAdd']] = None,
                 hide: Optional[Sequence[str]] = None,
                 ignore: Optional[Sequence[str]] = None,
                 pass_: Optional[Sequence[str]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesActionProxyResponseHeadersAdd']]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def hide(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class VirtualServerSpecRoutesActionProxyResponseHeadersAdd(dict):
    """
    AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
    """
    def __init__(__self__, *,
                 always: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[bool]:
        return pulumi.get(self, "always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesActionRedirect(dict):
    """
    ActionRedirect defines a redirect in an Action.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerSpecRoutesActionReturn(dict):
    """
    ActionReturn defines a return in an Action.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerSpecRoutesErrorPages(dict):
    """
    ErrorPage defines an ErrorPage in a Route.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesErrorPages. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesErrorPages.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesErrorPages.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codes: Optional[Sequence[int]] = None,
                 redirect: Optional['outputs.VirtualServerSpecRoutesErrorPagesRedirect'] = None,
                 return_: Optional['outputs.VirtualServerSpecRoutesErrorPagesReturn'] = None):
        """
        ErrorPage defines an ErrorPage in a Route.
        :param 'VirtualServerSpecRoutesErrorPagesRedirectArgs' redirect: ErrorPageRedirect defines a redirect for an ErrorPage.
        :param 'VirtualServerSpecRoutesErrorPagesReturnArgs' return_: ErrorPageReturn defines a return for an ErrorPage.
        """
        if codes is not None:
            pulumi.set(__self__, "codes", codes)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter
    def codes(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "codes")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerSpecRoutesErrorPagesRedirect']:
        """
        ErrorPageRedirect defines a redirect for an ErrorPage.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerSpecRoutesErrorPagesReturn']:
        """
        ErrorPageReturn defines a return for an ErrorPage.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerSpecRoutesErrorPagesRedirect(dict):
    """
    ErrorPageRedirect defines a redirect for an ErrorPage.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ErrorPageRedirect defines a redirect for an ErrorPage.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerSpecRoutesErrorPagesReturn(dict):
    """
    ErrorPageReturn defines a return for an ErrorPage.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 headers: Optional[Sequence['outputs.VirtualServerSpecRoutesErrorPagesReturnHeaders']] = None,
                 type: Optional[str] = None):
        """
        ErrorPageReturn defines a return for an ErrorPage.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesErrorPagesReturnHeaders']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerSpecRoutesErrorPagesReturnHeaders(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesMatches(dict):
    """
    Match defines a match.
    """
    def __init__(__self__, *,
                 action: Optional['outputs.VirtualServerSpecRoutesMatchesAction'] = None,
                 conditions: Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesConditions']] = None,
                 splits: Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesSplits']] = None):
        """
        Match defines a match.
        :param 'VirtualServerSpecRoutesMatchesActionArgs' action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if splits is not None:
            pulumi.set(__self__, "splits", splits)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesAction']:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def splits(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesSplits']]:
        return pulumi.get(self, "splits")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesAction(dict):
    """
    Action defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"
        elif key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesMatchesAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesMatchesAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesMatchesAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 proxy: Optional['outputs.VirtualServerSpecRoutesMatchesActionProxy'] = None,
                 redirect: Optional['outputs.VirtualServerSpecRoutesMatchesActionRedirect'] = None,
                 return_: Optional['outputs.VirtualServerSpecRoutesMatchesActionReturn'] = None):
        """
        Action defines an action.
        :param 'VirtualServerSpecRoutesMatchesActionProxyArgs' proxy: ActionProxy defines a proxy in an Action.
        :param 'VirtualServerSpecRoutesMatchesActionRedirectArgs' redirect: ActionRedirect defines a redirect in an Action.
        :param 'VirtualServerSpecRoutesMatchesActionReturnArgs' return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesActionProxy']:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesActionRedirect']:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesActionReturn']:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesActionProxy(dict):
    """
    ActionProxy defines a proxy in an Action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHeaders":
            suggest = "request_headers"
        elif key == "responseHeaders":
            suggest = "response_headers"
        elif key == "rewritePath":
            suggest = "rewrite_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesMatchesActionProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesMatchesActionProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesMatchesActionProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_headers: Optional['outputs.VirtualServerSpecRoutesMatchesActionProxyRequestHeaders'] = None,
                 response_headers: Optional['outputs.VirtualServerSpecRoutesMatchesActionProxyResponseHeaders'] = None,
                 rewrite_path: Optional[str] = None,
                 upstream: Optional[str] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param 'VirtualServerSpecRoutesMatchesActionProxyRequestHeadersArgs' request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param 'VirtualServerSpecRoutesMatchesActionProxyResponseHeadersArgs' response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesActionProxyRequestHeaders']:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesActionProxyResponseHeaders']:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[str]:
        return pulumi.get(self, "rewrite_path")

    @property
    @pulumi.getter
    def upstream(self) -> Optional[str]:
        return pulumi.get(self, "upstream")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesActionProxyRequestHeaders(dict):
    """
    ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesMatchesActionProxyRequestHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesMatchesActionProxyRequestHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesMatchesActionProxyRequestHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[bool] = None,
                 set: Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSet']] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[bool]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSet']]:
        return pulumi.get(self, "set")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesActionProxyRequestHeadersSet(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesActionProxyResponseHeaders(dict):
    """
    ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesMatchesActionProxyResponseHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesMatchesActionProxyResponseHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesMatchesActionProxyResponseHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAdd']] = None,
                 hide: Optional[Sequence[str]] = None,
                 ignore: Optional[Sequence[str]] = None,
                 pass_: Optional[Sequence[str]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAdd']]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def hide(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesActionProxyResponseHeadersAdd(dict):
    """
    AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
    """
    def __init__(__self__, *,
                 always: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[bool]:
        return pulumi.get(self, "always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesActionRedirect(dict):
    """
    ActionRedirect defines a redirect in an Action.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesActionReturn(dict):
    """
    ActionReturn defines a return in an Action.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesConditions(dict):
    """
    Condition defines a condition in a MatchRule.
    """
    def __init__(__self__, *,
                 argument: Optional[str] = None,
                 cookie: Optional[str] = None,
                 header: Optional[str] = None,
                 value: Optional[str] = None,
                 variable: Optional[str] = None):
        """
        Condition defines a condition in a MatchRule.
        """
        if argument is not None:
            pulumi.set(__self__, "argument", argument)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def argument(self) -> Optional[str]:
        return pulumi.get(self, "argument")

    @property
    @pulumi.getter
    def cookie(self) -> Optional[str]:
        return pulumi.get(self, "cookie")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplits(dict):
    """
    Split defines a split.
    """
    def __init__(__self__, *,
                 action: Optional['outputs.VirtualServerSpecRoutesMatchesSplitsAction'] = None,
                 weight: Optional[int] = None):
        """
        Split defines a split.
        :param 'VirtualServerSpecRoutesMatchesSplitsActionArgs' action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesSplitsAction']:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplitsAction(dict):
    """
    Action defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"
        elif key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesMatchesSplitsAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesMatchesSplitsAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesMatchesSplitsAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 proxy: Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxy'] = None,
                 redirect: Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionRedirect'] = None,
                 return_: Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionReturn'] = None):
        """
        Action defines an action.
        :param 'VirtualServerSpecRoutesMatchesSplitsActionProxyArgs' proxy: ActionProxy defines a proxy in an Action.
        :param 'VirtualServerSpecRoutesMatchesSplitsActionRedirectArgs' redirect: ActionRedirect defines a redirect in an Action.
        :param 'VirtualServerSpecRoutesMatchesSplitsActionReturnArgs' return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxy']:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionRedirect']:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionReturn']:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplitsActionProxy(dict):
    """
    ActionProxy defines a proxy in an Action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHeaders":
            suggest = "request_headers"
        elif key == "responseHeaders":
            suggest = "response_headers"
        elif key == "rewritePath":
            suggest = "rewrite_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesMatchesSplitsActionProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesMatchesSplitsActionProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesMatchesSplitsActionProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_headers: Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeaders'] = None,
                 response_headers: Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeaders'] = None,
                 rewrite_path: Optional[str] = None,
                 upstream: Optional[str] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param 'VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersArgs' request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param 'VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersArgs' response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeaders']:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeaders']:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[str]:
        return pulumi.get(self, "rewrite_path")

    @property
    @pulumi.getter
    def upstream(self) -> Optional[str]:
        return pulumi.get(self, "upstream")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeaders(dict):
    """
    ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[bool] = None,
                 set: Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSet']] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[bool]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSet']]:
        return pulumi.get(self, "set")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyRequestHeadersSet(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeaders(dict):
    """
    ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAdd']] = None,
                 hide: Optional[Sequence[str]] = None,
                 ignore: Optional[Sequence[str]] = None,
                 pass_: Optional[Sequence[str]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAdd']]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def hide(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplitsActionProxyResponseHeadersAdd(dict):
    """
    AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
    """
    def __init__(__self__, *,
                 always: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[bool]:
        return pulumi.get(self, "always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplitsActionRedirect(dict):
    """
    ActionRedirect defines a redirect in an Action.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerSpecRoutesMatchesSplitsActionReturn(dict):
    """
    ActionReturn defines a return in an Action.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerSpecRoutesPolicies(dict):
    """
    PolicyReference references a policy by name and an optional namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        PolicyReference references a policy by name and an optional namespace.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class VirtualServerSpecRoutesSplits(dict):
    """
    Split defines a split.
    """
    def __init__(__self__, *,
                 action: Optional['outputs.VirtualServerSpecRoutesSplitsAction'] = None,
                 weight: Optional[int] = None):
        """
        Split defines a split.
        :param 'VirtualServerSpecRoutesSplitsActionArgs' action: Action defines an action.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.VirtualServerSpecRoutesSplitsAction']:
        """
        Action defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class VirtualServerSpecRoutesSplitsAction(dict):
    """
    Action defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"
        elif key == "return":
            suggest = "return_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesSplitsAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesSplitsAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesSplitsAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None,
                 proxy: Optional['outputs.VirtualServerSpecRoutesSplitsActionProxy'] = None,
                 redirect: Optional['outputs.VirtualServerSpecRoutesSplitsActionRedirect'] = None,
                 return_: Optional['outputs.VirtualServerSpecRoutesSplitsActionReturn'] = None):
        """
        Action defines an action.
        :param 'VirtualServerSpecRoutesSplitsActionProxyArgs' proxy: ActionProxy defines a proxy in an Action.
        :param 'VirtualServerSpecRoutesSplitsActionRedirectArgs' redirect: ActionRedirect defines a redirect in an Action.
        :param 'VirtualServerSpecRoutesSplitsActionReturnArgs' return_: ActionReturn defines a return in an Action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if return_ is not None:
            pulumi.set(__self__, "return_", return_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def proxy(self) -> Optional['outputs.VirtualServerSpecRoutesSplitsActionProxy']:
        """
        ActionProxy defines a proxy in an Action.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerSpecRoutesSplitsActionRedirect']:
        """
        ActionRedirect defines a redirect in an Action.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="return")
    def return_(self) -> Optional['outputs.VirtualServerSpecRoutesSplitsActionReturn']:
        """
        ActionReturn defines a return in an Action.
        """
        return pulumi.get(self, "return_")


@pulumi.output_type
class VirtualServerSpecRoutesSplitsActionProxy(dict):
    """
    ActionProxy defines a proxy in an Action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHeaders":
            suggest = "request_headers"
        elif key == "responseHeaders":
            suggest = "response_headers"
        elif key == "rewritePath":
            suggest = "rewrite_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesSplitsActionProxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesSplitsActionProxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesSplitsActionProxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_headers: Optional['outputs.VirtualServerSpecRoutesSplitsActionProxyRequestHeaders'] = None,
                 response_headers: Optional['outputs.VirtualServerSpecRoutesSplitsActionProxyResponseHeaders'] = None,
                 rewrite_path: Optional[str] = None,
                 upstream: Optional[str] = None):
        """
        ActionProxy defines a proxy in an Action.
        :param 'VirtualServerSpecRoutesSplitsActionProxyRequestHeadersArgs' request_headers: ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        :param 'VirtualServerSpecRoutesSplitsActionProxyResponseHeadersArgs' response_headers: ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if rewrite_path is not None:
            pulumi.set(__self__, "rewrite_path", rewrite_path)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional['outputs.VirtualServerSpecRoutesSplitsActionProxyRequestHeaders']:
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional['outputs.VirtualServerSpecRoutesSplitsActionProxyResponseHeaders']:
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="rewritePath")
    def rewrite_path(self) -> Optional[str]:
        return pulumi.get(self, "rewrite_path")

    @property
    @pulumi.getter
    def upstream(self) -> Optional[str]:
        return pulumi.get(self, "upstream")


@pulumi.output_type
class VirtualServerSpecRoutesSplitsActionProxyRequestHeaders(dict):
    """
    ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesSplitsActionProxyRequestHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesSplitsActionProxyRequestHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesSplitsActionProxyRequestHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[bool] = None,
                 set: Optional[Sequence['outputs.VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSet']] = None):
        """
        ProxyRequestHeaders defines the request headers manipulation in an ActionProxy.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if set is not None:
            pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[bool]:
        return pulumi.get(self, "pass_")

    @property
    @pulumi.getter
    def set(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSet']]:
        return pulumi.get(self, "set")


@pulumi.output_type
class VirtualServerSpecRoutesSplitsActionProxyRequestHeadersSet(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesSplitsActionProxyResponseHeaders(dict):
    """
    ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecRoutesSplitsActionProxyResponseHeaders. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecRoutesSplitsActionProxyResponseHeaders.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecRoutesSplitsActionProxyResponseHeaders.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add: Optional[Sequence['outputs.VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAdd']] = None,
                 hide: Optional[Sequence[str]] = None,
                 ignore: Optional[Sequence[str]] = None,
                 pass_: Optional[Sequence[str]] = None):
        """
        ProxyResponseHeaders defines the response headers manipulation in an ActionProxy.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter
    def add(self) -> Optional[Sequence['outputs.VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAdd']]:
        return pulumi.get(self, "add")

    @property
    @pulumi.getter
    def hide(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hide")

    @property
    @pulumi.getter
    def ignore(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignore")

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class VirtualServerSpecRoutesSplitsActionProxyResponseHeadersAdd(dict):
    """
    AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
    """
    def __init__(__self__, *,
                 always: Optional[bool] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        AddHeader defines an HTTP Header with an optional Always field to use with the add_header NGINX directive.
        """
        if always is not None:
            pulumi.set(__self__, "always", always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def always(self) -> Optional[bool]:
        return pulumi.get(self, "always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecRoutesSplitsActionRedirect(dict):
    """
    ActionRedirect defines a redirect in an Action.
    """
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 url: Optional[str] = None):
        """
        ActionRedirect defines a redirect in an Action.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class VirtualServerSpecRoutesSplitsActionReturn(dict):
    """
    ActionReturn defines a return in an Action.
    """
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 code: Optional[int] = None,
                 type: Optional[str] = None):
        """
        ActionReturn defines a return in an Action.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class VirtualServerSpecTls(dict):
    """
    TLS defines TLS configuration for a VirtualServer.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cert-manager":
            suggest = "cert_manager"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_manager: Optional['outputs.VirtualServerSpecTlsCertManager'] = None,
                 redirect: Optional['outputs.VirtualServerSpecTlsRedirect'] = None,
                 secret: Optional[str] = None):
        """
        TLS defines TLS configuration for a VirtualServer.
        :param 'VirtualServerSpecTlsCertManagerArgs' cert_manager: CertManager defines a cert manager config for a TLS.
        :param 'VirtualServerSpecTlsRedirectArgs' redirect: TLSRedirect defines a redirect for a TLS.
        """
        if cert_manager is not None:
            pulumi.set(__self__, "cert_manager", cert_manager)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="cert-manager")
    def cert_manager(self) -> Optional['outputs.VirtualServerSpecTlsCertManager']:
        """
        CertManager defines a cert manager config for a TLS.
        """
        return pulumi.get(self, "cert_manager")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.VirtualServerSpecTlsRedirect']:
        """
        TLSRedirect defines a redirect for a TLS.
        """
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")


@pulumi.output_type
class VirtualServerSpecTlsCertManager(dict):
    """
    CertManager defines a cert manager config for a TLS.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cluster-issuer":
            suggest = "cluster_issuer"
        elif key == "common-name":
            suggest = "common_name"
        elif key == "issue-temp-cert":
            suggest = "issue_temp_cert"
        elif key == "issuer-group":
            suggest = "issuer_group"
        elif key == "issuer-kind":
            suggest = "issuer_kind"
        elif key == "renew-before":
            suggest = "renew_before"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecTlsCertManager. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecTlsCertManager.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecTlsCertManager.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_issuer: Optional[str] = None,
                 common_name: Optional[str] = None,
                 duration: Optional[str] = None,
                 issue_temp_cert: Optional[bool] = None,
                 issuer: Optional[str] = None,
                 issuer_group: Optional[str] = None,
                 issuer_kind: Optional[str] = None,
                 renew_before: Optional[str] = None,
                 usages: Optional[str] = None):
        """
        CertManager defines a cert manager config for a TLS.
        """
        if cluster_issuer is not None:
            pulumi.set(__self__, "cluster_issuer", cluster_issuer)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if issue_temp_cert is not None:
            pulumi.set(__self__, "issue_temp_cert", issue_temp_cert)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if issuer_group is not None:
            pulumi.set(__self__, "issuer_group", issuer_group)
        if issuer_kind is not None:
            pulumi.set(__self__, "issuer_kind", issuer_kind)
        if renew_before is not None:
            pulumi.set(__self__, "renew_before", renew_before)
        if usages is not None:
            pulumi.set(__self__, "usages", usages)

    @property
    @pulumi.getter(name="cluster-issuer")
    def cluster_issuer(self) -> Optional[str]:
        return pulumi.get(self, "cluster_issuer")

    @property
    @pulumi.getter(name="common-name")
    def common_name(self) -> Optional[str]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="issue-temp-cert")
    def issue_temp_cert(self) -> Optional[bool]:
        return pulumi.get(self, "issue_temp_cert")

    @property
    @pulumi.getter
    def issuer(self) -> Optional[str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="issuer-group")
    def issuer_group(self) -> Optional[str]:
        return pulumi.get(self, "issuer_group")

    @property
    @pulumi.getter(name="issuer-kind")
    def issuer_kind(self) -> Optional[str]:
        return pulumi.get(self, "issuer_kind")

    @property
    @pulumi.getter(name="renew-before")
    def renew_before(self) -> Optional[str]:
        return pulumi.get(self, "renew_before")

    @property
    @pulumi.getter
    def usages(self) -> Optional[str]:
        return pulumi.get(self, "usages")


@pulumi.output_type
class VirtualServerSpecTlsRedirect(dict):
    """
    TLSRedirect defines a redirect for a TLS.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basedOn":
            suggest = "based_on"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecTlsRedirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecTlsRedirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecTlsRedirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 based_on: Optional[str] = None,
                 code: Optional[int] = None,
                 enable: Optional[bool] = None):
        """
        TLSRedirect defines a redirect for a TLS.
        """
        if based_on is not None:
            pulumi.set(__self__, "based_on", based_on)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="basedOn")
    def based_on(self) -> Optional[str]:
        return pulumi.get(self, "based_on")

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")


@pulumi.output_type
class VirtualServerSpecUpstreams(dict):
    """
    Upstream defines an upstream.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPort":
            suggest = "backup_port"
        elif key == "buffer-size":
            suggest = "buffer_size"
        elif key == "client-max-body-size":
            suggest = "client_max_body_size"
        elif key == "connect-timeout":
            suggest = "connect_timeout"
        elif key == "fail-timeout":
            suggest = "fail_timeout"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "lb-method":
            suggest = "lb_method"
        elif key == "max-conns":
            suggest = "max_conns"
        elif key == "max-fails":
            suggest = "max_fails"
        elif key == "next-upstream":
            suggest = "next_upstream"
        elif key == "next-upstream-timeout":
            suggest = "next_upstream_timeout"
        elif key == "next-upstream-tries":
            suggest = "next_upstream_tries"
        elif key == "read-timeout":
            suggest = "read_timeout"
        elif key == "send-timeout":
            suggest = "send_timeout"
        elif key == "sessionCookie":
            suggest = "session_cookie"
        elif key == "slow-start":
            suggest = "slow_start"
        elif key == "use-cluster-ip":
            suggest = "use_cluster_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecUpstreams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecUpstreams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecUpstreams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup: Optional[str] = None,
                 backup_port: Optional[int] = None,
                 buffer_size: Optional[str] = None,
                 buffering: Optional[bool] = None,
                 buffers: Optional['outputs.VirtualServerSpecUpstreamsBuffers'] = None,
                 client_max_body_size: Optional[str] = None,
                 connect_timeout: Optional[str] = None,
                 fail_timeout: Optional[str] = None,
                 health_check: Optional['outputs.VirtualServerSpecUpstreamsHealthCheck'] = None,
                 keepalive: Optional[int] = None,
                 lb_method: Optional[str] = None,
                 max_conns: Optional[int] = None,
                 max_fails: Optional[int] = None,
                 name: Optional[str] = None,
                 next_upstream: Optional[str] = None,
                 next_upstream_timeout: Optional[str] = None,
                 next_upstream_tries: Optional[int] = None,
                 ntlm: Optional[bool] = None,
                 port: Optional[int] = None,
                 queue: Optional['outputs.VirtualServerSpecUpstreamsQueue'] = None,
                 read_timeout: Optional[str] = None,
                 send_timeout: Optional[str] = None,
                 service: Optional[str] = None,
                 session_cookie: Optional['outputs.VirtualServerSpecUpstreamsSessionCookie'] = None,
                 slow_start: Optional[str] = None,
                 subselector: Optional[Mapping[str, str]] = None,
                 tls: Optional['outputs.VirtualServerSpecUpstreamsTls'] = None,
                 type: Optional[str] = None,
                 use_cluster_ip: Optional[bool] = None):
        """
        Upstream defines an upstream.
        :param 'VirtualServerSpecUpstreamsBuffersArgs' buffers: UpstreamBuffers defines Buffer Configuration for an Upstream.
        :param 'VirtualServerSpecUpstreamsHealthCheckArgs' health_check: HealthCheck defines the parameters for active Upstream HealthChecks.
        :param 'VirtualServerSpecUpstreamsQueueArgs' queue: UpstreamQueue defines Queue Configuration for an Upstream.
        :param 'VirtualServerSpecUpstreamsSessionCookieArgs' session_cookie: SessionCookie defines the parameters for session persistence.
        :param 'VirtualServerSpecUpstreamsTlsArgs' tls: UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if backup_port is not None:
            pulumi.set(__self__, "backup_port", backup_port)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if buffering is not None:
            pulumi.set(__self__, "buffering", buffering)
        if buffers is not None:
            pulumi.set(__self__, "buffers", buffers)
        if client_max_body_size is not None:
            pulumi.set(__self__, "client_max_body_size", client_max_body_size)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if fail_timeout is not None:
            pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if lb_method is not None:
            pulumi.set(__self__, "lb_method", lb_method)
        if max_conns is not None:
            pulumi.set(__self__, "max_conns", max_conns)
        if max_fails is not None:
            pulumi.set(__self__, "max_fails", max_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_upstream is not None:
            pulumi.set(__self__, "next_upstream", next_upstream)
        if next_upstream_timeout is not None:
            pulumi.set(__self__, "next_upstream_timeout", next_upstream_timeout)
        if next_upstream_tries is not None:
            pulumi.set(__self__, "next_upstream_tries", next_upstream_tries)
        if ntlm is not None:
            pulumi.set(__self__, "ntlm", ntlm)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if session_cookie is not None:
            pulumi.set(__self__, "session_cookie", session_cookie)
        if slow_start is not None:
            pulumi.set(__self__, "slow_start", slow_start)
        if subselector is not None:
            pulumi.set(__self__, "subselector", subselector)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_cluster_ip is not None:
            pulumi.set(__self__, "use_cluster_ip", use_cluster_ip)

    @property
    @pulumi.getter
    def backup(self) -> Optional[str]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter(name="backupPort")
    def backup_port(self) -> Optional[int]:
        return pulumi.get(self, "backup_port")

    @property
    @pulumi.getter(name="buffer-size")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter
    def buffering(self) -> Optional[bool]:
        return pulumi.get(self, "buffering")

    @property
    @pulumi.getter
    def buffers(self) -> Optional['outputs.VirtualServerSpecUpstreamsBuffers']:
        """
        UpstreamBuffers defines Buffer Configuration for an Upstream.
        """
        return pulumi.get(self, "buffers")

    @property
    @pulumi.getter(name="client-max-body-size")
    def client_max_body_size(self) -> Optional[str]:
        return pulumi.get(self, "client_max_body_size")

    @property
    @pulumi.getter(name="connect-timeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="fail-timeout")
    def fail_timeout(self) -> Optional[str]:
        return pulumi.get(self, "fail_timeout")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional['outputs.VirtualServerSpecUpstreamsHealthCheck']:
        """
        HealthCheck defines the parameters for active Upstream HealthChecks.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[int]:
        return pulumi.get(self, "keepalive")

    @property
    @pulumi.getter(name="lb-method")
    def lb_method(self) -> Optional[str]:
        return pulumi.get(self, "lb_method")

    @property
    @pulumi.getter(name="max-conns")
    def max_conns(self) -> Optional[int]:
        return pulumi.get(self, "max_conns")

    @property
    @pulumi.getter(name="max-fails")
    def max_fails(self) -> Optional[int]:
        return pulumi.get(self, "max_fails")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="next-upstream")
    def next_upstream(self) -> Optional[str]:
        return pulumi.get(self, "next_upstream")

    @property
    @pulumi.getter(name="next-upstream-timeout")
    def next_upstream_timeout(self) -> Optional[str]:
        return pulumi.get(self, "next_upstream_timeout")

    @property
    @pulumi.getter(name="next-upstream-tries")
    def next_upstream_tries(self) -> Optional[int]:
        return pulumi.get(self, "next_upstream_tries")

    @property
    @pulumi.getter
    def ntlm(self) -> Optional[bool]:
        return pulumi.get(self, "ntlm")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def queue(self) -> Optional['outputs.VirtualServerSpecUpstreamsQueue']:
        """
        UpstreamQueue defines Queue Configuration for an Upstream.
        """
        return pulumi.get(self, "queue")

    @property
    @pulumi.getter(name="read-timeout")
    def read_timeout(self) -> Optional[str]:
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter(name="send-timeout")
    def send_timeout(self) -> Optional[str]:
        return pulumi.get(self, "send_timeout")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="sessionCookie")
    def session_cookie(self) -> Optional['outputs.VirtualServerSpecUpstreamsSessionCookie']:
        """
        SessionCookie defines the parameters for session persistence.
        """
        return pulumi.get(self, "session_cookie")

    @property
    @pulumi.getter(name="slow-start")
    def slow_start(self) -> Optional[str]:
        return pulumi.get(self, "slow_start")

    @property
    @pulumi.getter
    def subselector(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "subselector")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.VirtualServerSpecUpstreamsTls']:
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="use-cluster-ip")
    def use_cluster_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_cluster_ip")


@pulumi.output_type
class VirtualServerSpecUpstreamsBuffers(dict):
    """
    UpstreamBuffers defines Buffer Configuration for an Upstream.
    """
    def __init__(__self__, *,
                 number: Optional[int] = None,
                 size: Optional[str] = None):
        """
        UpstreamBuffers defines Buffer Configuration for an Upstream.
        """
        if number is not None:
            pulumi.set(__self__, "number", number)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def number(self) -> Optional[int]:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")


@pulumi.output_type
class VirtualServerSpecUpstreamsHealthCheck(dict):
    """
    HealthCheck defines the parameters for active Upstream HealthChecks.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connect-timeout":
            suggest = "connect_timeout"
        elif key == "grpcService":
            suggest = "grpc_service"
        elif key == "grpcStatus":
            suggest = "grpc_status"
        elif key == "keepalive-time":
            suggest = "keepalive_time"
        elif key == "read-timeout":
            suggest = "read_timeout"
        elif key == "send-timeout":
            suggest = "send_timeout"
        elif key == "statusMatch":
            suggest = "status_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecUpstreamsHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecUpstreamsHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecUpstreamsHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_timeout: Optional[str] = None,
                 enable: Optional[bool] = None,
                 fails: Optional[int] = None,
                 grpc_service: Optional[str] = None,
                 grpc_status: Optional[int] = None,
                 headers: Optional[Sequence['outputs.VirtualServerSpecUpstreamsHealthCheckHeaders']] = None,
                 interval: Optional[str] = None,
                 jitter: Optional[str] = None,
                 keepalive_time: Optional[str] = None,
                 mandatory: Optional[bool] = None,
                 passes: Optional[int] = None,
                 path: Optional[str] = None,
                 persistent: Optional[bool] = None,
                 port: Optional[int] = None,
                 read_timeout: Optional[str] = None,
                 send_timeout: Optional[str] = None,
                 status_match: Optional[str] = None,
                 tls: Optional['outputs.VirtualServerSpecUpstreamsHealthCheckTls'] = None):
        """
        HealthCheck defines the parameters for active Upstream HealthChecks.
        :param 'VirtualServerSpecUpstreamsHealthCheckTlsArgs' tls: UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fails is not None:
            pulumi.set(__self__, "fails", fails)
        if grpc_service is not None:
            pulumi.set(__self__, "grpc_service", grpc_service)
        if grpc_status is not None:
            pulumi.set(__self__, "grpc_status", grpc_status)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if keepalive_time is not None:
            pulumi.set(__self__, "keepalive_time", keepalive_time)
        if mandatory is not None:
            pulumi.set(__self__, "mandatory", mandatory)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if status_match is not None:
            pulumi.set(__self__, "status_match", status_match)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter(name="connect-timeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def fails(self) -> Optional[int]:
        return pulumi.get(self, "fails")

    @property
    @pulumi.getter(name="grpcService")
    def grpc_service(self) -> Optional[str]:
        return pulumi.get(self, "grpc_service")

    @property
    @pulumi.getter(name="grpcStatus")
    def grpc_status(self) -> Optional[int]:
        return pulumi.get(self, "grpc_status")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.VirtualServerSpecUpstreamsHealthCheckHeaders']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def jitter(self) -> Optional[str]:
        return pulumi.get(self, "jitter")

    @property
    @pulumi.getter(name="keepalive-time")
    def keepalive_time(self) -> Optional[str]:
        return pulumi.get(self, "keepalive_time")

    @property
    @pulumi.getter
    def mandatory(self) -> Optional[bool]:
        return pulumi.get(self, "mandatory")

    @property
    @pulumi.getter
    def passes(self) -> Optional[int]:
        return pulumi.get(self, "passes")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def persistent(self) -> Optional[bool]:
        return pulumi.get(self, "persistent")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="read-timeout")
    def read_timeout(self) -> Optional[str]:
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter(name="send-timeout")
    def send_timeout(self) -> Optional[str]:
        return pulumi.get(self, "send_timeout")

    @property
    @pulumi.getter(name="statusMatch")
    def status_match(self) -> Optional[str]:
        return pulumi.get(self, "status_match")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.VirtualServerSpecUpstreamsHealthCheckTls']:
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class VirtualServerSpecUpstreamsHealthCheckHeaders(dict):
    """
    Header defines an HTTP Header.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        Header defines an HTTP Header.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualServerSpecUpstreamsHealthCheckTls(dict):
    """
    UpstreamTLS defines a TLS configuration for an Upstream.
    """
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")


@pulumi.output_type
class VirtualServerSpecUpstreamsQueue(dict):
    """
    UpstreamQueue defines Queue Configuration for an Upstream.
    """
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 timeout: Optional[str] = None):
        """
        UpstreamQueue defines Queue Configuration for an Upstream.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class VirtualServerSpecUpstreamsSessionCookie(dict):
    """
    SessionCookie defines the parameters for session persistence.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpOnly":
            suggest = "http_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerSpecUpstreamsSessionCookie. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerSpecUpstreamsSessionCookie.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerSpecUpstreamsSessionCookie.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 enable: Optional[bool] = None,
                 expires: Optional[str] = None,
                 http_only: Optional[bool] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 samesite: Optional[str] = None,
                 secure: Optional[bool] = None):
        """
        SessionCookie defines the parameters for session persistence.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if samesite is not None:
            pulumi.set(__self__, "samesite", samesite)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        return pulumi.get(self, "http_only")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def samesite(self) -> Optional[str]:
        return pulumi.get(self, "samesite")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")


@pulumi.output_type
class VirtualServerSpecUpstreamsTls(dict):
    """
    UpstreamTLS defines a TLS configuration for an Upstream.
    """
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        UpstreamTLS defines a TLS configuration for an Upstream.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")


@pulumi.output_type
class VirtualServerStatus(dict):
    """
    VirtualServerStatus defines the status for the VirtualServer resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalEndpoints":
            suggest = "external_endpoints"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualServerStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualServerStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualServerStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_endpoints: Optional[Sequence['outputs.VirtualServerStatusExternalEndpoints']] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 state: Optional[str] = None):
        """
        VirtualServerStatus defines the status for the VirtualServer resource.
        """
        if external_endpoints is not None:
            pulumi.set(__self__, "external_endpoints", external_endpoints)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="externalEndpoints")
    def external_endpoints(self) -> Optional[Sequence['outputs.VirtualServerStatusExternalEndpoints']]:
        return pulumi.get(self, "external_endpoints")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class VirtualServerStatusExternalEndpoints(dict):
    """
    ExternalEndpoint defines the IP/ Hostname and ports used to connect to this resource.
    """
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None,
                 ports: Optional[str] = None):
        """
        ExternalEndpoint defines the IP/ Hostname and ports used to connect to this resource.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")


