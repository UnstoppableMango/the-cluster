# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GlobalConfigurationSpec',
    'GlobalConfigurationSpecListeners',
    'PolicySpec',
    'PolicySpecAccessControl',
    'PolicySpecEgressMtls',
    'PolicySpecIngressMtls',
    'PolicySpecJwt',
    'PolicySpecRateLimit',
    'TransportServerSpec',
    'TransportServerSpecAction',
    'TransportServerSpecListener',
    'TransportServerSpecSessionParameters',
    'TransportServerSpecTls',
    'TransportServerSpecUpstreamParameters',
    'TransportServerSpecUpstreams',
    'TransportServerSpecUpstreamsHealthCheck',
    'TransportServerSpecUpstreamsHealthCheckMatch',
    'TransportServerStatus',
]

@pulumi.output_type
class GlobalConfigurationSpec(dict):
    """
    GlobalConfigurationSpec is the spec of the GlobalConfiguration resource.
    """
    def __init__(__self__, *,
                 listeners: Optional[Sequence['outputs.GlobalConfigurationSpecListeners']] = None):
        """
        GlobalConfigurationSpec is the spec of the GlobalConfiguration resource.
        """
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[Sequence['outputs.GlobalConfigurationSpecListeners']]:
        return pulumi.get(self, "listeners")


@pulumi.output_type
class GlobalConfigurationSpecListeners(dict):
    """
    Listener defines a listener.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 ssl: Optional[bool] = None):
        """
        Listener defines a listener.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def ssl(self) -> Optional[bool]:
        return pulumi.get(self, "ssl")


@pulumi.output_type
class PolicySpec(dict):
    """
    PolicySpec is the spec of the Policy resource. The spec includes multiple fields, where each field represents a different policy. Only one policy (field) is allowed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessControl":
            suggest = "access_control"
        elif key == "egressMTLS":
            suggest = "egress_mtls"
        elif key == "ingressMTLS":
            suggest = "ingress_mtls"
        elif key == "rateLimit":
            suggest = "rate_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_control: Optional['outputs.PolicySpecAccessControl'] = None,
                 egress_mtls: Optional['outputs.PolicySpecEgressMtls'] = None,
                 ingress_mtls: Optional['outputs.PolicySpecIngressMtls'] = None,
                 jwt: Optional['outputs.PolicySpecJwt'] = None,
                 rate_limit: Optional['outputs.PolicySpecRateLimit'] = None):
        """
        PolicySpec is the spec of the Policy resource. The spec includes multiple fields, where each field represents a different policy. Only one policy (field) is allowed.
        :param 'PolicySpecAccessControlArgs' access_control: AccessControl defines an access policy based on the source IP of a request.
        :param 'PolicySpecEgressMtlsArgs' egress_mtls: EgressMTLS defines an Egress MTLS policy.
        :param 'PolicySpecIngressMtlsArgs' ingress_mtls: IngressMTLS defines an Ingress MTLS policy.
        :param 'PolicySpecJwtArgs' jwt: JWTAuth holds JWT authentication configuration.
        :param 'PolicySpecRateLimitArgs' rate_limit: RateLimit defines a rate limit policy.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if egress_mtls is not None:
            pulumi.set(__self__, "egress_mtls", egress_mtls)
        if ingress_mtls is not None:
            pulumi.set(__self__, "ingress_mtls", ingress_mtls)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional['outputs.PolicySpecAccessControl']:
        """
        AccessControl defines an access policy based on the source IP of a request.
        """
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="egressMTLS")
    def egress_mtls(self) -> Optional['outputs.PolicySpecEgressMtls']:
        """
        EgressMTLS defines an Egress MTLS policy.
        """
        return pulumi.get(self, "egress_mtls")

    @property
    @pulumi.getter(name="ingressMTLS")
    def ingress_mtls(self) -> Optional['outputs.PolicySpecIngressMtls']:
        """
        IngressMTLS defines an Ingress MTLS policy.
        """
        return pulumi.get(self, "ingress_mtls")

    @property
    @pulumi.getter
    def jwt(self) -> Optional['outputs.PolicySpecJwt']:
        """
        JWTAuth holds JWT authentication configuration.
        """
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional['outputs.PolicySpecRateLimit']:
        """
        RateLimit defines a rate limit policy.
        """
        return pulumi.get(self, "rate_limit")


@pulumi.output_type
class PolicySpecAccessControl(dict):
    """
    AccessControl defines an access policy based on the source IP of a request.
    """
    def __init__(__self__, *,
                 allow: Optional[Sequence[str]] = None,
                 deny: Optional[Sequence[str]] = None):
        """
        AccessControl defines an access policy based on the source IP of a request.
        """
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if deny is not None:
            pulumi.set(__self__, "deny", deny)

    @property
    @pulumi.getter
    def allow(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter
    def deny(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "deny")


@pulumi.output_type
class PolicySpecEgressMtls(dict):
    """
    EgressMTLS defines an Egress MTLS policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverName":
            suggest = "server_name"
        elif key == "sessionReuse":
            suggest = "session_reuse"
        elif key == "sslName":
            suggest = "ssl_name"
        elif key == "tlsSecret":
            suggest = "tls_secret"
        elif key == "trustedCertSecret":
            suggest = "trusted_cert_secret"
        elif key == "verifyDepth":
            suggest = "verify_depth"
        elif key == "verifyServer":
            suggest = "verify_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecEgressMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecEgressMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecEgressMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ciphers: Optional[str] = None,
                 protocols: Optional[str] = None,
                 server_name: Optional[bool] = None,
                 session_reuse: Optional[bool] = None,
                 ssl_name: Optional[str] = None,
                 tls_secret: Optional[str] = None,
                 trusted_cert_secret: Optional[str] = None,
                 verify_depth: Optional[int] = None,
                 verify_server: Optional[bool] = None):
        """
        EgressMTLS defines an Egress MTLS policy.
        """
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if session_reuse is not None:
            pulumi.set(__self__, "session_reuse", session_reuse)
        if ssl_name is not None:
            pulumi.set(__self__, "ssl_name", ssl_name)
        if tls_secret is not None:
            pulumi.set(__self__, "tls_secret", tls_secret)
        if trusted_cert_secret is not None:
            pulumi.set(__self__, "trusted_cert_secret", trusted_cert_secret)
        if verify_depth is not None:
            pulumi.set(__self__, "verify_depth", verify_depth)
        if verify_server is not None:
            pulumi.set(__self__, "verify_server", verify_server)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[str]:
        return pulumi.get(self, "ciphers")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[str]:
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[bool]:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sessionReuse")
    def session_reuse(self) -> Optional[bool]:
        return pulumi.get(self, "session_reuse")

    @property
    @pulumi.getter(name="sslName")
    def ssl_name(self) -> Optional[str]:
        return pulumi.get(self, "ssl_name")

    @property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> Optional[str]:
        return pulumi.get(self, "tls_secret")

    @property
    @pulumi.getter(name="trustedCertSecret")
    def trusted_cert_secret(self) -> Optional[str]:
        return pulumi.get(self, "trusted_cert_secret")

    @property
    @pulumi.getter(name="verifyDepth")
    def verify_depth(self) -> Optional[int]:
        return pulumi.get(self, "verify_depth")

    @property
    @pulumi.getter(name="verifyServer")
    def verify_server(self) -> Optional[bool]:
        return pulumi.get(self, "verify_server")


@pulumi.output_type
class PolicySpecIngressMtls(dict):
    """
    IngressMTLS defines an Ingress MTLS policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertSecret":
            suggest = "client_cert_secret"
        elif key == "verifyClient":
            suggest = "verify_client"
        elif key == "verifyDepth":
            suggest = "verify_depth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecIngressMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecIngressMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecIngressMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_cert_secret: Optional[str] = None,
                 verify_client: Optional[str] = None,
                 verify_depth: Optional[int] = None):
        """
        IngressMTLS defines an Ingress MTLS policy.
        """
        if client_cert_secret is not None:
            pulumi.set(__self__, "client_cert_secret", client_cert_secret)
        if verify_client is not None:
            pulumi.set(__self__, "verify_client", verify_client)
        if verify_depth is not None:
            pulumi.set(__self__, "verify_depth", verify_depth)

    @property
    @pulumi.getter(name="clientCertSecret")
    def client_cert_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_cert_secret")

    @property
    @pulumi.getter(name="verifyClient")
    def verify_client(self) -> Optional[str]:
        return pulumi.get(self, "verify_client")

    @property
    @pulumi.getter(name="verifyDepth")
    def verify_depth(self) -> Optional[int]:
        return pulumi.get(self, "verify_depth")


@pulumi.output_type
class PolicySpecJwt(dict):
    """
    JWTAuth holds JWT authentication configuration.
    """
    def __init__(__self__, *,
                 realm: Optional[str] = None,
                 secret: Optional[str] = None,
                 token: Optional[str] = None):
        """
        JWTAuth holds JWT authentication configuration.
        """
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def realm(self) -> Optional[str]:
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")


@pulumi.output_type
class PolicySpecRateLimit(dict):
    """
    RateLimit defines a rate limit policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dryRun":
            suggest = "dry_run"
        elif key == "logLevel":
            suggest = "log_level"
        elif key == "noDelay":
            suggest = "no_delay"
        elif key == "rejectCode":
            suggest = "reject_code"
        elif key == "zoneSize":
            suggest = "zone_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicySpecRateLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicySpecRateLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicySpecRateLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst: Optional[int] = None,
                 delay: Optional[int] = None,
                 dry_run: Optional[bool] = None,
                 key: Optional[str] = None,
                 log_level: Optional[str] = None,
                 no_delay: Optional[bool] = None,
                 rate: Optional[str] = None,
                 reject_code: Optional[int] = None,
                 zone_size: Optional[str] = None):
        """
        RateLimit defines a rate limit policy.
        """
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if no_delay is not None:
            pulumi.set(__self__, "no_delay", no_delay)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if reject_code is not None:
            pulumi.set(__self__, "reject_code", reject_code)
        if zone_size is not None:
            pulumi.set(__self__, "zone_size", zone_size)

    @property
    @pulumi.getter
    def burst(self) -> Optional[int]:
        return pulumi.get(self, "burst")

    @property
    @pulumi.getter
    def delay(self) -> Optional[int]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[bool]:
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="noDelay")
    def no_delay(self) -> Optional[bool]:
        return pulumi.get(self, "no_delay")

    @property
    @pulumi.getter
    def rate(self) -> Optional[str]:
        return pulumi.get(self, "rate")

    @property
    @pulumi.getter(name="rejectCode")
    def reject_code(self) -> Optional[int]:
        return pulumi.get(self, "reject_code")

    @property
    @pulumi.getter(name="zoneSize")
    def zone_size(self) -> Optional[str]:
        return pulumi.get(self, "zone_size")


@pulumi.output_type
class TransportServerSpec(dict):
    """
    TransportServerSpec is the spec of the TransportServer resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressClassName":
            suggest = "ingress_class_name"
        elif key == "serverSnippets":
            suggest = "server_snippets"
        elif key == "sessionParameters":
            suggest = "session_parameters"
        elif key == "streamSnippets":
            suggest = "stream_snippets"
        elif key == "upstreamParameters":
            suggest = "upstream_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportServerSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportServerSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportServerSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional['outputs.TransportServerSpecAction'] = None,
                 host: Optional[str] = None,
                 ingress_class_name: Optional[str] = None,
                 listener: Optional['outputs.TransportServerSpecListener'] = None,
                 server_snippets: Optional[str] = None,
                 session_parameters: Optional['outputs.TransportServerSpecSessionParameters'] = None,
                 stream_snippets: Optional[str] = None,
                 tls: Optional['outputs.TransportServerSpecTls'] = None,
                 upstream_parameters: Optional['outputs.TransportServerSpecUpstreamParameters'] = None,
                 upstreams: Optional[Sequence['outputs.TransportServerSpecUpstreams']] = None):
        """
        TransportServerSpec is the spec of the TransportServer resource.
        :param 'TransportServerSpecActionArgs' action: TransportServerAction defines an action.
        :param 'TransportServerSpecListenerArgs' listener: TransportServerListener defines a listener for a TransportServer.
        :param 'TransportServerSpecSessionParametersArgs' session_parameters: SessionParameters defines session parameters.
        :param 'TransportServerSpecTlsArgs' tls: TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        :param 'TransportServerSpecUpstreamParametersArgs' upstream_parameters: UpstreamParameters defines parameters for an upstream.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if server_snippets is not None:
            pulumi.set(__self__, "server_snippets", server_snippets)
        if session_parameters is not None:
            pulumi.set(__self__, "session_parameters", session_parameters)
        if stream_snippets is not None:
            pulumi.set(__self__, "stream_snippets", stream_snippets)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if upstream_parameters is not None:
            pulumi.set(__self__, "upstream_parameters", upstream_parameters)
        if upstreams is not None:
            pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.TransportServerSpecAction']:
        """
        TransportServerAction defines an action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter
    def listener(self) -> Optional['outputs.TransportServerSpecListener']:
        """
        TransportServerListener defines a listener for a TransportServer.
        """
        return pulumi.get(self, "listener")

    @property
    @pulumi.getter(name="serverSnippets")
    def server_snippets(self) -> Optional[str]:
        return pulumi.get(self, "server_snippets")

    @property
    @pulumi.getter(name="sessionParameters")
    def session_parameters(self) -> Optional['outputs.TransportServerSpecSessionParameters']:
        """
        SessionParameters defines session parameters.
        """
        return pulumi.get(self, "session_parameters")

    @property
    @pulumi.getter(name="streamSnippets")
    def stream_snippets(self) -> Optional[str]:
        return pulumi.get(self, "stream_snippets")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.TransportServerSpecTls']:
        """
        TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter(name="upstreamParameters")
    def upstream_parameters(self) -> Optional['outputs.TransportServerSpecUpstreamParameters']:
        """
        UpstreamParameters defines parameters for an upstream.
        """
        return pulumi.get(self, "upstream_parameters")

    @property
    @pulumi.getter
    def upstreams(self) -> Optional[Sequence['outputs.TransportServerSpecUpstreams']]:
        return pulumi.get(self, "upstreams")


@pulumi.output_type
class TransportServerSpecAction(dict):
    """
    TransportServerAction defines an action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pass":
            suggest = "pass_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportServerSpecAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportServerSpecAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportServerSpecAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pass_: Optional[str] = None):
        """
        TransportServerAction defines an action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[str]:
        return pulumi.get(self, "pass_")


@pulumi.output_type
class TransportServerSpecListener(dict):
    """
    TransportServerListener defines a listener for a TransportServer.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        TransportServerListener defines a listener for a TransportServer.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class TransportServerSpecSessionParameters(dict):
    """
    SessionParameters defines session parameters.
    """
    def __init__(__self__, *,
                 timeout: Optional[str] = None):
        """
        SessionParameters defines session parameters.
        """
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class TransportServerSpecTls(dict):
    """
    TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
    """
    def __init__(__self__, *,
                 secret: Optional[str] = None):
        """
        TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")


@pulumi.output_type
class TransportServerSpecUpstreamParameters(dict):
    """
    UpstreamParameters defines parameters for an upstream.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectTimeout":
            suggest = "connect_timeout"
        elif key == "nextUpstream":
            suggest = "next_upstream"
        elif key == "nextUpstreamTimeout":
            suggest = "next_upstream_timeout"
        elif key == "nextUpstreamTries":
            suggest = "next_upstream_tries"
        elif key == "udpRequests":
            suggest = "udp_requests"
        elif key == "udpResponses":
            suggest = "udp_responses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportServerSpecUpstreamParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportServerSpecUpstreamParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportServerSpecUpstreamParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_timeout: Optional[str] = None,
                 next_upstream: Optional[bool] = None,
                 next_upstream_timeout: Optional[str] = None,
                 next_upstream_tries: Optional[int] = None,
                 udp_requests: Optional[int] = None,
                 udp_responses: Optional[int] = None):
        """
        UpstreamParameters defines parameters for an upstream.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if next_upstream is not None:
            pulumi.set(__self__, "next_upstream", next_upstream)
        if next_upstream_timeout is not None:
            pulumi.set(__self__, "next_upstream_timeout", next_upstream_timeout)
        if next_upstream_tries is not None:
            pulumi.set(__self__, "next_upstream_tries", next_upstream_tries)
        if udp_requests is not None:
            pulumi.set(__self__, "udp_requests", udp_requests)
        if udp_responses is not None:
            pulumi.set(__self__, "udp_responses", udp_responses)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[str]:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="nextUpstream")
    def next_upstream(self) -> Optional[bool]:
        return pulumi.get(self, "next_upstream")

    @property
    @pulumi.getter(name="nextUpstreamTimeout")
    def next_upstream_timeout(self) -> Optional[str]:
        return pulumi.get(self, "next_upstream_timeout")

    @property
    @pulumi.getter(name="nextUpstreamTries")
    def next_upstream_tries(self) -> Optional[int]:
        return pulumi.get(self, "next_upstream_tries")

    @property
    @pulumi.getter(name="udpRequests")
    def udp_requests(self) -> Optional[int]:
        return pulumi.get(self, "udp_requests")

    @property
    @pulumi.getter(name="udpResponses")
    def udp_responses(self) -> Optional[int]:
        return pulumi.get(self, "udp_responses")


@pulumi.output_type
class TransportServerSpecUpstreams(dict):
    """
    TransportServerUpstream defines an upstream.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPort":
            suggest = "backup_port"
        elif key == "failTimeout":
            suggest = "fail_timeout"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "loadBalancingMethod":
            suggest = "load_balancing_method"
        elif key == "maxConns":
            suggest = "max_conns"
        elif key == "maxFails":
            suggest = "max_fails"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TransportServerSpecUpstreams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TransportServerSpecUpstreams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TransportServerSpecUpstreams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup: Optional[str] = None,
                 backup_port: Optional[int] = None,
                 fail_timeout: Optional[str] = None,
                 health_check: Optional['outputs.TransportServerSpecUpstreamsHealthCheck'] = None,
                 load_balancing_method: Optional[str] = None,
                 max_conns: Optional[int] = None,
                 max_fails: Optional[int] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 service: Optional[str] = None):
        """
        TransportServerUpstream defines an upstream.
        :param 'TransportServerSpecUpstreamsHealthCheckArgs' health_check: TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if backup_port is not None:
            pulumi.set(__self__, "backup_port", backup_port)
        if fail_timeout is not None:
            pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if load_balancing_method is not None:
            pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        if max_conns is not None:
            pulumi.set(__self__, "max_conns", max_conns)
        if max_fails is not None:
            pulumi.set(__self__, "max_fails", max_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def backup(self) -> Optional[str]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter(name="backupPort")
    def backup_port(self) -> Optional[int]:
        return pulumi.get(self, "backup_port")

    @property
    @pulumi.getter(name="failTimeout")
    def fail_timeout(self) -> Optional[str]:
        return pulumi.get(self, "fail_timeout")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional['outputs.TransportServerSpecUpstreamsHealthCheck']:
        """
        TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> Optional[str]:
        return pulumi.get(self, "load_balancing_method")

    @property
    @pulumi.getter(name="maxConns")
    def max_conns(self) -> Optional[int]:
        return pulumi.get(self, "max_conns")

    @property
    @pulumi.getter(name="maxFails")
    def max_fails(self) -> Optional[int]:
        return pulumi.get(self, "max_fails")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")


@pulumi.output_type
class TransportServerSpecUpstreamsHealthCheck(dict):
    """
    TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
    """
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 fails: Optional[int] = None,
                 interval: Optional[str] = None,
                 jitter: Optional[str] = None,
                 match: Optional['outputs.TransportServerSpecUpstreamsHealthCheckMatch'] = None,
                 passes: Optional[int] = None,
                 port: Optional[int] = None,
                 timeout: Optional[str] = None):
        """
        TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        :param 'TransportServerSpecUpstreamsHealthCheckMatchArgs' match: TransportServerMatch defines the parameters of a custom health check.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fails is not None:
            pulumi.set(__self__, "fails", fails)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def fails(self) -> Optional[int]:
        return pulumi.get(self, "fails")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def jitter(self) -> Optional[str]:
        return pulumi.get(self, "jitter")

    @property
    @pulumi.getter
    def match(self) -> Optional['outputs.TransportServerSpecUpstreamsHealthCheckMatch']:
        """
        TransportServerMatch defines the parameters of a custom health check.
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def passes(self) -> Optional[int]:
        return pulumi.get(self, "passes")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class TransportServerSpecUpstreamsHealthCheckMatch(dict):
    """
    TransportServerMatch defines the parameters of a custom health check.
    """
    def __init__(__self__, *,
                 expect: Optional[str] = None,
                 send: Optional[str] = None):
        """
        TransportServerMatch defines the parameters of a custom health check.
        """
        if expect is not None:
            pulumi.set(__self__, "expect", expect)
        if send is not None:
            pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def expect(self) -> Optional[str]:
        return pulumi.get(self, "expect")

    @property
    @pulumi.getter
    def send(self) -> Optional[str]:
        return pulumi.get(self, "send")


@pulumi.output_type
class TransportServerStatus(dict):
    """
    TransportServerStatus defines the status for the TransportServer resource.
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 state: Optional[str] = None):
        """
        TransportServerStatus defines the status for the TransportServer resource.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


