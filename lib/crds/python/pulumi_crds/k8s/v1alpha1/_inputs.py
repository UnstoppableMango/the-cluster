# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'GlobalConfigurationSpecListenersArgs',
    'GlobalConfigurationSpecArgs',
    'PolicySpecAccessControlArgs',
    'PolicySpecEgressMtlsArgs',
    'PolicySpecIngressMtlsArgs',
    'PolicySpecJwtArgs',
    'PolicySpecRateLimitArgs',
    'PolicySpecArgs',
    'TransportServerSpecActionArgs',
    'TransportServerSpecListenerArgs',
    'TransportServerSpecSessionParametersArgs',
    'TransportServerSpecTlsArgs',
    'TransportServerSpecUpstreamParametersArgs',
    'TransportServerSpecUpstreamsHealthCheckMatchArgs',
    'TransportServerSpecUpstreamsHealthCheckArgs',
    'TransportServerSpecUpstreamsArgs',
    'TransportServerSpecArgs',
    'TransportServerStatusArgs',
]

@pulumi.input_type
class GlobalConfigurationSpecListenersArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None):
        """
        Listener defines a listener.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)


@pulumi.input_type
class GlobalConfigurationSpecArgs:
    def __init__(__self__, *,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConfigurationSpecListenersArgs']]]] = None):
        """
        GlobalConfigurationSpec is the spec of the GlobalConfiguration resource.
        """
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConfigurationSpecListenersArgs']]]]:
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalConfigurationSpecListenersArgs']]]]):
        pulumi.set(self, "listeners", value)


@pulumi.input_type
class PolicySpecAccessControlArgs:
    def __init__(__self__, *,
                 allow: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deny: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        AccessControl defines an access policy based on the source IP of a request.
        """
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if deny is not None:
            pulumi.set(__self__, "deny", deny)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter
    def deny(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "deny")

    @deny.setter
    def deny(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deny", value)


@pulumi.input_type
class PolicySpecEgressMtlsArgs:
    def __init__(__self__, *,
                 ciphers: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[bool]] = None,
                 session_reuse: Optional[pulumi.Input[bool]] = None,
                 ssl_name: Optional[pulumi.Input[str]] = None,
                 tls_secret: Optional[pulumi.Input[str]] = None,
                 trusted_cert_secret: Optional[pulumi.Input[str]] = None,
                 verify_depth: Optional[pulumi.Input[int]] = None,
                 verify_server: Optional[pulumi.Input[bool]] = None):
        """
        EgressMTLS defines an Egress MTLS policy.
        """
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if session_reuse is not None:
            pulumi.set(__self__, "session_reuse", session_reuse)
        if ssl_name is not None:
            pulumi.set(__self__, "ssl_name", ssl_name)
        if tls_secret is not None:
            pulumi.set(__self__, "tls_secret", tls_secret)
        if trusted_cert_secret is not None:
            pulumi.set(__self__, "trusted_cert_secret", trusted_cert_secret)
        if verify_depth is not None:
            pulumi.set(__self__, "verify_depth", verify_depth)
        if verify_server is not None:
            pulumi.set(__self__, "verify_server", verify_server)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sessionReuse")
    def session_reuse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "session_reuse")

    @session_reuse.setter
    def session_reuse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_reuse", value)

    @property
    @pulumi.getter(name="sslName")
    def ssl_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_name")

    @ssl_name.setter
    def ssl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_name", value)

    @property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_secret")

    @tls_secret.setter
    def tls_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_secret", value)

    @property
    @pulumi.getter(name="trustedCertSecret")
    def trusted_cert_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trusted_cert_secret")

    @trusted_cert_secret.setter
    def trusted_cert_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusted_cert_secret", value)

    @property
    @pulumi.getter(name="verifyDepth")
    def verify_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "verify_depth")

    @verify_depth.setter
    def verify_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "verify_depth", value)

    @property
    @pulumi.getter(name="verifyServer")
    def verify_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify_server")

    @verify_server.setter
    def verify_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_server", value)


@pulumi.input_type
class PolicySpecIngressMtlsArgs:
    def __init__(__self__, *,
                 client_cert_secret: Optional[pulumi.Input[str]] = None,
                 verify_client: Optional[pulumi.Input[str]] = None,
                 verify_depth: Optional[pulumi.Input[int]] = None):
        """
        IngressMTLS defines an Ingress MTLS policy.
        """
        if client_cert_secret is not None:
            pulumi.set(__self__, "client_cert_secret", client_cert_secret)
        if verify_client is not None:
            pulumi.set(__self__, "verify_client", verify_client)
        if verify_depth is not None:
            pulumi.set(__self__, "verify_depth", verify_depth)

    @property
    @pulumi.getter(name="clientCertSecret")
    def client_cert_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_cert_secret")

    @client_cert_secret.setter
    def client_cert_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_secret", value)

    @property
    @pulumi.getter(name="verifyClient")
    def verify_client(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verify_client")

    @verify_client.setter
    def verify_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_client", value)

    @property
    @pulumi.getter(name="verifyDepth")
    def verify_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "verify_depth")

    @verify_depth.setter
    def verify_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "verify_depth", value)


@pulumi.input_type
class PolicySpecJwtArgs:
    def __init__(__self__, *,
                 realm: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        JWTAuth holds JWT authentication configuration.
        """
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class PolicySpecRateLimitArgs:
    def __init__(__self__, *,
                 burst: Optional[pulumi.Input[int]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 no_delay: Optional[pulumi.Input[bool]] = None,
                 rate: Optional[pulumi.Input[str]] = None,
                 reject_code: Optional[pulumi.Input[int]] = None,
                 zone_size: Optional[pulumi.Input[str]] = None):
        """
        RateLimit defines a rate limit policy.
        """
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if no_delay is not None:
            pulumi.set(__self__, "no_delay", no_delay)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if reject_code is not None:
            pulumi.set(__self__, "reject_code", reject_code)
        if zone_size is not None:
            pulumi.set(__self__, "zone_size", zone_size)

    @property
    @pulumi.getter
    def burst(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "burst")

    @burst.setter
    def burst(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "burst", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="noDelay")
    def no_delay(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_delay")

    @no_delay.setter
    def no_delay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_delay", value)

    @property
    @pulumi.getter
    def rate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rate")

    @rate.setter
    def rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate", value)

    @property
    @pulumi.getter(name="rejectCode")
    def reject_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "reject_code")

    @reject_code.setter
    def reject_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reject_code", value)

    @property
    @pulumi.getter(name="zoneSize")
    def zone_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone_size")

    @zone_size.setter
    def zone_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_size", value)


@pulumi.input_type
class PolicySpecArgs:
    def __init__(__self__, *,
                 access_control: Optional[pulumi.Input['PolicySpecAccessControlArgs']] = None,
                 egress_mtls: Optional[pulumi.Input['PolicySpecEgressMtlsArgs']] = None,
                 ingress_mtls: Optional[pulumi.Input['PolicySpecIngressMtlsArgs']] = None,
                 jwt: Optional[pulumi.Input['PolicySpecJwtArgs']] = None,
                 rate_limit: Optional[pulumi.Input['PolicySpecRateLimitArgs']] = None):
        """
        PolicySpec is the spec of the Policy resource. The spec includes multiple fields, where each field represents a different policy. Only one policy (field) is allowed.
        :param pulumi.Input['PolicySpecAccessControlArgs'] access_control: AccessControl defines an access policy based on the source IP of a request.
        :param pulumi.Input['PolicySpecEgressMtlsArgs'] egress_mtls: EgressMTLS defines an Egress MTLS policy.
        :param pulumi.Input['PolicySpecIngressMtlsArgs'] ingress_mtls: IngressMTLS defines an Ingress MTLS policy.
        :param pulumi.Input['PolicySpecJwtArgs'] jwt: JWTAuth holds JWT authentication configuration.
        :param pulumi.Input['PolicySpecRateLimitArgs'] rate_limit: RateLimit defines a rate limit policy.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if egress_mtls is not None:
            pulumi.set(__self__, "egress_mtls", egress_mtls)
        if ingress_mtls is not None:
            pulumi.set(__self__, "ingress_mtls", ingress_mtls)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input['PolicySpecAccessControlArgs']]:
        """
        AccessControl defines an access policy based on the source IP of a request.
        """
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input['PolicySpecAccessControlArgs']]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter(name="egressMTLS")
    def egress_mtls(self) -> Optional[pulumi.Input['PolicySpecEgressMtlsArgs']]:
        """
        EgressMTLS defines an Egress MTLS policy.
        """
        return pulumi.get(self, "egress_mtls")

    @egress_mtls.setter
    def egress_mtls(self, value: Optional[pulumi.Input['PolicySpecEgressMtlsArgs']]):
        pulumi.set(self, "egress_mtls", value)

    @property
    @pulumi.getter(name="ingressMTLS")
    def ingress_mtls(self) -> Optional[pulumi.Input['PolicySpecIngressMtlsArgs']]:
        """
        IngressMTLS defines an Ingress MTLS policy.
        """
        return pulumi.get(self, "ingress_mtls")

    @ingress_mtls.setter
    def ingress_mtls(self, value: Optional[pulumi.Input['PolicySpecIngressMtlsArgs']]):
        pulumi.set(self, "ingress_mtls", value)

    @property
    @pulumi.getter
    def jwt(self) -> Optional[pulumi.Input['PolicySpecJwtArgs']]:
        """
        JWTAuth holds JWT authentication configuration.
        """
        return pulumi.get(self, "jwt")

    @jwt.setter
    def jwt(self, value: Optional[pulumi.Input['PolicySpecJwtArgs']]):
        pulumi.set(self, "jwt", value)

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input['PolicySpecRateLimitArgs']]:
        """
        RateLimit defines a rate limit policy.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input['PolicySpecRateLimitArgs']]):
        pulumi.set(self, "rate_limit", value)


@pulumi.input_type
class TransportServerSpecActionArgs:
    def __init__(__self__, *,
                 pass_: Optional[pulumi.Input[str]] = None):
        """
        TransportServerAction defines an action.
        """
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)


@pulumi.input_type
class TransportServerSpecListenerArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        TransportServerListener defines a listener for a TransportServer.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class TransportServerSpecSessionParametersArgs:
    def __init__(__self__, *,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        SessionParameters defines session parameters.
        """
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class TransportServerSpecTlsArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class TransportServerSpecUpstreamParametersArgs:
    def __init__(__self__, *,
                 connect_timeout: Optional[pulumi.Input[str]] = None,
                 next_upstream: Optional[pulumi.Input[bool]] = None,
                 next_upstream_timeout: Optional[pulumi.Input[str]] = None,
                 next_upstream_tries: Optional[pulumi.Input[int]] = None,
                 udp_requests: Optional[pulumi.Input[int]] = None,
                 udp_responses: Optional[pulumi.Input[int]] = None):
        """
        UpstreamParameters defines parameters for an upstream.
        """
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if next_upstream is not None:
            pulumi.set(__self__, "next_upstream", next_upstream)
        if next_upstream_timeout is not None:
            pulumi.set(__self__, "next_upstream_timeout", next_upstream_timeout)
        if next_upstream_tries is not None:
            pulumi.set(__self__, "next_upstream_tries", next_upstream_tries)
        if udp_requests is not None:
            pulumi.set(__self__, "udp_requests", udp_requests)
        if udp_responses is not None:
            pulumi.set(__self__, "udp_responses", udp_responses)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="nextUpstream")
    def next_upstream(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "next_upstream")

    @next_upstream.setter
    def next_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "next_upstream", value)

    @property
    @pulumi.getter(name="nextUpstreamTimeout")
    def next_upstream_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_upstream_timeout")

    @next_upstream_timeout.setter
    def next_upstream_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_upstream_timeout", value)

    @property
    @pulumi.getter(name="nextUpstreamTries")
    def next_upstream_tries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "next_upstream_tries")

    @next_upstream_tries.setter
    def next_upstream_tries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "next_upstream_tries", value)

    @property
    @pulumi.getter(name="udpRequests")
    def udp_requests(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "udp_requests")

    @udp_requests.setter
    def udp_requests(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_requests", value)

    @property
    @pulumi.getter(name="udpResponses")
    def udp_responses(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "udp_responses")

    @udp_responses.setter
    def udp_responses(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "udp_responses", value)


@pulumi.input_type
class TransportServerSpecUpstreamsHealthCheckMatchArgs:
    def __init__(__self__, *,
                 expect: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None):
        """
        TransportServerMatch defines the parameters of a custom health check.
        """
        if expect is not None:
            pulumi.set(__self__, "expect", expect)
        if send is not None:
            pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def expect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expect")

    @expect.setter
    def expect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expect", value)

    @property
    @pulumi.getter
    def send(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send")

    @send.setter
    def send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send", value)


@pulumi.input_type
class TransportServerSpecUpstreamsHealthCheckArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 fails: Optional[pulumi.Input[int]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 jitter: Optional[pulumi.Input[str]] = None,
                 match: Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckMatchArgs']] = None,
                 passes: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        :param pulumi.Input['TransportServerSpecUpstreamsHealthCheckMatchArgs'] match: TransportServerMatch defines the parameters of a custom health check.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if fails is not None:
            pulumi.set(__self__, "fails", fails)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if jitter is not None:
            pulumi.set(__self__, "jitter", jitter)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def fails(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fails")

    @fails.setter
    def fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fails", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def jitter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jitter")

    @jitter.setter
    def jitter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jitter", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckMatchArgs']]:
        """
        TransportServerMatch defines the parameters of a custom health check.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckMatchArgs']]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def passes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "passes")

    @passes.setter
    def passes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "passes", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class TransportServerSpecUpstreamsArgs:
    def __init__(__self__, *,
                 backup: Optional[pulumi.Input[str]] = None,
                 backup_port: Optional[pulumi.Input[int]] = None,
                 fail_timeout: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckArgs']] = None,
                 load_balancing_method: Optional[pulumi.Input[str]] = None,
                 max_conns: Optional[pulumi.Input[int]] = None,
                 max_fails: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        TransportServerUpstream defines an upstream.
        :param pulumi.Input['TransportServerSpecUpstreamsHealthCheckArgs'] health_check: TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if backup_port is not None:
            pulumi.set(__self__, "backup_port", backup_port)
        if fail_timeout is not None:
            pulumi.set(__self__, "fail_timeout", fail_timeout)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if load_balancing_method is not None:
            pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        if max_conns is not None:
            pulumi.set(__self__, "max_conns", max_conns)
        if max_fails is not None:
            pulumi.set(__self__, "max_fails", max_fails)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="backupPort")
    def backup_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backup_port")

    @backup_port.setter
    def backup_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_port", value)

    @property
    @pulumi.getter(name="failTimeout")
    def fail_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fail_timeout")

    @fail_timeout.setter
    def fail_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_timeout", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckArgs']]:
        """
        TransportServerHealthCheck defines the parameters for active Upstream HealthChecks.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['TransportServerSpecUpstreamsHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancing_method")

    @load_balancing_method.setter
    def load_balancing_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_method", value)

    @property
    @pulumi.getter(name="maxConns")
    def max_conns(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_conns")

    @max_conns.setter
    def max_conns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_conns", value)

    @property
    @pulumi.getter(name="maxFails")
    def max_fails(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_fails")

    @max_fails.setter
    def max_fails(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_fails", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class TransportServerSpecArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['TransportServerSpecActionArgs']] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 ingress_class_name: Optional[pulumi.Input[str]] = None,
                 listener: Optional[pulumi.Input['TransportServerSpecListenerArgs']] = None,
                 server_snippets: Optional[pulumi.Input[str]] = None,
                 session_parameters: Optional[pulumi.Input['TransportServerSpecSessionParametersArgs']] = None,
                 stream_snippets: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['TransportServerSpecTlsArgs']] = None,
                 upstream_parameters: Optional[pulumi.Input['TransportServerSpecUpstreamParametersArgs']] = None,
                 upstreams: Optional[pulumi.Input[Sequence[pulumi.Input['TransportServerSpecUpstreamsArgs']]]] = None):
        """
        TransportServerSpec is the spec of the TransportServer resource.
        :param pulumi.Input['TransportServerSpecActionArgs'] action: TransportServerAction defines an action.
        :param pulumi.Input['TransportServerSpecListenerArgs'] listener: TransportServerListener defines a listener for a TransportServer.
        :param pulumi.Input['TransportServerSpecSessionParametersArgs'] session_parameters: SessionParameters defines session parameters.
        :param pulumi.Input['TransportServerSpecTlsArgs'] tls: TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        :param pulumi.Input['TransportServerSpecUpstreamParametersArgs'] upstream_parameters: UpstreamParameters defines parameters for an upstream.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if server_snippets is not None:
            pulumi.set(__self__, "server_snippets", server_snippets)
        if session_parameters is not None:
            pulumi.set(__self__, "session_parameters", session_parameters)
        if stream_snippets is not None:
            pulumi.set(__self__, "stream_snippets", stream_snippets)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if upstream_parameters is not None:
            pulumi.set(__self__, "upstream_parameters", upstream_parameters)
        if upstreams is not None:
            pulumi.set(__self__, "upstreams", upstreams)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['TransportServerSpecActionArgs']]:
        """
        TransportServerAction defines an action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['TransportServerSpecActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ingress_class_name")

    @ingress_class_name.setter
    def ingress_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingress_class_name", value)

    @property
    @pulumi.getter
    def listener(self) -> Optional[pulumi.Input['TransportServerSpecListenerArgs']]:
        """
        TransportServerListener defines a listener for a TransportServer.
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: Optional[pulumi.Input['TransportServerSpecListenerArgs']]):
        pulumi.set(self, "listener", value)

    @property
    @pulumi.getter(name="serverSnippets")
    def server_snippets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_snippets")

    @server_snippets.setter
    def server_snippets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_snippets", value)

    @property
    @pulumi.getter(name="sessionParameters")
    def session_parameters(self) -> Optional[pulumi.Input['TransportServerSpecSessionParametersArgs']]:
        """
        SessionParameters defines session parameters.
        """
        return pulumi.get(self, "session_parameters")

    @session_parameters.setter
    def session_parameters(self, value: Optional[pulumi.Input['TransportServerSpecSessionParametersArgs']]):
        pulumi.set(self, "session_parameters", value)

    @property
    @pulumi.getter(name="streamSnippets")
    def stream_snippets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stream_snippets")

    @stream_snippets.setter
    def stream_snippets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_snippets", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['TransportServerSpecTlsArgs']]:
        """
        TransportServerTLS defines TransportServerTLS configuration for a TransportServer.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['TransportServerSpecTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter(name="upstreamParameters")
    def upstream_parameters(self) -> Optional[pulumi.Input['TransportServerSpecUpstreamParametersArgs']]:
        """
        UpstreamParameters defines parameters for an upstream.
        """
        return pulumi.get(self, "upstream_parameters")

    @upstream_parameters.setter
    def upstream_parameters(self, value: Optional[pulumi.Input['TransportServerSpecUpstreamParametersArgs']]):
        pulumi.set(self, "upstream_parameters", value)

    @property
    @pulumi.getter
    def upstreams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransportServerSpecUpstreamsArgs']]]]:
        return pulumi.get(self, "upstreams")

    @upstreams.setter
    def upstreams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransportServerSpecUpstreamsArgs']]]]):
        pulumi.set(self, "upstreams", value)


@pulumi.input_type
class TransportServerStatusArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        TransportServerStatus defines the status for the TransportServer resource.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


