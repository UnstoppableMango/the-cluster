# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ExtensionConfigSpec',
    'ExtensionConfigSpecClientConfig',
    'ExtensionConfigSpecClientConfigService',
    'ExtensionConfigSpecNamespaceSelector',
    'ExtensionConfigSpecNamespaceSelectorMatchExpressions',
    'ExtensionConfigStatus',
    'ExtensionConfigStatusConditions',
    'ExtensionConfigStatusHandlers',
    'ExtensionConfigStatusHandlersRequestHook',
]

@pulumi.output_type
class ExtensionConfigSpec(dict):
    """
    ExtensionConfigSpec is the desired state of the ExtensionConfig
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientConfig":
            suggest = "client_config"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionConfigSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionConfigSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionConfigSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_config: 'outputs.ExtensionConfigSpecClientConfig',
                 namespace_selector: Optional['outputs.ExtensionConfigSpecNamespaceSelector'] = None,
                 settings: Optional[Mapping[str, str]] = None):
        """
        ExtensionConfigSpec is the desired state of the ExtensionConfig
        :param 'ExtensionConfigSpecClientConfigArgs' client_config: ClientConfig defines how to communicate with the Extension server.
        :param 'ExtensionConfigSpecNamespaceSelectorArgs' namespace_selector: NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
        :param Mapping[str, str] settings: Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
        """
        pulumi.set(__self__, "client_config", client_config)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="clientConfig")
    def client_config(self) -> 'outputs.ExtensionConfigSpecClientConfig':
        """
        ClientConfig defines how to communicate with the Extension server.
        """
        return pulumi.get(self, "client_config")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional['outputs.ExtensionConfigSpecNamespaceSelector']:
        """
        NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
        """
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def settings(self) -> Optional[Mapping[str, str]]:
        """
        Settings defines key value pairs to be passed to all calls to all supported RuntimeExtensions. Note: Settings can be overridden on the ClusterClass.
        """
        return pulumi.get(self, "settings")


@pulumi.output_type
class ExtensionConfigSpecClientConfig(dict):
    """
    ClientConfig defines how to communicate with the Extension server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caBundle":
            suggest = "ca_bundle"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionConfigSpecClientConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionConfigSpecClientConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionConfigSpecClientConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_bundle: Optional[str] = None,
                 service: Optional['outputs.ExtensionConfigSpecClientConfigService'] = None,
                 url: Optional[str] = None):
        """
        ClientConfig defines how to communicate with the Extension server.
        :param str ca_bundle: CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.
        :param 'ExtensionConfigSpecClientConfigServiceArgs' service: Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified. 
                If the Extension server is running within a cluster, then you should use `service`.
        :param str url: URL gives the location of the Extension server, in standard URL form (`scheme://host:port/path`). Note: Exactly one of `url` or `service` must be specified. 
                The scheme must be "https". 
                The `host` should not refer to a service running in the cluster; use the `service` field instead. 
                A path is optional, and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path. 
                Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed either.
        """
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[str]:
        """
        CABundle is a PEM encoded CA bundle which will be used to validate the Extension server's server certificate.
        """
        return pulumi.get(self, "ca_bundle")

    @property
    @pulumi.getter
    def service(self) -> Optional['outputs.ExtensionConfigSpecClientConfigService']:
        """
        Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified. 
         If the Extension server is running within a cluster, then you should use `service`.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL gives the location of the Extension server, in standard URL form (`scheme://host:port/path`). Note: Exactly one of `url` or `service` must be specified. 
         The scheme must be "https". 
         The `host` should not refer to a service running in the cluster; use the `service` field instead. 
         A path is optional, and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path. 
         Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed either.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ExtensionConfigSpecClientConfigService(dict):
    """
    Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified. 
     If the Extension server is running within a cluster, then you should use `service`.
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 path: Optional[str] = None,
                 port: Optional[int] = None):
        """
        Service is a reference to the Kubernetes service for the Extension server. Note: Exactly one of `url` or `service` must be specified. 
         If the Extension server is running within a cluster, then you should use `service`.
        :param str name: Name is the name of the service.
        :param str namespace: Namespace is the namespace of the service.
        :param str path: Path is an optional URL path and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
        :param int port: Port is the port on the service that's hosting the Extension server. Defaults to 443. Port should be a valid port number (1-65535, inclusive).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace is the namespace of the service.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path is an optional URL path and if present may be any string permissible in a URL. If a path is set it will be used as prefix to the hook-specific path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the port on the service that's hosting the Extension server. Defaults to 443. Port should be a valid port number (1-65535, inclusive).
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ExtensionConfigSpecNamespaceSelector(dict):
    """
    NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionConfigSpecNamespaceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionConfigSpecNamespaceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionConfigSpecNamespaceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ExtensionConfigSpecNamespaceSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        NamespaceSelector decides whether to call the hook for an object based on whether the namespace for that object matches the selector. Defaults to the empty LabelSelector, which matches all objects.
        :param Sequence['ExtensionConfigSpecNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ExtensionConfigSpecNamespaceSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ExtensionConfigSpecNamespaceSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ExtensionConfigStatus(dict):
    """
    ExtensionConfigStatus is the current state of the ExtensionConfig
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ExtensionConfigStatusConditions']] = None,
                 handlers: Optional[Sequence['outputs.ExtensionConfigStatusHandlers']] = None):
        """
        ExtensionConfigStatus is the current state of the ExtensionConfig
        :param Sequence['ExtensionConfigStatusConditionsArgs'] conditions: Conditions define the current service state of the ExtensionConfig.
        :param Sequence['ExtensionConfigStatusHandlersArgs'] handlers: Handlers defines the current ExtensionHandlers supported by an Extension.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if handlers is not None:
            pulumi.set(__self__, "handlers", handlers)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ExtensionConfigStatusConditions']]:
        """
        Conditions define the current service state of the ExtensionConfig.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def handlers(self) -> Optional[Sequence['outputs.ExtensionConfigStatusHandlers']]:
        """
        Handlers defines the current ExtensionHandlers supported by an Extension.
        """
        return pulumi.get(self, "handlers")


@pulumi.output_type
class ExtensionConfigStatusConditions(dict):
    """
    Condition defines an observation of a Cluster API resource operational state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionConfigStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionConfigStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionConfigStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param str last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param str message: A human readable message indicating details about the transition. This field may be empty.
        :param str reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param str severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class ExtensionConfigStatusHandlers(dict):
    """
    ExtensionHandler specifies the details of a handler for a particular runtime hook registered by an Extension server.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestHook":
            suggest = "request_hook"
        elif key == "failurePolicy":
            suggest = "failure_policy"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionConfigStatusHandlers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionConfigStatusHandlers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionConfigStatusHandlers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 request_hook: 'outputs.ExtensionConfigStatusHandlersRequestHook',
                 failure_policy: Optional[str] = None,
                 timeout_seconds: Optional[int] = None):
        """
        ExtensionHandler specifies the details of a handler for a particular runtime hook registered by an Extension server.
        :param str name: Name is the unique name of the ExtensionHandler.
        :param 'ExtensionConfigStatusHandlersRequestHookArgs' request_hook: RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
        :param str failure_policy: FailurePolicy defines how failures in calls to the ExtensionHandler should be handled by a client. Defaults to Fail if not set.
        :param int timeout_seconds: TimeoutSeconds defines the timeout duration for client calls to the ExtensionHandler. Defaults to 10 is not set.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_hook", request_hook)
        if failure_policy is not None:
            pulumi.set(__self__, "failure_policy", failure_policy)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the unique name of the ExtensionHandler.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestHook")
    def request_hook(self) -> 'outputs.ExtensionConfigStatusHandlersRequestHook':
        """
        RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
        """
        return pulumi.get(self, "request_hook")

    @property
    @pulumi.getter(name="failurePolicy")
    def failure_policy(self) -> Optional[str]:
        """
        FailurePolicy defines how failures in calls to the ExtensionHandler should be handled by a client. Defaults to Fail if not set.
        """
        return pulumi.get(self, "failure_policy")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        TimeoutSeconds defines the timeout duration for client calls to the ExtensionHandler. Defaults to 10 is not set.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class ExtensionConfigStatusHandlersRequestHook(dict):
    """
    RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtensionConfigStatusHandlersRequestHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtensionConfigStatusHandlersRequestHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtensionConfigStatusHandlersRequestHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: str,
                 hook: str):
        """
        RequestHook defines the versioned runtime hook which this ExtensionHandler serves.
        :param str api_version: APIVersion is the group and version of the Hook.
        :param str hook: Hook is the name of the hook.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "hook", hook)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        APIVersion is the group and version of the Hook.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def hook(self) -> str:
        """
        Hook is the name of the hook.
        """
        return pulumi.get(self, "hook")


