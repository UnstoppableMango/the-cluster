# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'IPAddressClaimSpec',
    'IPAddressClaimSpecPoolRef',
    'IPAddressClaimStatus',
    'IPAddressClaimStatusAddressRef',
    'IPAddressClaimStatusConditions',
    'IPAddressSpec',
    'IPAddressSpecClaimRef',
    'IPAddressSpecPoolRef',
]

@pulumi.output_type
class IPAddressClaimSpec(dict):
    """
    IPAddressClaimSpec is the desired state of an IPAddressClaim.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolRef":
            suggest = "pool_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPAddressClaimSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPAddressClaimSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPAddressClaimSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pool_ref: 'outputs.IPAddressClaimSpecPoolRef'):
        """
        IPAddressClaimSpec is the desired state of an IPAddressClaim.
        :param 'IPAddressClaimSpecPoolRefArgs' pool_ref: PoolRef is a reference to the pool from which an IP address should be created.
        """
        pulumi.set(__self__, "pool_ref", pool_ref)

    @property
    @pulumi.getter(name="poolRef")
    def pool_ref(self) -> 'outputs.IPAddressClaimSpecPoolRef':
        """
        PoolRef is a reference to the pool from which an IP address should be created.
        """
        return pulumi.get(self, "pool_ref")


@pulumi.output_type
class IPAddressClaimSpecPoolRef(dict):
    """
    PoolRef is a reference to the pool from which an IP address should be created.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiGroup":
            suggest = "api_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPAddressClaimSpecPoolRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPAddressClaimSpecPoolRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPAddressClaimSpecPoolRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_group: str,
                 kind: str,
                 name: str):
        """
        PoolRef is a reference to the pool from which an IP address should be created.
        :param str api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        :param str kind: Kind is the type of resource being referenced
        :param str name: Name is the name of resource being referenced
        """
        pulumi.set(__self__, "api_group", api_group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> str:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IPAddressClaimStatus(dict):
    """
    IPAddressClaimStatus is the observed status of a IPAddressClaim.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressRef":
            suggest = "address_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPAddressClaimStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPAddressClaimStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPAddressClaimStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_ref: Optional['outputs.IPAddressClaimStatusAddressRef'] = None,
                 conditions: Optional[Sequence['outputs.IPAddressClaimStatusConditions']] = None):
        """
        IPAddressClaimStatus is the observed status of a IPAddressClaim.
        :param 'IPAddressClaimStatusAddressRefArgs' address_ref: AddressRef is a reference to the address that was created for this claim.
        :param Sequence['IPAddressClaimStatusConditionsArgs'] conditions: Conditions summarises the current state of the IPAddressClaim
        """
        if address_ref is not None:
            pulumi.set(__self__, "address_ref", address_ref)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter(name="addressRef")
    def address_ref(self) -> Optional['outputs.IPAddressClaimStatusAddressRef']:
        """
        AddressRef is a reference to the address that was created for this claim.
        """
        return pulumi.get(self, "address_ref")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.IPAddressClaimStatusConditions']]:
        """
        Conditions summarises the current state of the IPAddressClaim
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class IPAddressClaimStatusAddressRef(dict):
    """
    AddressRef is a reference to the address that was created for this claim.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        AddressRef is a reference to the address that was created for this claim.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IPAddressClaimStatusConditions(dict):
    """
    Condition defines an observation of a Cluster API resource operational state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPAddressClaimStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPAddressClaimStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPAddressClaimStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param str last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param str message: A human readable message indicating details about the transition. This field may be empty.
        :param str reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param str severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class IPAddressSpec(dict):
    """
    IPAddressSpec is the desired state of an IPAddress.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "claimRef":
            suggest = "claim_ref"
        elif key == "poolRef":
            suggest = "pool_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPAddressSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPAddressSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPAddressSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 claim_ref: 'outputs.IPAddressSpecClaimRef',
                 pool_ref: 'outputs.IPAddressSpecPoolRef',
                 prefix: int,
                 gateway: Optional[str] = None):
        """
        IPAddressSpec is the desired state of an IPAddress.
        :param str address: Address is the IP address.
        :param 'IPAddressSpecClaimRefArgs' claim_ref: ClaimRef is a reference to the claim this IPAddress was created for.
        :param 'IPAddressSpecPoolRefArgs' pool_ref: PoolRef is a reference to the pool that this IPAddress was created from.
        :param int prefix: Prefix is the prefix of the address.
        :param str gateway: Gateway is the network gateway of the network the address is from.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "claim_ref", claim_ref)
        pulumi.set(__self__, "pool_ref", pool_ref)
        pulumi.set(__self__, "prefix", prefix)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Address is the IP address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="claimRef")
    def claim_ref(self) -> 'outputs.IPAddressSpecClaimRef':
        """
        ClaimRef is a reference to the claim this IPAddress was created for.
        """
        return pulumi.get(self, "claim_ref")

    @property
    @pulumi.getter(name="poolRef")
    def pool_ref(self) -> 'outputs.IPAddressSpecPoolRef':
        """
        PoolRef is a reference to the pool that this IPAddress was created from.
        """
        return pulumi.get(self, "pool_ref")

    @property
    @pulumi.getter
    def prefix(self) -> int:
        """
        Prefix is the prefix of the address.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Gateway is the network gateway of the network the address is from.
        """
        return pulumi.get(self, "gateway")


@pulumi.output_type
class IPAddressSpecClaimRef(dict):
    """
    ClaimRef is a reference to the claim this IPAddress was created for.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        ClaimRef is a reference to the claim this IPAddress was created for.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IPAddressSpecPoolRef(dict):
    """
    PoolRef is a reference to the pool that this IPAddress was created from.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiGroup":
            suggest = "api_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPAddressSpecPoolRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPAddressSpecPoolRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPAddressSpecPoolRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_group: str,
                 kind: str,
                 name: str):
        """
        PoolRef is a reference to the pool that this IPAddress was created from.
        :param str api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        :param str kind: Kind is the type of resource being referenced
        :param str name: Name is the name of resource being referenced
        """
        pulumi.set(__self__, "api_group", api_group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiGroup")
    def api_group(self) -> str:
        """
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        return pulumi.get(self, "api_group")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind is the type of resource being referenced
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of resource being referenced
        """
        return pulumi.get(self, "name")


