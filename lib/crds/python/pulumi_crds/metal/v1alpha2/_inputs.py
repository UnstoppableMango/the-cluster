# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'EnvironmentSpecInitrdArgs',
    'EnvironmentSpecKernelArgs',
    'EnvironmentSpecArgs',
    'EnvironmentStatusConditionsArgs',
    'EnvironmentStatusArgs',
    'ServerClassSpecConfigPatchesArgs',
    'ServerClassSpecEnvironmentRefArgs',
    'ServerClassSpecQualifiersHardwareComputeProcessorsArgs',
    'ServerClassSpecQualifiersHardwareComputeArgs',
    'ServerClassSpecQualifiersHardwareMemoryModulesArgs',
    'ServerClassSpecQualifiersHardwareMemoryArgs',
    'ServerClassSpecQualifiersHardwareNetworkInterfacesArgs',
    'ServerClassSpecQualifiersHardwareNetworkArgs',
    'ServerClassSpecQualifiersHardwareStorageDevicesArgs',
    'ServerClassSpecQualifiersHardwareStorageArgs',
    'ServerClassSpecQualifiersHardwareSystemArgs',
    'ServerClassSpecQualifiersHardwareArgs',
    'ServerClassSpecQualifiersArgs',
    'ServerClassSpecSelectorMatchExpressionsArgs',
    'ServerClassSpecSelectorArgs',
    'ServerClassSpecArgs',
    'ServerClassStatusArgs',
    'ServerSpecBmcPassFromSecretKeyRefArgs',
    'ServerSpecBmcPassFromArgs',
    'ServerSpecBmcUserFromSecretKeyRefArgs',
    'ServerSpecBmcUserFromArgs',
    'ServerSpecBmcArgs',
    'ServerSpecConfigPatchesArgs',
    'ServerSpecEnvironmentRefArgs',
    'ServerSpecHardwareComputeProcessorsArgs',
    'ServerSpecHardwareComputeArgs',
    'ServerSpecHardwareMemoryModulesArgs',
    'ServerSpecHardwareMemoryArgs',
    'ServerSpecHardwareNetworkInterfacesArgs',
    'ServerSpecHardwareNetworkArgs',
    'ServerSpecHardwareStorageDevicesArgs',
    'ServerSpecHardwareStorageArgs',
    'ServerSpecHardwareSystemArgs',
    'ServerSpecHardwareArgs',
    'ServerSpecManagementApiArgs',
    'ServerSpecArgs',
    'ServerStatusAddressesArgs',
    'ServerStatusConditionsArgs',
    'ServerStatusArgs',
]

@pulumi.input_type
class EnvironmentSpecInitrdArgs:
    def __init__(__self__, *,
                 sha512: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if sha512 is not None:
            pulumi.set(__self__, "sha512", sha512)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def sha512(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sha512")

    @sha512.setter
    def sha512(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha512", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class EnvironmentSpecKernelArgs:
    def __init__(__self__, *,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sha512: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if sha512 is not None:
            pulumi.set(__self__, "sha512", sha512)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def sha512(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sha512")

    @sha512.setter
    def sha512(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha512", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class EnvironmentSpecArgs:
    def __init__(__self__, *,
                 initrd: Optional[pulumi.Input['EnvironmentSpecInitrdArgs']] = None,
                 kernel: Optional[pulumi.Input['EnvironmentSpecKernelArgs']] = None):
        """
        EnvironmentSpec defines the desired state of Environment.
        """
        if initrd is not None:
            pulumi.set(__self__, "initrd", initrd)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)

    @property
    @pulumi.getter
    def initrd(self) -> Optional[pulumi.Input['EnvironmentSpecInitrdArgs']]:
        return pulumi.get(self, "initrd")

    @initrd.setter
    def initrd(self, value: Optional[pulumi.Input['EnvironmentSpecInitrdArgs']]):
        pulumi.set(self, "initrd", value)

    @property
    @pulumi.getter
    def kernel(self) -> Optional[pulumi.Input['EnvironmentSpecKernelArgs']]:
        return pulumi.get(self, "kernel")

    @kernel.setter
    def kernel(self, value: Optional[pulumi.Input['EnvironmentSpecKernelArgs']]):
        pulumi.set(self, "kernel", value)


@pulumi.input_type
class EnvironmentStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 sha512: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if sha512 is not None:
            pulumi.set(__self__, "sha512", sha512)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def sha512(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sha512")

    @sha512.setter
    def sha512(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha512", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class EnvironmentStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentStatusConditionsArgs']]]] = None):
        """
        EnvironmentStatus defines the observed state of Environment.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnvironmentStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ServerClassSpecConfigPatchesArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[str],
                 path: pulumi.Input[str],
                 value: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServerClassSpecEnvironmentRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Reference to the environment which should be used to provision the servers via this server class.
        :param pulumi.Input[str] api_version: API version of the referent.
        :param pulumi.Input[str] field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param pulumi.Input[str] kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param pulumi.Input[str] resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareComputeProcessorsArgs:
    def __init__(__self__, *,
                 core_count: Optional[pulumi.Input[int]] = None,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[int]] = None,
                 thread_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] speed: Speed is in megahertz (Mhz)
        """
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if thread_count is not None:
            pulumi.set(__self__, "thread_count", thread_count)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "core_count")

    @core_count.setter
    def core_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "core_count", value)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[int]]:
        """
        Speed is in megahertz (Mhz)
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="threadCount")
    def thread_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "thread_count")

    @thread_count.setter
    def thread_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thread_count", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareComputeArgs:
    def __init__(__self__, *,
                 processor_count: Optional[pulumi.Input[int]] = None,
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareComputeProcessorsArgs']]]] = None,
                 total_core_count: Optional[pulumi.Input[int]] = None,
                 total_thread_count: Optional[pulumi.Input[int]] = None):
        if processor_count is not None:
            pulumi.set(__self__, "processor_count", processor_count)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if total_core_count is not None:
            pulumi.set(__self__, "total_core_count", total_core_count)
        if total_thread_count is not None:
            pulumi.set(__self__, "total_thread_count", total_thread_count)

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "processor_count")

    @processor_count.setter
    def processor_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "processor_count", value)

    @property
    @pulumi.getter
    def processors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareComputeProcessorsArgs']]]]:
        return pulumi.get(self, "processors")

    @processors.setter
    def processors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareComputeProcessorsArgs']]]]):
        pulumi.set(self, "processors", value)

    @property
    @pulumi.getter(name="totalCoreCount")
    def total_core_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "total_core_count")

    @total_core_count.setter
    def total_core_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_core_count", value)

    @property
    @pulumi.getter(name="totalThreadCount")
    def total_thread_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "total_thread_count")

    @total_thread_count.setter
    def total_thread_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_thread_count", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareMemoryModulesArgs:
    def __init__(__self__, *,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 speed: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] size: Size is in megabytes (MB)
        :param pulumi.Input[int] speed: Speed is in megatransfers per second (MT/S)
        """
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Size is in megabytes (MB)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[int]]:
        """
        Speed is in megatransfers per second (MT/S)
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareMemoryArgs:
    def __init__(__self__, *,
                 module_count: Optional[pulumi.Input[int]] = None,
                 modules: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareMemoryModulesArgs']]]] = None,
                 total_size: Optional[pulumi.Input[str]] = None):
        if module_count is not None:
            pulumi.set(__self__, "module_count", module_count)
        if modules is not None:
            pulumi.set(__self__, "modules", modules)
        if total_size is not None:
            pulumi.set(__self__, "total_size", total_size)

    @property
    @pulumi.getter(name="moduleCount")
    def module_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "module_count")

    @module_count.setter
    def module_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "module_count", value)

    @property
    @pulumi.getter
    def modules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareMemoryModulesArgs']]]]:
        return pulumi.get(self, "modules")

    @modules.setter
    def modules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareMemoryModulesArgs']]]]):
        pulumi.set(self, "modules", value)

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "total_size")

    @total_size.setter
    def total_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_size", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareNetworkInterfacesArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flags: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareNetworkArgs:
    def __init__(__self__, *,
                 interface_count: Optional[pulumi.Input[int]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareNetworkInterfacesArgs']]]] = None):
        if interface_count is not None:
            pulumi.set(__self__, "interface_count", interface_count)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)

    @property
    @pulumi.getter(name="interfaceCount")
    def interface_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interface_count")

    @interface_count.setter
    def interface_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interface_count", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareNetworkInterfacesArgs']]]]:
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareNetworkInterfacesArgs']]]]):
        pulumi.set(self, "interfaces", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareStorageDevicesArgs:
    def __init__(__self__, *,
                 device_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 wwid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] size: Size is in bytes
        """
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if wwid is not None:
            pulumi.set(__self__, "wwid", wwid)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Size is in bytes
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def wwid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wwid")

    @wwid.setter
    def wwid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wwid", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareStorageArgs:
    def __init__(__self__, *,
                 device_count: Optional[pulumi.Input[int]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareStorageDevicesArgs']]]] = None,
                 total_size: Optional[pulumi.Input[str]] = None):
        if device_count is not None:
            pulumi.set(__self__, "device_count", device_count)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if total_size is not None:
            pulumi.set(__self__, "total_size", total_size)

    @property
    @pulumi.getter(name="deviceCount")
    def device_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_count")

    @device_count.setter
    def device_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_count", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareStorageDevicesArgs']]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareStorageDevicesArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "total_size")

    @total_size.setter
    def total_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_size", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareSystemArgs:
    def __init__(__self__, *,
                 family: Optional[pulumi.Input[str]] = None,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 sku_number: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if family is not None:
            pulumi.set(__self__, "family", family)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if sku_number is not None:
            pulumi.set(__self__, "sku_number", sku_number)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="skuNumber")
    def sku_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sku_number")

    @sku_number.setter
    def sku_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku_number", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ServerClassSpecQualifiersHardwareArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareComputeArgs']] = None,
                 memory: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareMemoryArgs']] = None,
                 network: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareNetworkArgs']] = None,
                 storage: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareStorageArgs']] = None,
                 system: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareSystemArgs']] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['ServerClassSpecQualifiersHardwareComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['ServerClassSpecQualifiersHardwareMemoryArgs']]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ServerClassSpecQualifiersHardwareNetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['ServerClassSpecQualifiersHardwareStorageArgs']]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input['ServerClassSpecQualifiersHardwareSystemArgs']]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input['ServerClassSpecQualifiersHardwareSystemArgs']]):
        pulumi.set(self, "system", value)


@pulumi.input_type
class ServerClassSpecQualifiersArgs:
    def __init__(__self__, *,
                 hardware: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareArgs']]]] = None,
                 label_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        """
        Qualifiers to match on the server spec. 
         If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
        """
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if label_selectors is not None:
            pulumi.set(__self__, "label_selectors", label_selectors)

    @property
    @pulumi.getter
    def hardware(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareArgs']]]]:
        return pulumi.get(self, "hardware")

    @hardware.setter
    def hardware(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecQualifiersHardwareArgs']]]]):
        pulumi.set(self, "hardware", value)

    @property
    @pulumi.getter(name="labelSelectors")
    def label_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "label_selectors")

    @label_selectors.setter
    def label_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "label_selectors", value)


@pulumi.input_type
class ServerClassSpecSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServerClassSpecSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
        :param pulumi.Input[Sequence[pulumi.Input['ServerClassSpecSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ServerClassSpecArgs:
    def __init__(__self__, *,
                 boot_from_disk_method: Optional[pulumi.Input[str]] = None,
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecConfigPatchesArgs']]]] = None,
                 environment_ref: Optional[pulumi.Input['ServerClassSpecEnvironmentRefArgs']] = None,
                 qualifiers: Optional[pulumi.Input['ServerClassSpecQualifiersArgs']] = None,
                 selector: Optional[pulumi.Input['ServerClassSpecSelectorArgs']] = None):
        """
        ServerClassSpec defines the desired state of ServerClass.
        :param pulumi.Input[str] boot_from_disk_method: BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
                If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
        :param pulumi.Input[Sequence[pulumi.Input['ServerClassSpecConfigPatchesArgs']]] config_patches: Set of config patches to apply to the machine configuration to the servers provisioned via this server class.
        :param pulumi.Input['ServerClassSpecEnvironmentRefArgs'] environment_ref: Reference to the environment which should be used to provision the servers via this server class.
        :param pulumi.Input['ServerClassSpecQualifiersArgs'] qualifiers: Qualifiers to match on the server spec. 
                If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
        :param pulumi.Input['ServerClassSpecSelectorArgs'] selector: Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
        """
        if boot_from_disk_method is not None:
            pulumi.set(__self__, "boot_from_disk_method", boot_from_disk_method)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if environment_ref is not None:
            pulumi.set(__self__, "environment_ref", environment_ref)
        if qualifiers is not None:
            pulumi.set(__self__, "qualifiers", qualifiers)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="bootFromDiskMethod")
    def boot_from_disk_method(self) -> Optional[pulumi.Input[str]]:
        """
        BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
         If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
        """
        return pulumi.get(self, "boot_from_disk_method")

    @boot_from_disk_method.setter
    def boot_from_disk_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_from_disk_method", value)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecConfigPatchesArgs']]]]:
        """
        Set of config patches to apply to the machine configuration to the servers provisioned via this server class.
        """
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerClassSpecConfigPatchesArgs']]]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter(name="environmentRef")
    def environment_ref(self) -> Optional[pulumi.Input['ServerClassSpecEnvironmentRefArgs']]:
        """
        Reference to the environment which should be used to provision the servers via this server class.
        """
        return pulumi.get(self, "environment_ref")

    @environment_ref.setter
    def environment_ref(self, value: Optional[pulumi.Input['ServerClassSpecEnvironmentRefArgs']]):
        pulumi.set(self, "environment_ref", value)

    @property
    @pulumi.getter
    def qualifiers(self) -> Optional[pulumi.Input['ServerClassSpecQualifiersArgs']]:
        """
        Qualifiers to match on the server spec. 
         If qualifiers are empty, they match all servers. Server should match both qualifiers and selector conditions to be included into the server class.
        """
        return pulumi.get(self, "qualifiers")

    @qualifiers.setter
    def qualifiers(self, value: Optional[pulumi.Input['ServerClassSpecQualifiersArgs']]):
        pulumi.set(self, "qualifiers", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['ServerClassSpecSelectorArgs']]:
        """
        Label selector to filter the matching servers based on labels. A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['ServerClassSpecSelectorArgs']]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class ServerClassStatusArgs:
    def __init__(__self__, *,
                 servers_available: pulumi.Input[Sequence[pulumi.Input[str]]],
                 servers_in_use: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        ServerClassStatus defines the observed state of ServerClass.
        """
        pulumi.set(__self__, "servers_available", servers_available)
        pulumi.set(__self__, "servers_in_use", servers_in_use)

    @property
    @pulumi.getter(name="serversAvailable")
    def servers_available(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "servers_available")

    @servers_available.setter
    def servers_available(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "servers_available", value)

    @property
    @pulumi.getter(name="serversInUse")
    def servers_in_use(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "servers_in_use")

    @servers_in_use.setter
    def servers_in_use(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "servers_in_use", value)


@pulumi.input_type
class ServerSpecBmcPassFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        SecretKeyRef defines a ref to a given key within a secret.
        :param pulumi.Input[str] key: Key to select
        :param pulumi.Input[str] namespace: Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key to select
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ServerSpecBmcPassFromArgs:
    def __init__(__self__, *,
                 secret_key_ref: Optional[pulumi.Input['ServerSpecBmcPassFromSecretKeyRefArgs']] = None):
        """
        Source for the password value. Cannot be used if Pass is not empty.
        :param pulumi.Input['ServerSpecBmcPassFromSecretKeyRefArgs'] secret_key_ref: SecretKeyRef defines a ref to a given key within a secret.
        """
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['ServerSpecBmcPassFromSecretKeyRefArgs']]:
        """
        SecretKeyRef defines a ref to a given key within a secret.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['ServerSpecBmcPassFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class ServerSpecBmcUserFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        SecretKeyRef defines a ref to a given key within a secret.
        :param pulumi.Input[str] key: Key to select
        :param pulumi.Input[str] namespace: Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key to select
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace and name of credential secret nb: can't use namespacedname here b/c it doesn't have json tags in the struct :(
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ServerSpecBmcUserFromArgs:
    def __init__(__self__, *,
                 secret_key_ref: Optional[pulumi.Input['ServerSpecBmcUserFromSecretKeyRefArgs']] = None):
        """
        Source for the user value. Cannot be used if User is not empty.
        :param pulumi.Input['ServerSpecBmcUserFromSecretKeyRefArgs'] secret_key_ref: SecretKeyRef defines a ref to a given key within a secret.
        """
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['ServerSpecBmcUserFromSecretKeyRefArgs']]:
        """
        SecretKeyRef defines a ref to a given key within a secret.
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['ServerSpecBmcUserFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class ServerSpecBmcArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 interface: Optional[pulumi.Input[str]] = None,
                 pass_: Optional[pulumi.Input[str]] = None,
                 pass_from: Optional[pulumi.Input['ServerSpecBmcPassFromArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_from: Optional[pulumi.Input['ServerSpecBmcUserFromArgs']] = None):
        """
        BMC defines data about how to talk to the node via ipmitool.
        :param pulumi.Input[str] endpoint: BMC endpoint.
        :param pulumi.Input[str] interface: BMC Interface Type. Defaults to lanplus.
        :param pulumi.Input[str] pass_: BMC password value.
        :param pulumi.Input['ServerSpecBmcPassFromArgs'] pass_from: Source for the password value. Cannot be used if Pass is not empty.
        :param pulumi.Input[int] port: BMC port. Defaults to 623.
        :param pulumi.Input[str] user: BMC user value.
        :param pulumi.Input['ServerSpecBmcUserFromArgs'] user_from: Source for the user value. Cannot be used if User is not empty.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if pass_ is not None:
            pulumi.set(__self__, "pass_", pass_)
        if pass_from is not None:
            pulumi.set(__self__, "pass_from", pass_from)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_from is not None:
            pulumi.set(__self__, "user_from", user_from)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        BMC endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        BMC Interface Type. Defaults to lanplus.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="pass")
    def pass_(self) -> Optional[pulumi.Input[str]]:
        """
        BMC password value.
        """
        return pulumi.get(self, "pass_")

    @pass_.setter
    def pass_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pass_", value)

    @property
    @pulumi.getter(name="passFrom")
    def pass_from(self) -> Optional[pulumi.Input['ServerSpecBmcPassFromArgs']]:
        """
        Source for the password value. Cannot be used if Pass is not empty.
        """
        return pulumi.get(self, "pass_from")

    @pass_from.setter
    def pass_from(self, value: Optional[pulumi.Input['ServerSpecBmcPassFromArgs']]):
        pulumi.set(self, "pass_from", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        BMC port. Defaults to 623.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        BMC user value.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="userFrom")
    def user_from(self) -> Optional[pulumi.Input['ServerSpecBmcUserFromArgs']]:
        """
        Source for the user value. Cannot be used if User is not empty.
        """
        return pulumi.get(self, "user_from")

    @user_from.setter
    def user_from(self, value: Optional[pulumi.Input['ServerSpecBmcUserFromArgs']]):
        pulumi.set(self, "user_from", value)


@pulumi.input_type
class ServerSpecConfigPatchesArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[str],
                 path: pulumi.Input[str],
                 value: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> pulumi.Input[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServerSpecEnvironmentRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
        :param pulumi.Input[str] api_version: API version of the referent.
        :param pulumi.Input[str] field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param pulumi.Input[str] kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param pulumi.Input[str] resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ServerSpecHardwareComputeProcessorsArgs:
    def __init__(__self__, *,
                 core_count: Optional[pulumi.Input[int]] = None,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[int]] = None,
                 thread_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] speed: Speed is in megahertz (Mhz)
        """
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if thread_count is not None:
            pulumi.set(__self__, "thread_count", thread_count)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "core_count")

    @core_count.setter
    def core_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "core_count", value)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[int]]:
        """
        Speed is in megahertz (Mhz)
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="threadCount")
    def thread_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "thread_count")

    @thread_count.setter
    def thread_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thread_count", value)


@pulumi.input_type
class ServerSpecHardwareComputeArgs:
    def __init__(__self__, *,
                 processor_count: Optional[pulumi.Input[int]] = None,
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareComputeProcessorsArgs']]]] = None,
                 total_core_count: Optional[pulumi.Input[int]] = None,
                 total_thread_count: Optional[pulumi.Input[int]] = None):
        if processor_count is not None:
            pulumi.set(__self__, "processor_count", processor_count)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)
        if total_core_count is not None:
            pulumi.set(__self__, "total_core_count", total_core_count)
        if total_thread_count is not None:
            pulumi.set(__self__, "total_thread_count", total_thread_count)

    @property
    @pulumi.getter(name="processorCount")
    def processor_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "processor_count")

    @processor_count.setter
    def processor_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "processor_count", value)

    @property
    @pulumi.getter
    def processors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareComputeProcessorsArgs']]]]:
        return pulumi.get(self, "processors")

    @processors.setter
    def processors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareComputeProcessorsArgs']]]]):
        pulumi.set(self, "processors", value)

    @property
    @pulumi.getter(name="totalCoreCount")
    def total_core_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "total_core_count")

    @total_core_count.setter
    def total_core_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_core_count", value)

    @property
    @pulumi.getter(name="totalThreadCount")
    def total_thread_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "total_thread_count")

    @total_thread_count.setter
    def total_thread_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_thread_count", value)


@pulumi.input_type
class ServerSpecHardwareMemoryModulesArgs:
    def __init__(__self__, *,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 speed: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] size: Size is in megabytes (MB)
        :param pulumi.Input[int] speed: Speed is in megatransfers per second (MT/S)
        """
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Size is in megabytes (MB)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[int]]:
        """
        Speed is in megatransfers per second (MT/S)
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServerSpecHardwareMemoryArgs:
    def __init__(__self__, *,
                 module_count: Optional[pulumi.Input[int]] = None,
                 modules: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareMemoryModulesArgs']]]] = None,
                 total_size: Optional[pulumi.Input[str]] = None):
        if module_count is not None:
            pulumi.set(__self__, "module_count", module_count)
        if modules is not None:
            pulumi.set(__self__, "modules", modules)
        if total_size is not None:
            pulumi.set(__self__, "total_size", total_size)

    @property
    @pulumi.getter(name="moduleCount")
    def module_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "module_count")

    @module_count.setter
    def module_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "module_count", value)

    @property
    @pulumi.getter
    def modules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareMemoryModulesArgs']]]]:
        return pulumi.get(self, "modules")

    @modules.setter
    def modules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareMemoryModulesArgs']]]]):
        pulumi.set(self, "modules", value)

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "total_size")

    @total_size.setter
    def total_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_size", value)


@pulumi.input_type
class ServerSpecHardwareNetworkInterfacesArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flags: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServerSpecHardwareNetworkArgs:
    def __init__(__self__, *,
                 interface_count: Optional[pulumi.Input[int]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareNetworkInterfacesArgs']]]] = None):
        if interface_count is not None:
            pulumi.set(__self__, "interface_count", interface_count)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)

    @property
    @pulumi.getter(name="interfaceCount")
    def interface_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interface_count")

    @interface_count.setter
    def interface_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interface_count", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareNetworkInterfacesArgs']]]]:
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareNetworkInterfacesArgs']]]]):
        pulumi.set(self, "interfaces", value)


@pulumi.input_type
class ServerSpecHardwareStorageDevicesArgs:
    def __init__(__self__, *,
                 device_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 wwid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] size: Size is in bytes
        """
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if wwid is not None:
            pulumi.set(__self__, "wwid", wwid)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Size is in bytes
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def wwid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wwid")

    @wwid.setter
    def wwid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wwid", value)


@pulumi.input_type
class ServerSpecHardwareStorageArgs:
    def __init__(__self__, *,
                 device_count: Optional[pulumi.Input[int]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareStorageDevicesArgs']]]] = None,
                 total_size: Optional[pulumi.Input[str]] = None):
        if device_count is not None:
            pulumi.set(__self__, "device_count", device_count)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if total_size is not None:
            pulumi.set(__self__, "total_size", total_size)

    @property
    @pulumi.getter(name="deviceCount")
    def device_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_count")

    @device_count.setter
    def device_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_count", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareStorageDevicesArgs']]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecHardwareStorageDevicesArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "total_size")

    @total_size.setter
    def total_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_size", value)


@pulumi.input_type
class ServerSpecHardwareSystemArgs:
    def __init__(__self__, *,
                 family: Optional[pulumi.Input[str]] = None,
                 manufacturer: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 sku_number: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        if family is not None:
            pulumi.set(__self__, "family", family)
        if manufacturer is not None:
            pulumi.set(__self__, "manufacturer", manufacturer)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if sku_number is not None:
            pulumi.set(__self__, "sku_number", sku_number)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def manufacturer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manufacturer")

    @manufacturer.setter
    def manufacturer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manufacturer", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="skuNumber")
    def sku_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sku_number")

    @sku_number.setter
    def sku_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sku_number", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ServerSpecHardwareArgs:
    def __init__(__self__, *,
                 compute: Optional[pulumi.Input['ServerSpecHardwareComputeArgs']] = None,
                 memory: Optional[pulumi.Input['ServerSpecHardwareMemoryArgs']] = None,
                 network: Optional[pulumi.Input['ServerSpecHardwareNetworkArgs']] = None,
                 storage: Optional[pulumi.Input['ServerSpecHardwareStorageArgs']] = None,
                 system: Optional[pulumi.Input['ServerSpecHardwareSystemArgs']] = None):
        if compute is not None:
            pulumi.set(__self__, "compute", compute)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def compute(self) -> Optional[pulumi.Input['ServerSpecHardwareComputeArgs']]:
        return pulumi.get(self, "compute")

    @compute.setter
    def compute(self, value: Optional[pulumi.Input['ServerSpecHardwareComputeArgs']]):
        pulumi.set(self, "compute", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['ServerSpecHardwareMemoryArgs']]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['ServerSpecHardwareMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ServerSpecHardwareNetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ServerSpecHardwareNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['ServerSpecHardwareStorageArgs']]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['ServerSpecHardwareStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input['ServerSpecHardwareSystemArgs']]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input['ServerSpecHardwareSystemArgs']]):
        pulumi.set(self, "system", value)


@pulumi.input_type
class ServerSpecManagementApiArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str]):
        """
        ManagementAPI defines data about how to talk to the node via simple HTTP API.
        """
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)


@pulumi.input_type
class ServerSpecArgs:
    def __init__(__self__, *,
                 accepted: pulumi.Input[bool],
                 bmc: Optional[pulumi.Input['ServerSpecBmcArgs']] = None,
                 boot_from_disk_method: Optional[pulumi.Input[str]] = None,
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecConfigPatchesArgs']]]] = None,
                 cordoned: Optional[pulumi.Input[bool]] = None,
                 environment_ref: Optional[pulumi.Input['ServerSpecEnvironmentRefArgs']] = None,
                 hardware: Optional[pulumi.Input['ServerSpecHardwareArgs']] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 management_api: Optional[pulumi.Input['ServerSpecManagementApiArgs']] = None,
                 pxe_boot_always: Optional[pulumi.Input[bool]] = None,
                 pxe_mode: Optional[pulumi.Input[str]] = None):
        """
        ServerSpec defines the desired state of Server.
        :param pulumi.Input['ServerSpecBmcArgs'] bmc: BMC defines data about how to talk to the node via ipmitool.
        :param pulumi.Input[str] boot_from_disk_method: BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
                If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
        :param pulumi.Input['ServerSpecEnvironmentRefArgs'] environment_ref: ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
                Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
        :param pulumi.Input['ServerSpecManagementApiArgs'] management_api: ManagementAPI defines data about how to talk to the node via simple HTTP API.
        :param pulumi.Input[str] pxe_mode: PXEMode specifies the method to trigger PXE boot via IPMI. 
                If not set, controller default is used. Valid values: uefi, bios.
        """
        pulumi.set(__self__, "accepted", accepted)
        if bmc is not None:
            pulumi.set(__self__, "bmc", bmc)
        if boot_from_disk_method is not None:
            pulumi.set(__self__, "boot_from_disk_method", boot_from_disk_method)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if cordoned is not None:
            pulumi.set(__self__, "cordoned", cordoned)
        if environment_ref is not None:
            pulumi.set(__self__, "environment_ref", environment_ref)
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if management_api is not None:
            pulumi.set(__self__, "management_api", management_api)
        if pxe_boot_always is not None:
            pulumi.set(__self__, "pxe_boot_always", pxe_boot_always)
        if pxe_mode is not None:
            pulumi.set(__self__, "pxe_mode", pxe_mode)

    @property
    @pulumi.getter
    def accepted(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "accepted")

    @accepted.setter
    def accepted(self, value: pulumi.Input[bool]):
        pulumi.set(self, "accepted", value)

    @property
    @pulumi.getter
    def bmc(self) -> Optional[pulumi.Input['ServerSpecBmcArgs']]:
        """
        BMC defines data about how to talk to the node via ipmitool.
        """
        return pulumi.get(self, "bmc")

    @bmc.setter
    def bmc(self, value: Optional[pulumi.Input['ServerSpecBmcArgs']]):
        pulumi.set(self, "bmc", value)

    @property
    @pulumi.getter(name="bootFromDiskMethod")
    def boot_from_disk_method(self) -> Optional[pulumi.Input[str]]:
        """
        BootFromDiskMethod specifies the method to exit iPXE to force boot from disk. 
         If not set, controller default is used. Valid values: ipxe-exit, http-404, ipxe-sanboot.
        """
        return pulumi.get(self, "boot_from_disk_method")

    @boot_from_disk_method.setter
    def boot_from_disk_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_from_disk_method", value)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecConfigPatchesArgs']]]]:
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerSpecConfigPatchesArgs']]]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter
    def cordoned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cordoned")

    @cordoned.setter
    def cordoned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cordoned", value)

    @property
    @pulumi.getter(name="environmentRef")
    def environment_ref(self) -> Optional[pulumi.Input['ServerSpecEnvironmentRefArgs']]:
        """
        ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
        """
        return pulumi.get(self, "environment_ref")

    @environment_ref.setter
    def environment_ref(self, value: Optional[pulumi.Input['ServerSpecEnvironmentRefArgs']]):
        pulumi.set(self, "environment_ref", value)

    @property
    @pulumi.getter
    def hardware(self) -> Optional[pulumi.Input['ServerSpecHardwareArgs']]:
        return pulumi.get(self, "hardware")

    @hardware.setter
    def hardware(self, value: Optional[pulumi.Input['ServerSpecHardwareArgs']]):
        pulumi.set(self, "hardware", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="managementApi")
    def management_api(self) -> Optional[pulumi.Input['ServerSpecManagementApiArgs']]:
        """
        ManagementAPI defines data about how to talk to the node via simple HTTP API.
        """
        return pulumi.get(self, "management_api")

    @management_api.setter
    def management_api(self, value: Optional[pulumi.Input['ServerSpecManagementApiArgs']]):
        pulumi.set(self, "management_api", value)

    @property
    @pulumi.getter(name="pxeBootAlways")
    def pxe_boot_always(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pxe_boot_always")

    @pxe_boot_always.setter
    def pxe_boot_always(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pxe_boot_always", value)

    @property
    @pulumi.getter(name="pxeMode")
    def pxe_mode(self) -> Optional[pulumi.Input[str]]:
        """
        PXEMode specifies the method to trigger PXE boot via IPMI. 
         If not set, controller default is used. Valid values: uefi, bios.
        """
        return pulumi.get(self, "pxe_mode")

    @pxe_mode.setter
    def pxe_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pxe_mode", value)


@pulumi.input_type
class ServerStatusAddressesArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        NodeAddress contains information for the node's address.
        :param pulumi.Input[str] address: The node address.
        :param pulumi.Input[str] type: Node address type, one of Hostname, ExternalIP or InternalIP.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The node address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Node address type, one of Hostname, ExternalIP or InternalIP.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ServerStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition. This field may be empty.
        :param pulumi.Input[str] reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param pulumi.Input[str] severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class ServerStatusArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServerStatusAddressesArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServerStatusConditionsArgs']]]] = None,
                 in_use: Optional[pulumi.Input[bool]] = None,
                 is_clean: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[str]] = None,
                 ready: Optional[pulumi.Input[bool]] = None):
        """
        ServerStatus defines the observed state of Server.
        :param pulumi.Input[Sequence[pulumi.Input['ServerStatusAddressesArgs']]] addresses: Addresses lists discovered node IPs.
        :param pulumi.Input[Sequence[pulumi.Input['ServerStatusConditionsArgs']]] conditions: Conditions defines current service state of the Server.
        :param pulumi.Input[bool] in_use: InUse is true when server is assigned to some MetalMachine.
        :param pulumi.Input[bool] is_clean: IsClean is true when server disks are wiped.
        :param pulumi.Input[str] power: Power is the current power state of the server: "on", "off" or "unknown".
        :param pulumi.Input[bool] ready: Ready is true when server is accepted and in use.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if in_use is not None:
            pulumi.set(__self__, "in_use", in_use)
        if is_clean is not None:
            pulumi.set(__self__, "is_clean", is_clean)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerStatusAddressesArgs']]]]:
        """
        Addresses lists discovered node IPs.
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerStatusAddressesArgs']]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerStatusConditionsArgs']]]]:
        """
        Conditions defines current service state of the Server.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="inUse")
    def in_use(self) -> Optional[pulumi.Input[bool]]:
        """
        InUse is true when server is assigned to some MetalMachine.
        """
        return pulumi.get(self, "in_use")

    @in_use.setter
    def in_use(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "in_use", value)

    @property
    @pulumi.getter(name="isClean")
    def is_clean(self) -> Optional[pulumi.Input[bool]]:
        """
        IsClean is true when server disks are wiped.
        """
        return pulumi.get(self, "is_clean")

    @is_clean.setter
    def is_clean(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_clean", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[str]]:
        """
        Power is the current power state of the server: "on", "off" or "unknown".
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter
    def ready(self) -> Optional[pulumi.Input[bool]]:
        """
        Ready is true when server is accepted and in use.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready", value)


