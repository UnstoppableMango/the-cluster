# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'TalosControlPlaneSpec',
    'TalosControlPlaneSpecControlPlaneConfig',
    'TalosControlPlaneSpecControlPlaneConfigControlplane',
    'TalosControlPlaneSpecControlPlaneConfigControlplaneConfigPatches',
    'TalosControlPlaneSpecControlPlaneConfigControlplaneHostname',
    'TalosControlPlaneSpecControlPlaneConfigInit',
    'TalosControlPlaneSpecControlPlaneConfigInitConfigPatches',
    'TalosControlPlaneSpecControlPlaneConfigInitHostname',
    'TalosControlPlaneSpecInfrastructureTemplate',
    'TalosControlPlaneSpecRolloutStrategy',
    'TalosControlPlaneSpecRolloutStrategyRollingUpdate',
    'TalosControlPlaneStatus',
    'TalosControlPlaneStatusConditions',
]

@pulumi.output_type
class TalosControlPlaneSpec(dict):
    """
    TalosControlPlaneSpec defines the desired state of TalosControlPlane
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlPlaneConfig":
            suggest = "control_plane_config"
        elif key == "infrastructureTemplate":
            suggest = "infrastructure_template"
        elif key == "rolloutStrategy":
            suggest = "rollout_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosControlPlaneSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosControlPlaneSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosControlPlaneSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_plane_config: 'outputs.TalosControlPlaneSpecControlPlaneConfig',
                 infrastructure_template: 'outputs.TalosControlPlaneSpecInfrastructureTemplate',
                 version: str,
                 replicas: Optional[int] = None,
                 rollout_strategy: Optional['outputs.TalosControlPlaneSpecRolloutStrategy'] = None):
        """
        TalosControlPlaneSpec defines the desired state of TalosControlPlane
        :param 'TalosControlPlaneSpecControlPlaneConfigArgs' control_plane_config: ControlPlaneConfig is a two TalosConfigSpecs to use for initializing and joining machines to the control plane.
        :param 'TalosControlPlaneSpecInfrastructureTemplateArgs' infrastructure_template: InfrastructureTemplate is a required reference to a custom resource offered by an infrastructure provider.
        :param str version: Version defines the desired Kubernetes version.
        :param int replicas: Number of desired machines. Defaults to 1. When stacked etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members). This is a pointer to distinguish between explicit zero and not specified.
        :param 'TalosControlPlaneSpecRolloutStrategyArgs' rollout_strategy: The RolloutStrategy to use to replace control plane machines with new ones.
        """
        pulumi.set(__self__, "control_plane_config", control_plane_config)
        pulumi.set(__self__, "infrastructure_template", infrastructure_template)
        pulumi.set(__self__, "version", version)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if rollout_strategy is not None:
            pulumi.set(__self__, "rollout_strategy", rollout_strategy)

    @property
    @pulumi.getter(name="controlPlaneConfig")
    def control_plane_config(self) -> 'outputs.TalosControlPlaneSpecControlPlaneConfig':
        """
        ControlPlaneConfig is a two TalosConfigSpecs to use for initializing and joining machines to the control plane.
        """
        return pulumi.get(self, "control_plane_config")

    @property
    @pulumi.getter(name="infrastructureTemplate")
    def infrastructure_template(self) -> 'outputs.TalosControlPlaneSpecInfrastructureTemplate':
        """
        InfrastructureTemplate is a required reference to a custom resource offered by an infrastructure provider.
        """
        return pulumi.get(self, "infrastructure_template")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version defines the desired Kubernetes version.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        """
        Number of desired machines. Defaults to 1. When stacked etcd is used only odd numbers are permitted, as per [etcd best practice](https://etcd.io/docs/v3.3.12/faq/#why-an-odd-number-of-cluster-members). This is a pointer to distinguish between explicit zero and not specified.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="rolloutStrategy")
    def rollout_strategy(self) -> Optional['outputs.TalosControlPlaneSpecRolloutStrategy']:
        """
        The RolloutStrategy to use to replace control plane machines with new ones.
        """
        return pulumi.get(self, "rollout_strategy")


@pulumi.output_type
class TalosControlPlaneSpecControlPlaneConfig(dict):
    """
    ControlPlaneConfig is a two TalosConfigSpecs to use for initializing and joining machines to the control plane.
    """
    def __init__(__self__, *,
                 controlplane: 'outputs.TalosControlPlaneSpecControlPlaneConfigControlplane',
                 init: Optional['outputs.TalosControlPlaneSpecControlPlaneConfigInit'] = None):
        """
        ControlPlaneConfig is a two TalosConfigSpecs to use for initializing and joining machines to the control plane.
        :param 'TalosControlPlaneSpecControlPlaneConfigControlplaneArgs' controlplane: TalosConfigSpec defines the desired state of TalosConfig
        :param 'TalosControlPlaneSpecControlPlaneConfigInitArgs' init: Deprecated: starting from cacppt v0.4.0 provider doesn't use init configs.
        """
        pulumi.set(__self__, "controlplane", controlplane)
        if init is not None:
            pulumi.set(__self__, "init", init)

    @property
    @pulumi.getter
    def controlplane(self) -> 'outputs.TalosControlPlaneSpecControlPlaneConfigControlplane':
        """
        TalosConfigSpec defines the desired state of TalosConfig
        """
        return pulumi.get(self, "controlplane")

    @property
    @pulumi.getter
    def init(self) -> Optional['outputs.TalosControlPlaneSpecControlPlaneConfigInit']:
        """
        Deprecated: starting from cacppt v0.4.0 provider doesn't use init configs.
        """
        return pulumi.get(self, "init")


@pulumi.output_type
class TalosControlPlaneSpecControlPlaneConfigControlplane(dict):
    """
    TalosConfigSpec defines the desired state of TalosConfig
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "generateType":
            suggest = "generate_type"
        elif key == "configPatches":
            suggest = "config_patches"
        elif key == "talosVersion":
            suggest = "talos_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosControlPlaneSpecControlPlaneConfigControlplane. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosControlPlaneSpecControlPlaneConfigControlplane.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosControlPlaneSpecControlPlaneConfigControlplane.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generate_type: str,
                 config_patches: Optional[Sequence['outputs.TalosControlPlaneSpecControlPlaneConfigControlplaneConfigPatches']] = None,
                 data: Optional[str] = None,
                 hostname: Optional['outputs.TalosControlPlaneSpecControlPlaneConfigControlplaneHostname'] = None,
                 talos_version: Optional[str] = None):
        """
        TalosConfigSpec defines the desired state of TalosConfig
        :param 'TalosControlPlaneSpecControlPlaneConfigControlplaneHostnameArgs' hostname: Set hostname in the machine configuration to some value.
        """
        pulumi.set(__self__, "generate_type", generate_type)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="generateType")
    def generate_type(self) -> str:
        return pulumi.get(self, "generate_type")

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[Sequence['outputs.TalosControlPlaneSpecControlPlaneConfigControlplaneConfigPatches']]:
        return pulumi.get(self, "config_patches")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.TalosControlPlaneSpecControlPlaneConfigControlplaneHostname']:
        """
        Set hostname in the machine configuration to some value.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[str]:
        return pulumi.get(self, "talos_version")


@pulumi.output_type
class TalosControlPlaneSpecControlPlaneConfigControlplaneConfigPatches(dict):
    def __init__(__self__, *,
                 op: str,
                 path: str,
                 value: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TalosControlPlaneSpecControlPlaneConfigControlplaneHostname(dict):
    """
    Set hostname in the machine configuration to some value.
    """
    def __init__(__self__, *,
                 source: Optional[str] = None):
        """
        Set hostname in the machine configuration to some value.
        :param str source: Source of the hostname. 
                Allowed values: "MachineName" (use linked Machine's Name).
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Source of the hostname. 
         Allowed values: "MachineName" (use linked Machine's Name).
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class TalosControlPlaneSpecControlPlaneConfigInit(dict):
    """
    Deprecated: starting from cacppt v0.4.0 provider doesn't use init configs.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "generateType":
            suggest = "generate_type"
        elif key == "configPatches":
            suggest = "config_patches"
        elif key == "talosVersion":
            suggest = "talos_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosControlPlaneSpecControlPlaneConfigInit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosControlPlaneSpecControlPlaneConfigInit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosControlPlaneSpecControlPlaneConfigInit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 generate_type: str,
                 config_patches: Optional[Sequence['outputs.TalosControlPlaneSpecControlPlaneConfigInitConfigPatches']] = None,
                 data: Optional[str] = None,
                 hostname: Optional['outputs.TalosControlPlaneSpecControlPlaneConfigInitHostname'] = None,
                 talos_version: Optional[str] = None):
        """
        Deprecated: starting from cacppt v0.4.0 provider doesn't use init configs.
        :param 'TalosControlPlaneSpecControlPlaneConfigInitHostnameArgs' hostname: Set hostname in the machine configuration to some value.
        """
        pulumi.set(__self__, "generate_type", generate_type)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="generateType")
    def generate_type(self) -> str:
        return pulumi.get(self, "generate_type")

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[Sequence['outputs.TalosControlPlaneSpecControlPlaneConfigInitConfigPatches']]:
        return pulumi.get(self, "config_patches")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.TalosControlPlaneSpecControlPlaneConfigInitHostname']:
        """
        Set hostname in the machine configuration to some value.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[str]:
        return pulumi.get(self, "talos_version")


@pulumi.output_type
class TalosControlPlaneSpecControlPlaneConfigInitConfigPatches(dict):
    def __init__(__self__, *,
                 op: str,
                 path: str,
                 value: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def op(self) -> str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TalosControlPlaneSpecControlPlaneConfigInitHostname(dict):
    """
    Set hostname in the machine configuration to some value.
    """
    def __init__(__self__, *,
                 source: Optional[str] = None):
        """
        Set hostname in the machine configuration to some value.
        :param str source: Source of the hostname. 
                Allowed values: "MachineName" (use linked Machine's Name).
        """
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Source of the hostname. 
         Allowed values: "MachineName" (use linked Machine's Name).
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class TalosControlPlaneSpecInfrastructureTemplate(dict):
    """
    InfrastructureTemplate is a required reference to a custom resource offered by an infrastructure provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"
        elif key == "fieldPath":
            suggest = "field_path"
        elif key == "resourceVersion":
            suggest = "resource_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosControlPlaneSpecInfrastructureTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosControlPlaneSpecInfrastructureTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosControlPlaneSpecInfrastructureTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        InfrastructureTemplate is a required reference to a custom resource offered by an infrastructure provider.
        :param str api_version: API version of the referent.
        :param str field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param str kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class TalosControlPlaneSpecRolloutStrategy(dict):
    """
    The RolloutStrategy to use to replace control plane machines with new ones.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rollingUpdate":
            suggest = "rolling_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosControlPlaneSpecRolloutStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosControlPlaneSpecRolloutStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosControlPlaneSpecRolloutStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rolling_update: Optional['outputs.TalosControlPlaneSpecRolloutStrategyRollingUpdate'] = None,
                 type: Optional[str] = None):
        """
        The RolloutStrategy to use to replace control plane machines with new ones.
        :param 'TalosControlPlaneSpecRolloutStrategyRollingUpdateArgs' rolling_update: Rolling update config params. Present only if RolloutStrategyType = RollingUpdate.
        :param str type: Change rollout strategy. 
                Supported strategies: * "RollingUpdate". * "OnDelete" 
                Default is RollingUpdate.
        """
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional['outputs.TalosControlPlaneSpecRolloutStrategyRollingUpdate']:
        """
        Rolling update config params. Present only if RolloutStrategyType = RollingUpdate.
        """
        return pulumi.get(self, "rolling_update")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Change rollout strategy. 
         Supported strategies: * "RollingUpdate". * "OnDelete" 
         Default is RollingUpdate.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TalosControlPlaneSpecRolloutStrategyRollingUpdate(dict):
    """
    Rolling update config params. Present only if RolloutStrategyType = RollingUpdate.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSurge":
            suggest = "max_surge"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosControlPlaneSpecRolloutStrategyRollingUpdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosControlPlaneSpecRolloutStrategyRollingUpdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosControlPlaneSpecRolloutStrategyRollingUpdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_surge: Optional[Any] = None):
        """
        Rolling update config params. Present only if RolloutStrategyType = RollingUpdate.
        :param Union[int, str] max_surge: The maximum number of control planes that can be scheduled above or under the desired number of control planes. Value can be an absolute number 1 or 0. Defaults to 1. Example: when this is set to 1, the control plane can be scaled up immediately when the rolling update starts.
        """
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[Any]:
        """
        The maximum number of control planes that can be scheduled above or under the desired number of control planes. Value can be an absolute number 1 or 0. Defaults to 1. Example: when this is set to 1, the control plane can be scaled up immediately when the rolling update starts.
        """
        return pulumi.get(self, "max_surge")


@pulumi.output_type
class TalosControlPlaneStatus(dict):
    """
    TalosControlPlaneStatus defines the observed state of TalosControlPlane
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureMessage":
            suggest = "failure_message"
        elif key == "failureReason":
            suggest = "failure_reason"
        elif key == "observedGeneration":
            suggest = "observed_generation"
        elif key == "readyReplicas":
            suggest = "ready_replicas"
        elif key == "unavailableReplicas":
            suggest = "unavailable_replicas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosControlPlaneStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosControlPlaneStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosControlPlaneStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bootstrapped: Optional[bool] = None,
                 conditions: Optional[Sequence['outputs.TalosControlPlaneStatusConditions']] = None,
                 failure_message: Optional[str] = None,
                 failure_reason: Optional[str] = None,
                 initialized: Optional[bool] = None,
                 observed_generation: Optional[int] = None,
                 ready: Optional[bool] = None,
                 ready_replicas: Optional[int] = None,
                 replicas: Optional[int] = None,
                 selector: Optional[str] = None,
                 unavailable_replicas: Optional[int] = None):
        """
        TalosControlPlaneStatus defines the observed state of TalosControlPlane
        :param bool bootstrapped: Bootstrapped denotes whether any nodes received bootstrap request which is required to start etcd and Kubernetes components in Talos.
        :param Sequence['TalosControlPlaneStatusConditionsArgs'] conditions: Conditions defines current service state of the KubeadmControlPlane.
        :param str failure_message: ErrorMessage indicates that there is a terminal problem reconciling the state, and will be set to a descriptive error message.
        :param str failure_reason: FailureReason indicates that there is a terminal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
        :param bool initialized: Initialized denotes whether or not the control plane has the uploaded talos-config configmap.
        :param int observed_generation: ObservedGeneration is the latest generation observed by the controller.
        :param bool ready: Ready denotes that the TalosControlPlane API Server is ready to receive requests.
        :param int ready_replicas: Total number of fully running and ready control plane machines.
        :param int replicas: Total number of non-terminated machines targeted by this control plane (their labels match the selector).
        :param str selector: Selector is the label selector in string format to avoid introspection by clients, and is used to provide the CRD-based integration for the scale subresource and additional integrations for things like kubectl describe.. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
        :param int unavailable_replicas: Total number of unavailable machines targeted by this control plane. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet ready or machines that still have not been created.
        """
        if bootstrapped is not None:
            pulumi.set(__self__, "bootstrapped", bootstrapped)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if initialized is not None:
            pulumi.set(__self__, "initialized", initialized)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if ready_replicas is not None:
            pulumi.set(__self__, "ready_replicas", ready_replicas)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if unavailable_replicas is not None:
            pulumi.set(__self__, "unavailable_replicas", unavailable_replicas)

    @property
    @pulumi.getter
    def bootstrapped(self) -> Optional[bool]:
        """
        Bootstrapped denotes whether any nodes received bootstrap request which is required to start etcd and Kubernetes components in Talos.
        """
        return pulumi.get(self, "bootstrapped")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.TalosControlPlaneStatusConditions']]:
        """
        Conditions defines current service state of the KubeadmControlPlane.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[str]:
        """
        ErrorMessage indicates that there is a terminal problem reconciling the state, and will be set to a descriptive error message.
        """
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        FailureReason indicates that there is a terminal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter
    def initialized(self) -> Optional[bool]:
        """
        Initialized denotes whether or not the control plane has the uploaded talos-config configmap.
        """
        return pulumi.get(self, "initialized")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration is the latest generation observed by the controller.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def ready(self) -> Optional[bool]:
        """
        Ready denotes that the TalosControlPlane API Server is ready to receive requests.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> Optional[int]:
        """
        Total number of fully running and ready control plane machines.
        """
        return pulumi.get(self, "ready_replicas")

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        """
        Total number of non-terminated machines targeted by this control plane (their labels match the selector).
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        """
        Selector is the label selector in string format to avoid introspection by clients, and is used to provide the CRD-based integration for the scale subresource and additional integrations for things like kubectl describe.. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
        """
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="unavailableReplicas")
    def unavailable_replicas(self) -> Optional[int]:
        """
        Total number of unavailable machines targeted by this control plane. This is the total number of machines that are still required for the deployment to have 100% available capacity. They may either be machines that are running but not yet ready or machines that still have not been created.
        """
        return pulumi.get(self, "unavailable_replicas")


@pulumi.output_type
class TalosControlPlaneStatusConditions(dict):
    """
    Condition defines an observation of a Cluster API resource operational state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TalosControlPlaneStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TalosControlPlaneStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TalosControlPlaneStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param str last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param str message: A human readable message indicating details about the transition. This field may be empty.
        :param str reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param str severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")


