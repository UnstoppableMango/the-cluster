# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'BundleSpec',
    'BundleSpecSources',
    'BundleSpecSourcesConfigMap',
    'BundleSpecSourcesSecret',
    'BundleSpecTarget',
    'BundleSpecTargetAdditionalFormats',
    'BundleSpecTargetAdditionalFormatsJks',
    'BundleSpecTargetAdditionalFormatsPkcs12',
    'BundleSpecTargetConfigMap',
    'BundleSpecTargetNamespaceSelector',
    'BundleSpecTargetSecret',
    'BundleStatus',
    'BundleStatusConditions',
    'BundleStatusTarget',
    'BundleStatusTargetAdditionalFormats',
    'BundleStatusTargetAdditionalFormatsJks',
    'BundleStatusTargetAdditionalFormatsPkcs12',
    'BundleStatusTargetConfigMap',
    'BundleStatusTargetNamespaceSelector',
    'BundleStatusTargetSecret',
]

@pulumi.output_type
class BundleSpec(dict):
    """
    Desired state of the Bundle resource.
    """
    def __init__(__self__, *,
                 sources: Sequence['outputs.BundleSpecSources'],
                 target: 'outputs.BundleSpecTarget'):
        """
        Desired state of the Bundle resource.
        :param Sequence['BundleSpecSourcesArgs'] sources: Sources is a set of references to data whose data will sync to the target.
        :param 'BundleSpecTargetArgs' target: Target is the target location in all namespaces to sync source data to.
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.BundleSpecSources']:
        """
        Sources is a set of references to data whose data will sync to the target.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def target(self) -> 'outputs.BundleSpecTarget':
        """
        Target is the target location in all namespaces to sync source data to.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class BundleSpecSources(dict):
    """
    BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMap":
            suggest = "config_map"
        elif key == "inLine":
            suggest = "in_line"
        elif key == "useDefaultCAs":
            suggest = "use_default_cas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BundleSpecSources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BundleSpecSources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BundleSpecSources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_map: Optional['outputs.BundleSpecSourcesConfigMap'] = None,
                 in_line: Optional[str] = None,
                 secret: Optional['outputs.BundleSpecSourcesSecret'] = None,
                 use_default_cas: Optional[bool] = None):
        """
        BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
        :param 'BundleSpecSourcesConfigMapArgs' config_map: ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
        :param str in_line: InLine is a simple string to append as the source data.
        :param 'BundleSpecSourcesSecretArgs' secret: Secret is a reference to a Secrets's `data` key, in the trust Namespace.
        :param bool use_default_cas: UseDefaultCAs, when true, requests the default CA bundle to be used as a source. Default CAs are available if trust-manager was installed via Helm or was otherwise set up to include a package-injecting init container by using the "--default-package-location" flag when starting the trust-manager controller. If default CAs were not configured at start-up, any request to use the default CAs will fail. The version of the default CA package which is used for a Bundle is stored in the defaultCAPackageVersion field of the Bundle's status field.
        """
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if in_line is not None:
            pulumi.set(__self__, "in_line", in_line)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if use_default_cas is not None:
            pulumi.set(__self__, "use_default_cas", use_default_cas)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.BundleSpecSourcesConfigMap']:
        """
        ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
        """
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="inLine")
    def in_line(self) -> Optional[str]:
        """
        InLine is a simple string to append as the source data.
        """
        return pulumi.get(self, "in_line")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.BundleSpecSourcesSecret']:
        """
        Secret is a reference to a Secrets's `data` key, in the trust Namespace.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="useDefaultCAs")
    def use_default_cas(self) -> Optional[bool]:
        """
        UseDefaultCAs, when true, requests the default CA bundle to be used as a source. Default CAs are available if trust-manager was installed via Helm or was otherwise set up to include a package-injecting init container by using the "--default-package-location" flag when starting the trust-manager controller. If default CAs were not configured at start-up, any request to use the default CAs will fail. The version of the default CA package which is used for a Bundle is stored in the defaultCAPackageVersion field of the Bundle's status field.
        """
        return pulumi.get(self, "use_default_cas")


@pulumi.output_type
class BundleSpecSourcesConfigMap(dict):
    """
    ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
    """
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        :param str name: Name is the name of the source object in the trust Namespace.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the source object in the trust Namespace.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BundleSpecSourcesSecret(dict):
    """
    Secret is a reference to a Secrets's `data` key, in the trust Namespace.
    """
    def __init__(__self__, *,
                 key: str,
                 name: str):
        """
        Secret is a reference to a Secrets's `data` key, in the trust Namespace.
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        :param str name: Name is the name of the source object in the trust Namespace.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the source object in the trust Namespace.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class BundleSpecTarget(dict):
    """
    Target is the target location in all namespaces to sync source data to.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalFormats":
            suggest = "additional_formats"
        elif key == "configMap":
            suggest = "config_map"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BundleSpecTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BundleSpecTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BundleSpecTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_formats: Optional['outputs.BundleSpecTargetAdditionalFormats'] = None,
                 config_map: Optional['outputs.BundleSpecTargetConfigMap'] = None,
                 namespace_selector: Optional['outputs.BundleSpecTargetNamespaceSelector'] = None,
                 secret: Optional['outputs.BundleSpecTargetSecret'] = None):
        """
        Target is the target location in all namespaces to sync source data to.
        :param 'BundleSpecTargetAdditionalFormatsArgs' additional_formats: AdditionalFormats specifies any additional formats to write to the target
        :param 'BundleSpecTargetConfigMapArgs' config_map: ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        :param 'BundleSpecTargetNamespaceSelectorArgs' namespace_selector: NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        :param 'BundleSpecTargetSecretArgs' secret: Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        """
        if additional_formats is not None:
            pulumi.set(__self__, "additional_formats", additional_formats)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="additionalFormats")
    def additional_formats(self) -> Optional['outputs.BundleSpecTargetAdditionalFormats']:
        """
        AdditionalFormats specifies any additional formats to write to the target
        """
        return pulumi.get(self, "additional_formats")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.BundleSpecTargetConfigMap']:
        """
        ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        """
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional['outputs.BundleSpecTargetNamespaceSelector']:
        """
        NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        """
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.BundleSpecTargetSecret']:
        """
        Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class BundleSpecTargetAdditionalFormats(dict):
    """
    AdditionalFormats specifies any additional formats to write to the target
    """
    def __init__(__self__, *,
                 jks: Optional['outputs.BundleSpecTargetAdditionalFormatsJks'] = None,
                 pkcs12: Optional['outputs.BundleSpecTargetAdditionalFormatsPkcs12'] = None):
        """
        AdditionalFormats specifies any additional formats to write to the target
        :param 'BundleSpecTargetAdditionalFormatsJksArgs' jks: JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        :param 'BundleSpecTargetAdditionalFormatsPkcs12Args' pkcs12: PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        """
        if jks is not None:
            pulumi.set(__self__, "jks", jks)
        if pkcs12 is not None:
            pulumi.set(__self__, "pkcs12", pkcs12)

    @property
    @pulumi.getter
    def jks(self) -> Optional['outputs.BundleSpecTargetAdditionalFormatsJks']:
        """
        JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        """
        return pulumi.get(self, "jks")

    @property
    @pulumi.getter
    def pkcs12(self) -> Optional['outputs.BundleSpecTargetAdditionalFormatsPkcs12']:
        """
        PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        """
        return pulumi.get(self, "pkcs12")


@pulumi.output_type
class BundleSpecTargetAdditionalFormatsJks(dict):
    """
    JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
    """
    def __init__(__self__, *,
                 key: str):
        """
        JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class BundleSpecTargetAdditionalFormatsPkcs12(dict):
    """
    PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
    """
    def __init__(__self__, *,
                 key: str):
        """
        PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class BundleSpecTargetConfigMap(dict):
    """
    ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
    """
    def __init__(__self__, *,
                 key: str):
        """
        ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class BundleSpecTargetNamespaceSelector(dict):
    """
    NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BundleSpecTargetNamespaceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BundleSpecTargetNamespaceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BundleSpecTargetNamespaceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        :param Mapping[str, str] match_labels: MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class BundleSpecTargetSecret(dict):
    """
    Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
    """
    def __init__(__self__, *,
                 key: str):
        """
        Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class BundleStatus(dict):
    """
    Status of the Bundle. This is set and managed automatically.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultCAVersion":
            suggest = "default_ca_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BundleStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BundleStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BundleStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.BundleStatusConditions']] = None,
                 default_ca_version: Optional[str] = None,
                 target: Optional['outputs.BundleStatusTarget'] = None):
        """
        Status of the Bundle. This is set and managed automatically.
        :param Sequence['BundleStatusConditionsArgs'] conditions: List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
        :param str default_ca_version: DefaultCAPackageVersion, if set and non-empty, indicates the version information which was retrieved when the set of default CAs was requested in the bundle source. This should only be set if useDefaultCAs was set to "true" on a source, and will be the same for the same version of a bundle with identical certificates.
        :param 'BundleStatusTargetArgs' target: Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if default_ca_version is not None:
            pulumi.set(__self__, "default_ca_version", default_ca_version)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.BundleStatusConditions']]:
        """
        List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="defaultCAVersion")
    def default_ca_version(self) -> Optional[str]:
        """
        DefaultCAPackageVersion, if set and non-empty, indicates the version information which was retrieved when the set of default CAs was requested in the bundle source. This should only be set if useDefaultCAs was set to "true" on a source, and will be the same for the same version of a bundle with identical certificates.
        """
        return pulumi.get(self, "default_ca_version")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.BundleStatusTarget']:
        """
        Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class BundleStatusConditions(dict):
    """
    BundleCondition contains condition information for a Bundle.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BundleStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BundleStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BundleStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 observed_generation: Optional[int] = None,
                 reason: Optional[str] = None):
        """
        BundleCondition contains condition information for a Bundle.
        :param str status: Status of the condition, one of ('True', 'False', 'Unknown').
        :param str type: Type of the condition, known values are (`Synced`).
        :param str last_transition_time: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        :param str message: Message is a human readable description of the details of the last transition, complementing reason.
        :param int observed_generation: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
        :param str reason: Reason is a brief machine readable explanation for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of ('True', 'False', 'Unknown').
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the condition, known values are (`Synced`).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human readable description of the details of the last transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a brief machine readable explanation for the condition's last transition.
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class BundleStatusTarget(dict):
    """
    Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalFormats":
            suggest = "additional_formats"
        elif key == "configMap":
            suggest = "config_map"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BundleStatusTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BundleStatusTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BundleStatusTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_formats: Optional['outputs.BundleStatusTargetAdditionalFormats'] = None,
                 config_map: Optional['outputs.BundleStatusTargetConfigMap'] = None,
                 namespace_selector: Optional['outputs.BundleStatusTargetNamespaceSelector'] = None,
                 secret: Optional['outputs.BundleStatusTargetSecret'] = None):
        """
        Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
        :param 'BundleStatusTargetAdditionalFormatsArgs' additional_formats: AdditionalFormats specifies any additional formats to write to the target
        :param 'BundleStatusTargetConfigMapArgs' config_map: ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        :param 'BundleStatusTargetNamespaceSelectorArgs' namespace_selector: NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        :param 'BundleStatusTargetSecretArgs' secret: Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        """
        if additional_formats is not None:
            pulumi.set(__self__, "additional_formats", additional_formats)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="additionalFormats")
    def additional_formats(self) -> Optional['outputs.BundleStatusTargetAdditionalFormats']:
        """
        AdditionalFormats specifies any additional formats to write to the target
        """
        return pulumi.get(self, "additional_formats")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional['outputs.BundleStatusTargetConfigMap']:
        """
        ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        """
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional['outputs.BundleStatusTargetNamespaceSelector']:
        """
        NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        """
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.BundleStatusTargetSecret']:
        """
        Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class BundleStatusTargetAdditionalFormats(dict):
    """
    AdditionalFormats specifies any additional formats to write to the target
    """
    def __init__(__self__, *,
                 jks: Optional['outputs.BundleStatusTargetAdditionalFormatsJks'] = None,
                 pkcs12: Optional['outputs.BundleStatusTargetAdditionalFormatsPkcs12'] = None):
        """
        AdditionalFormats specifies any additional formats to write to the target
        :param 'BundleStatusTargetAdditionalFormatsJksArgs' jks: JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        :param 'BundleStatusTargetAdditionalFormatsPkcs12Args' pkcs12: PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        """
        if jks is not None:
            pulumi.set(__self__, "jks", jks)
        if pkcs12 is not None:
            pulumi.set(__self__, "pkcs12", pkcs12)

    @property
    @pulumi.getter
    def jks(self) -> Optional['outputs.BundleStatusTargetAdditionalFormatsJks']:
        """
        JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        """
        return pulumi.get(self, "jks")

    @property
    @pulumi.getter
    def pkcs12(self) -> Optional['outputs.BundleStatusTargetAdditionalFormatsPkcs12']:
        """
        PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        """
        return pulumi.get(self, "pkcs12")


@pulumi.output_type
class BundleStatusTargetAdditionalFormatsJks(dict):
    """
    JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
    """
    def __init__(__self__, *,
                 key: str):
        """
        JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class BundleStatusTargetAdditionalFormatsPkcs12(dict):
    """
    PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
    """
    def __init__(__self__, *,
                 key: str):
        """
        PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class BundleStatusTargetConfigMap(dict):
    """
    ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
    """
    def __init__(__self__, *,
                 key: str):
        """
        ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class BundleStatusTargetNamespaceSelector(dict):
    """
    NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BundleStatusTargetNamespaceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BundleStatusTargetNamespaceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BundleStatusTargetNamespaceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        :param Mapping[str, str] match_labels: MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class BundleStatusTargetSecret(dict):
    """
    Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
    """
    def __init__(__self__, *,
                 key: str):
        """
        Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        :param str key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")


