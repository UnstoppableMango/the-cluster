# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'BundleSpecSourcesConfigMapArgs',
    'BundleSpecSourcesSecretArgs',
    'BundleSpecSourcesArgs',
    'BundleSpecTargetAdditionalFormatsJksArgs',
    'BundleSpecTargetAdditionalFormatsPkcs12Args',
    'BundleSpecTargetAdditionalFormatsArgs',
    'BundleSpecTargetConfigMapArgs',
    'BundleSpecTargetNamespaceSelectorArgs',
    'BundleSpecTargetSecretArgs',
    'BundleSpecTargetArgs',
    'BundleSpecArgs',
    'BundleStatusConditionsArgs',
    'BundleStatusTargetAdditionalFormatsJksArgs',
    'BundleStatusTargetAdditionalFormatsPkcs12Args',
    'BundleStatusTargetAdditionalFormatsArgs',
    'BundleStatusTargetConfigMapArgs',
    'BundleStatusTargetNamespaceSelectorArgs',
    'BundleStatusTargetSecretArgs',
    'BundleStatusTargetArgs',
    'BundleStatusArgs',
]

@pulumi.input_type
class BundleSpecSourcesConfigMapArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        :param pulumi.Input[str] name: Name is the name of the source object in the trust Namespace.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the source object in the trust Namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class BundleSpecSourcesSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        Secret is a reference to a Secrets's `data` key, in the trust Namespace.
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        :param pulumi.Input[str] name: Name is the name of the source object in the trust Namespace.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the source object in the trust Namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class BundleSpecSourcesArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['BundleSpecSourcesConfigMapArgs']] = None,
                 in_line: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input['BundleSpecSourcesSecretArgs']] = None,
                 use_default_cas: Optional[pulumi.Input[bool]] = None):
        """
        BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.
        :param pulumi.Input['BundleSpecSourcesConfigMapArgs'] config_map: ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
        :param pulumi.Input[str] in_line: InLine is a simple string to append as the source data.
        :param pulumi.Input['BundleSpecSourcesSecretArgs'] secret: Secret is a reference to a Secrets's `data` key, in the trust Namespace.
        :param pulumi.Input[bool] use_default_cas: UseDefaultCAs, when true, requests the default CA bundle to be used as a source. Default CAs are available if trust-manager was installed via Helm or was otherwise set up to include a package-injecting init container by using the "--default-package-location" flag when starting the trust-manager controller. If default CAs were not configured at start-up, any request to use the default CAs will fail. The version of the default CA package which is used for a Bundle is stored in the defaultCAPackageVersion field of the Bundle's status field.
        """
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if in_line is not None:
            pulumi.set(__self__, "in_line", in_line)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if use_default_cas is not None:
            pulumi.set(__self__, "use_default_cas", use_default_cas)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['BundleSpecSourcesConfigMapArgs']]:
        """
        ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['BundleSpecSourcesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter(name="inLine")
    def in_line(self) -> Optional[pulumi.Input[str]]:
        """
        InLine is a simple string to append as the source data.
        """
        return pulumi.get(self, "in_line")

    @in_line.setter
    def in_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_line", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['BundleSpecSourcesSecretArgs']]:
        """
        Secret is a reference to a Secrets's `data` key, in the trust Namespace.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['BundleSpecSourcesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="useDefaultCAs")
    def use_default_cas(self) -> Optional[pulumi.Input[bool]]:
        """
        UseDefaultCAs, when true, requests the default CA bundle to be used as a source. Default CAs are available if trust-manager was installed via Helm or was otherwise set up to include a package-injecting init container by using the "--default-package-location" flag when starting the trust-manager controller. If default CAs were not configured at start-up, any request to use the default CAs will fail. The version of the default CA package which is used for a Bundle is stored in the defaultCAPackageVersion field of the Bundle's status field.
        """
        return pulumi.get(self, "use_default_cas")

    @use_default_cas.setter
    def use_default_cas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_cas", value)


@pulumi.input_type
class BundleSpecTargetAdditionalFormatsJksArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class BundleSpecTargetAdditionalFormatsPkcs12Args:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class BundleSpecTargetAdditionalFormatsArgs:
    def __init__(__self__, *,
                 jks: Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsJksArgs']] = None,
                 pkcs12: Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsPkcs12Args']] = None):
        """
        AdditionalFormats specifies any additional formats to write to the target
        :param pulumi.Input['BundleSpecTargetAdditionalFormatsJksArgs'] jks: JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        :param pulumi.Input['BundleSpecTargetAdditionalFormatsPkcs12Args'] pkcs12: PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        """
        if jks is not None:
            pulumi.set(__self__, "jks", jks)
        if pkcs12 is not None:
            pulumi.set(__self__, "pkcs12", pkcs12)

    @property
    @pulumi.getter
    def jks(self) -> Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsJksArgs']]:
        """
        JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        """
        return pulumi.get(self, "jks")

    @jks.setter
    def jks(self, value: Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsJksArgs']]):
        pulumi.set(self, "jks", value)

    @property
    @pulumi.getter
    def pkcs12(self) -> Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsPkcs12Args']]:
        """
        PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        """
        return pulumi.get(self, "pkcs12")

    @pkcs12.setter
    def pkcs12(self, value: Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsPkcs12Args']]):
        pulumi.set(self, "pkcs12", value)


@pulumi.input_type
class BundleSpecTargetConfigMapArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class BundleSpecTargetNamespaceSelectorArgs:
    def __init__(__self__, *,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class BundleSpecTargetSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class BundleSpecTargetArgs:
    def __init__(__self__, *,
                 additional_formats: Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsArgs']] = None,
                 config_map: Optional[pulumi.Input['BundleSpecTargetConfigMapArgs']] = None,
                 namespace_selector: Optional[pulumi.Input['BundleSpecTargetNamespaceSelectorArgs']] = None,
                 secret: Optional[pulumi.Input['BundleSpecTargetSecretArgs']] = None):
        """
        Target is the target location in all namespaces to sync source data to.
        :param pulumi.Input['BundleSpecTargetAdditionalFormatsArgs'] additional_formats: AdditionalFormats specifies any additional formats to write to the target
        :param pulumi.Input['BundleSpecTargetConfigMapArgs'] config_map: ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        :param pulumi.Input['BundleSpecTargetNamespaceSelectorArgs'] namespace_selector: NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        :param pulumi.Input['BundleSpecTargetSecretArgs'] secret: Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        """
        if additional_formats is not None:
            pulumi.set(__self__, "additional_formats", additional_formats)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="additionalFormats")
    def additional_formats(self) -> Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsArgs']]:
        """
        AdditionalFormats specifies any additional formats to write to the target
        """
        return pulumi.get(self, "additional_formats")

    @additional_formats.setter
    def additional_formats(self, value: Optional[pulumi.Input['BundleSpecTargetAdditionalFormatsArgs']]):
        pulumi.set(self, "additional_formats", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['BundleSpecTargetConfigMapArgs']]:
        """
        ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['BundleSpecTargetConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input['BundleSpecTargetNamespaceSelectorArgs']]:
        """
        NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        """
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input['BundleSpecTargetNamespaceSelectorArgs']]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['BundleSpecTargetSecretArgs']]:
        """
        Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['BundleSpecTargetSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class BundleSpecArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['BundleSpecSourcesArgs']]],
                 target: pulumi.Input['BundleSpecTargetArgs']):
        """
        Desired state of the Bundle resource.
        :param pulumi.Input[Sequence[pulumi.Input['BundleSpecSourcesArgs']]] sources: Sources is a set of references to data whose data will sync to the target.
        :param pulumi.Input['BundleSpecTargetArgs'] target: Target is the target location in all namespaces to sync source data to.
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['BundleSpecSourcesArgs']]]:
        """
        Sources is a set of references to data whose data will sync to the target.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['BundleSpecSourcesArgs']]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['BundleSpecTargetArgs']:
        """
        Target is the target location in all namespaces to sync source data to.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['BundleSpecTargetArgs']):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BundleStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        BundleCondition contains condition information for a Bundle.
        :param pulumi.Input[str] status: Status of the condition, one of ('True', 'False', 'Unknown').
        :param pulumi.Input[str] type: Type of the condition, known values are (`Synced`).
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        :param pulumi.Input[str] message: Message is a human readable description of the details of the last transition, complementing reason.
        :param pulumi.Input[int] observed_generation: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
        :param pulumi.Input[str] reason: Reason is a brief machine readable explanation for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of ('True', 'False', 'Unknown').
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the condition, known values are (`Synced`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human readable description of the details of the last transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a brief machine readable explanation for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class BundleStatusTargetAdditionalFormatsJksArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class BundleStatusTargetAdditionalFormatsPkcs12Args:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class BundleStatusTargetAdditionalFormatsArgs:
    def __init__(__self__, *,
                 jks: Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsJksArgs']] = None,
                 pkcs12: Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsPkcs12Args']] = None):
        """
        AdditionalFormats specifies any additional formats to write to the target
        :param pulumi.Input['BundleStatusTargetAdditionalFormatsJksArgs'] jks: JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        :param pulumi.Input['BundleStatusTargetAdditionalFormatsPkcs12Args'] pkcs12: PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        """
        if jks is not None:
            pulumi.set(__self__, "jks", jks)
        if pkcs12 is not None:
            pulumi.set(__self__, "pkcs12", pkcs12)

    @property
    @pulumi.getter
    def jks(self) -> Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsJksArgs']]:
        """
        JKS requests a JKS-formatted binary trust bundle to be written to the target. The bundle is created with the hardcoded password "changeit".
        """
        return pulumi.get(self, "jks")

    @jks.setter
    def jks(self, value: Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsJksArgs']]):
        pulumi.set(self, "jks", value)

    @property
    @pulumi.getter
    def pkcs12(self) -> Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsPkcs12Args']]:
        """
        PKCS12 requests a PKCS12-formatted binary trust bundle to be written to the target. The bundle is created without a password.
        """
        return pulumi.get(self, "pkcs12")

    @pkcs12.setter
    def pkcs12(self, value: Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsPkcs12Args']]):
        pulumi.set(self, "pkcs12", value)


@pulumi.input_type
class BundleStatusTargetConfigMapArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class BundleStatusTargetNamespaceSelectorArgs:
    def __init__(__self__, *,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
        """
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class BundleStatusTargetSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        :param pulumi.Input[str] key: Key is the key of the entry in the object's `data` field to be used.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key is the key of the entry in the object's `data` field to be used.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class BundleStatusTargetArgs:
    def __init__(__self__, *,
                 additional_formats: Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsArgs']] = None,
                 config_map: Optional[pulumi.Input['BundleStatusTargetConfigMapArgs']] = None,
                 namespace_selector: Optional[pulumi.Input['BundleStatusTargetNamespaceSelectorArgs']] = None,
                 secret: Optional[pulumi.Input['BundleStatusTargetSecretArgs']] = None):
        """
        Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
        :param pulumi.Input['BundleStatusTargetAdditionalFormatsArgs'] additional_formats: AdditionalFormats specifies any additional formats to write to the target
        :param pulumi.Input['BundleStatusTargetConfigMapArgs'] config_map: ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        :param pulumi.Input['BundleStatusTargetNamespaceSelectorArgs'] namespace_selector: NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        :param pulumi.Input['BundleStatusTargetSecretArgs'] secret: Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        """
        if additional_formats is not None:
            pulumi.set(__self__, "additional_formats", additional_formats)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="additionalFormats")
    def additional_formats(self) -> Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsArgs']]:
        """
        AdditionalFormats specifies any additional formats to write to the target
        """
        return pulumi.get(self, "additional_formats")

    @additional_formats.setter
    def additional_formats(self, value: Optional[pulumi.Input['BundleStatusTargetAdditionalFormatsArgs']]):
        pulumi.set(self, "additional_formats", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['BundleStatusTargetConfigMapArgs']]:
        """
        ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['BundleStatusTargetConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional[pulumi.Input['BundleStatusTargetNamespaceSelectorArgs']]:
        """
        NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.
        """
        return pulumi.get(self, "namespace_selector")

    @namespace_selector.setter
    def namespace_selector(self, value: Optional[pulumi.Input['BundleStatusTargetNamespaceSelectorArgs']]):
        pulumi.set(self, "namespace_selector", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['BundleStatusTargetSecretArgs']]:
        """
        Secret is the target Secret that all Bundle source data will be synced to. Using Secrets as targets is only supported if enabled at trust-manager startup. By default, trust-manager has no permissions for writing to secrets and can only read secrets in the trust namespace.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['BundleStatusTargetSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class BundleStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['BundleStatusConditionsArgs']]]] = None,
                 default_ca_version: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input['BundleStatusTargetArgs']] = None):
        """
        Status of the Bundle. This is set and managed automatically.
        :param pulumi.Input[Sequence[pulumi.Input['BundleStatusConditionsArgs']]] conditions: List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
        :param pulumi.Input[str] default_ca_version: DefaultCAPackageVersion, if set and non-empty, indicates the version information which was retrieved when the set of default CAs was requested in the bundle source. This should only be set if useDefaultCAs was set to "true" on a source, and will be the same for the same version of a bundle with identical certificates.
        :param pulumi.Input['BundleStatusTargetArgs'] target: Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if default_ca_version is not None:
            pulumi.set(__self__, "default_ca_version", default_ca_version)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BundleStatusConditionsArgs']]]]:
        """
        List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BundleStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="defaultCAVersion")
    def default_ca_version(self) -> Optional[pulumi.Input[str]]:
        """
        DefaultCAPackageVersion, if set and non-empty, indicates the version information which was retrieved when the set of default CAs was requested in the bundle source. This should only be set if useDefaultCAs was set to "true" on a source, and will be the same for the same version of a bundle with identical certificates.
        """
        return pulumi.get(self, "default_ca_version")

    @default_ca_version.setter
    def default_ca_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_ca_version", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BundleStatusTargetArgs']]:
        """
        Target is the current Target that the Bundle is attempting or has completed syncing the source data to.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BundleStatusTargetArgs']]):
        pulumi.set(self, "target", value)


