# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'DNSEndpointSpec',
    'DNSEndpointSpecEndpoints',
    'DNSEndpointSpecEndpointsProviderSpecific',
    'DNSEndpointStatus',
]

@pulumi.output_type
class DNSEndpointSpec(dict):
    """
    DNSEndpointSpec holds information about endpoints.
    """
    def __init__(__self__, *,
                 endpoints: Optional[Sequence['outputs.DNSEndpointSpecEndpoints']] = None):
        """
        DNSEndpointSpec holds information about endpoints.
        """
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.DNSEndpointSpecEndpoints']]:
        return pulumi.get(self, "endpoints")


@pulumi.output_type
class DNSEndpointSpecEndpoints(dict):
    """
    Endpoint describes DNS Endpoint.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsName":
            suggest = "dns_name"
        elif key == "providerSpecific":
            suggest = "provider_specific"
        elif key == "recordTTL":
            suggest = "record_ttl"
        elif key == "recordType":
            suggest = "record_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DNSEndpointSpecEndpoints. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DNSEndpointSpecEndpoints.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DNSEndpointSpecEndpoints.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_name: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 provider_specific: Optional[Sequence['outputs.DNSEndpointSpecEndpointsProviderSpecific']] = None,
                 record_ttl: Optional[int] = None,
                 record_type: Optional[str] = None,
                 targets: Optional[Sequence[str]] = None):
        """
        Endpoint describes DNS Endpoint.
        :param str dns_name: The hostname for the DNS record
        :param Mapping[str, str] labels: Labels stores labels defined for the Endpoint
        :param Sequence['DNSEndpointSpecEndpointsProviderSpecificArgs'] provider_specific: ProviderSpecific stores provider specific config
        :param int record_ttl: TTL for the record
        :param str record_type: RecordType type of record, e.g. CNAME, A, SRV, TXT, MX
        :param Sequence[str] targets: The targets the DNS service points to
        """
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if provider_specific is not None:
            pulumi.set(__self__, "provider_specific", provider_specific)
        if record_ttl is not None:
            pulumi.set(__self__, "record_ttl", record_ttl)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        """
        The hostname for the DNS record
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels stores labels defined for the Endpoint
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="providerSpecific")
    def provider_specific(self) -> Optional[Sequence['outputs.DNSEndpointSpecEndpointsProviderSpecific']]:
        """
        ProviderSpecific stores provider specific config
        """
        return pulumi.get(self, "provider_specific")

    @property
    @pulumi.getter(name="recordTTL")
    def record_ttl(self) -> Optional[int]:
        """
        TTL for the record
        """
        return pulumi.get(self, "record_ttl")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[str]:
        """
        RecordType type of record, e.g. CNAME, A, SRV, TXT, MX
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence[str]]:
        """
        The targets the DNS service points to
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class DNSEndpointSpecEndpointsProviderSpecific(dict):
    """
    ProviderSpecificProperty represents provider specific config property.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        ProviderSpecificProperty represents provider specific config property.
        :param str name: Name of the property
        :param str value: Value of the property
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the property
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value of the property
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DNSEndpointStatus(dict):
    """
    DNSEndpointStatus represents generation observed by the external dns controller.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DNSEndpointStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DNSEndpointStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DNSEndpointStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 observed_generation: Optional[int] = None):
        """
        DNSEndpointStatus represents generation observed by the external dns controller.
        :param int observed_generation: The generation observed by by the external-dns controller.
        """
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        The generation observed by by the external-dns controller.
        """
        return pulumi.get(self, "observed_generation")


