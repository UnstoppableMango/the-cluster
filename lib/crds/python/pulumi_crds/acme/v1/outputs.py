# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ChallengeSpec',
    'ChallengeSpecIssuerRef',
    'ChallengeSpecSolver',
    'ChallengeSpecSolverDns01',
    'ChallengeSpecSolverDns01AcmeDns',
    'ChallengeSpecSolverDns01AcmeDnsAccountSecretRef',
    'ChallengeSpecSolverDns01Akamai',
    'ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef',
    'ChallengeSpecSolverDns01AkamaiClientSecretSecretRef',
    'ChallengeSpecSolverDns01AkamaiClientTokenSecretRef',
    'ChallengeSpecSolverDns01AzureDns',
    'ChallengeSpecSolverDns01AzureDnsClientSecretSecretRef',
    'ChallengeSpecSolverDns01AzureDnsManagedIdentity',
    'ChallengeSpecSolverDns01CloudDns',
    'ChallengeSpecSolverDns01CloudDnsServiceAccountSecretRef',
    'ChallengeSpecSolverDns01Cloudflare',
    'ChallengeSpecSolverDns01CloudflareApiKeySecretRef',
    'ChallengeSpecSolverDns01CloudflareApiTokenSecretRef',
    'ChallengeSpecSolverDns01Digitalocean',
    'ChallengeSpecSolverDns01DigitaloceanTokenSecretRef',
    'ChallengeSpecSolverDns01Rfc2136',
    'ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef',
    'ChallengeSpecSolverDns01Route53',
    'ChallengeSpecSolverDns01Route53AccessKeyIdsecretRef',
    'ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef',
    'ChallengeSpecSolverDns01Webhook',
    'ChallengeSpecSolverHttp01',
    'ChallengeSpecSolverHttp01GatewayHttproute',
    'ChallengeSpecSolverHttp01GatewayHttprouteParentRefs',
    'ChallengeSpecSolverHttp01Ingress',
    'ChallengeSpecSolverHttp01IngressIngressTemplate',
    'ChallengeSpecSolverHttp01IngressIngressTemplateMetadata',
    'ChallengeSpecSolverHttp01IngressPodTemplate',
    'ChallengeSpecSolverHttp01IngressPodTemplateMetadata',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpec',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets',
    'ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations',
    'ChallengeSpecSolverSelector',
    'ChallengeStatus',
    'OrderSpec',
    'OrderSpecIssuerRef',
    'OrderStatus',
    'OrderStatusAuthorizations',
    'OrderStatusAuthorizationsChallenges',
]

@pulumi.output_type
class ChallengeSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationURL":
            suggest = "authorization_url"
        elif key == "dnsName":
            suggest = "dns_name"
        elif key == "issuerRef":
            suggest = "issuer_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_url: str,
                 dns_name: str,
                 issuer_ref: 'outputs.ChallengeSpecIssuerRef',
                 key: str,
                 solver: 'outputs.ChallengeSpecSolver',
                 token: str,
                 type: str,
                 url: str,
                 wildcard: Optional[bool] = None):
        """
        :param str authorization_url: The URL to the ACME Authorization resource that this challenge is a part of.
        :param str dns_name: dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        :param 'ChallengeSpecIssuerRefArgs' issuer_ref: References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
        :param str key: The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
        :param 'ChallengeSpecSolverArgs' solver: Contains the domain solving configuration that should be used to solve this challenge resource.
        :param str token: The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
        :param str type: The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
        :param str url: The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
        :param bool wildcard: wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
        """
        pulumi.set(__self__, "authorization_url", authorization_url)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "issuer_ref", issuer_ref)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "solver", solver)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter(name="authorizationURL")
    def authorization_url(self) -> str:
        """
        The URL to the ACME Authorization resource that this challenge is a part of.
        """
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        """
        dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> 'outputs.ChallengeSpecIssuerRef':
        """
        References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
        """
        return pulumi.get(self, "issuer_ref")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def solver(self) -> 'outputs.ChallengeSpecSolver':
        """
        Contains the domain solving configuration that should be used to solve this challenge resource.
        """
        return pulumi.get(self, "solver")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[bool]:
        """
        wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
        """
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class ChallengeSpecIssuerRef(dict):
    """
    References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
    """
    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None):
        """
        References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
        :param str name: Name of the resource being referred to.
        :param str group: Group of the resource being referred to.
        :param str kind: Kind of the resource being referred to.
        """
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class ChallengeSpecSolver(dict):
    """
    Contains the domain solving configuration that should be used to solve this challenge resource.
    """
    def __init__(__self__, *,
                 dns01: Optional['outputs.ChallengeSpecSolverDns01'] = None,
                 http01: Optional['outputs.ChallengeSpecSolverHttp01'] = None,
                 selector: Optional['outputs.ChallengeSpecSolverSelector'] = None):
        """
        Contains the domain solving configuration that should be used to solve this challenge resource.
        :param 'ChallengeSpecSolverDns01Args' dns01: Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        :param 'ChallengeSpecSolverHttp01Args' http01: Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        :param 'ChallengeSpecSolverSelectorArgs' selector: Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional['outputs.ChallengeSpecSolverDns01']:
        """
        Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        """
        return pulumi.get(self, "dns01")

    @property
    @pulumi.getter
    def http01(self) -> Optional['outputs.ChallengeSpecSolverHttp01']:
        """
        Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        return pulumi.get(self, "http01")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ChallengeSpecSolverSelector']:
        """
        Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ChallengeSpecSolverDns01(dict):
    """
    Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acmeDNS":
            suggest = "acme_dns"
        elif key == "azureDNS":
            suggest = "azure_dns"
        elif key == "cloudDNS":
            suggest = "cloud_dns"
        elif key == "cnameStrategy":
            suggest = "cname_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acme_dns: Optional['outputs.ChallengeSpecSolverDns01AcmeDns'] = None,
                 akamai: Optional['outputs.ChallengeSpecSolverDns01Akamai'] = None,
                 azure_dns: Optional['outputs.ChallengeSpecSolverDns01AzureDns'] = None,
                 cloud_dns: Optional['outputs.ChallengeSpecSolverDns01CloudDns'] = None,
                 cloudflare: Optional['outputs.ChallengeSpecSolverDns01Cloudflare'] = None,
                 cname_strategy: Optional[str] = None,
                 digitalocean: Optional['outputs.ChallengeSpecSolverDns01Digitalocean'] = None,
                 rfc2136: Optional['outputs.ChallengeSpecSolverDns01Rfc2136'] = None,
                 route53: Optional['outputs.ChallengeSpecSolverDns01Route53'] = None,
                 webhook: Optional['outputs.ChallengeSpecSolverDns01Webhook'] = None):
        """
        Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        :param 'ChallengeSpecSolverDns01AcmeDnsArgs' acme_dns: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01AkamaiArgs' akamai: Use the Akamai DNS zone management API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01AzureDnsArgs' azure_dns: Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01CloudDnsArgs' cloud_dns: Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01CloudflareArgs' cloudflare: Use the Cloudflare API to manage DNS01 challenge records.
        :param str cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
        :param 'ChallengeSpecSolverDns01DigitaloceanArgs' digitalocean: Use the DigitalOcean DNS API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01Rfc2136Args' rfc2136: Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01Route53Args' route53: Use the AWS Route53 API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01WebhookArgs' webhook: Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(self) -> Optional['outputs.ChallengeSpecSolverDns01AcmeDns']:
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "acme_dns")

    @property
    @pulumi.getter
    def akamai(self) -> Optional['outputs.ChallengeSpecSolverDns01Akamai']:
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "akamai")

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(self) -> Optional['outputs.ChallengeSpecSolverDns01AzureDns']:
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "azure_dns")

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(self) -> Optional['outputs.ChallengeSpecSolverDns01CloudDns']:
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "cloud_dns")

    @property
    @pulumi.getter
    def cloudflare(self) -> Optional['outputs.ChallengeSpecSolverDns01Cloudflare']:
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "cloudflare")

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[str]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @property
    @pulumi.getter
    def digitalocean(self) -> Optional['outputs.ChallengeSpecSolverDns01Digitalocean']:
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "digitalocean")

    @property
    @pulumi.getter
    def rfc2136(self) -> Optional['outputs.ChallengeSpecSolverDns01Rfc2136']:
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        """
        return pulumi.get(self, "rfc2136")

    @property
    @pulumi.getter
    def route53(self) -> Optional['outputs.ChallengeSpecSolverDns01Route53']:
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "route53")

    @property
    @pulumi.getter
    def webhook(self) -> Optional['outputs.ChallengeSpecSolverDns01Webhook']:
        """
        Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        """
        return pulumi.get(self, "webhook")


@pulumi.output_type
class ChallengeSpecSolverDns01AcmeDns(dict):
    """
    Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountSecretRef":
            suggest = "account_secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01AcmeDns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AcmeDns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01AcmeDns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_secret_ref: 'outputs.ChallengeSpecSolverDns01AcmeDnsAccountSecretRef',
                 host: str):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01AcmeDnsAccountSecretRefArgs' account_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(self) -> 'outputs.ChallengeSpecSolverDns01AcmeDnsAccountSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "account_secret_ref")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")


@pulumi.output_type
class ChallengeSpecSolverDns01AcmeDnsAccountSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01Akamai(dict):
    """
    Use the Akamai DNS zone management API to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTokenSecretRef":
            suggest = "access_token_secret_ref"
        elif key == "clientSecretSecretRef":
            suggest = "client_secret_secret_ref"
        elif key == "clientTokenSecretRef":
            suggest = "client_token_secret_ref"
        elif key == "serviceConsumerDomain":
            suggest = "service_consumer_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01Akamai. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Akamai.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01Akamai.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token_secret_ref: 'outputs.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef',
                 client_secret_secret_ref: 'outputs.ChallengeSpecSolverDns01AkamaiClientSecretSecretRef',
                 client_token_secret_ref: 'outputs.ChallengeSpecSolverDns01AkamaiClientTokenSecretRef',
                 service_consumer_domain: str):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs' access_token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param 'ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs' client_secret_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param 'ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs' client_token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(self) -> 'outputs.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "access_token_secret_ref")

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(self) -> 'outputs.ChallengeSpecSolverDns01AkamaiClientSecretSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "client_secret_secret_ref")

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(self) -> 'outputs.ChallengeSpecSolverDns01AkamaiClientTokenSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "client_token_secret_ref")

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> str:
        return pulumi.get(self, "service_consumer_domain")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiClientSecretSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01AkamaiClientTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDns(dict):
    """
    Use the Microsoft Azure DNS API to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGroupName":
            suggest = "resource_group_name"
        elif key == "subscriptionID":
            suggest = "subscription_id"
        elif key == "clientID":
            suggest = "client_id"
        elif key == "clientSecretSecretRef":
            suggest = "client_secret_secret_ref"
        elif key == "hostedZoneName":
            suggest = "hosted_zone_name"
        elif key == "managedIdentity":
            suggest = "managed_identity"
        elif key == "tenantID":
            suggest = "tenant_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01AzureDns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AzureDns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01AzureDns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_group_name: str,
                 subscription_id: str,
                 client_id: Optional[str] = None,
                 client_secret_secret_ref: Optional['outputs.ChallengeSpecSolverDns01AzureDnsClientSecretSecretRef'] = None,
                 environment: Optional[str] = None,
                 hosted_zone_name: Optional[str] = None,
                 managed_identity: Optional['outputs.ChallengeSpecSolverDns01AzureDnsManagedIdentity'] = None,
                 tenant_id: Optional[str] = None):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param str resource_group_name: resource group the DNS zone is located in
        :param str subscription_id: ID of the Azure subscription
        :param str client_id: if both this and ClientSecret are left unset MSI will be used
        :param 'ChallengeSpecSolverDns01AzureDnsClientSecretSecretRefArgs' client_secret_secret_ref: if both this and ClientID are left unset MSI will be used
        :param str environment: name of the Azure environment (default AzurePublicCloud)
        :param str hosted_zone_name: name of the DNS zone that should be used
        :param 'ChallengeSpecSolverDns01AzureDnsManagedIdentityArgs' managed_identity: managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
        :param str tenant_id: when specifying ClientID and ClientSecret then this field is also needed
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "subscription_id", subscription_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if managed_identity is not None:
            pulumi.set(__self__, "managed_identity", managed_identity)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        """
        resource group the DNS zone is located in
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> str:
        """
        ID of the Azure subscription
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        if both this and ClientSecret are left unset MSI will be used
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(self) -> Optional['outputs.ChallengeSpecSolverDns01AzureDnsClientSecretSecretRef']:
        """
        if both this and ClientID are left unset MSI will be used
        """
        return pulumi.get(self, "client_secret_secret_ref")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        """
        name of the Azure environment (default AzurePublicCloud)
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[str]:
        """
        name of the DNS zone that should be used
        """
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter(name="managedIdentity")
    def managed_identity(self) -> Optional['outputs.ChallengeSpecSolverDns01AzureDnsManagedIdentity']:
        """
        managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
        """
        return pulumi.get(self, "managed_identity")

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[str]:
        """
        when specifying ClientID and ClientSecret then this field is also needed
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDnsClientSecretSecretRef(dict):
    """
    if both this and ClientID are left unset MSI will be used
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        if both this and ClientID are left unset MSI will be used
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01AzureDnsManagedIdentity(dict):
    """
    managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientID":
            suggest = "client_id"
        elif key == "resourceID":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01AzureDnsManagedIdentity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01AzureDnsManagedIdentity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01AzureDnsManagedIdentity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[str] = None,
                 resource_id: Optional[str] = None):
        """
        managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
        :param str client_id: client ID of the managed identity, can not be used at the same time as resourceID
        :param str resource_id: resource ID of the managed identity, can not be used at the same time as clientID
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        client ID of the managed identity, can not be used at the same time as resourceID
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="resourceID")
    def resource_id(self) -> Optional[str]:
        """
        resource ID of the managed identity, can not be used at the same time as clientID
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudDns(dict):
    """
    Use the Google Cloud DNS API to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostedZoneName":
            suggest = "hosted_zone_name"
        elif key == "serviceAccountSecretRef":
            suggest = "service_account_secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01CloudDns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01CloudDns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01CloudDns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project: str,
                 hosted_zone_name: Optional[str] = None,
                 service_account_secret_ref: Optional['outputs.ChallengeSpecSolverDns01CloudDnsServiceAccountSecretRef'] = None):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param str hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
        :param 'ChallengeSpecSolverDns01CloudDnsServiceAccountSecretRefArgs' service_account_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "project", project)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if service_account_secret_ref is not None:
            pulumi.set(__self__, "service_account_secret_ref", service_account_secret_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[str]:
        """
        HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(self) -> Optional['outputs.ChallengeSpecSolverDns01CloudDnsServiceAccountSecretRef']:
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "service_account_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudDnsServiceAccountSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01Cloudflare(dict):
    """
    Use the Cloudflare API to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeySecretRef":
            suggest = "api_key_secret_ref"
        elif key == "apiTokenSecretRef":
            suggest = "api_token_secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01Cloudflare. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Cloudflare.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01Cloudflare.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key_secret_ref: Optional['outputs.ChallengeSpecSolverDns01CloudflareApiKeySecretRef'] = None,
                 api_token_secret_ref: Optional['outputs.ChallengeSpecSolverDns01CloudflareApiTokenSecretRef'] = None,
                 email: Optional[str] = None):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs' api_key_secret_ref: API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        :param 'ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs' api_token_secret_ref: API token used to authenticate with Cloudflare.
        :param str email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(self) -> Optional['outputs.ChallengeSpecSolverDns01CloudflareApiKeySecretRef']:
        """
        API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        """
        return pulumi.get(self, "api_key_secret_ref")

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(self) -> Optional['outputs.ChallengeSpecSolverDns01CloudflareApiTokenSecretRef']:
        """
        API token used to authenticate with Cloudflare.
        """
        return pulumi.get(self, "api_token_secret_ref")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudflareApiKeySecretRef(dict):
    """
    API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01CloudflareApiTokenSecretRef(dict):
    """
    API token used to authenticate with Cloudflare.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        API token used to authenticate with Cloudflare.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01Digitalocean(dict):
    """
    Use the DigitalOcean DNS API to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenSecretRef":
            suggest = "token_secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01Digitalocean. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Digitalocean.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01Digitalocean.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 token_secret_ref: 'outputs.ChallengeSpecSolverDns01DigitaloceanTokenSecretRef'):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        :param 'ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs' token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(self) -> 'outputs.ChallengeSpecSolverDns01DigitaloceanTokenSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "token_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01DigitaloceanTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01Rfc2136(dict):
    """
    Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tsigAlgorithm":
            suggest = "tsig_algorithm"
        elif key == "tsigKeyName":
            suggest = "tsig_key_name"
        elif key == "tsigSecretSecretRef":
            suggest = "tsig_secret_secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01Rfc2136. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Rfc2136.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01Rfc2136.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 nameserver: str,
                 tsig_algorithm: Optional[str] = None,
                 tsig_key_name: Optional[str] = None,
                 tsig_secret_secret_ref: Optional['outputs.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef'] = None):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        :param str nameserver: The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
        :param str tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param str tsig_key_name: The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
        :param 'ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs' tsig_secret_secret_ref: The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        """
        pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> str:
        """
        The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
        """
        return pulumi.get(self, "nameserver")

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[str]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[str]:
        """
        The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(self) -> Optional['outputs.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef']:
        """
        The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_secret_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef(dict):
    """
    The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53(dict):
    """
    Use the AWS Route53 API to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyID":
            suggest = "access_key_id"
        elif key == "accessKeyIDSecretRef":
            suggest = "access_key_id_secret_ref"
        elif key == "hostedZoneID":
            suggest = "hosted_zone_id"
        elif key == "secretAccessKeySecretRef":
            suggest = "secret_access_key_secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01Route53. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Route53.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01Route53.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 access_key_id: Optional[str] = None,
                 access_key_id_secret_ref: Optional['outputs.ChallengeSpecSolverDns01Route53AccessKeyIdsecretRef'] = None,
                 hosted_zone_id: Optional[str] = None,
                 role: Optional[str] = None,
                 secret_access_key_secret_ref: Optional['outputs.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef'] = None):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param str region: Always set the region when using AccessKeyID and SecretAccessKey
        :param str access_key_id: The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param 'ChallengeSpecSolverDns01Route53AccessKeyIdsecretRefArgs' access_key_id_secret_ref: The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
        :param str role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        :param 'ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs' secret_access_key_secret_ref: The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        pulumi.set(__self__, "region", region)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_key_id_secret_ref is not None:
            pulumi.set(__self__, "access_key_id_secret_ref", access_key_id_secret_ref)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(__self__, "secret_access_key_secret_ref", secret_access_key_secret_ref)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Always set the region when using AccessKeyID and SecretAccessKey
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[str]:
        """
        The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="accessKeyIDSecretRef")
    def access_key_id_secret_ref(self) -> Optional['outputs.ChallengeSpecSolverDns01Route53AccessKeyIdsecretRef']:
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id_secret_ref")

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[str]:
        """
        If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(self) -> Optional['outputs.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef']:
        """
        The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "secret_access_key_secret_ref")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53AccessKeyIdsecretRef(dict):
    """
    The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef(dict):
    """
    The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ChallengeSpecSolverDns01Webhook(dict):
    """
    Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "solverName":
            suggest = "solver_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverDns01Webhook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverDns01Webhook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverDns01Webhook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: str,
                 solver_name: str,
                 config: Optional[Mapping[str, Any]] = None):
        """
        Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        :param str group_name: The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
        :param str solver_name: The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
        :param Mapping[str, Any] config: Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "solver_name", solver_name)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> str:
        """
        The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
        """
        return pulumi.get(self, "config")


@pulumi.output_type
class ChallengeSpecSolverHttp01(dict):
    """
    Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayHTTPRoute":
            suggest = "gateway_http_route"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway_http_route: Optional['outputs.ChallengeSpecSolverHttp01GatewayHttproute'] = None,
                 ingress: Optional['outputs.ChallengeSpecSolverHttp01Ingress'] = None):
        """
        Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        :param 'ChallengeSpecSolverHttp01GatewayHttprouteArgs' gateway_http_route: The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
        :param 'ChallengeSpecSolverHttp01IngressArgs' ingress: The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        """
        if gateway_http_route is not None:
            pulumi.set(__self__, "gateway_http_route", gateway_http_route)
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter(name="gatewayHTTPRoute")
    def gateway_http_route(self) -> Optional['outputs.ChallengeSpecSolverHttp01GatewayHttproute']:
        """
        The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
        """
        return pulumi.get(self, "gateway_http_route")

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ChallengeSpecSolverHttp01Ingress']:
        """
        The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        """
        return pulumi.get(self, "ingress")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHttproute(dict):
    """
    The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentRefs":
            suggest = "parent_refs"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHttproute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHttproute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01GatewayHttproute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 labels: Optional[Mapping[str, str]] = None,
                 parent_refs: Optional[Sequence['outputs.ChallengeSpecSolverHttp01GatewayHttprouteParentRefs']] = None,
                 service_type: Optional[str] = None):
        """
        The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
        :param Mapping[str, str] labels: Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
        :param Sequence['ChallengeSpecSolverHttp01GatewayHttprouteParentRefsArgs'] parent_refs: When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        :param str service_type: Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_refs is not None:
            pulumi.set(__self__, "parent_refs", parent_refs)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="parentRefs")
    def parent_refs(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01GatewayHttprouteParentRefs']]:
        """
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
        """
        return pulumi.get(self, "parent_refs")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class ChallengeSpecSolverHttp01GatewayHttprouteParentRefs(dict):
    """
    ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
     * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
     This API may be extended in the future to support additional kinds of parent resources. 
     The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sectionName":
            suggest = "section_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01GatewayHttprouteParentRefs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01GatewayHttprouteParentRefs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01GatewayHttprouteParentRefs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 section_name: Optional[str] = None):
        """
        ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         This API may be extended in the future to support additional kinds of parent resources. 
         The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
        :param str name: Name is the name of the referent. 
                Support: Core
        :param str group: Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
                Support: Core
        :param str kind: Kind is kind of the referent. 
                There are two kinds of parent resources with "Core" support: 
                * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
                Support for other resources is Implementation-Specific.
        :param str namespace: Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
                Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
                ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
                ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. 
                Support: Core
        :param int port: Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
                When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
                When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. 
                Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
                For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Extended 
                <gateway:experimental>
        :param str section_name: SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
                * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
                Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
                When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
                Support: Core
        """
        pulumi.set(__self__, "name", name)
        if group is None:
            group = 'gateway.networking.k8s.io'
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is None:
            kind = 'Gateway'
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if section_name is not None:
            pulumi.set(__self__, "section_name", section_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the referent. 
         Support: Core
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
         Support: Core
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is kind of the referent. 
         There are two kinds of parent resources with "Core" support: 
         * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         Support for other resources is Implementation-Specific.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
         Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
         ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
         ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. 
         Support: Core
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
         When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
         When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. 
         Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
         For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Extended 
         <gateway:experimental>
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sectionName")
    def section_name(self) -> Optional[str]:
        """
        SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
         * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
         Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
         When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
         Support: Core
        """
        return pulumi.get(self, "section_name")


@pulumi.output_type
class ChallengeSpecSolverHttp01Ingress(dict):
    """
    The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "class":
            suggest = "class_"
        elif key == "ingressClassName":
            suggest = "ingress_class_name"
        elif key == "ingressTemplate":
            suggest = "ingress_template"
        elif key == "podTemplate":
            suggest = "pod_template"
        elif key == "serviceType":
            suggest = "service_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01Ingress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01Ingress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01Ingress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_: Optional[str] = None,
                 ingress_class_name: Optional[str] = None,
                 ingress_template: Optional['outputs.ChallengeSpecSolverHttp01IngressIngressTemplate'] = None,
                 name: Optional[str] = None,
                 pod_template: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplate'] = None,
                 service_type: Optional[str] = None):
        """
        The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        :param str class_: This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
        :param str ingress_class_name: This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
        :param 'ChallengeSpecSolverHttp01IngressIngressTemplateArgs' ingress_template: Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
        :param str name: The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateArgs' pod_template: Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
        :param str service_type: Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_class_name is not None:
            pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[str]:
        """
        This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> Optional[str]:
        """
        This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressIngressTemplate']:
        """
        Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
        """
        return pulumi.get(self, "ingress_template")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplate']:
        """
        Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
        """
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressIngressTemplate(dict):
    """
    Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
    """
    def __init__(__self__, *,
                 metadata: Optional['outputs.ChallengeSpecSolverHttp01IngressIngressTemplateMetadata'] = None):
        """
        Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
        :param 'ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs' metadata: ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressIngressTemplateMetadata']:
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        return pulumi.get(self, "metadata")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressIngressTemplateMetadata(dict):
    """
    ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
    """
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplate(dict):
    """
    Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
    """
    def __init__(__self__, *,
                 metadata: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateMetadata'] = None,
                 spec: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpec'] = None):
        """
        Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs' metadata: ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs' spec: PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateMetadata']:
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpec']:
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateMetadata(dict):
    """
    ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
    """
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the create ACME HTTP01 solver pods.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the create ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpec(dict):
    """
    PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imagePullSecrets":
            suggest = "image_pull_secrets"
        elif key == "nodeSelector":
            suggest = "node_selector"
        elif key == "priorityClassName":
            suggest = "priority_class_name"
        elif key == "serviceAccountName":
            suggest = "service_account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 affinity: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity'] = None,
                 image_pull_secrets: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets']] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations']] = None):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs' affinity: If specified, the pod's scheduling constraints
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsArgs'] image_pull_secrets: If specified, the pod's imagePullSecrets
        :param Mapping[str, str] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param str priority_class_name: If specified, the pod's priorityClassName.
        :param str service_account_name: If specified, the pod's service account
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs'] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity']:
        """
        If specified, the pod's scheduling constraints
        """
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets']]:
        """
        If specified, the pod's imagePullSecrets
        """
        return pulumi.get(self, "image_pull_secrets")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations']]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity(dict):
    """
    If specified, the pod's scheduling constraints
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeAffinity":
            suggest = "node_affinity"
        elif key == "podAffinity":
            suggest = "pod_affinity"
        elif key == "podAntiAffinity":
            suggest = "pod_anti_affinity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_affinity: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity'] = None):
        """
        If specified, the pod's scheduling constraints
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs' node_affinity: Describes node affinity scheduling rules for the pod.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs' pod_affinity: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs' pod_anti_affinity: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity']:
        """
        Describes node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity']:
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity']:
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_anti_affinity")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity(dict):
    """
    Describes node affinity scheduling rules for the pod.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        """
        Describes node affinity scheduling rules for the pod.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs' required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    """
    def __init__(__self__, *,
                 preference: 'outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs' preference: A node selector term, associated with the corresponding weight.
        :param int weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    """
    A node selector term, associated with the corresponding weight.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        """
        A node selector term, associated with the corresponding weight.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeSelectorTerms":
            suggest = "node_selector_terms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs'] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    """
    A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchFields":
            suggest = "match_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        """
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity(dict):
    """
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs' pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param int weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topologyKey":
            suggest = "topology_key"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespace_selector: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs' namespace_selector: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector']:
        """
        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        """
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(dict):
    """
    A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topologyKey":
            suggest = "topology_key"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespace_selector: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs' namespace_selector: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector']:
        """
        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        """
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(dict):
    """
    A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity(dict):
    """
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferredDuringSchedulingIgnoredDuringExecution":
            suggest = "preferred_during_scheduling_ignored_during_execution"
        elif key == "requiredDuringSchedulingIgnoredDuringExecution":
            suggest = "required_during_scheduling_ignored_during_execution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        """
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podAffinityTerm":
            suggest = "pod_affinity_term"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs' pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param int weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topologyKey":
            suggest = "topology_key"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespace_selector: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs' namespace_selector: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector']:
        """
        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        """
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(dict):
    """
    A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topologyKey":
            suggest = "topology_key"
        elif key == "labelSelector":
            suggest = "label_selector"
        elif key == "namespaceSelector":
            suggest = "namespace_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespace_selector: Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param 'ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs' namespace_selector: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        :param Sequence[str] namespaces: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespace_selector is not None:
            pulumi.set(__self__, "namespace_selector", namespace_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter(name="namespaceSelector")
    def namespace_selector(self) -> Optional['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector']:
        """
        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        """
        return pulumi.get(self, "namespace_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
        """
        return pulumi.get(self, "namespaces")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(dict):
    """
    A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
        :param Sequence['ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets(dict):
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations(dict):
    """
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tolerationSeconds":
            suggest = "toleration_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param str effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param str key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param str operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param int toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param str value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ChallengeSpecSolverSelector(dict):
    """
    Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsNames":
            suggest = "dns_names"
        elif key == "dnsZones":
            suggest = "dns_zones"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChallengeSpecSolverSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChallengeSpecSolverSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChallengeSpecSolverSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_names: Optional[Sequence[str]] = None,
                 dns_zones: Optional[Sequence[str]] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        :param Sequence[str] dns_names: List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        :param Sequence[str] dns_zones: List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        :param Mapping[str, str] match_labels: A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[Sequence[str]]:
        """
        List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[Sequence[str]]:
        """
        List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ChallengeStatus(dict):
    def __init__(__self__, *,
                 presented: Optional[bool] = None,
                 processing: Optional[bool] = None,
                 reason: Optional[str] = None,
                 state: Optional[str] = None):
        """
        :param bool presented: presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
        :param bool processing: Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
        :param str reason: Contains human readable information on why the Challenge is in the current state.
        :param str state: Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
        """
        if presented is not None:
            pulumi.set(__self__, "presented", presented)
        if processing is not None:
            pulumi.set(__self__, "processing", processing)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def presented(self) -> Optional[bool]:
        """
        presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
        """
        return pulumi.get(self, "presented")

    @property
    @pulumi.getter
    def processing(self) -> Optional[bool]:
        """
        Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
        """
        return pulumi.get(self, "processing")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Contains human readable information on why the Challenge is in the current state.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class OrderSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "issuerRef":
            suggest = "issuer_ref"
        elif key == "commonName":
            suggest = "common_name"
        elif key == "dnsNames":
            suggest = "dns_names"
        elif key == "ipAddresses":
            suggest = "ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrderSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrderSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrderSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 issuer_ref: 'outputs.OrderSpecIssuerRef',
                 request: str,
                 common_name: Optional[str] = None,
                 dns_names: Optional[Sequence[str]] = None,
                 duration: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None):
        """
        :param 'OrderSpecIssuerRefArgs' issuer_ref: IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
        :param str request: Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
        :param str common_name: CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
        :param Sequence[str] dns_names: DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
        :param str duration: Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
        :param Sequence[str] ip_addresses: IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
        """
        pulumi.set(__self__, "issuer_ref", issuer_ref)
        pulumi.set(__self__, "request", request)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> 'outputs.OrderSpecIssuerRef':
        """
        IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
        """
        return pulumi.get(self, "issuer_ref")

    @property
    @pulumi.getter
    def request(self) -> str:
        """
        Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        """
        CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[Sequence[str]]:
        """
        DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        """
        IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
        """
        return pulumi.get(self, "ip_addresses")


@pulumi.output_type
class OrderSpecIssuerRef(dict):
    """
    IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
    """
    def __init__(__self__, *,
                 name: str,
                 group: Optional[str] = None,
                 kind: Optional[str] = None):
        """
        IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
        :param str name: Name of the resource being referred to.
        :param str group: Group of the resource being referred to.
        :param str kind: Kind of the resource being referred to.
        """
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class OrderStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureTime":
            suggest = "failure_time"
        elif key == "finalizeURL":
            suggest = "finalize_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrderStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrderStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrderStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorizations: Optional[Sequence['outputs.OrderStatusAuthorizations']] = None,
                 certificate: Optional[str] = None,
                 failure_time: Optional[str] = None,
                 finalize_url: Optional[str] = None,
                 reason: Optional[str] = None,
                 state: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param Sequence['OrderStatusAuthorizationsArgs'] authorizations: Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
        :param str certificate: Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
        :param str failure_time: FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
        :param str finalize_url: FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
        :param str reason: Reason optionally provides more information about a why the order is in the current state.
        :param str state: State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
        :param str url: URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
        """
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if failure_time is not None:
            pulumi.set(__self__, "failure_time", failure_time)
        if finalize_url is not None:
            pulumi.set(__self__, "finalize_url", finalize_url)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[Sequence['outputs.OrderStatusAuthorizations']]:
        """
        Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
        """
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="failureTime")
    def failure_time(self) -> Optional[str]:
        """
        FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
        """
        return pulumi.get(self, "failure_time")

    @property
    @pulumi.getter(name="finalizeURL")
    def finalize_url(self) -> Optional[str]:
        """
        FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
        """
        return pulumi.get(self, "finalize_url")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason optionally provides more information about a why the order is in the current state.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class OrderStatusAuthorizations(dict):
    """
    ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialState":
            suggest = "initial_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrderStatusAuthorizations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrderStatusAuthorizations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrderStatusAuthorizations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 challenges: Optional[Sequence['outputs.OrderStatusAuthorizationsChallenges']] = None,
                 identifier: Optional[str] = None,
                 initial_state: Optional[str] = None,
                 wildcard: Optional[bool] = None):
        """
        ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
        :param str url: URL is the URL of the Authorization that must be completed
        :param Sequence['OrderStatusAuthorizationsChallengesArgs'] challenges: Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
        :param str identifier: Identifier is the DNS name to be validated as part of this authorization
        :param str initial_state: InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
        :param bool wildcard: Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
        """
        pulumi.set(__self__, "url", url)
        if challenges is not None:
            pulumi.set(__self__, "challenges", challenges)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if initial_state is not None:
            pulumi.set(__self__, "initial_state", initial_state)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL is the URL of the Authorization that must be completed
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def challenges(self) -> Optional[Sequence['outputs.OrderStatusAuthorizationsChallenges']]:
        """
        Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
        """
        return pulumi.get(self, "challenges")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Identifier is the DNS name to be validated as part of this authorization
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="initialState")
    def initial_state(self) -> Optional[str]:
        """
        InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
        """
        return pulumi.get(self, "initial_state")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[bool]:
        """
        Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
        """
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class OrderStatusAuthorizationsChallenges(dict):
    """
    Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
    """
    def __init__(__self__, *,
                 token: str,
                 type: str,
                 url: str):
        """
        Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
        :param str token: Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
        :param str type: Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
        :param str url: URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
        """
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
        """
        return pulumi.get(self, "url")


