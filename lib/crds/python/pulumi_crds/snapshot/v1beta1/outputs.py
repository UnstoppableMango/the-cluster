# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'VolumeSnapshotContentSpec',
    'VolumeSnapshotContentSpecSource',
    'VolumeSnapshotContentSpecVolumeSnapshotRef',
    'VolumeSnapshotContentStatus',
    'VolumeSnapshotContentStatusError',
    'VolumeSnapshotSpec',
    'VolumeSnapshotSpecSource',
    'VolumeSnapshotStatus',
    'VolumeSnapshotStatusError',
]

@pulumi.output_type
class VolumeSnapshotContentSpec(dict):
    """
    spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deletionPolicy":
            suggest = "deletion_policy"
        elif key == "volumeSnapshotRef":
            suggest = "volume_snapshot_ref"
        elif key == "volumeSnapshotClassName":
            suggest = "volume_snapshot_class_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSnapshotContentSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSnapshotContentSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSnapshotContentSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deletion_policy: str,
                 driver: str,
                 source: 'outputs.VolumeSnapshotContentSpecSource',
                 volume_snapshot_ref: 'outputs.VolumeSnapshotContentSpecVolumeSnapshotRef',
                 volume_snapshot_class_name: Optional[str] = None):
        """
        spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
        :param str deletion_policy: deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the  VolumeSnapshotContent object. Required.
        :param str driver: driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
        :param 'VolumeSnapshotContentSpecSourceArgs' source: source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
        :param 'VolumeSnapshotContentSpecVolumeSnapshotRefArgs' volume_snapshot_ref: volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
        :param str volume_snapshot_class_name: name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
        """
        pulumi.set(__self__, "deletion_policy", deletion_policy)
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "volume_snapshot_ref", volume_snapshot_ref)
        if volume_snapshot_class_name is not None:
            pulumi.set(__self__, "volume_snapshot_class_name", volume_snapshot_class_name)

    @property
    @pulumi.getter(name="deletionPolicy")
    def deletion_policy(self) -> str:
        """
        deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the  VolumeSnapshotContent object. Required.
        """
        return pulumi.get(self, "deletion_policy")

    @property
    @pulumi.getter
    def driver(self) -> str:
        """
        driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
        """
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter
    def source(self) -> 'outputs.VolumeSnapshotContentSpecSource':
        """
        source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="volumeSnapshotRef")
    def volume_snapshot_ref(self) -> 'outputs.VolumeSnapshotContentSpecVolumeSnapshotRef':
        """
        volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
        """
        return pulumi.get(self, "volume_snapshot_ref")

    @property
    @pulumi.getter(name="volumeSnapshotClassName")
    def volume_snapshot_class_name(self) -> Optional[str]:
        """
        name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
        """
        return pulumi.get(self, "volume_snapshot_class_name")


@pulumi.output_type
class VolumeSnapshotContentSpecSource(dict):
    """
    source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "snapshotHandle":
            suggest = "snapshot_handle"
        elif key == "volumeHandle":
            suggest = "volume_handle"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSnapshotContentSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSnapshotContentSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSnapshotContentSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 snapshot_handle: Optional[str] = None,
                 volume_handle: Optional[str] = None):
        """
        source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
        :param str snapshot_handle: snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
        :param str volume_handle: volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
        """
        if snapshot_handle is not None:
            pulumi.set(__self__, "snapshot_handle", snapshot_handle)
        if volume_handle is not None:
            pulumi.set(__self__, "volume_handle", volume_handle)

    @property
    @pulumi.getter(name="snapshotHandle")
    def snapshot_handle(self) -> Optional[str]:
        """
        snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
        """
        return pulumi.get(self, "snapshot_handle")

    @property
    @pulumi.getter(name="volumeHandle")
    def volume_handle(self) -> Optional[str]:
        """
        volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
        """
        return pulumi.get(self, "volume_handle")


@pulumi.output_type
class VolumeSnapshotContentSpecVolumeSnapshotRef(dict):
    """
    volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"
        elif key == "fieldPath":
            suggest = "field_path"
        elif key == "resourceVersion":
            suggest = "resource_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSnapshotContentSpecVolumeSnapshotRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSnapshotContentSpecVolumeSnapshotRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSnapshotContentSpecVolumeSnapshotRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        """
        volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
        :param str api_version: API version of the referent.
        :param str field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param str kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class VolumeSnapshotContentStatus(dict):
    """
    status represents the current information of a snapshot.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"
        elif key == "readyToUse":
            suggest = "ready_to_use"
        elif key == "restoreSize":
            suggest = "restore_size"
        elif key == "snapshotHandle":
            suggest = "snapshot_handle"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSnapshotContentStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSnapshotContentStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSnapshotContentStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: Optional[int] = None,
                 error: Optional['outputs.VolumeSnapshotContentStatusError'] = None,
                 ready_to_use: Optional[bool] = None,
                 restore_size: Optional[int] = None,
                 snapshot_handle: Optional[str] = None):
        """
        status represents the current information of a snapshot.
        :param int creation_time: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
        :param 'VolumeSnapshotContentStatusErrorArgs' error: error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
        :param bool ready_to_use: readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
        :param int restore_size: restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
        :param str snapshot_handle: snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
        """
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if ready_to_use is not None:
            pulumi.set(__self__, "ready_to_use", ready_to_use)
        if restore_size is not None:
            pulumi.set(__self__, "restore_size", restore_size)
        if snapshot_handle is not None:
            pulumi.set(__self__, "snapshot_handle", snapshot_handle)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[int]:
        """
        creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def error(self) -> Optional['outputs.VolumeSnapshotContentStatusError']:
        """
        error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="readyToUse")
    def ready_to_use(self) -> Optional[bool]:
        """
        readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
        """
        return pulumi.get(self, "ready_to_use")

    @property
    @pulumi.getter(name="restoreSize")
    def restore_size(self) -> Optional[int]:
        """
        restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
        """
        return pulumi.get(self, "restore_size")

    @property
    @pulumi.getter(name="snapshotHandle")
    def snapshot_handle(self) -> Optional[str]:
        """
        snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
        """
        return pulumi.get(self, "snapshot_handle")


@pulumi.output_type
class VolumeSnapshotContentStatusError(dict):
    """
    error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 time: Optional[str] = None):
        """
        error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
        :param str message: message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
        :param str time: time is the timestamp when the error was encountered.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        time is the timestamp when the error was encountered.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class VolumeSnapshotSpec(dict):
    """
    spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeSnapshotClassName":
            suggest = "volume_snapshot_class_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSnapshotSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSnapshotSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSnapshotSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source: 'outputs.VolumeSnapshotSpecSource',
                 volume_snapshot_class_name: Optional[str] = None):
        """
        spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.
        :param 'VolumeSnapshotSpecSourceArgs' source: source specifies where a snapshot will be created from. This field is immutable after creation. Required.
        :param str volume_snapshot_class_name: VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.
        """
        pulumi.set(__self__, "source", source)
        if volume_snapshot_class_name is not None:
            pulumi.set(__self__, "volume_snapshot_class_name", volume_snapshot_class_name)

    @property
    @pulumi.getter
    def source(self) -> 'outputs.VolumeSnapshotSpecSource':
        """
        source specifies where a snapshot will be created from. This field is immutable after creation. Required.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="volumeSnapshotClassName")
    def volume_snapshot_class_name(self) -> Optional[str]:
        """
        VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.
        """
        return pulumi.get(self, "volume_snapshot_class_name")


@pulumi.output_type
class VolumeSnapshotSpecSource(dict):
    """
    source specifies where a snapshot will be created from. This field is immutable after creation. Required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "persistentVolumeClaimName":
            suggest = "persistent_volume_claim_name"
        elif key == "volumeSnapshotContentName":
            suggest = "volume_snapshot_content_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSnapshotSpecSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSnapshotSpecSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSnapshotSpecSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 persistent_volume_claim_name: Optional[str] = None,
                 volume_snapshot_content_name: Optional[str] = None):
        """
        source specifies where a snapshot will be created from. This field is immutable after creation. Required.
        :param str persistent_volume_claim_name: persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object representing the volume from which a snapshot should be created. This PVC is assumed to be in the same namespace as the VolumeSnapshot object. This field should be set if the snapshot does not exists, and needs to be created. This field is immutable.
        :param str volume_snapshot_content_name: volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object representing an existing volume snapshot. This field should be set if the snapshot already exists and only needs a representation in Kubernetes. This field is immutable.
        """
        if persistent_volume_claim_name is not None:
            pulumi.set(__self__, "persistent_volume_claim_name", persistent_volume_claim_name)
        if volume_snapshot_content_name is not None:
            pulumi.set(__self__, "volume_snapshot_content_name", volume_snapshot_content_name)

    @property
    @pulumi.getter(name="persistentVolumeClaimName")
    def persistent_volume_claim_name(self) -> Optional[str]:
        """
        persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object representing the volume from which a snapshot should be created. This PVC is assumed to be in the same namespace as the VolumeSnapshot object. This field should be set if the snapshot does not exists, and needs to be created. This field is immutable.
        """
        return pulumi.get(self, "persistent_volume_claim_name")

    @property
    @pulumi.getter(name="volumeSnapshotContentName")
    def volume_snapshot_content_name(self) -> Optional[str]:
        """
        volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object representing an existing volume snapshot. This field should be set if the snapshot already exists and only needs a representation in Kubernetes. This field is immutable.
        """
        return pulumi.get(self, "volume_snapshot_content_name")


@pulumi.output_type
class VolumeSnapshotStatus(dict):
    """
    status represents the current information of a snapshot. Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "boundVolumeSnapshotContentName":
            suggest = "bound_volume_snapshot_content_name"
        elif key == "creationTime":
            suggest = "creation_time"
        elif key == "readyToUse":
            suggest = "ready_to_use"
        elif key == "restoreSize":
            suggest = "restore_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeSnapshotStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeSnapshotStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeSnapshotStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bound_volume_snapshot_content_name: Optional[str] = None,
                 creation_time: Optional[str] = None,
                 error: Optional['outputs.VolumeSnapshotStatusError'] = None,
                 ready_to_use: Optional[bool] = None,
                 restore_size: Optional[Any] = None):
        """
        status represents the current information of a snapshot. Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
        :param str bound_volume_snapshot_content_name: boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
        :param str creation_time: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.
        :param 'VolumeSnapshotStatusErrorArgs' error: error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
        :param bool ready_to_use: readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
        :param Union[int, str] restore_size: restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
        """
        if bound_volume_snapshot_content_name is not None:
            pulumi.set(__self__, "bound_volume_snapshot_content_name", bound_volume_snapshot_content_name)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if ready_to_use is not None:
            pulumi.set(__self__, "ready_to_use", ready_to_use)
        if restore_size is not None:
            pulumi.set(__self__, "restore_size", restore_size)

    @property
    @pulumi.getter(name="boundVolumeSnapshotContentName")
    def bound_volume_snapshot_content_name(self) -> Optional[str]:
        """
        boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
        """
        return pulumi.get(self, "bound_volume_snapshot_content_name")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        """
        creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def error(self) -> Optional['outputs.VolumeSnapshotStatusError']:
        """
        error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="readyToUse")
    def ready_to_use(self) -> Optional[bool]:
        """
        readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
        """
        return pulumi.get(self, "ready_to_use")

    @property
    @pulumi.getter(name="restoreSize")
    def restore_size(self) -> Optional[Any]:
        """
        restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
        """
        return pulumi.get(self, "restore_size")


@pulumi.output_type
class VolumeSnapshotStatusError(dict):
    """
    error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 time: Optional[str] = None):
        """
        error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
        :param str message: message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
        :param str time: time is the timestamp when the error was encountered.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        time is the timestamp when the error was encountered.
        """
        return pulumi.get(self, "time")


