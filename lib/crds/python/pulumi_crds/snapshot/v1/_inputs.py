# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'VolumeSnapshotContentSpecVolumeSnapshotRefArgs',
    'VolumeSnapshotContentSpecArgs',
    'VolumeSnapshotContentStatusErrorArgs',
    'VolumeSnapshotContentStatusArgs',
    'VolumeSnapshotSpecArgs',
    'VolumeSnapshotStatusErrorArgs',
    'VolumeSnapshotStatusArgs',
]

@pulumi.input_type
class VolumeSnapshotContentSpecVolumeSnapshotRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
        :param pulumi.Input[str] api_version: API version of the referent.
        :param pulumi.Input[str] field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param pulumi.Input[str] kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param pulumi.Input[str] resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class VolumeSnapshotContentSpecArgs:
    def __init__(__self__, *,
                 deletion_policy: pulumi.Input[str],
                 driver: pulumi.Input[str],
                 source: Any,
                 volume_snapshot_ref: pulumi.Input['VolumeSnapshotContentSpecVolumeSnapshotRefArgs'],
                 source_volume_mode: Optional[pulumi.Input[str]] = None,
                 volume_snapshot_class_name: Optional[pulumi.Input[str]] = None):
        """
        spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
        :param pulumi.Input[str] deletion_policy: deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.
        :param pulumi.Input[str] driver: driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
        :param Any source: source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
        :param pulumi.Input['VolumeSnapshotContentSpecVolumeSnapshotRefArgs'] volume_snapshot_ref: volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
        :param pulumi.Input[str] source_volume_mode: SourceVolumeMode is the mode of the volume whose snapshot is taken. Can be either “Filesystem” or “Block”. If not specified, it indicates the source volume's mode is unknown. This field is immutable. This field is an alpha field.
        :param pulumi.Input[str] volume_snapshot_class_name: name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
        """
        pulumi.set(__self__, "deletion_policy", deletion_policy)
        pulumi.set(__self__, "driver", driver)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "volume_snapshot_ref", volume_snapshot_ref)
        if source_volume_mode is not None:
            pulumi.set(__self__, "source_volume_mode", source_volume_mode)
        if volume_snapshot_class_name is not None:
            pulumi.set(__self__, "volume_snapshot_class_name", volume_snapshot_class_name)

    @property
    @pulumi.getter(name="deletionPolicy")
    def deletion_policy(self) -> pulumi.Input[str]:
        """
        deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the VolumeSnapshotContent object. Required.
        """
        return pulumi.get(self, "deletion_policy")

    @deletion_policy.setter
    def deletion_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_policy", value)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter
    def source(self) -> Any:
        """
        source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Any):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="volumeSnapshotRef")
    def volume_snapshot_ref(self) -> pulumi.Input['VolumeSnapshotContentSpecVolumeSnapshotRefArgs']:
        """
        volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
        """
        return pulumi.get(self, "volume_snapshot_ref")

    @volume_snapshot_ref.setter
    def volume_snapshot_ref(self, value: pulumi.Input['VolumeSnapshotContentSpecVolumeSnapshotRefArgs']):
        pulumi.set(self, "volume_snapshot_ref", value)

    @property
    @pulumi.getter(name="sourceVolumeMode")
    def source_volume_mode(self) -> Optional[pulumi.Input[str]]:
        """
        SourceVolumeMode is the mode of the volume whose snapshot is taken. Can be either “Filesystem” or “Block”. If not specified, it indicates the source volume's mode is unknown. This field is immutable. This field is an alpha field.
        """
        return pulumi.get(self, "source_volume_mode")

    @source_volume_mode.setter
    def source_volume_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_volume_mode", value)

    @property
    @pulumi.getter(name="volumeSnapshotClassName")
    def volume_snapshot_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
        """
        return pulumi.get(self, "volume_snapshot_class_name")

    @volume_snapshot_class_name.setter
    def volume_snapshot_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_snapshot_class_name", value)


@pulumi.input_type
class VolumeSnapshotContentStatusErrorArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        """
        error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
        :param pulumi.Input[str] message: message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
        :param pulumi.Input[str] time: time is the timestamp when the error was encountered.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        time is the timestamp when the error was encountered.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class VolumeSnapshotContentStatusArgs:
    def __init__(__self__, *,
                 creation_time: Optional[pulumi.Input[int]] = None,
                 error: Optional[pulumi.Input['VolumeSnapshotContentStatusErrorArgs']] = None,
                 ready_to_use: Optional[pulumi.Input[bool]] = None,
                 restore_size: Optional[pulumi.Input[int]] = None,
                 snapshot_handle: Optional[pulumi.Input[str]] = None,
                 volume_group_snapshot_content_name: Optional[pulumi.Input[str]] = None):
        """
        status represents the current information of a snapshot.
        :param pulumi.Input[int] creation_time: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
        :param pulumi.Input['VolumeSnapshotContentStatusErrorArgs'] error: error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
        :param pulumi.Input[bool] ready_to_use: readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
        :param pulumi.Input[int] restore_size: restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
        :param pulumi.Input[str] snapshot_handle: snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
        :param pulumi.Input[str] volume_group_snapshot_content_name: VolumeGroupSnapshotContentName is the name of the VolumeGroupSnapshotContent of which this VolumeSnapshotContent is a part of.
        """
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if ready_to_use is not None:
            pulumi.set(__self__, "ready_to_use", ready_to_use)
        if restore_size is not None:
            pulumi.set(__self__, "restore_size", restore_size)
        if snapshot_handle is not None:
            pulumi.set(__self__, "snapshot_handle", snapshot_handle)
        if volume_group_snapshot_content_name is not None:
            pulumi.set(__self__, "volume_group_snapshot_content_name", volume_group_snapshot_content_name)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[int]]:
        """
        creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['VolumeSnapshotContentStatusErrorArgs']]:
        """
        error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
        """
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['VolumeSnapshotContentStatusErrorArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="readyToUse")
    def ready_to_use(self) -> Optional[pulumi.Input[bool]]:
        """
        readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
        """
        return pulumi.get(self, "ready_to_use")

    @ready_to_use.setter
    def ready_to_use(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready_to_use", value)

    @property
    @pulumi.getter(name="restoreSize")
    def restore_size(self) -> Optional[pulumi.Input[int]]:
        """
        restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
        """
        return pulumi.get(self, "restore_size")

    @restore_size.setter
    def restore_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restore_size", value)

    @property
    @pulumi.getter(name="snapshotHandle")
    def snapshot_handle(self) -> Optional[pulumi.Input[str]]:
        """
        snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
        """
        return pulumi.get(self, "snapshot_handle")

    @snapshot_handle.setter
    def snapshot_handle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_handle", value)

    @property
    @pulumi.getter(name="volumeGroupSnapshotContentName")
    def volume_group_snapshot_content_name(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeGroupSnapshotContentName is the name of the VolumeGroupSnapshotContent of which this VolumeSnapshotContent is a part of.
        """
        return pulumi.get(self, "volume_group_snapshot_content_name")

    @volume_group_snapshot_content_name.setter
    def volume_group_snapshot_content_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_group_snapshot_content_name", value)


@pulumi.input_type
class VolumeSnapshotSpecArgs:
    def __init__(__self__, *,
                 source: Any,
                 volume_snapshot_class_name: Optional[pulumi.Input[str]] = None):
        """
        spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.
        :param Any source: source specifies where a snapshot will be created from. This field is immutable after creation. Required.
        :param pulumi.Input[str] volume_snapshot_class_name: VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.
        """
        pulumi.set(__self__, "source", source)
        if volume_snapshot_class_name is not None:
            pulumi.set(__self__, "volume_snapshot_class_name", volume_snapshot_class_name)

    @property
    @pulumi.getter
    def source(self) -> Any:
        """
        source specifies where a snapshot will be created from. This field is immutable after creation. Required.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Any):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="volumeSnapshotClassName")
    def volume_snapshot_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.
        """
        return pulumi.get(self, "volume_snapshot_class_name")

    @volume_snapshot_class_name.setter
    def volume_snapshot_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_snapshot_class_name", value)


@pulumi.input_type
class VolumeSnapshotStatusErrorArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        """
        error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
        :param pulumi.Input[str] message: message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
        :param pulumi.Input[str] time: time is the timestamp when the error was encountered.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        time is the timestamp when the error was encountered.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class VolumeSnapshotStatusArgs:
    def __init__(__self__, *,
                 bound_volume_snapshot_content_name: Optional[pulumi.Input[str]] = None,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 error: Optional[pulumi.Input['VolumeSnapshotStatusErrorArgs']] = None,
                 ready_to_use: Optional[pulumi.Input[bool]] = None,
                 restore_size: Optional[pulumi.Input[Union[int, str]]] = None,
                 volume_group_snapshot_name: Optional[pulumi.Input[str]] = None):
        """
        status represents the current information of a snapshot. Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
        :param pulumi.Input[str] bound_volume_snapshot_content_name: boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
        :param pulumi.Input[str] creation_time: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.
        :param pulumi.Input['VolumeSnapshotStatusErrorArgs'] error: error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
        :param pulumi.Input[bool] ready_to_use: readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
        :param pulumi.Input[Union[int, str]] restore_size: restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
        :param pulumi.Input[str] volume_group_snapshot_name: VolumeGroupSnapshotName is the name of the VolumeGroupSnapshot of which this VolumeSnapshot is a part of.
        """
        if bound_volume_snapshot_content_name is not None:
            pulumi.set(__self__, "bound_volume_snapshot_content_name", bound_volume_snapshot_content_name)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if ready_to_use is not None:
            pulumi.set(__self__, "ready_to_use", ready_to_use)
        if restore_size is not None:
            pulumi.set(__self__, "restore_size", restore_size)
        if volume_group_snapshot_name is not None:
            pulumi.set(__self__, "volume_group_snapshot_name", volume_group_snapshot_name)

    @property
    @pulumi.getter(name="boundVolumeSnapshotContentName")
    def bound_volume_snapshot_content_name(self) -> Optional[pulumi.Input[str]]:
        """
        boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
        """
        return pulumi.get(self, "bound_volume_snapshot_content_name")

    @bound_volume_snapshot_content_name.setter
    def bound_volume_snapshot_content_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bound_volume_snapshot_content_name", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        """
        creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['VolumeSnapshotStatusErrorArgs']]:
        """
        error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
        """
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['VolumeSnapshotStatusErrorArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="readyToUse")
    def ready_to_use(self) -> Optional[pulumi.Input[bool]]:
        """
        readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
        """
        return pulumi.get(self, "ready_to_use")

    @ready_to_use.setter
    def ready_to_use(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready_to_use", value)

    @property
    @pulumi.getter(name="restoreSize")
    def restore_size(self) -> Optional[pulumi.Input[Union[int, str]]]:
        """
        restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
        """
        return pulumi.get(self, "restore_size")

    @restore_size.setter
    def restore_size(self, value: Optional[pulumi.Input[Union[int, str]]]):
        pulumi.set(self, "restore_size", value)

    @property
    @pulumi.getter(name="volumeGroupSnapshotName")
    def volume_group_snapshot_name(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeGroupSnapshotName is the name of the VolumeGroupSnapshot of which this VolumeSnapshot is a part of.
        """
        return pulumi.get(self, "volume_group_snapshot_name")

    @volume_group_snapshot_name.setter
    def volume_group_snapshot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_group_snapshot_name", value)


