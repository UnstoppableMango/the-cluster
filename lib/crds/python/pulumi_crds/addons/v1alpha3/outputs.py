# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ClusterResourceSetBindingSpec',
    'ClusterResourceSetBindingSpecBindings',
    'ClusterResourceSetBindingSpecBindingsResources',
    'ClusterResourceSetSpec',
    'ClusterResourceSetSpecClusterSelector',
    'ClusterResourceSetSpecClusterSelectorMatchExpressions',
    'ClusterResourceSetSpecResources',
    'ClusterResourceSetStatus',
    'ClusterResourceSetStatusConditions',
]

@pulumi.output_type
class ClusterResourceSetBindingSpec(dict):
    """
    ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
    """
    def __init__(__self__, *,
                 bindings: Optional[Sequence['outputs.ClusterResourceSetBindingSpecBindings']] = None):
        """
        ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
        :param Sequence['ClusterResourceSetBindingSpecBindingsArgs'] bindings: Bindings is a list of ClusterResourceSets and their resources.
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[Sequence['outputs.ClusterResourceSetBindingSpecBindings']]:
        """
        Bindings is a list of ClusterResourceSets and their resources.
        """
        return pulumi.get(self, "bindings")


@pulumi.output_type
class ClusterResourceSetBindingSpecBindings(dict):
    """
    ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterResourceSetName":
            suggest = "cluster_resource_set_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSetBindingSpecBindings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSetBindingSpecBindings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSetBindingSpecBindings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_resource_set_name: str,
                 resources: Optional[Sequence['outputs.ClusterResourceSetBindingSpecBindingsResources']] = None):
        """
        ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
        :param str cluster_resource_set_name: ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
        :param Sequence['ClusterResourceSetBindingSpecBindingsResourcesArgs'] resources: Resources is a list of resources that the ClusterResourceSet has.
        """
        pulumi.set(__self__, "cluster_resource_set_name", cluster_resource_set_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="clusterResourceSetName")
    def cluster_resource_set_name(self) -> str:
        """
        ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
        """
        return pulumi.get(self, "cluster_resource_set_name")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ClusterResourceSetBindingSpecBindingsResources']]:
        """
        Resources is a list of resources that the ClusterResourceSet has.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class ClusterResourceSetBindingSpecBindingsResources(dict):
    """
    ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastAppliedTime":
            suggest = "last_applied_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSetBindingSpecBindingsResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSetBindingSpecBindingsResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSetBindingSpecBindingsResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 applied: bool,
                 kind: str,
                 name: str,
                 hash: Optional[str] = None,
                 last_applied_time: Optional[str] = None):
        """
        ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
        :param bool applied: Applied is to track if a resource is applied to the cluster or not.
        :param str kind: Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
        :param str name: Name of the resource that is in the same namespace with ClusterResourceSet object.
        :param str hash: Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
        :param str last_applied_time: LastAppliedTime identifies when this resource was last applied to the cluster.
        """
        pulumi.set(__self__, "applied", applied)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if hash is not None:
            pulumi.set(__self__, "hash", hash)
        if last_applied_time is not None:
            pulumi.set(__self__, "last_applied_time", last_applied_time)

    @property
    @pulumi.getter
    def applied(self) -> bool:
        """
        Applied is to track if a resource is applied to the cluster or not.
        """
        return pulumi.get(self, "applied")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource that is in the same namespace with ClusterResourceSet object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def hash(self) -> Optional[str]:
        """
        Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
        """
        return pulumi.get(self, "hash")

    @property
    @pulumi.getter(name="lastAppliedTime")
    def last_applied_time(self) -> Optional[str]:
        """
        LastAppliedTime identifies when this resource was last applied to the cluster.
        """
        return pulumi.get(self, "last_applied_time")


@pulumi.output_type
class ClusterResourceSetSpec(dict):
    """
    ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterSelector":
            suggest = "cluster_selector"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSetSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSetSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSetSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_selector: 'outputs.ClusterResourceSetSpecClusterSelector',
                 resources: Optional[Sequence['outputs.ClusterResourceSetSpecResources']] = None,
                 strategy: Optional[str] = None):
        """
        ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
        :param 'ClusterResourceSetSpecClusterSelectorArgs' cluster_selector: Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable.
        :param Sequence['ClusterResourceSetSpecResourcesArgs'] resources: Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
        :param str strategy: Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
        """
        pulumi.set(__self__, "cluster_selector", cluster_selector)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="clusterSelector")
    def cluster_selector(self) -> 'outputs.ClusterResourceSetSpecClusterSelector':
        """
        Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable.
        """
        return pulumi.get(self, "cluster_selector")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.ClusterResourceSetSpecResources']]:
        """
        Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        """
        Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
        """
        return pulumi.get(self, "strategy")


@pulumi.output_type
class ClusterResourceSetSpecClusterSelector(dict):
    """
    Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchExpressions":
            suggest = "match_expressions"
        elif key == "matchLabels":
            suggest = "match_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSetSpecClusterSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSetSpecClusterSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSetSpecClusterSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterResourceSetSpecClusterSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable.
        :param Sequence['ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterResourceSetSpecClusterSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")


@pulumi.output_type
class ClusterResourceSetSpecClusterSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ClusterResourceSetSpecResources(dict):
    """
    ResourceRef specifies a resource.
    """
    def __init__(__self__, *,
                 kind: str,
                 name: str):
        """
        ResourceRef specifies a resource.
        :param str kind: Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
        :param str name: Name of the resource that is in the same namespace with ClusterResourceSet object.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource that is in the same namespace with ClusterResourceSet object.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterResourceSetStatus(dict):
    """
    ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSetStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSetStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSetStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ClusterResourceSetStatusConditions']] = None,
                 observed_generation: Optional[int] = None):
        """
        ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
        :param Sequence['ClusterResourceSetStatusConditionsArgs'] conditions: Conditions defines current state of the ClusterResourceSet.
        :param int observed_generation: ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterResourceSetStatusConditions']]:
        """
        Conditions defines current state of the ClusterResourceSet.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
        """
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class ClusterResourceSetStatusConditions(dict):
    """
    Condition defines an observation of a Cluster API resource operational state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterResourceSetStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterResourceSetStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterResourceSetStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param str last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param str message: A human readable message indicating details about the transition. This field may be empty.
        :param str reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param str severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")


