# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'ClusterResourceSetBindingSpecBindingsResourcesArgs',
    'ClusterResourceSetBindingSpecBindingsArgs',
    'ClusterResourceSetBindingSpecArgs',
    'ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs',
    'ClusterResourceSetSpecClusterSelectorArgs',
    'ClusterResourceSetSpecResourcesArgs',
    'ClusterResourceSetSpecArgs',
    'ClusterResourceSetStatusConditionsArgs',
    'ClusterResourceSetStatusArgs',
]

@pulumi.input_type
class ClusterResourceSetBindingSpecBindingsResourcesArgs:
    def __init__(__self__, *,
                 applied: pulumi.Input[bool],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 hash: Optional[pulumi.Input[str]] = None,
                 last_applied_time: Optional[pulumi.Input[str]] = None):
        """
        ResourceBinding shows the status of a resource that belongs to a ClusterResourceSet matched by the owner cluster of the ClusterResourceSetBinding object.
        :param pulumi.Input[bool] applied: Applied is to track if a resource is applied to the cluster or not.
        :param pulumi.Input[str] kind: Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
        :param pulumi.Input[str] name: Name of the resource that is in the same namespace with ClusterResourceSet object.
        :param pulumi.Input[str] hash: Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
        :param pulumi.Input[str] last_applied_time: LastAppliedTime identifies when this resource was last applied to the cluster.
        """
        pulumi.set(__self__, "applied", applied)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if hash is not None:
            pulumi.set(__self__, "hash", hash)
        if last_applied_time is not None:
            pulumi.set(__self__, "last_applied_time", last_applied_time)

    @property
    @pulumi.getter
    def applied(self) -> pulumi.Input[bool]:
        """
        Applied is to track if a resource is applied to the cluster or not.
        """
        return pulumi.get(self, "applied")

    @applied.setter
    def applied(self, value: pulumi.Input[bool]):
        pulumi.set(self, "applied", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource that is in the same namespace with ClusterResourceSet object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def hash(self) -> Optional[pulumi.Input[str]]:
        """
        Hash is the hash of a resource's data. This can be used to decide if a resource is changed. For "ApplyOnce" ClusterResourceSet.spec.strategy, this is no-op as that strategy does not act on change.
        """
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash", value)

    @property
    @pulumi.getter(name="lastAppliedTime")
    def last_applied_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastAppliedTime identifies when this resource was last applied to the cluster.
        """
        return pulumi.get(self, "last_applied_time")

    @last_applied_time.setter
    def last_applied_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_applied_time", value)


@pulumi.input_type
class ClusterResourceSetBindingSpecBindingsArgs:
    def __init__(__self__, *,
                 cluster_resource_set_name: pulumi.Input[str],
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetBindingSpecBindingsResourcesArgs']]]] = None):
        """
        ResourceSetBinding keeps info on all of the resources in a ClusterResourceSet.
        :param pulumi.Input[str] cluster_resource_set_name: ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetBindingSpecBindingsResourcesArgs']]] resources: Resources is a list of resources that the ClusterResourceSet has.
        """
        pulumi.set(__self__, "cluster_resource_set_name", cluster_resource_set_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="clusterResourceSetName")
    def cluster_resource_set_name(self) -> pulumi.Input[str]:
        """
        ClusterResourceSetName is the name of the ClusterResourceSet that is applied to the owner cluster of the binding.
        """
        return pulumi.get(self, "cluster_resource_set_name")

    @cluster_resource_set_name.setter
    def cluster_resource_set_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_resource_set_name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetBindingSpecBindingsResourcesArgs']]]]:
        """
        Resources is a list of resources that the ClusterResourceSet has.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetBindingSpecBindingsResourcesArgs']]]]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class ClusterResourceSetBindingSpecArgs:
    def __init__(__self__, *,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetBindingSpecBindingsArgs']]]] = None):
        """
        ClusterResourceSetBindingSpec defines the desired state of ClusterResourceSetBinding.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetBindingSpecBindingsArgs']]] bindings: Bindings is a list of ClusterResourceSets and their resources.
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetBindingSpecBindingsArgs']]]]:
        """
        Bindings is a list of ClusterResourceSets and their resources.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetBindingSpecBindingsArgs']]]]):
        pulumi.set(self, "bindings", value)


@pulumi.input_type
class ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterResourceSetSpecClusterSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetSpecClusterSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterResourceSetSpecResourcesArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        ResourceRef specifies a resource.
        :param pulumi.Input[str] kind: Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
        :param pulumi.Input[str] name: Name of the resource that is in the same namespace with ClusterResourceSet object.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the resource. Supported kinds are: Secrets and ConfigMaps.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource that is in the same namespace with ClusterResourceSet object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterResourceSetSpecArgs:
    def __init__(__self__, *,
                 cluster_selector: pulumi.Input['ClusterResourceSetSpecClusterSelectorArgs'],
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetSpecResourcesArgs']]]] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        """
        ClusterResourceSetSpec defines the desired state of ClusterResourceSet.
        :param pulumi.Input['ClusterResourceSetSpecClusterSelectorArgs'] cluster_selector: Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetSpecResourcesArgs']]] resources: Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
        :param pulumi.Input[str] strategy: Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
        """
        pulumi.set(__self__, "cluster_selector", cluster_selector)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="clusterSelector")
    def cluster_selector(self) -> pulumi.Input['ClusterResourceSetSpecClusterSelectorArgs']:
        """
        Label selector for Clusters. The Clusters that are selected by this will be the ones affected by this ClusterResourceSet. It must match the Cluster labels. This field is immutable. Label selector cannot be empty.
        """
        return pulumi.get(self, "cluster_selector")

    @cluster_selector.setter
    def cluster_selector(self, value: pulumi.Input['ClusterResourceSetSpecClusterSelectorArgs']):
        pulumi.set(self, "cluster_selector", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetSpecResourcesArgs']]]]:
        """
        Resources is a list of Secrets/ConfigMaps where each contains 1 or more resources to be applied to remote clusters.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetSpecResourcesArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Strategy is the strategy to be used during applying resources. Defaults to ApplyOnce. This field is immutable.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterResourceSetStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition. This field may be empty.
        :param pulumi.Input[str] reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param pulumi.Input[str] severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class ClusterResourceSetStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetStatusConditionsArgs']]]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None):
        """
        ClusterResourceSetStatus defines the observed state of ClusterResourceSet.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetStatusConditionsArgs']]] conditions: Conditions defines current state of the ClusterResourceSet.
        :param pulumi.Input[int] observed_generation: ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetStatusConditionsArgs']]]]:
        """
        Conditions defines current state of the ClusterResourceSet.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSetStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        ObservedGeneration reflects the generation of the most recently observed ClusterResourceSet.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)


