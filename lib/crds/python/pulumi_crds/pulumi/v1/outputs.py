# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ProgramProgram',
    'ProgramProgramConfiguration',
    'ProgramProgramResources',
    'ProgramProgramResourcesGet',
    'ProgramProgramResourcesOptions',
    'ProgramProgramResourcesOptionsCustomTimeouts',
    'StackSpec',
    'StackSpecEnvRefs',
    'StackSpecEnvRefsEnv',
    'StackSpecEnvRefsFilesystem',
    'StackSpecEnvRefsLiteral',
    'StackSpecEnvRefsSecret',
    'StackSpecFluxSource',
    'StackSpecFluxSourceSourceRef',
    'StackSpecGitAuth',
    'StackSpecGitAuthAccessToken',
    'StackSpecGitAuthAccessTokenEnv',
    'StackSpecGitAuthAccessTokenFilesystem',
    'StackSpecGitAuthAccessTokenLiteral',
    'StackSpecGitAuthAccessTokenSecret',
    'StackSpecGitAuthBasicAuth',
    'StackSpecGitAuthBasicAuthPassword',
    'StackSpecGitAuthBasicAuthPasswordEnv',
    'StackSpecGitAuthBasicAuthPasswordFilesystem',
    'StackSpecGitAuthBasicAuthPasswordLiteral',
    'StackSpecGitAuthBasicAuthPasswordSecret',
    'StackSpecGitAuthBasicAuthUserName',
    'StackSpecGitAuthBasicAuthUserNameEnv',
    'StackSpecGitAuthBasicAuthUserNameFilesystem',
    'StackSpecGitAuthBasicAuthUserNameLiteral',
    'StackSpecGitAuthBasicAuthUserNameSecret',
    'StackSpecGitAuthSshAuth',
    'StackSpecGitAuthSshAuthPassword',
    'StackSpecGitAuthSshAuthPasswordEnv',
    'StackSpecGitAuthSshAuthPasswordFilesystem',
    'StackSpecGitAuthSshAuthPasswordLiteral',
    'StackSpecGitAuthSshAuthPasswordSecret',
    'StackSpecGitAuthSshAuthSshPrivateKey',
    'StackSpecGitAuthSshAuthSshPrivateKeyEnv',
    'StackSpecGitAuthSshAuthSshPrivateKeyFilesystem',
    'StackSpecGitAuthSshAuthSshPrivateKeyLiteral',
    'StackSpecGitAuthSshAuthSshPrivateKeySecret',
    'StackSpecPrerequisites',
    'StackSpecPrerequisitesRequirement',
    'StackSpecProgramRef',
    'StackSpecSecretsRef',
    'StackSpecSecretsRefEnv',
    'StackSpecSecretsRefFilesystem',
    'StackSpecSecretsRefLiteral',
    'StackSpecSecretsRefSecret',
    'StackStatus',
    'StackStatusConditions',
    'StackStatusLastUpdate',
]

@pulumi.output_type
class ProgramProgram(dict):
    def __init__(__self__, *,
                 configuration: Optional[Mapping[str, 'outputs.ProgramProgramConfiguration']] = None,
                 outputs: Optional[Mapping[str, Mapping[str, Any]]] = None,
                 resources: Optional[Mapping[str, 'outputs.ProgramProgramResources']] = None,
                 variables: Optional[Mapping[str, Mapping[str, Any]]] = None):
        """
        :param Mapping[str, 'ProgramProgramConfigurationArgs'] configuration: configuration specifies the Pulumi config inputs to the deployment. Either type or default is required.
        :param Mapping[str, Mapping[str, Any]] outputs: outputs specifies the Pulumi stack outputs of the program and how they are computed from the resources.
        :param Mapping[str, 'ProgramProgramResourcesArgs'] resources: resources declares the Pulumi resources that will be deployed and managed by the program.
        :param Mapping[str, Mapping[str, Any]] variables: variables specifies intermediate values of the program; the values of variables are expressions that can be re-used.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[Mapping[str, 'outputs.ProgramProgramConfiguration']]:
        """
        configuration specifies the Pulumi config inputs to the deployment. Either type or default is required.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def outputs(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        outputs specifies the Pulumi stack outputs of the program and how they are computed from the resources.
        """
        return pulumi.get(self, "outputs")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Mapping[str, 'outputs.ProgramProgramResources']]:
        """
        resources declares the Pulumi resources that will be deployed and managed by the program.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        variables specifies intermediate values of the program; the values of variables are expressions that can be re-used.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class ProgramProgramConfiguration(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        """
        :param str type: type is the (required) data type for the parameter.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type is the (required) data type for the parameter.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ProgramProgramResources(dict):
    def __init__(__self__, *,
                 type: str,
                 get: Optional['outputs.ProgramProgramResourcesGet'] = None,
                 options: Optional['outputs.ProgramProgramResourcesOptions'] = None,
                 properties: Optional[Mapping[str, Mapping[str, Any]]] = None):
        """
        :param str type: type is the Pulumi type token for this resource.
        :param 'ProgramProgramResourcesGetArgs' get: A getter function for the resource. Supplying get is mutually exclusive to properties.
        :param 'ProgramProgramResourcesOptionsArgs' options: options contains all resource options supported by Pulumi.
        :param Mapping[str, Mapping[str, Any]] properties: properties contains the primary resource-specific keys and values to initialize the resource state.
        """
        pulumi.set(__self__, "type", type)
        if get is not None:
            pulumi.set(__self__, "get", get)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type is the Pulumi type token for this resource.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def get(self) -> Optional['outputs.ProgramProgramResourcesGet']:
        """
        A getter function for the resource. Supplying get is mutually exclusive to properties.
        """
        return pulumi.get(self, "get")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.ProgramProgramResourcesOptions']:
        """
        options contains all resource options supported by Pulumi.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        properties contains the primary resource-specific keys and values to initialize the resource state.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class ProgramProgramResourcesGet(dict):
    """
    A getter function for the resource. Supplying get is mutually exclusive to properties.
    """
    def __init__(__self__, *,
                 id: str,
                 state: Optional[Mapping[str, Mapping[str, Any]]] = None):
        """
        A getter function for the resource. Supplying get is mutually exclusive to properties.
        :param str id: The ID of the resource to import.
        :param Mapping[str, Mapping[str, Any]] state: state contains the known properties (input & output) of the resource. This assists the provider in figuring out the correct resource.
        """
        pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the resource to import.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        state contains the known properties (input & output) of the resource. This assists the provider in figuring out the correct resource.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ProgramProgramResourcesOptions(dict):
    """
    options contains all resource options supported by Pulumi.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalSecretOutputs":
            suggest = "additional_secret_outputs"
        elif key == "customTimeouts":
            suggest = "custom_timeouts"
        elif key == "deleteBeforeReplace":
            suggest = "delete_before_replace"
        elif key == "dependsOn":
            suggest = "depends_on"
        elif key == "ignoreChanges":
            suggest = "ignore_changes"
        elif key == "import":
            suggest = "import_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProgramProgramResourcesOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProgramProgramResourcesOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProgramProgramResourcesOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_secret_outputs: Optional[Sequence[str]] = None,
                 aliases: Optional[Sequence[str]] = None,
                 custom_timeouts: Optional['outputs.ProgramProgramResourcesOptionsCustomTimeouts'] = None,
                 delete_before_replace: Optional[bool] = None,
                 depends_on: Optional[Sequence[Mapping[str, Any]]] = None,
                 ignore_changes: Optional[Sequence[str]] = None,
                 import_: Optional[str] = None,
                 parent: Optional[Mapping[str, Any]] = None,
                 protect: Optional[bool] = None,
                 provider: Optional[Mapping[str, Any]] = None,
                 providers: Optional[Mapping[str, Mapping[str, Any]]] = None,
                 version: Optional[str] = None):
        """
        options contains all resource options supported by Pulumi.
        :param Sequence[str] additional_secret_outputs: additionalSecretOutputs specifies properties that must be encrypted as secrets.
        :param Sequence[str] aliases: aliases specifies names that this resource used to have, so that renaming or refactoring doesn’t replace it.
        :param 'ProgramProgramResourcesOptionsCustomTimeoutsArgs' custom_timeouts: customTimeouts overrides the default retry/timeout behavior for resource provisioning.
        :param bool delete_before_replace: deleteBeforeReplace overrides the default create-before-delete behavior when replacing.
        :param Sequence[Mapping[str, Any]] depends_on: dependsOn adds explicit dependencies in addition to the ones in the dependency graph.
        :param Sequence[str] ignore_changes: ignoreChanges declares that changes to certain properties should be ignored when diffing.
        :param str import_: import adopts an existing resource from your cloud account under the control of Pulumi.
        :param Mapping[str, Any] parent: parent resource option specifies a parent for a resource. It is used to associate children with the parents that encapsulate or are responsible for them.
        :param bool protect: protect prevents accidental deletion of a resource.
        :param Mapping[str, Any] provider: provider resource option sets a provider for the resource.
        :param Mapping[str, Mapping[str, Any]] providers: providers resource option sets a map of providers for the resource and its children.
        :param str version: version specifies a provider plugin version that should be used when operating on a resource.
        """
        if additional_secret_outputs is not None:
            pulumi.set(__self__, "additional_secret_outputs", additional_secret_outputs)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if custom_timeouts is not None:
            pulumi.set(__self__, "custom_timeouts", custom_timeouts)
        if delete_before_replace is not None:
            pulumi.set(__self__, "delete_before_replace", delete_before_replace)
        if depends_on is not None:
            pulumi.set(__self__, "depends_on", depends_on)
        if ignore_changes is not None:
            pulumi.set(__self__, "ignore_changes", ignore_changes)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if protect is not None:
            pulumi.set(__self__, "protect", protect)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if providers is not None:
            pulumi.set(__self__, "providers", providers)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="additionalSecretOutputs")
    def additional_secret_outputs(self) -> Optional[Sequence[str]]:
        """
        additionalSecretOutputs specifies properties that must be encrypted as secrets.
        """
        return pulumi.get(self, "additional_secret_outputs")

    @property
    @pulumi.getter
    def aliases(self) -> Optional[Sequence[str]]:
        """
        aliases specifies names that this resource used to have, so that renaming or refactoring doesn’t replace it.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter(name="customTimeouts")
    def custom_timeouts(self) -> Optional['outputs.ProgramProgramResourcesOptionsCustomTimeouts']:
        """
        customTimeouts overrides the default retry/timeout behavior for resource provisioning.
        """
        return pulumi.get(self, "custom_timeouts")

    @property
    @pulumi.getter(name="deleteBeforeReplace")
    def delete_before_replace(self) -> Optional[bool]:
        """
        deleteBeforeReplace overrides the default create-before-delete behavior when replacing.
        """
        return pulumi.get(self, "delete_before_replace")

    @property
    @pulumi.getter(name="dependsOn")
    def depends_on(self) -> Optional[Sequence[Mapping[str, Any]]]:
        """
        dependsOn adds explicit dependencies in addition to the ones in the dependency graph.
        """
        return pulumi.get(self, "depends_on")

    @property
    @pulumi.getter(name="ignoreChanges")
    def ignore_changes(self) -> Optional[Sequence[str]]:
        """
        ignoreChanges declares that changes to certain properties should be ignored when diffing.
        """
        return pulumi.get(self, "ignore_changes")

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[str]:
        """
        import adopts an existing resource from your cloud account under the control of Pulumi.
        """
        return pulumi.get(self, "import_")

    @property
    @pulumi.getter
    def parent(self) -> Optional[Mapping[str, Any]]:
        """
        parent resource option specifies a parent for a resource. It is used to associate children with the parents that encapsulate or are responsible for them.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter
    def protect(self) -> Optional[bool]:
        """
        protect prevents accidental deletion of a resource.
        """
        return pulumi.get(self, "protect")

    @property
    @pulumi.getter
    def provider(self) -> Optional[Mapping[str, Any]]:
        """
        provider resource option sets a provider for the resource.
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def providers(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        providers resource option sets a map of providers for the resource and its children.
        """
        return pulumi.get(self, "providers")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        version specifies a provider plugin version that should be used when operating on a resource.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ProgramProgramResourcesOptionsCustomTimeouts(dict):
    """
    customTimeouts overrides the default retry/timeout behavior for resource provisioning.
    """
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        customTimeouts overrides the default retry/timeout behavior for resource provisioning.
        :param str create: create is the custom timeout for create operations.
        :param str delete: delete is the custom timeout for delete operations.
        :param str update: update is the custom timeout for update operations.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        create is the custom timeout for create operations.
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        delete is the custom timeout for delete operations.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        update is the custom timeout for update operations.
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class StackSpec(dict):
    """
    StackSpec defines the desired state of Pulumi Stack being managed by this operator.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessTokenSecret":
            suggest = "access_token_secret"
        elif key == "continueResyncOnCommitMatch":
            suggest = "continue_resync_on_commit_match"
        elif key == "destroyOnFinalize":
            suggest = "destroy_on_finalize"
        elif key == "envRefs":
            suggest = "env_refs"
        elif key == "envSecrets":
            suggest = "env_secrets"
        elif key == "expectNoRefreshChanges":
            suggest = "expect_no_refresh_changes"
        elif key == "fluxSource":
            suggest = "flux_source"
        elif key == "gitAuth":
            suggest = "git_auth"
        elif key == "gitAuthSecret":
            suggest = "git_auth_secret"
        elif key == "programRef":
            suggest = "program_ref"
        elif key == "projectRepo":
            suggest = "project_repo"
        elif key == "repoDir":
            suggest = "repo_dir"
        elif key == "resyncFrequencySeconds":
            suggest = "resync_frequency_seconds"
        elif key == "retryOnUpdateConflict":
            suggest = "retry_on_update_conflict"
        elif key == "secretsProvider":
            suggest = "secrets_provider"
        elif key == "secretsRef":
            suggest = "secrets_ref"
        elif key == "useLocalStackOnly":
            suggest = "use_local_stack_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stack: str,
                 access_token_secret: Optional[str] = None,
                 backend: Optional[str] = None,
                 branch: Optional[str] = None,
                 commit: Optional[str] = None,
                 config: Optional[Mapping[str, str]] = None,
                 continue_resync_on_commit_match: Optional[bool] = None,
                 destroy_on_finalize: Optional[bool] = None,
                 env_refs: Optional[Mapping[str, 'outputs.StackSpecEnvRefs']] = None,
                 env_secrets: Optional[Sequence[str]] = None,
                 envs: Optional[Sequence[str]] = None,
                 expect_no_refresh_changes: Optional[bool] = None,
                 flux_source: Optional['outputs.StackSpecFluxSource'] = None,
                 git_auth: Optional['outputs.StackSpecGitAuth'] = None,
                 git_auth_secret: Optional[str] = None,
                 prerequisites: Optional[Sequence['outputs.StackSpecPrerequisites']] = None,
                 program_ref: Optional['outputs.StackSpecProgramRef'] = None,
                 project_repo: Optional[str] = None,
                 refresh: Optional[bool] = None,
                 repo_dir: Optional[str] = None,
                 resync_frequency_seconds: Optional[int] = None,
                 retry_on_update_conflict: Optional[bool] = None,
                 secrets: Optional[Mapping[str, str]] = None,
                 secrets_provider: Optional[str] = None,
                 secrets_ref: Optional[Mapping[str, 'outputs.StackSpecSecretsRef']] = None,
                 targets: Optional[Sequence[str]] = None,
                 use_local_stack_only: Optional[bool] = None):
        """
        StackSpec defines the desired state of Pulumi Stack being managed by this operator.
        :param str stack: Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
        :param str access_token_secret: (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access. Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
        :param str backend: (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/> Examples:<br/> - Pulumi Service:              "https://app.pulumi.com" (default)<br/> - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/> - Local:                       "file://./einstein" <br/> - AWS:                         "s3://<my-pulumi-state-bucket>" <br/> - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/> - GCP:                         "gs://<my-pulumi-state-bucket>" <br/> See: https://www.pulumi.com/docs/intro/concepts/state/
        :param str branch: (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This is mutually exclusive with the Commit setting. Either value needs to be specified. When specified, the operator will periodically poll to check if the branch has any new commits. The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
        :param str commit: (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. Either value needs to be specified.
        :param Mapping[str, str] config: (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
        :param bool continue_resync_on_commit_match: (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying to update stacks even if the revision of the source matches. This might be useful in environments where Pulumi programs have dynamic elements for example, calls to internal APIs where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a particular revision is successfully run, the operator will not attempt to rerun the program at that revision again.
        :param bool destroy_on_finalize: (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
        :param Mapping[str, 'StackSpecEnvRefsArgs'] env_refs: (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where the variables' values should be loaded from (one of literal, environment variable, file on the filesystem, or Kubernetes Secret) as values.
        :param Sequence[str] env_secrets: (optional) SecretEnvs is an optional array of Secret names containing environment variables to set. Deprecated: use EnvRefs instead.
        :param Sequence[str] envs: (optional) Envs is an optional array of config maps containing environment variables to set. Deprecated: use EnvRefs instead.
        :param bool expect_no_refresh_changes: (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
        :param 'StackSpecFluxSourceArgs' flux_source: FluxSource specifies how to fetch source code from a Flux source object.
        :param 'StackSpecGitAuthArgs' git_auth: (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
        :param str git_auth_secret: (optional) GitAuthSecret is the the name of a Secret containing an authentication option for the git repository. There are 3 different authentication options: * Personal access token * SSH private key (and it's optional password) * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials. Deprecated. Use GitAuth instead.
        :param Sequence['StackSpecPrerequisitesArgs'] prerequisites: (optional) Prerequisites is a list of references to other stacks, each with a constraint on how long ago it must have succeeded. This can be used to make sure e.g., state is re-evaluated before running a stack that depends on it.
        :param 'StackSpecProgramRefArgs' program_ref: ProgramRef refers to a Program object, to be used as the source for the stack.
        :param str project_repo: ProjectRepo is the git source control repository from which we fetch the project code and configuration.
        :param bool refresh: (optional) Refresh can be set to true to refresh the stack before it is updated.
        :param str repo_dir: (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
        :param int resync_frequency_seconds: (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at the specified frequency even if no changes to the custom resource are detected. If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency. The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
        :param bool retry_on_update_conflict: (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
        :param Mapping[str, str] secrets: (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository. Deprecated: use SecretRefs instead.
        :param str secrets_provider: (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples: - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1" - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname" - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" - See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
        :param Mapping[str, 'StackSpecSecretsRefArgs'] secrets_ref: (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
        :param Sequence[str] targets: (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only resources mentioned will be updated.
        :param bool use_local_stack_only: (optional) UseLocalStackOnly can be set to true to prevent the operator from creating stacks that do not exist in the tracking git repo. The default behavior is to create a stack if it doesn't exist.
        """
        pulumi.set(__self__, "stack", stack)
        if access_token_secret is not None:
            pulumi.set(__self__, "access_token_secret", access_token_secret)
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if commit is not None:
            pulumi.set(__self__, "commit", commit)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if continue_resync_on_commit_match is not None:
            pulumi.set(__self__, "continue_resync_on_commit_match", continue_resync_on_commit_match)
        if destroy_on_finalize is not None:
            pulumi.set(__self__, "destroy_on_finalize", destroy_on_finalize)
        if env_refs is not None:
            pulumi.set(__self__, "env_refs", env_refs)
        if env_secrets is not None:
            pulumi.set(__self__, "env_secrets", env_secrets)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if expect_no_refresh_changes is not None:
            pulumi.set(__self__, "expect_no_refresh_changes", expect_no_refresh_changes)
        if flux_source is not None:
            pulumi.set(__self__, "flux_source", flux_source)
        if git_auth is not None:
            pulumi.set(__self__, "git_auth", git_auth)
        if git_auth_secret is not None:
            pulumi.set(__self__, "git_auth_secret", git_auth_secret)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)
        if program_ref is not None:
            pulumi.set(__self__, "program_ref", program_ref)
        if project_repo is not None:
            pulumi.set(__self__, "project_repo", project_repo)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if repo_dir is not None:
            pulumi.set(__self__, "repo_dir", repo_dir)
        if resync_frequency_seconds is not None:
            pulumi.set(__self__, "resync_frequency_seconds", resync_frequency_seconds)
        if retry_on_update_conflict is not None:
            pulumi.set(__self__, "retry_on_update_conflict", retry_on_update_conflict)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if secrets_provider is not None:
            pulumi.set(__self__, "secrets_provider", secrets_provider)
        if secrets_ref is not None:
            pulumi.set(__self__, "secrets_ref", secrets_ref)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if use_local_stack_only is not None:
            pulumi.set(__self__, "use_local_stack_only", use_local_stack_only)

    @property
    @pulumi.getter
    def stack(self) -> str:
        """
        Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
        """
        return pulumi.get(self, "stack")

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> Optional[str]:
        """
        (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access. Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
        """
        return pulumi.get(self, "access_token_secret")

    @property
    @pulumi.getter
    def backend(self) -> Optional[str]:
        """
        (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/> Examples:<br/> - Pulumi Service:              "https://app.pulumi.com" (default)<br/> - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/> - Local:                       "file://./einstein" <br/> - AWS:                         "s3://<my-pulumi-state-bucket>" <br/> - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/> - GCP:                         "gs://<my-pulumi-state-bucket>" <br/> See: https://www.pulumi.com/docs/intro/concepts/state/
        """
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        """
        (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This is mutually exclusive with the Commit setting. Either value needs to be specified. When specified, the operator will periodically poll to check if the branch has any new commits. The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def commit(self) -> Optional[str]:
        """
        (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. Either value needs to be specified.
        """
        return pulumi.get(self, "commit")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, str]]:
        """
        (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="continueResyncOnCommitMatch")
    def continue_resync_on_commit_match(self) -> Optional[bool]:
        """
        (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying to update stacks even if the revision of the source matches. This might be useful in environments where Pulumi programs have dynamic elements for example, calls to internal APIs where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a particular revision is successfully run, the operator will not attempt to rerun the program at that revision again.
        """
        return pulumi.get(self, "continue_resync_on_commit_match")

    @property
    @pulumi.getter(name="destroyOnFinalize")
    def destroy_on_finalize(self) -> Optional[bool]:
        """
        (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
        """
        return pulumi.get(self, "destroy_on_finalize")

    @property
    @pulumi.getter(name="envRefs")
    def env_refs(self) -> Optional[Mapping[str, 'outputs.StackSpecEnvRefs']]:
        """
        (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where the variables' values should be loaded from (one of literal, environment variable, file on the filesystem, or Kubernetes Secret) as values.
        """
        return pulumi.get(self, "env_refs")

    @property
    @pulumi.getter(name="envSecrets")
    def env_secrets(self) -> Optional[Sequence[str]]:
        """
        (optional) SecretEnvs is an optional array of Secret names containing environment variables to set. Deprecated: use EnvRefs instead.
        """
        return pulumi.get(self, "env_secrets")

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence[str]]:
        """
        (optional) Envs is an optional array of config maps containing environment variables to set. Deprecated: use EnvRefs instead.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="expectNoRefreshChanges")
    def expect_no_refresh_changes(self) -> Optional[bool]:
        """
        (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
        """
        return pulumi.get(self, "expect_no_refresh_changes")

    @property
    @pulumi.getter(name="fluxSource")
    def flux_source(self) -> Optional['outputs.StackSpecFluxSource']:
        """
        FluxSource specifies how to fetch source code from a Flux source object.
        """
        return pulumi.get(self, "flux_source")

    @property
    @pulumi.getter(name="gitAuth")
    def git_auth(self) -> Optional['outputs.StackSpecGitAuth']:
        """
        (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
        """
        return pulumi.get(self, "git_auth")

    @property
    @pulumi.getter(name="gitAuthSecret")
    def git_auth_secret(self) -> Optional[str]:
        """
        (optional) GitAuthSecret is the the name of a Secret containing an authentication option for the git repository. There are 3 different authentication options: * Personal access token * SSH private key (and it's optional password) * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials. Deprecated. Use GitAuth instead.
        """
        return pulumi.get(self, "git_auth_secret")

    @property
    @pulumi.getter
    def prerequisites(self) -> Optional[Sequence['outputs.StackSpecPrerequisites']]:
        """
        (optional) Prerequisites is a list of references to other stacks, each with a constraint on how long ago it must have succeeded. This can be used to make sure e.g., state is re-evaluated before running a stack that depends on it.
        """
        return pulumi.get(self, "prerequisites")

    @property
    @pulumi.getter(name="programRef")
    def program_ref(self) -> Optional['outputs.StackSpecProgramRef']:
        """
        ProgramRef refers to a Program object, to be used as the source for the stack.
        """
        return pulumi.get(self, "program_ref")

    @property
    @pulumi.getter(name="projectRepo")
    def project_repo(self) -> Optional[str]:
        """
        ProjectRepo is the git source control repository from which we fetch the project code and configuration.
        """
        return pulumi.get(self, "project_repo")

    @property
    @pulumi.getter
    def refresh(self) -> Optional[bool]:
        """
        (optional) Refresh can be set to true to refresh the stack before it is updated.
        """
        return pulumi.get(self, "refresh")

    @property
    @pulumi.getter(name="repoDir")
    def repo_dir(self) -> Optional[str]:
        """
        (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
        """
        return pulumi.get(self, "repo_dir")

    @property
    @pulumi.getter(name="resyncFrequencySeconds")
    def resync_frequency_seconds(self) -> Optional[int]:
        """
        (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at the specified frequency even if no changes to the custom resource are detected. If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency. The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
        """
        return pulumi.get(self, "resync_frequency_seconds")

    @property
    @pulumi.getter(name="retryOnUpdateConflict")
    def retry_on_update_conflict(self) -> Optional[bool]:
        """
        (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
        """
        return pulumi.get(self, "retry_on_update_conflict")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Mapping[str, str]]:
        """
        (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository. Deprecated: use SecretRefs instead.
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="secretsProvider")
    def secrets_provider(self) -> Optional[str]:
        """
        (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples: - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1" - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname" - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" - See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
        """
        return pulumi.get(self, "secrets_provider")

    @property
    @pulumi.getter(name="secretsRef")
    def secrets_ref(self) -> Optional[Mapping[str, 'outputs.StackSpecSecretsRef']]:
        """
        (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
        """
        return pulumi.get(self, "secrets_ref")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence[str]]:
        """
        (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only resources mentioned will be updated.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="useLocalStackOnly")
    def use_local_stack_only(self) -> Optional[bool]:
        """
        (optional) UseLocalStackOnly can be set to true to prevent the operator from creating stacks that do not exist in the tracking git repo. The default behavior is to create a stack if it doesn't exist.
        """
        return pulumi.get(self, "use_local_stack_only")


@pulumi.output_type
class StackSpecEnvRefs(dict):
    """
    ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
    """
    def __init__(__self__, *,
                 type: str,
                 env: Optional['outputs.StackSpecEnvRefsEnv'] = None,
                 filesystem: Optional['outputs.StackSpecEnvRefsFilesystem'] = None,
                 literal: Optional['outputs.StackSpecEnvRefsLiteral'] = None,
                 secret: Optional['outputs.StackSpecEnvRefsSecret'] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param str type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param 'StackSpecEnvRefsEnvArgs' env: Env selects an environment variable set on the operator process
        :param 'StackSpecEnvRefsFilesystemArgs' filesystem: FileSystem selects a file on the operator's file system
        :param 'StackSpecEnvRefsLiteralArgs' literal: LiteralRef refers to a literal value
        :param 'StackSpecEnvRefsSecretArgs' secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def env(self) -> Optional['outputs.StackSpecEnvRefsEnv']:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional['outputs.StackSpecEnvRefsFilesystem']:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def literal(self) -> Optional['outputs.StackSpecEnvRefsLiteral']:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackSpecEnvRefsSecret']:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class StackSpecEnvRefsEnv(dict):
    """
    Env selects an environment variable set on the operator process
    """
    def __init__(__self__, *,
                 name: str):
        """
        Env selects an environment variable set on the operator process
        :param str name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecEnvRefsFilesystem(dict):
    """
    FileSystem selects a file on the operator's file system
    """
    def __init__(__self__, *,
                 path: str):
        """
        FileSystem selects a file on the operator's file system
        :param str path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StackSpecEnvRefsLiteral(dict):
    """
    LiteralRef refers to a literal value
    """
    def __init__(__self__, *,
                 value: str):
        """
        LiteralRef refers to a literal value
        :param str value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value to load
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StackSpecEnvRefsSecret(dict):
    """
    SecretRef refers to a Kubernetes Secret
    """
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param str key: Key within the Secret to use.
        :param str name: Name of the Secret
        :param str namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackSpecFluxSource(dict):
    """
    FluxSource specifies how to fetch source code from a Flux source object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceRef":
            suggest = "source_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackSpecFluxSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackSpecFluxSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackSpecFluxSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_ref: 'outputs.StackSpecFluxSourceSourceRef',
                 dir: Optional[str] = None):
        """
        FluxSource specifies how to fetch source code from a Flux source object.
        :param str dir: Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of interest, within the fetched source.
        """
        pulumi.set(__self__, "source_ref", source_ref)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)

    @property
    @pulumi.getter(name="sourceRef")
    def source_ref(self) -> 'outputs.StackSpecFluxSourceSourceRef':
        return pulumi.get(self, "source_ref")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        """
        Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of interest, within the fetched source.
        """
        return pulumi.get(self, "dir")


@pulumi.output_type
class StackSpecFluxSourceSourceRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackSpecFluxSourceSourceRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackSpecFluxSourceSourceRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackSpecFluxSourceSourceRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: str,
                 kind: str,
                 name: str):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecGitAuth(dict):
    """
    (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "basicAuth":
            suggest = "basic_auth"
        elif key == "sshAuth":
            suggest = "ssh_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackSpecGitAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackSpecGitAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackSpecGitAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional['outputs.StackSpecGitAuthAccessToken'] = None,
                 basic_auth: Optional['outputs.StackSpecGitAuthBasicAuth'] = None,
                 ssh_auth: Optional['outputs.StackSpecGitAuthSshAuth'] = None):
        """
        (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
        :param 'StackSpecGitAuthAccessTokenArgs' access_token: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param 'StackSpecGitAuthBasicAuthArgs' basic_auth: BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
        :param 'StackSpecGitAuthSshAuthArgs' ssh_auth: SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if ssh_auth is not None:
            pulumi.set(__self__, "ssh_auth", ssh_auth)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional['outputs.StackSpecGitAuthAccessToken']:
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.StackSpecGitAuthBasicAuth']:
        """
        BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
        """
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter(name="sshAuth")
    def ssh_auth(self) -> Optional['outputs.StackSpecGitAuthSshAuth']:
        """
        SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
        """
        return pulumi.get(self, "ssh_auth")


@pulumi.output_type
class StackSpecGitAuthAccessToken(dict):
    """
    ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
    """
    def __init__(__self__, *,
                 type: str,
                 env: Optional['outputs.StackSpecGitAuthAccessTokenEnv'] = None,
                 filesystem: Optional['outputs.StackSpecGitAuthAccessTokenFilesystem'] = None,
                 literal: Optional['outputs.StackSpecGitAuthAccessTokenLiteral'] = None,
                 secret: Optional['outputs.StackSpecGitAuthAccessTokenSecret'] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param str type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param 'StackSpecGitAuthAccessTokenEnvArgs' env: Env selects an environment variable set on the operator process
        :param 'StackSpecGitAuthAccessTokenFilesystemArgs' filesystem: FileSystem selects a file on the operator's file system
        :param 'StackSpecGitAuthAccessTokenLiteralArgs' literal: LiteralRef refers to a literal value
        :param 'StackSpecGitAuthAccessTokenSecretArgs' secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def env(self) -> Optional['outputs.StackSpecGitAuthAccessTokenEnv']:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional['outputs.StackSpecGitAuthAccessTokenFilesystem']:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def literal(self) -> Optional['outputs.StackSpecGitAuthAccessTokenLiteral']:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackSpecGitAuthAccessTokenSecret']:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class StackSpecGitAuthAccessTokenEnv(dict):
    """
    Env selects an environment variable set on the operator process
    """
    def __init__(__self__, *,
                 name: str):
        """
        Env selects an environment variable set on the operator process
        :param str name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecGitAuthAccessTokenFilesystem(dict):
    """
    FileSystem selects a file on the operator's file system
    """
    def __init__(__self__, *,
                 path: str):
        """
        FileSystem selects a file on the operator's file system
        :param str path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StackSpecGitAuthAccessTokenLiteral(dict):
    """
    LiteralRef refers to a literal value
    """
    def __init__(__self__, *,
                 value: str):
        """
        LiteralRef refers to a literal value
        :param str value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value to load
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StackSpecGitAuthAccessTokenSecret(dict):
    """
    SecretRef refers to a Kubernetes Secret
    """
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param str key: Key within the Secret to use.
        :param str name: Name of the Secret
        :param str namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackSpecGitAuthBasicAuth(dict):
    """
    BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackSpecGitAuthBasicAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackSpecGitAuthBasicAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackSpecGitAuthBasicAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: 'outputs.StackSpecGitAuthBasicAuthPassword',
                 user_name: 'outputs.StackSpecGitAuthBasicAuthUserName'):
        """
        BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
        :param 'StackSpecGitAuthBasicAuthPasswordArgs' password: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param 'StackSpecGitAuthBasicAuthUserNameArgs' user_name: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> 'outputs.StackSpecGitAuthBasicAuthPassword':
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> 'outputs.StackSpecGitAuthBasicAuthUserName':
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class StackSpecGitAuthBasicAuthPassword(dict):
    """
    ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
    """
    def __init__(__self__, *,
                 type: str,
                 env: Optional['outputs.StackSpecGitAuthBasicAuthPasswordEnv'] = None,
                 filesystem: Optional['outputs.StackSpecGitAuthBasicAuthPasswordFilesystem'] = None,
                 literal: Optional['outputs.StackSpecGitAuthBasicAuthPasswordLiteral'] = None,
                 secret: Optional['outputs.StackSpecGitAuthBasicAuthPasswordSecret'] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param str type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param 'StackSpecGitAuthBasicAuthPasswordEnvArgs' env: Env selects an environment variable set on the operator process
        :param 'StackSpecGitAuthBasicAuthPasswordFilesystemArgs' filesystem: FileSystem selects a file on the operator's file system
        :param 'StackSpecGitAuthBasicAuthPasswordLiteralArgs' literal: LiteralRef refers to a literal value
        :param 'StackSpecGitAuthBasicAuthPasswordSecretArgs' secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def env(self) -> Optional['outputs.StackSpecGitAuthBasicAuthPasswordEnv']:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional['outputs.StackSpecGitAuthBasicAuthPasswordFilesystem']:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def literal(self) -> Optional['outputs.StackSpecGitAuthBasicAuthPasswordLiteral']:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackSpecGitAuthBasicAuthPasswordSecret']:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class StackSpecGitAuthBasicAuthPasswordEnv(dict):
    """
    Env selects an environment variable set on the operator process
    """
    def __init__(__self__, *,
                 name: str):
        """
        Env selects an environment variable set on the operator process
        :param str name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecGitAuthBasicAuthPasswordFilesystem(dict):
    """
    FileSystem selects a file on the operator's file system
    """
    def __init__(__self__, *,
                 path: str):
        """
        FileSystem selects a file on the operator's file system
        :param str path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StackSpecGitAuthBasicAuthPasswordLiteral(dict):
    """
    LiteralRef refers to a literal value
    """
    def __init__(__self__, *,
                 value: str):
        """
        LiteralRef refers to a literal value
        :param str value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value to load
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StackSpecGitAuthBasicAuthPasswordSecret(dict):
    """
    SecretRef refers to a Kubernetes Secret
    """
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param str key: Key within the Secret to use.
        :param str name: Name of the Secret
        :param str namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackSpecGitAuthBasicAuthUserName(dict):
    """
    ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
    """
    def __init__(__self__, *,
                 type: str,
                 env: Optional['outputs.StackSpecGitAuthBasicAuthUserNameEnv'] = None,
                 filesystem: Optional['outputs.StackSpecGitAuthBasicAuthUserNameFilesystem'] = None,
                 literal: Optional['outputs.StackSpecGitAuthBasicAuthUserNameLiteral'] = None,
                 secret: Optional['outputs.StackSpecGitAuthBasicAuthUserNameSecret'] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param str type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param 'StackSpecGitAuthBasicAuthUserNameEnvArgs' env: Env selects an environment variable set on the operator process
        :param 'StackSpecGitAuthBasicAuthUserNameFilesystemArgs' filesystem: FileSystem selects a file on the operator's file system
        :param 'StackSpecGitAuthBasicAuthUserNameLiteralArgs' literal: LiteralRef refers to a literal value
        :param 'StackSpecGitAuthBasicAuthUserNameSecretArgs' secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def env(self) -> Optional['outputs.StackSpecGitAuthBasicAuthUserNameEnv']:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional['outputs.StackSpecGitAuthBasicAuthUserNameFilesystem']:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def literal(self) -> Optional['outputs.StackSpecGitAuthBasicAuthUserNameLiteral']:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackSpecGitAuthBasicAuthUserNameSecret']:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class StackSpecGitAuthBasicAuthUserNameEnv(dict):
    """
    Env selects an environment variable set on the operator process
    """
    def __init__(__self__, *,
                 name: str):
        """
        Env selects an environment variable set on the operator process
        :param str name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecGitAuthBasicAuthUserNameFilesystem(dict):
    """
    FileSystem selects a file on the operator's file system
    """
    def __init__(__self__, *,
                 path: str):
        """
        FileSystem selects a file on the operator's file system
        :param str path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StackSpecGitAuthBasicAuthUserNameLiteral(dict):
    """
    LiteralRef refers to a literal value
    """
    def __init__(__self__, *,
                 value: str):
        """
        LiteralRef refers to a literal value
        :param str value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value to load
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StackSpecGitAuthBasicAuthUserNameSecret(dict):
    """
    SecretRef refers to a Kubernetes Secret
    """
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param str key: Key within the Secret to use.
        :param str name: Name of the Secret
        :param str namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackSpecGitAuthSshAuth(dict):
    """
    SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshPrivateKey":
            suggest = "ssh_private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackSpecGitAuthSshAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackSpecGitAuthSshAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackSpecGitAuthSshAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ssh_private_key: 'outputs.StackSpecGitAuthSshAuthSshPrivateKey',
                 password: Optional['outputs.StackSpecGitAuthSshAuthPassword'] = None):
        """
        SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
        :param 'StackSpecGitAuthSshAuthSshPrivateKeyArgs' ssh_private_key: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param 'StackSpecGitAuthSshAuthPasswordArgs' password: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> 'outputs.StackSpecGitAuthSshAuthSshPrivateKey':
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "ssh_private_key")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.StackSpecGitAuthSshAuthPassword']:
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class StackSpecGitAuthSshAuthPassword(dict):
    """
    ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
    """
    def __init__(__self__, *,
                 type: str,
                 env: Optional['outputs.StackSpecGitAuthSshAuthPasswordEnv'] = None,
                 filesystem: Optional['outputs.StackSpecGitAuthSshAuthPasswordFilesystem'] = None,
                 literal: Optional['outputs.StackSpecGitAuthSshAuthPasswordLiteral'] = None,
                 secret: Optional['outputs.StackSpecGitAuthSshAuthPasswordSecret'] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param str type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param 'StackSpecGitAuthSshAuthPasswordEnvArgs' env: Env selects an environment variable set on the operator process
        :param 'StackSpecGitAuthSshAuthPasswordFilesystemArgs' filesystem: FileSystem selects a file on the operator's file system
        :param 'StackSpecGitAuthSshAuthPasswordLiteralArgs' literal: LiteralRef refers to a literal value
        :param 'StackSpecGitAuthSshAuthPasswordSecretArgs' secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def env(self) -> Optional['outputs.StackSpecGitAuthSshAuthPasswordEnv']:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional['outputs.StackSpecGitAuthSshAuthPasswordFilesystem']:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def literal(self) -> Optional['outputs.StackSpecGitAuthSshAuthPasswordLiteral']:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackSpecGitAuthSshAuthPasswordSecret']:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class StackSpecGitAuthSshAuthPasswordEnv(dict):
    """
    Env selects an environment variable set on the operator process
    """
    def __init__(__self__, *,
                 name: str):
        """
        Env selects an environment variable set on the operator process
        :param str name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecGitAuthSshAuthPasswordFilesystem(dict):
    """
    FileSystem selects a file on the operator's file system
    """
    def __init__(__self__, *,
                 path: str):
        """
        FileSystem selects a file on the operator's file system
        :param str path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StackSpecGitAuthSshAuthPasswordLiteral(dict):
    """
    LiteralRef refers to a literal value
    """
    def __init__(__self__, *,
                 value: str):
        """
        LiteralRef refers to a literal value
        :param str value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value to load
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StackSpecGitAuthSshAuthPasswordSecret(dict):
    """
    SecretRef refers to a Kubernetes Secret
    """
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param str key: Key within the Secret to use.
        :param str name: Name of the Secret
        :param str namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackSpecGitAuthSshAuthSshPrivateKey(dict):
    """
    ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
    """
    def __init__(__self__, *,
                 type: str,
                 env: Optional['outputs.StackSpecGitAuthSshAuthSshPrivateKeyEnv'] = None,
                 filesystem: Optional['outputs.StackSpecGitAuthSshAuthSshPrivateKeyFilesystem'] = None,
                 literal: Optional['outputs.StackSpecGitAuthSshAuthSshPrivateKeyLiteral'] = None,
                 secret: Optional['outputs.StackSpecGitAuthSshAuthSshPrivateKeySecret'] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param str type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param 'StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs' env: Env selects an environment variable set on the operator process
        :param 'StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs' filesystem: FileSystem selects a file on the operator's file system
        :param 'StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs' literal: LiteralRef refers to a literal value
        :param 'StackSpecGitAuthSshAuthSshPrivateKeySecretArgs' secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def env(self) -> Optional['outputs.StackSpecGitAuthSshAuthSshPrivateKeyEnv']:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional['outputs.StackSpecGitAuthSshAuthSshPrivateKeyFilesystem']:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def literal(self) -> Optional['outputs.StackSpecGitAuthSshAuthSshPrivateKeyLiteral']:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackSpecGitAuthSshAuthSshPrivateKeySecret']:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class StackSpecGitAuthSshAuthSshPrivateKeyEnv(dict):
    """
    Env selects an environment variable set on the operator process
    """
    def __init__(__self__, *,
                 name: str):
        """
        Env selects an environment variable set on the operator process
        :param str name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecGitAuthSshAuthSshPrivateKeyFilesystem(dict):
    """
    FileSystem selects a file on the operator's file system
    """
    def __init__(__self__, *,
                 path: str):
        """
        FileSystem selects a file on the operator's file system
        :param str path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StackSpecGitAuthSshAuthSshPrivateKeyLiteral(dict):
    """
    LiteralRef refers to a literal value
    """
    def __init__(__self__, *,
                 value: str):
        """
        LiteralRef refers to a literal value
        :param str value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value to load
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StackSpecGitAuthSshAuthSshPrivateKeySecret(dict):
    """
    SecretRef refers to a Kubernetes Secret
    """
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param str key: Key within the Secret to use.
        :param str name: Name of the Secret
        :param str namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackSpecPrerequisites(dict):
    """
    PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be considered satisfied.
    """
    def __init__(__self__, *,
                 name: str,
                 requirement: Optional['outputs.StackSpecPrerequisitesRequirement'] = None):
        """
        PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be considered satisfied.
        :param str name: Name is the name of the Stack resource that is a prerequisite.
        :param 'StackSpecPrerequisitesRequirementArgs' requirement: Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
        """
        pulumi.set(__self__, "name", name)
        if requirement is not None:
            pulumi.set(__self__, "requirement", requirement)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the Stack resource that is a prerequisite.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def requirement(self) -> Optional['outputs.StackSpecPrerequisitesRequirement']:
        """
        Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
        """
        return pulumi.get(self, "requirement")


@pulumi.output_type
class StackSpecPrerequisitesRequirement(dict):
    """
    Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "succeededWithinDuration":
            suggest = "succeeded_within_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackSpecPrerequisitesRequirement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackSpecPrerequisitesRequirement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackSpecPrerequisitesRequirement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 succeeded_within_duration: Optional[str] = None):
        """
        Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
        :param str succeeded_within_duration: SucceededWithinDuration gives a duration within which the prerequisite must have reached a succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in the last hour". Fields (should there ever be more than one) are not intended to be mutually exclusive.
        """
        if succeeded_within_duration is not None:
            pulumi.set(__self__, "succeeded_within_duration", succeeded_within_duration)

    @property
    @pulumi.getter(name="succeededWithinDuration")
    def succeeded_within_duration(self) -> Optional[str]:
        """
        SucceededWithinDuration gives a duration within which the prerequisite must have reached a succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in the last hour". Fields (should there ever be more than one) are not intended to be mutually exclusive.
        """
        return pulumi.get(self, "succeeded_within_duration")


@pulumi.output_type
class StackSpecProgramRef(dict):
    """
    ProgramRef refers to a Program object, to be used as the source for the stack.
    """
    def __init__(__self__, *,
                 name: str):
        """
        ProgramRef refers to a Program object, to be used as the source for the stack.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecSecretsRef(dict):
    """
    ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
    """
    def __init__(__self__, *,
                 type: str,
                 env: Optional['outputs.StackSpecSecretsRefEnv'] = None,
                 filesystem: Optional['outputs.StackSpecSecretsRefFilesystem'] = None,
                 literal: Optional['outputs.StackSpecSecretsRefLiteral'] = None,
                 secret: Optional['outputs.StackSpecSecretsRefSecret'] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param str type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param 'StackSpecSecretsRefEnvArgs' env: Env selects an environment variable set on the operator process
        :param 'StackSpecSecretsRefFilesystemArgs' filesystem: FileSystem selects a file on the operator's file system
        :param 'StackSpecSecretsRefLiteralArgs' literal: LiteralRef refers to a literal value
        :param 'StackSpecSecretsRefSecretArgs' secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def env(self) -> Optional['outputs.StackSpecSecretsRefEnv']:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional['outputs.StackSpecSecretsRefFilesystem']:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def literal(self) -> Optional['outputs.StackSpecSecretsRefLiteral']:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.StackSpecSecretsRefSecret']:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class StackSpecSecretsRefEnv(dict):
    """
    Env selects an environment variable set on the operator process
    """
    def __init__(__self__, *,
                 name: str):
        """
        Env selects an environment variable set on the operator process
        :param str name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StackSpecSecretsRefFilesystem(dict):
    """
    FileSystem selects a file on the operator's file system
    """
    def __init__(__self__, *,
                 path: str):
        """
        FileSystem selects a file on the operator's file system
        :param str path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class StackSpecSecretsRefLiteral(dict):
    """
    LiteralRef refers to a literal value
    """
    def __init__(__self__, *,
                 value: str):
        """
        LiteralRef refers to a literal value
        :param str value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value to load
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StackSpecSecretsRefSecret(dict):
    """
    SecretRef refers to a Kubernetes Secret
    """
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param str key: Key within the Secret to use.
        :param str name: Name of the Secret
        :param str namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class StackStatus(dict):
    """
    StackStatus defines the observed state of Stack
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdate":
            suggest = "last_update"
        elif key == "observedGeneration":
            suggest = "observed_generation"
        elif key == "observedReconcileRequest":
            suggest = "observed_reconcile_request"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.StackStatusConditions']] = None,
                 last_update: Optional['outputs.StackStatusLastUpdate'] = None,
                 observed_generation: Optional[int] = None,
                 observed_reconcile_request: Optional[str] = None,
                 outputs: Optional[Mapping[str, Mapping[str, Any]]] = None):
        """
        StackStatus defines the observed state of Stack
        :param 'StackStatusLastUpdateArgs' last_update: LastUpdate contains details of the status of the last update.
        :param int observed_generation: ObservedGeneration records the value of .meta.generation at the point the controller last processed this object
        :param str observed_reconcile_request: ObservedReconcileRequest records the value of the annotation named for `ReconcileRequestAnnotation` when it was last seen.
        :param Mapping[str, Mapping[str, Any]] outputs: Outputs contains the exported stack output variables resulting from a deployment.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if observed_reconcile_request is not None:
            pulumi.set(__self__, "observed_reconcile_request", observed_reconcile_request)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.StackStatusConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional['outputs.StackStatusLastUpdate']:
        """
        LastUpdate contains details of the status of the last update.
        """
        return pulumi.get(self, "last_update")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration records the value of .meta.generation at the point the controller last processed this object
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter(name="observedReconcileRequest")
    def observed_reconcile_request(self) -> Optional[str]:
        """
        ObservedReconcileRequest records the value of the annotation named for `ReconcileRequestAnnotation` when it was last seen.
        """
        return pulumi.get(self, "observed_reconcile_request")

    @property
    @pulumi.getter
    def outputs(self) -> Optional[Mapping[str, Mapping[str, Any]]]:
        """
        Outputs contains the exported stack output variables resulting from a deployment.
        """
        return pulumi.get(self, "outputs")


@pulumi.output_type
class StackStatusConditions(dict):
    """
    Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
     // other fields }
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"
        elif key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 message: str,
                 reason: str,
                 status: str,
                 type: str,
                 observed_generation: Optional[int] = None):
        """
        Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         // other fields }
        :param str last_transition_time: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        :param str message: message is a human readable message indicating details about the transition. This may be an empty string.
        :param str reason: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        :param str status: status of the condition, one of True, False, Unknown.
        :param str type: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        :param int observed_generation: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message is a human readable message indicating details about the transition. This may be an empty string.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
        """
        return pulumi.get(self, "observed_generation")


@pulumi.output_type
class StackStatusLastUpdate(dict):
    """
    LastUpdate contains details of the status of the last update.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastAttemptedCommit":
            suggest = "last_attempted_commit"
        elif key == "lastResyncTime":
            suggest = "last_resync_time"
        elif key == "lastSuccessfulCommit":
            suggest = "last_successful_commit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackStatusLastUpdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackStatusLastUpdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackStatusLastUpdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_attempted_commit: Optional[str] = None,
                 last_resync_time: Optional[str] = None,
                 last_successful_commit: Optional[str] = None,
                 permalink: Optional[str] = None,
                 state: Optional[str] = None):
        """
        LastUpdate contains details of the status of the last update.
        :param str last_attempted_commit: Last commit attempted
        :param str last_resync_time: LastResyncTime contains a timestamp for the last time a resync of the stack took place.
        :param str last_successful_commit: Last commit successfully applied
        :param str permalink: Permalink is the Pulumi Console URL of the stack operation.
        :param str state: State is the state of the stack update - one of `succeeded` or `failed`
        """
        if last_attempted_commit is not None:
            pulumi.set(__self__, "last_attempted_commit", last_attempted_commit)
        if last_resync_time is not None:
            pulumi.set(__self__, "last_resync_time", last_resync_time)
        if last_successful_commit is not None:
            pulumi.set(__self__, "last_successful_commit", last_successful_commit)
        if permalink is not None:
            pulumi.set(__self__, "permalink", permalink)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="lastAttemptedCommit")
    def last_attempted_commit(self) -> Optional[str]:
        """
        Last commit attempted
        """
        return pulumi.get(self, "last_attempted_commit")

    @property
    @pulumi.getter(name="lastResyncTime")
    def last_resync_time(self) -> Optional[str]:
        """
        LastResyncTime contains a timestamp for the last time a resync of the stack took place.
        """
        return pulumi.get(self, "last_resync_time")

    @property
    @pulumi.getter(name="lastSuccessfulCommit")
    def last_successful_commit(self) -> Optional[str]:
        """
        Last commit successfully applied
        """
        return pulumi.get(self, "last_successful_commit")

    @property
    @pulumi.getter
    def permalink(self) -> Optional[str]:
        """
        Permalink is the Pulumi Console URL of the stack operation.
        """
        return pulumi.get(self, "permalink")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State is the state of the stack update - one of `succeeded` or `failed`
        """
        return pulumi.get(self, "state")


