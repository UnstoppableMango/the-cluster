# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'StackSpecEnvRefsEnvArgs',
    'StackSpecEnvRefsFilesystemArgs',
    'StackSpecEnvRefsLiteralArgs',
    'StackSpecEnvRefsSecretArgs',
    'StackSpecEnvRefsArgs',
    'StackSpecFluxSourceSourceRefArgs',
    'StackSpecFluxSourceArgs',
    'StackSpecGitAuthAccessTokenEnvArgs',
    'StackSpecGitAuthAccessTokenFilesystemArgs',
    'StackSpecGitAuthAccessTokenLiteralArgs',
    'StackSpecGitAuthAccessTokenSecretArgs',
    'StackSpecGitAuthAccessTokenArgs',
    'StackSpecGitAuthBasicAuthPasswordEnvArgs',
    'StackSpecGitAuthBasicAuthPasswordFilesystemArgs',
    'StackSpecGitAuthBasicAuthPasswordLiteralArgs',
    'StackSpecGitAuthBasicAuthPasswordSecretArgs',
    'StackSpecGitAuthBasicAuthPasswordArgs',
    'StackSpecGitAuthBasicAuthUserNameEnvArgs',
    'StackSpecGitAuthBasicAuthUserNameFilesystemArgs',
    'StackSpecGitAuthBasicAuthUserNameLiteralArgs',
    'StackSpecGitAuthBasicAuthUserNameSecretArgs',
    'StackSpecGitAuthBasicAuthUserNameArgs',
    'StackSpecGitAuthBasicAuthArgs',
    'StackSpecGitAuthSshAuthPasswordEnvArgs',
    'StackSpecGitAuthSshAuthPasswordFilesystemArgs',
    'StackSpecGitAuthSshAuthPasswordLiteralArgs',
    'StackSpecGitAuthSshAuthPasswordSecretArgs',
    'StackSpecGitAuthSshAuthPasswordArgs',
    'StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs',
    'StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs',
    'StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs',
    'StackSpecGitAuthSshAuthSshPrivateKeySecretArgs',
    'StackSpecGitAuthSshAuthSshPrivateKeyArgs',
    'StackSpecGitAuthSshAuthArgs',
    'StackSpecGitAuthArgs',
    'StackSpecPrerequisitesRequirementArgs',
    'StackSpecPrerequisitesArgs',
    'StackSpecProgramRefArgs',
    'StackSpecSecretsRefEnvArgs',
    'StackSpecSecretsRefFilesystemArgs',
    'StackSpecSecretsRefLiteralArgs',
    'StackSpecSecretsRefSecretArgs',
    'StackSpecSecretsRefArgs',
    'StackSpecArgs',
    'StackStatusLastUpdateArgs',
    'StackStatusArgs',
]

@pulumi.input_type
class StackSpecEnvRefsEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Env selects an environment variable set on the operator process
        :param pulumi.Input[str] name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecEnvRefsFilesystemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        """
        FileSystem selects a file on the operator's file system
        :param pulumi.Input[str] path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class StackSpecEnvRefsLiteralArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        LiteralRef refers to a literal value
        :param pulumi.Input[str] value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value to load
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StackSpecEnvRefsSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param pulumi.Input[str] key: Key within the Secret to use.
        :param pulumi.Input[str] name: Name of the Secret
        :param pulumi.Input[str] namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackSpecEnvRefsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 env: Optional[pulumi.Input['StackSpecEnvRefsEnvArgs']] = None,
                 filesystem: Optional[pulumi.Input['StackSpecEnvRefsFilesystemArgs']] = None,
                 literal: Optional[pulumi.Input['StackSpecEnvRefsLiteralArgs']] = None,
                 secret: Optional[pulumi.Input['StackSpecEnvRefsSecretArgs']] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input[str] type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param pulumi.Input['StackSpecEnvRefsEnvArgs'] env: Env selects an environment variable set on the operator process
        :param pulumi.Input['StackSpecEnvRefsFilesystemArgs'] filesystem: FileSystem selects a file on the operator's file system
        :param pulumi.Input['StackSpecEnvRefsLiteralArgs'] literal: LiteralRef refers to a literal value
        :param pulumi.Input['StackSpecEnvRefsSecretArgs'] secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input['StackSpecEnvRefsEnvArgs']]:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input['StackSpecEnvRefsEnvArgs']]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[pulumi.Input['StackSpecEnvRefsFilesystemArgs']]:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: Optional[pulumi.Input['StackSpecEnvRefsFilesystemArgs']]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def literal(self) -> Optional[pulumi.Input['StackSpecEnvRefsLiteralArgs']]:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @literal.setter
    def literal(self, value: Optional[pulumi.Input['StackSpecEnvRefsLiteralArgs']]):
        pulumi.set(self, "literal", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['StackSpecEnvRefsSecretArgs']]:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['StackSpecEnvRefsSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class StackSpecFluxSourceSourceRefArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecFluxSourceArgs:
    def __init__(__self__, *,
                 source_ref: pulumi.Input['StackSpecFluxSourceSourceRefArgs'],
                 dir: Optional[pulumi.Input[str]] = None):
        """
        FluxSource specifies how to fetch source code from a Flux source object.
        :param pulumi.Input[str] dir: Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of interest, within the fetched source.
        """
        pulumi.set(__self__, "source_ref", source_ref)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)

    @property
    @pulumi.getter(name="sourceRef")
    def source_ref(self) -> pulumi.Input['StackSpecFluxSourceSourceRefArgs']:
        return pulumi.get(self, "source_ref")

    @source_ref.setter
    def source_ref(self, value: pulumi.Input['StackSpecFluxSourceSourceRefArgs']):
        pulumi.set(self, "source_ref", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        """
        Dir gives the subdirectory containing the Pulumi project (i.e., containing Pulumi.yaml) of interest, within the fetched source.
        """
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dir", value)


@pulumi.input_type
class StackSpecGitAuthAccessTokenEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Env selects an environment variable set on the operator process
        :param pulumi.Input[str] name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecGitAuthAccessTokenFilesystemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        """
        FileSystem selects a file on the operator's file system
        :param pulumi.Input[str] path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class StackSpecGitAuthAccessTokenLiteralArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        LiteralRef refers to a literal value
        :param pulumi.Input[str] value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value to load
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StackSpecGitAuthAccessTokenSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param pulumi.Input[str] key: Key within the Secret to use.
        :param pulumi.Input[str] name: Name of the Secret
        :param pulumi.Input[str] namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackSpecGitAuthAccessTokenArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 env: Optional[pulumi.Input['StackSpecGitAuthAccessTokenEnvArgs']] = None,
                 filesystem: Optional[pulumi.Input['StackSpecGitAuthAccessTokenFilesystemArgs']] = None,
                 literal: Optional[pulumi.Input['StackSpecGitAuthAccessTokenLiteralArgs']] = None,
                 secret: Optional[pulumi.Input['StackSpecGitAuthAccessTokenSecretArgs']] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input[str] type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param pulumi.Input['StackSpecGitAuthAccessTokenEnvArgs'] env: Env selects an environment variable set on the operator process
        :param pulumi.Input['StackSpecGitAuthAccessTokenFilesystemArgs'] filesystem: FileSystem selects a file on the operator's file system
        :param pulumi.Input['StackSpecGitAuthAccessTokenLiteralArgs'] literal: LiteralRef refers to a literal value
        :param pulumi.Input['StackSpecGitAuthAccessTokenSecretArgs'] secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input['StackSpecGitAuthAccessTokenEnvArgs']]:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input['StackSpecGitAuthAccessTokenEnvArgs']]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[pulumi.Input['StackSpecGitAuthAccessTokenFilesystemArgs']]:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: Optional[pulumi.Input['StackSpecGitAuthAccessTokenFilesystemArgs']]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def literal(self) -> Optional[pulumi.Input['StackSpecGitAuthAccessTokenLiteralArgs']]:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @literal.setter
    def literal(self, value: Optional[pulumi.Input['StackSpecGitAuthAccessTokenLiteralArgs']]):
        pulumi.set(self, "literal", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['StackSpecGitAuthAccessTokenSecretArgs']]:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['StackSpecGitAuthAccessTokenSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthPasswordEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Env selects an environment variable set on the operator process
        :param pulumi.Input[str] name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthPasswordFilesystemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        """
        FileSystem selects a file on the operator's file system
        :param pulumi.Input[str] path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthPasswordLiteralArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        LiteralRef refers to a literal value
        :param pulumi.Input[str] value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value to load
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthPasswordSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param pulumi.Input[str] key: Key within the Secret to use.
        :param pulumi.Input[str] name: Name of the Secret
        :param pulumi.Input[str] namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthPasswordArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 env: Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordEnvArgs']] = None,
                 filesystem: Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordFilesystemArgs']] = None,
                 literal: Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordLiteralArgs']] = None,
                 secret: Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordSecretArgs']] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input[str] type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param pulumi.Input['StackSpecGitAuthBasicAuthPasswordEnvArgs'] env: Env selects an environment variable set on the operator process
        :param pulumi.Input['StackSpecGitAuthBasicAuthPasswordFilesystemArgs'] filesystem: FileSystem selects a file on the operator's file system
        :param pulumi.Input['StackSpecGitAuthBasicAuthPasswordLiteralArgs'] literal: LiteralRef refers to a literal value
        :param pulumi.Input['StackSpecGitAuthBasicAuthPasswordSecretArgs'] secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordEnvArgs']]:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordEnvArgs']]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordFilesystemArgs']]:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordFilesystemArgs']]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def literal(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordLiteralArgs']]:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @literal.setter
    def literal(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordLiteralArgs']]):
        pulumi.set(self, "literal", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordSecretArgs']]:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthPasswordSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthUserNameEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Env selects an environment variable set on the operator process
        :param pulumi.Input[str] name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthUserNameFilesystemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        """
        FileSystem selects a file on the operator's file system
        :param pulumi.Input[str] path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthUserNameLiteralArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        LiteralRef refers to a literal value
        :param pulumi.Input[str] value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value to load
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthUserNameSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param pulumi.Input[str] key: Key within the Secret to use.
        :param pulumi.Input[str] name: Name of the Secret
        :param pulumi.Input[str] namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthUserNameArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 env: Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameEnvArgs']] = None,
                 filesystem: Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameFilesystemArgs']] = None,
                 literal: Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameLiteralArgs']] = None,
                 secret: Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameSecretArgs']] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input[str] type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param pulumi.Input['StackSpecGitAuthBasicAuthUserNameEnvArgs'] env: Env selects an environment variable set on the operator process
        :param pulumi.Input['StackSpecGitAuthBasicAuthUserNameFilesystemArgs'] filesystem: FileSystem selects a file on the operator's file system
        :param pulumi.Input['StackSpecGitAuthBasicAuthUserNameLiteralArgs'] literal: LiteralRef refers to a literal value
        :param pulumi.Input['StackSpecGitAuthBasicAuthUserNameSecretArgs'] secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameEnvArgs']]:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameEnvArgs']]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameFilesystemArgs']]:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameFilesystemArgs']]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def literal(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameLiteralArgs']]:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @literal.setter
    def literal(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameLiteralArgs']]):
        pulumi.set(self, "literal", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameSecretArgs']]:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthUserNameSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class StackSpecGitAuthBasicAuthArgs:
    def __init__(__self__, *,
                 password: pulumi.Input['StackSpecGitAuthBasicAuthPasswordArgs'],
                 user_name: pulumi.Input['StackSpecGitAuthBasicAuthUserNameArgs']):
        """
        BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
        :param pulumi.Input['StackSpecGitAuthBasicAuthPasswordArgs'] password: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input['StackSpecGitAuthBasicAuthUserNameArgs'] user_name: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input['StackSpecGitAuthBasicAuthPasswordArgs']:
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input['StackSpecGitAuthBasicAuthPasswordArgs']):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input['StackSpecGitAuthBasicAuthUserNameArgs']:
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input['StackSpecGitAuthBasicAuthUserNameArgs']):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthPasswordEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Env selects an environment variable set on the operator process
        :param pulumi.Input[str] name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthPasswordFilesystemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        """
        FileSystem selects a file on the operator's file system
        :param pulumi.Input[str] path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthPasswordLiteralArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        LiteralRef refers to a literal value
        :param pulumi.Input[str] value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value to load
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthPasswordSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param pulumi.Input[str] key: Key within the Secret to use.
        :param pulumi.Input[str] name: Name of the Secret
        :param pulumi.Input[str] namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthPasswordArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 env: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordEnvArgs']] = None,
                 filesystem: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordFilesystemArgs']] = None,
                 literal: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordLiteralArgs']] = None,
                 secret: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordSecretArgs']] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input[str] type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param pulumi.Input['StackSpecGitAuthSshAuthPasswordEnvArgs'] env: Env selects an environment variable set on the operator process
        :param pulumi.Input['StackSpecGitAuthSshAuthPasswordFilesystemArgs'] filesystem: FileSystem selects a file on the operator's file system
        :param pulumi.Input['StackSpecGitAuthSshAuthPasswordLiteralArgs'] literal: LiteralRef refers to a literal value
        :param pulumi.Input['StackSpecGitAuthSshAuthPasswordSecretArgs'] secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordEnvArgs']]:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordEnvArgs']]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordFilesystemArgs']]:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordFilesystemArgs']]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def literal(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordLiteralArgs']]:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @literal.setter
    def literal(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordLiteralArgs']]):
        pulumi.set(self, "literal", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordSecretArgs']]:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Env selects an environment variable set on the operator process
        :param pulumi.Input[str] name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        """
        FileSystem selects a file on the operator's file system
        :param pulumi.Input[str] path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        LiteralRef refers to a literal value
        :param pulumi.Input[str] value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value to load
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthSshPrivateKeySecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param pulumi.Input[str] key: Key within the Secret to use.
        :param pulumi.Input[str] name: Name of the Secret
        :param pulumi.Input[str] namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthSshPrivateKeyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 env: Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs']] = None,
                 filesystem: Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs']] = None,
                 literal: Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs']] = None,
                 secret: Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeySecretArgs']] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input[str] type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs'] env: Env selects an environment variable set on the operator process
        :param pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs'] filesystem: FileSystem selects a file on the operator's file system
        :param pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs'] literal: LiteralRef refers to a literal value
        :param pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeySecretArgs'] secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs']]:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyEnvArgs']]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs']]:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyFilesystemArgs']]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def literal(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs']]:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @literal.setter
    def literal(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyLiteralArgs']]):
        pulumi.set(self, "literal", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeySecretArgs']]:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeySecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class StackSpecGitAuthSshAuthArgs:
    def __init__(__self__, *,
                 ssh_private_key: pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyArgs'],
                 password: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordArgs']] = None):
        """
        SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
        :param pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyArgs'] ssh_private_key: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input['StackSpecGitAuthSshAuthPasswordArgs'] password: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        pulumi.set(__self__, "ssh_private_key", ssh_private_key)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyArgs']:
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "ssh_private_key")

    @ssh_private_key.setter
    def ssh_private_key(self, value: pulumi.Input['StackSpecGitAuthSshAuthSshPrivateKeyArgs']):
        pulumi.set(self, "ssh_private_key", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordArgs']]:
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthPasswordArgs']]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class StackSpecGitAuthArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input['StackSpecGitAuthAccessTokenArgs']] = None,
                 basic_auth: Optional[pulumi.Input['StackSpecGitAuthBasicAuthArgs']] = None,
                 ssh_auth: Optional[pulumi.Input['StackSpecGitAuthSshAuthArgs']] = None):
        """
        (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
        :param pulumi.Input['StackSpecGitAuthAccessTokenArgs'] access_token: ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input['StackSpecGitAuthBasicAuthArgs'] basic_auth: BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
        :param pulumi.Input['StackSpecGitAuthSshAuthArgs'] ssh_auth: SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if ssh_auth is not None:
            pulumi.set(__self__, "ssh_auth", ssh_auth)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input['StackSpecGitAuthAccessTokenArgs']]:
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input['StackSpecGitAuthAccessTokenArgs']]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional[pulumi.Input['StackSpecGitAuthBasicAuthArgs']]:
        """
        BasicAuth configures git authentication through basic auth — i.e. username and password. Both UserName and Password are required.
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: Optional[pulumi.Input['StackSpecGitAuthBasicAuthArgs']]):
        pulumi.set(self, "basic_auth", value)

    @property
    @pulumi.getter(name="sshAuth")
    def ssh_auth(self) -> Optional[pulumi.Input['StackSpecGitAuthSshAuthArgs']]:
        """
        SSHAuth configures ssh-based auth for git authentication. SSHPrivateKey is required but password is optional.
        """
        return pulumi.get(self, "ssh_auth")

    @ssh_auth.setter
    def ssh_auth(self, value: Optional[pulumi.Input['StackSpecGitAuthSshAuthArgs']]):
        pulumi.set(self, "ssh_auth", value)


@pulumi.input_type
class StackSpecPrerequisitesRequirementArgs:
    def __init__(__self__, *,
                 succeeded_within_duration: Optional[pulumi.Input[str]] = None):
        """
        Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
        :param pulumi.Input[str] succeeded_within_duration: SucceededWithinDuration gives a duration within which the prerequisite must have reached a succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in the last hour". Fields (should there ever be more than one) are not intended to be mutually exclusive.
        """
        if succeeded_within_duration is not None:
            pulumi.set(__self__, "succeeded_within_duration", succeeded_within_duration)

    @property
    @pulumi.getter(name="succeededWithinDuration")
    def succeeded_within_duration(self) -> Optional[pulumi.Input[str]]:
        """
        SucceededWithinDuration gives a duration within which the prerequisite must have reached a succeeded state; e.g., "1h" means "the prerequisite must be successful, and have become so in the last hour". Fields (should there ever be more than one) are not intended to be mutually exclusive.
        """
        return pulumi.get(self, "succeeded_within_duration")

    @succeeded_within_duration.setter
    def succeeded_within_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "succeeded_within_duration", value)


@pulumi.input_type
class StackSpecPrerequisitesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 requirement: Optional[pulumi.Input['StackSpecPrerequisitesRequirementArgs']] = None):
        """
        PrerequisiteRef refers to another stack, and gives requirements for the prerequisite to be considered satisfied.
        :param pulumi.Input[str] name: Name is the name of the Stack resource that is a prerequisite.
        :param pulumi.Input['StackSpecPrerequisitesRequirementArgs'] requirement: Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
        """
        pulumi.set(__self__, "name", name)
        if requirement is not None:
            pulumi.set(__self__, "requirement", requirement)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name is the name of the Stack resource that is a prerequisite.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def requirement(self) -> Optional[pulumi.Input['StackSpecPrerequisitesRequirementArgs']]:
        """
        Requirement gives specific requirements for the prerequisite; the base requirement is that the referenced stack is in a successful state.
        """
        return pulumi.get(self, "requirement")

    @requirement.setter
    def requirement(self, value: Optional[pulumi.Input['StackSpecPrerequisitesRequirementArgs']]):
        pulumi.set(self, "requirement", value)


@pulumi.input_type
class StackSpecProgramRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        ProgramRef refers to a Program object, to be used as the source for the stack.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecSecretsRefEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        Env selects an environment variable set on the operator process
        :param pulumi.Input[str] name: Name of the environment variable
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StackSpecSecretsRefFilesystemArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        """
        FileSystem selects a file on the operator's file system
        :param pulumi.Input[str] path: Path on the filesystem to use to load information from.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path on the filesystem to use to load information from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class StackSpecSecretsRefLiteralArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        LiteralRef refers to a literal value
        :param pulumi.Input[str] value: Value to load
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value to load
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StackSpecSecretsRefSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretRef refers to a Kubernetes Secret
        :param pulumi.Input[str] key: Key within the Secret to use.
        :param pulumi.Input[str] name: Name of the Secret
        :param pulumi.Input[str] namespace: Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key within the Secret to use.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace where the Secret is stored. Deprecated; non-empty values will be considered invalid unless namespace isolation is disabled in the controller.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class StackSpecSecretsRefArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 env: Optional[pulumi.Input['StackSpecSecretsRefEnvArgs']] = None,
                 filesystem: Optional[pulumi.Input['StackSpecSecretsRefFilesystemArgs']] = None,
                 literal: Optional[pulumi.Input['StackSpecSecretsRefLiteralArgs']] = None,
                 secret: Optional[pulumi.Input['StackSpecSecretsRefSecretArgs']] = None):
        """
        ResourceRef identifies a resource from which information can be loaded. Environment variables, files on the filesystem, Kubernetes Secrets and literal strings are currently supported.
        :param pulumi.Input[str] type: SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        :param pulumi.Input['StackSpecSecretsRefEnvArgs'] env: Env selects an environment variable set on the operator process
        :param pulumi.Input['StackSpecSecretsRefFilesystemArgs'] filesystem: FileSystem selects a file on the operator's file system
        :param pulumi.Input['StackSpecSecretsRefLiteralArgs'] literal: LiteralRef refers to a literal value
        :param pulumi.Input['StackSpecSecretsRefSecretArgs'] secret: SecretRef refers to a Kubernetes Secret
        """
        pulumi.set(__self__, "type", type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if literal is not None:
            pulumi.set(__self__, "literal", literal)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        SelectorType is required and signifies the type of selector. Must be one of: Env, FS, Secret, Literal
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input['StackSpecSecretsRefEnvArgs']]:
        """
        Env selects an environment variable set on the operator process
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input['StackSpecSecretsRefEnvArgs']]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[pulumi.Input['StackSpecSecretsRefFilesystemArgs']]:
        """
        FileSystem selects a file on the operator's file system
        """
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: Optional[pulumi.Input['StackSpecSecretsRefFilesystemArgs']]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def literal(self) -> Optional[pulumi.Input['StackSpecSecretsRefLiteralArgs']]:
        """
        LiteralRef refers to a literal value
        """
        return pulumi.get(self, "literal")

    @literal.setter
    def literal(self, value: Optional[pulumi.Input['StackSpecSecretsRefLiteralArgs']]):
        pulumi.set(self, "literal", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['StackSpecSecretsRefSecretArgs']]:
        """
        SecretRef refers to a Kubernetes Secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['StackSpecSecretsRefSecretArgs']]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class StackSpecArgs:
    def __init__(__self__, *,
                 stack: pulumi.Input[str],
                 access_token_secret: Optional[pulumi.Input[str]] = None,
                 backend: Optional[pulumi.Input[str]] = None,
                 branch: Optional[pulumi.Input[str]] = None,
                 commit: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 continue_resync_on_commit_match: Optional[pulumi.Input[bool]] = None,
                 destroy_on_finalize: Optional[pulumi.Input[bool]] = None,
                 env_refs: Optional[pulumi.Input[Mapping[str, pulumi.Input['StackSpecEnvRefsArgs']]]] = None,
                 env_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expect_no_refresh_changes: Optional[pulumi.Input[bool]] = None,
                 flux_source: Optional[pulumi.Input['StackSpecFluxSourceArgs']] = None,
                 git_auth: Optional[pulumi.Input['StackSpecGitAuthArgs']] = None,
                 git_auth_secret: Optional[pulumi.Input[str]] = None,
                 prerequisites: Optional[pulumi.Input[Sequence[pulumi.Input['StackSpecPrerequisitesArgs']]]] = None,
                 program_ref: Optional[pulumi.Input['StackSpecProgramRefArgs']] = None,
                 project_repo: Optional[pulumi.Input[str]] = None,
                 refresh: Optional[pulumi.Input[bool]] = None,
                 repo_dir: Optional[pulumi.Input[str]] = None,
                 resync_frequency_seconds: Optional[pulumi.Input[int]] = None,
                 retry_on_update_conflict: Optional[pulumi.Input[bool]] = None,
                 secrets: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secrets_provider: Optional[pulumi.Input[str]] = None,
                 secrets_ref: Optional[pulumi.Input[Mapping[str, pulumi.Input['StackSpecSecretsRefArgs']]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_local_stack_only: Optional[pulumi.Input[bool]] = None):
        """
        StackSpec defines the desired state of Pulumi Stack being managed by this operator.
        :param pulumi.Input[str] stack: Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
        :param pulumi.Input[str] access_token_secret: (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access. Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
        :param pulumi.Input[str] backend: (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/> Examples:<br/> - Pulumi Service:              "https://app.pulumi.com" (default)<br/> - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/> - Local:                       "file://./einstein" <br/> - AWS:                         "s3://<my-pulumi-state-bucket>" <br/> - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/> - GCP:                         "gs://<my-pulumi-state-bucket>" <br/> See: https://www.pulumi.com/docs/intro/concepts/state/
        :param pulumi.Input[str] branch: (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This is mutually exclusive with the Commit setting. Either value needs to be specified. When specified, the operator will periodically poll to check if the branch has any new commits. The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
        :param pulumi.Input[str] commit: (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. Either value needs to be specified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
        :param pulumi.Input[bool] continue_resync_on_commit_match: (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying to update stacks even if the revision of the source matches. This might be useful in environments where Pulumi programs have dynamic elements for example, calls to internal APIs where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a particular revision is successfully run, the operator will not attempt to rerun the program at that revision again.
        :param pulumi.Input[bool] destroy_on_finalize: (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
        :param pulumi.Input[Mapping[str, pulumi.Input['StackSpecEnvRefsArgs']]] env_refs: (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where the variables' values should be loaded from (one of literal, environment variable, file on the filesystem, or Kubernetes Secret) as values.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] env_secrets: (optional) SecretEnvs is an optional array of Secret names containing environment variables to set. Deprecated: use EnvRefs instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] envs: (optional) Envs is an optional array of config maps containing environment variables to set. Deprecated: use EnvRefs instead.
        :param pulumi.Input[bool] expect_no_refresh_changes: (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
        :param pulumi.Input['StackSpecFluxSourceArgs'] flux_source: FluxSource specifies how to fetch source code from a Flux source object.
        :param pulumi.Input['StackSpecGitAuthArgs'] git_auth: (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
        :param pulumi.Input[str] git_auth_secret: (optional) GitAuthSecret is the the name of a Secret containing an authentication option for the git repository. There are 3 different authentication options: * Personal access token * SSH private key (and it's optional password) * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials. Deprecated. Use GitAuth instead.
        :param pulumi.Input[Sequence[pulumi.Input['StackSpecPrerequisitesArgs']]] prerequisites: (optional) Prerequisites is a list of references to other stacks, each with a constraint on how long ago it must have succeeded. This can be used to make sure e.g., state is re-evaluated before running a stack that depends on it.
        :param pulumi.Input['StackSpecProgramRefArgs'] program_ref: ProgramRef refers to a Program object, to be used as the source for the stack.
        :param pulumi.Input[str] project_repo: ProjectRepo is the git source control repository from which we fetch the project code and configuration.
        :param pulumi.Input[bool] refresh: (optional) Refresh can be set to true to refresh the stack before it is updated.
        :param pulumi.Input[str] repo_dir: (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
        :param pulumi.Input[int] resync_frequency_seconds: (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at the specified frequency even if no changes to the custom resource are detected. If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency. The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
        :param pulumi.Input[bool] retry_on_update_conflict: (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] secrets: (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository. Deprecated: use SecretRefs instead.
        :param pulumi.Input[str] secrets_provider: (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples: - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1" - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname" - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" - See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
        :param pulumi.Input[Mapping[str, pulumi.Input['StackSpecSecretsRefArgs']]] secrets_ref: (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] targets: (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only resources mentioned will be updated.
        :param pulumi.Input[bool] use_local_stack_only: (optional) UseLocalStackOnly can be set to true to prevent the operator from creating stacks that do not exist in the tracking git repo. The default behavior is to create a stack if it doesn't exist.
        """
        pulumi.set(__self__, "stack", stack)
        if access_token_secret is not None:
            pulumi.set(__self__, "access_token_secret", access_token_secret)
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if commit is not None:
            pulumi.set(__self__, "commit", commit)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if continue_resync_on_commit_match is not None:
            pulumi.set(__self__, "continue_resync_on_commit_match", continue_resync_on_commit_match)
        if destroy_on_finalize is not None:
            pulumi.set(__self__, "destroy_on_finalize", destroy_on_finalize)
        if env_refs is not None:
            pulumi.set(__self__, "env_refs", env_refs)
        if env_secrets is not None:
            pulumi.set(__self__, "env_secrets", env_secrets)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if expect_no_refresh_changes is not None:
            pulumi.set(__self__, "expect_no_refresh_changes", expect_no_refresh_changes)
        if flux_source is not None:
            pulumi.set(__self__, "flux_source", flux_source)
        if git_auth is not None:
            pulumi.set(__self__, "git_auth", git_auth)
        if git_auth_secret is not None:
            pulumi.set(__self__, "git_auth_secret", git_auth_secret)
        if prerequisites is not None:
            pulumi.set(__self__, "prerequisites", prerequisites)
        if program_ref is not None:
            pulumi.set(__self__, "program_ref", program_ref)
        if project_repo is not None:
            pulumi.set(__self__, "project_repo", project_repo)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if repo_dir is not None:
            pulumi.set(__self__, "repo_dir", repo_dir)
        if resync_frequency_seconds is not None:
            pulumi.set(__self__, "resync_frequency_seconds", resync_frequency_seconds)
        if retry_on_update_conflict is not None:
            pulumi.set(__self__, "retry_on_update_conflict", retry_on_update_conflict)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if secrets_provider is not None:
            pulumi.set(__self__, "secrets_provider", secrets_provider)
        if secrets_ref is not None:
            pulumi.set(__self__, "secrets_ref", secrets_ref)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if use_local_stack_only is not None:
            pulumi.set(__self__, "use_local_stack_only", use_local_stack_only)

    @property
    @pulumi.getter
    def stack(self) -> pulumi.Input[str]:
        """
        Stack is the fully qualified name of the stack to deploy (<org>/<stack>).
        """
        return pulumi.get(self, "stack")

    @stack.setter
    def stack(self, value: pulumi.Input[str]):
        pulumi.set(self, "stack", value)

    @property
    @pulumi.getter(name="accessTokenSecret")
    def access_token_secret(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) AccessTokenSecret is the name of a Secret containing the PULUMI_ACCESS_TOKEN for Pulumi access. Deprecated: use EnvRefs with a "secret" entry with the key PULUMI_ACCESS_TOKEN instead.
        """
        return pulumi.get(self, "access_token_secret")

    @access_token_secret.setter
    def access_token_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_secret", value)

    @property
    @pulumi.getter
    def backend(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) Backend is an optional backend URL to use for all Pulumi operations.<br/> Examples:<br/> - Pulumi Service:              "https://app.pulumi.com" (default)<br/> - Self-managed Pulumi Service: "https://pulumi.acmecorp.com" <br/> - Local:                       "file://./einstein" <br/> - AWS:                         "s3://<my-pulumi-state-bucket>" <br/> - Azure:                       "azblob://<my-pulumi-state-bucket>" <br/> - GCP:                         "gs://<my-pulumi-state-bucket>" <br/> See: https://www.pulumi.com/docs/intro/concepts/state/
        """
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) Branch is the branch name to deploy, either the simple or fully qualified ref name, e.g. refs/heads/master. This is mutually exclusive with the Commit setting. Either value needs to be specified. When specified, the operator will periodically poll to check if the branch has any new commits. The frequency of the polling is configurable through ResyncFrequencySeconds, defaulting to every 60 seconds.
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter
    def commit(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) Commit is the hash of the commit to deploy. If used, HEAD will be in detached mode. This is mutually exclusive with the Branch setting. Either value needs to be specified.
        """
        return pulumi.get(self, "commit")

    @commit.setter
    def commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (optional) Config is the configuration for this stack, which can be optionally specified inline. If this is omitted, configuration is assumed to be checked in and taken from the source repository.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="continueResyncOnCommitMatch")
    def continue_resync_on_commit_match(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) ContinueResyncOnCommitMatch - when true - informs the operator to continue trying to update stacks even if the revision of the source matches. This might be useful in environments where Pulumi programs have dynamic elements for example, calls to internal APIs where GitOps style commit tracking is not sufficient.  Defaults to false, i.e. when a particular revision is successfully run, the operator will not attempt to rerun the program at that revision again.
        """
        return pulumi.get(self, "continue_resync_on_commit_match")

    @continue_resync_on_commit_match.setter
    def continue_resync_on_commit_match(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "continue_resync_on_commit_match", value)

    @property
    @pulumi.getter(name="destroyOnFinalize")
    def destroy_on_finalize(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) DestroyOnFinalize can be set to true to destroy the stack completely upon deletion of the Stack custom resource.
        """
        return pulumi.get(self, "destroy_on_finalize")

    @destroy_on_finalize.setter
    def destroy_on_finalize(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "destroy_on_finalize", value)

    @property
    @pulumi.getter(name="envRefs")
    def env_refs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['StackSpecEnvRefsArgs']]]]:
        """
        (optional) EnvRefs is an optional map containing environment variables as keys and stores descriptors to where the variables' values should be loaded from (one of literal, environment variable, file on the filesystem, or Kubernetes Secret) as values.
        """
        return pulumi.get(self, "env_refs")

    @env_refs.setter
    def env_refs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['StackSpecEnvRefsArgs']]]]):
        pulumi.set(self, "env_refs", value)

    @property
    @pulumi.getter(name="envSecrets")
    def env_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (optional) SecretEnvs is an optional array of Secret names containing environment variables to set. Deprecated: use EnvRefs instead.
        """
        return pulumi.get(self, "env_secrets")

    @env_secrets.setter
    def env_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "env_secrets", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (optional) Envs is an optional array of config maps containing environment variables to set. Deprecated: use EnvRefs instead.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="expectNoRefreshChanges")
    def expect_no_refresh_changes(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) ExpectNoRefreshChanges can be set to true if a stack is not expected to have changes during a refresh before the update is run. This could occur, for example, is a resource's state is changing outside of Pulumi (e.g., metadata, timestamps).
        """
        return pulumi.get(self, "expect_no_refresh_changes")

    @expect_no_refresh_changes.setter
    def expect_no_refresh_changes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expect_no_refresh_changes", value)

    @property
    @pulumi.getter(name="fluxSource")
    def flux_source(self) -> Optional[pulumi.Input['StackSpecFluxSourceArgs']]:
        """
        FluxSource specifies how to fetch source code from a Flux source object.
        """
        return pulumi.get(self, "flux_source")

    @flux_source.setter
    def flux_source(self, value: Optional[pulumi.Input['StackSpecFluxSourceArgs']]):
        pulumi.set(self, "flux_source", value)

    @property
    @pulumi.getter(name="gitAuth")
    def git_auth(self) -> Optional[pulumi.Input['StackSpecGitAuthArgs']]:
        """
        (optional) GitAuth allows configuring git authentication options There are 3 different authentication options: * SSH private key (and its optional password) * Personal access token * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials.
        """
        return pulumi.get(self, "git_auth")

    @git_auth.setter
    def git_auth(self, value: Optional[pulumi.Input['StackSpecGitAuthArgs']]):
        pulumi.set(self, "git_auth", value)

    @property
    @pulumi.getter(name="gitAuthSecret")
    def git_auth_secret(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) GitAuthSecret is the the name of a Secret containing an authentication option for the git repository. There are 3 different authentication options: * Personal access token * SSH private key (and it's optional password) * Basic auth username and password Only one authentication mode will be considered if more than one option is specified, with ssh private key/password preferred first, then personal access token, and finally basic auth credentials. Deprecated. Use GitAuth instead.
        """
        return pulumi.get(self, "git_auth_secret")

    @git_auth_secret.setter
    def git_auth_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_auth_secret", value)

    @property
    @pulumi.getter
    def prerequisites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StackSpecPrerequisitesArgs']]]]:
        """
        (optional) Prerequisites is a list of references to other stacks, each with a constraint on how long ago it must have succeeded. This can be used to make sure e.g., state is re-evaluated before running a stack that depends on it.
        """
        return pulumi.get(self, "prerequisites")

    @prerequisites.setter
    def prerequisites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StackSpecPrerequisitesArgs']]]]):
        pulumi.set(self, "prerequisites", value)

    @property
    @pulumi.getter(name="programRef")
    def program_ref(self) -> Optional[pulumi.Input['StackSpecProgramRefArgs']]:
        """
        ProgramRef refers to a Program object, to be used as the source for the stack.
        """
        return pulumi.get(self, "program_ref")

    @program_ref.setter
    def program_ref(self, value: Optional[pulumi.Input['StackSpecProgramRefArgs']]):
        pulumi.set(self, "program_ref", value)

    @property
    @pulumi.getter(name="projectRepo")
    def project_repo(self) -> Optional[pulumi.Input[str]]:
        """
        ProjectRepo is the git source control repository from which we fetch the project code and configuration.
        """
        return pulumi.get(self, "project_repo")

    @project_repo.setter
    def project_repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_repo", value)

    @property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) Refresh can be set to true to refresh the stack before it is updated.
        """
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "refresh", value)

    @property
    @pulumi.getter(name="repoDir")
    def repo_dir(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) RepoDir is the directory to work from in the project's source repository where Pulumi.yaml is located. It is used in case Pulumi.yaml is not in the project source root.
        """
        return pulumi.get(self, "repo_dir")

    @repo_dir.setter
    def repo_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_dir", value)

    @property
    @pulumi.getter(name="resyncFrequencySeconds")
    def resync_frequency_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        (optional) ResyncFrequencySeconds when set to a non-zero value, triggers a resync of the stack at the specified frequency even if no changes to the custom resource are detected. If branch tracking is enabled (branch is non-empty), commit polling will occur at this frequency. The minimal resync frequency supported is 60 seconds. The default value for this field is 60 seconds.
        """
        return pulumi.get(self, "resync_frequency_seconds")

    @resync_frequency_seconds.setter
    def resync_frequency_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resync_frequency_seconds", value)

    @property
    @pulumi.getter(name="retryOnUpdateConflict")
    def retry_on_update_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) RetryOnUpdateConflict issues a stack update retry reconciliation loop in the event that the update hits a HTTP 409 conflict due to another update in progress. This is only recommended if you are sure that the stack updates are idempotent, and if you are willing to accept retry loops until all spawned retries succeed. This will also create a more populated, and randomized activity timeline for the stack in the Pulumi Service.
        """
        return pulumi.get(self, "retry_on_update_conflict")

    @retry_on_update_conflict.setter
    def retry_on_update_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retry_on_update_conflict", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (optional) Secrets is the secret configuration for this stack, which can be optionally specified inline. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository. Deprecated: use SecretRefs instead.
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="secretsProvider")
    def secrets_provider(self) -> Optional[pulumi.Input[str]]:
        """
        (optional) SecretsProvider is used to initialize a Stack with alternative encryption. Examples: - AWS:   "awskms:///arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34bc-56ef-1234567890ab?region=us-east-1" - Azure: "azurekeyvault://acmecorpvault.vault.azure.net/keys/mykeyname" - GCP:   "gcpkms://projects/MYPROJECT/locations/MYLOCATION/keyRings/MYKEYRING/cryptoKeys/MYKEY" - See: https://www.pulumi.com/docs/intro/concepts/secrets/#initializing-a-stack-with-alternative-encryption
        """
        return pulumi.get(self, "secrets_provider")

    @secrets_provider.setter
    def secrets_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets_provider", value)

    @property
    @pulumi.getter(name="secretsRef")
    def secrets_ref(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['StackSpecSecretsRefArgs']]]]:
        """
        (optional) SecretRefs is the secret configuration for this stack which can be specified through ResourceRef. If this is omitted, secrets configuration is assumed to be checked in and taken from the source repository.
        """
        return pulumi.get(self, "secrets_ref")

    @secrets_ref.setter
    def secrets_ref(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['StackSpecSecretsRefArgs']]]]):
        pulumi.set(self, "secrets_ref", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (optional) Targets is a list of URNs of resources to update exclusively. If supplied, only resources mentioned will be updated.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="useLocalStackOnly")
    def use_local_stack_only(self) -> Optional[pulumi.Input[bool]]:
        """
        (optional) UseLocalStackOnly can be set to true to prevent the operator from creating stacks that do not exist in the tracking git repo. The default behavior is to create a stack if it doesn't exist.
        """
        return pulumi.get(self, "use_local_stack_only")

    @use_local_stack_only.setter
    def use_local_stack_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_local_stack_only", value)


@pulumi.input_type
class StackStatusLastUpdateArgs:
    def __init__(__self__, *,
                 last_attempted_commit: Optional[pulumi.Input[str]] = None,
                 last_resync_time: Optional[pulumi.Input[str]] = None,
                 last_successful_commit: Optional[pulumi.Input[str]] = None,
                 permalink: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        LastUpdate contains details of the status of the last update.
        :param pulumi.Input[str] last_attempted_commit: Last commit attempted
        :param pulumi.Input[str] last_resync_time: LastResyncTime contains a timestamp for the last time a resync of the stack took place.
        :param pulumi.Input[str] last_successful_commit: Last commit successfully applied
        :param pulumi.Input[str] permalink: Permalink is the Pulumi Console URL of the stack operation.
        :param pulumi.Input[str] state: State is the state of the stack update - one of `succeeded` or `failed`
        """
        if last_attempted_commit is not None:
            pulumi.set(__self__, "last_attempted_commit", last_attempted_commit)
        if last_resync_time is not None:
            pulumi.set(__self__, "last_resync_time", last_resync_time)
        if last_successful_commit is not None:
            pulumi.set(__self__, "last_successful_commit", last_successful_commit)
        if permalink is not None:
            pulumi.set(__self__, "permalink", permalink)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="lastAttemptedCommit")
    def last_attempted_commit(self) -> Optional[pulumi.Input[str]]:
        """
        Last commit attempted
        """
        return pulumi.get(self, "last_attempted_commit")

    @last_attempted_commit.setter
    def last_attempted_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_attempted_commit", value)

    @property
    @pulumi.getter(name="lastResyncTime")
    def last_resync_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastResyncTime contains a timestamp for the last time a resync of the stack took place.
        """
        return pulumi.get(self, "last_resync_time")

    @last_resync_time.setter
    def last_resync_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_resync_time", value)

    @property
    @pulumi.getter(name="lastSuccessfulCommit")
    def last_successful_commit(self) -> Optional[pulumi.Input[str]]:
        """
        Last commit successfully applied
        """
        return pulumi.get(self, "last_successful_commit")

    @last_successful_commit.setter
    def last_successful_commit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_successful_commit", value)

    @property
    @pulumi.getter
    def permalink(self) -> Optional[pulumi.Input[str]]:
        """
        Permalink is the Pulumi Console URL of the stack operation.
        """
        return pulumi.get(self, "permalink")

    @permalink.setter
    def permalink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permalink", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State is the state of the stack update - one of `succeeded` or `failed`
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class StackStatusArgs:
    def __init__(__self__, *,
                 last_update: Optional[pulumi.Input['StackStatusLastUpdateArgs']] = None,
                 outputs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]] = None):
        """
        StackStatus defines the observed state of Stack
        :param pulumi.Input['StackStatusLastUpdateArgs'] last_update: LastUpdate contains details of the status of the last update.
        :param pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]] outputs: Outputs contains the exported stack output variables resulting from a deployment.
        """
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if outputs is not None:
            pulumi.set(__self__, "outputs", outputs)

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[pulumi.Input['StackStatusLastUpdateArgs']]:
        """
        LastUpdate contains details of the status of the last update.
        """
        return pulumi.get(self, "last_update")

    @last_update.setter
    def last_update(self, value: Optional[pulumi.Input['StackStatusLastUpdateArgs']]):
        pulumi.set(self, "last_update", value)

    @property
    @pulumi.getter
    def outputs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]]:
        """
        Outputs contains the exported stack output variables resulting from a deployment.
        """
        return pulumi.get(self, "outputs")

    @outputs.setter
    def outputs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "outputs", value)


