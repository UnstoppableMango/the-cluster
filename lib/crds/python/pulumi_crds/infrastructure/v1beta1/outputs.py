# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ProxmoxClusterSpec',
    'ProxmoxClusterSpecControlPlaneEndpoint',
    'ProxmoxClusterSpecServerRef',
    'ProxmoxClusterSpecServerRefSecretRef',
    'ProxmoxClusterSpecStorage',
    'ProxmoxClusterStatus',
    'ProxmoxClusterStatusConditions',
    'ProxmoxClusterStatusFailureDomains',
    'ProxmoxMachineSpec',
    'ProxmoxMachineSpecCloudInit',
    'ProxmoxMachineSpecCloudInitUser',
    'ProxmoxMachineSpecCloudInitUserCaCerts',
    'ProxmoxMachineSpecCloudInitUserChpasswd',
    'ProxmoxMachineSpecCloudInitUserSsh',
    'ProxmoxMachineSpecCloudInitUserSshKeys',
    'ProxmoxMachineSpecCloudInitUserUsers',
    'ProxmoxMachineSpecCloudInitUserWriteFiles',
    'ProxmoxMachineSpecHardware',
    'ProxmoxMachineSpecHardwareNetworkDevice',
    'ProxmoxMachineSpecImage',
    'ProxmoxMachineSpecNetwork',
    'ProxmoxMachineSpecNetworkIpConfig',
    'ProxmoxMachineSpecOptions',
    'ProxmoxMachineStatus',
    'ProxmoxMachineStatusAddresses',
    'ProxmoxMachineStatusConditions',
    'ProxmoxMachineStatusConfig',
    'ProxmoxMachineTemplateSpec',
    'ProxmoxMachineTemplateSpecTemplate',
    'ProxmoxMachineTemplateSpecTemplateMetadataOmitempty',
    'ProxmoxMachineTemplateSpecTemplateSpec',
    'ProxmoxMachineTemplateSpecTemplateSpecCloudInit',
    'ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser',
    'ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserCaCerts',
    'ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserChpasswd',
    'ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSsh',
    'ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshKeys',
    'ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserUsers',
    'ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserWriteFiles',
    'ProxmoxMachineTemplateSpecTemplateSpecHardware',
    'ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDevice',
    'ProxmoxMachineTemplateSpecTemplateSpecImage',
    'ProxmoxMachineTemplateSpecTemplateSpecNetwork',
    'ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfig',
    'ProxmoxMachineTemplateSpecTemplateSpecOptions',
]

@pulumi.output_type
class ProxmoxClusterSpec(dict):
    """
    ProxmoxClusterSpec defines the desired state of ProxmoxCluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverRef":
            suggest = "server_ref"
        elif key == "controlPlaneEndpoint":
            suggest = "control_plane_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxClusterSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxClusterSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxClusterSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_ref: 'outputs.ProxmoxClusterSpecServerRef',
                 control_plane_endpoint: Optional['outputs.ProxmoxClusterSpecControlPlaneEndpoint'] = None,
                 storage: Optional['outputs.ProxmoxClusterSpecStorage'] = None):
        """
        ProxmoxClusterSpec defines the desired state of ProxmoxCluster
        :param 'ProxmoxClusterSpecServerRefArgs' server_ref: ServerRef is used for configuring Proxmox client
        :param 'ProxmoxClusterSpecControlPlaneEndpointArgs' control_plane_endpoint: ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        :param 'ProxmoxClusterSpecStorageArgs' storage: storage is used for storing cloud init snippet
        """
        pulumi.set(__self__, "server_ref", server_ref)
        if control_plane_endpoint is not None:
            pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="serverRef")
    def server_ref(self) -> 'outputs.ProxmoxClusterSpecServerRef':
        """
        ServerRef is used for configuring Proxmox client
        """
        return pulumi.get(self, "server_ref")

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> Optional['outputs.ProxmoxClusterSpecControlPlaneEndpoint']:
        """
        ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        """
        return pulumi.get(self, "control_plane_endpoint")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.ProxmoxClusterSpecStorage']:
        """
        storage is used for storing cloud init snippet
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class ProxmoxClusterSpecControlPlaneEndpoint(dict):
    """
    ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
    """
    def __init__(__self__, *,
                 host: str,
                 port: int):
        """
        ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        :param str host: The hostname on which the API server is serving.
        :param int port: The port on which the API server is serving.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The hostname on which the API server is serving.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port on which the API server is serving.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ProxmoxClusterSpecServerRef(dict):
    """
    ServerRef is used for configuring Proxmox client
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretRef":
            suggest = "secret_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxClusterSpecServerRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxClusterSpecServerRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxClusterSpecServerRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: str,
                 secret_ref: 'outputs.ProxmoxClusterSpecServerRefSecretRef'):
        """
        ServerRef is used for configuring Proxmox client
        :param str endpoint: endpoint is the address of the Proxmox-VE REST API endpoint.
        :param 'ProxmoxClusterSpecServerRefSecretRefArgs' secret_ref: SecretRef is a reference for secret which contains proxmox login secrets
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        endpoint is the address of the Proxmox-VE REST API endpoint.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.ProxmoxClusterSpecServerRefSecretRef':
        """
        SecretRef is a reference for secret which contains proxmox login secrets
        """
        return pulumi.get(self, "secret_ref")


@pulumi.output_type
class ProxmoxClusterSpecServerRefSecretRef(dict):
    """
    SecretRef is a reference for secret which contains proxmox login secrets
    """
    def __init__(__self__, *,
                 name: str,
                 namespace: Optional[str] = None):
        """
        SecretRef is a reference for secret which contains proxmox login secrets
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ProxmoxClusterSpecStorage(dict):
    """
    storage is used for storing cloud init snippet
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        """
        storage is used for storing cloud init snippet
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class ProxmoxClusterStatus(dict):
    """
    ProxmoxClusterStatus defines the observed state of ProxmoxCluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureDomains":
            suggest = "failure_domains"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxClusterStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxClusterStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxClusterStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ready: bool,
                 conditions: Optional[Sequence['outputs.ProxmoxClusterStatusConditions']] = None,
                 failure_domains: Optional[Mapping[str, 'outputs.ProxmoxClusterStatusFailureDomains']] = None):
        """
        ProxmoxClusterStatus defines the observed state of ProxmoxCluster
        :param bool ready: Ready
        :param Sequence['ProxmoxClusterStatusConditionsArgs'] conditions: Conditions
        :param Mapping[str, 'ProxmoxClusterStatusFailureDomainsArgs'] failure_domains: FailureDomains
        """
        pulumi.set(__self__, "ready", ready)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if failure_domains is not None:
            pulumi.set(__self__, "failure_domains", failure_domains)

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Ready
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ProxmoxClusterStatusConditions']]:
        """
        Conditions
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="failureDomains")
    def failure_domains(self) -> Optional[Mapping[str, 'outputs.ProxmoxClusterStatusFailureDomains']]:
        """
        FailureDomains
        """
        return pulumi.get(self, "failure_domains")


@pulumi.output_type
class ProxmoxClusterStatusConditions(dict):
    """
    Condition defines an observation of a Cluster API resource operational state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxClusterStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxClusterStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxClusterStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param str last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param str message: A human readable message indicating details about the transition. This field may be empty.
        :param str reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param str severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class ProxmoxClusterStatusFailureDomains(dict):
    """
    FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlPlane":
            suggest = "control_plane"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxClusterStatusFailureDomains. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxClusterStatusFailureDomains.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxClusterStatusFailureDomains.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes: Optional[Mapping[str, str]] = None,
                 control_plane: Optional[bool] = None):
        """
        FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
        :param Mapping[str, str] attributes: Attributes is a free form map of attributes an infrastructure provider might use or require.
        :param bool control_plane: ControlPlane determines if this failure domain is suitable for use by control plane machines.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Mapping[str, str]]:
        """
        Attributes is a free form map of attributes an infrastructure provider might use or require.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[bool]:
        """
        ControlPlane determines if this failure domain is suitable for use by control plane machines.
        """
        return pulumi.get(self, "control_plane")


@pulumi.output_type
class ProxmoxMachineSpec(dict):
    """
    ProxmoxMachineSpec defines the desired state of ProxmoxMachine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudInit":
            suggest = "cloud_init"
        elif key == "failureDomain":
            suggest = "failure_domain"
        elif key == "providerID":
            suggest = "provider_id"
        elif key == "vmID":
            suggest = "vm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: 'outputs.ProxmoxMachineSpecImage',
                 cloud_init: Optional['outputs.ProxmoxMachineSpecCloudInit'] = None,
                 failure_domain: Optional[str] = None,
                 hardware: Optional['outputs.ProxmoxMachineSpecHardware'] = None,
                 network: Optional['outputs.ProxmoxMachineSpecNetwork'] = None,
                 node: Optional[str] = None,
                 options: Optional['outputs.ProxmoxMachineSpecOptions'] = None,
                 provider_id: Optional[str] = None,
                 storage: Optional[str] = None,
                 vm_id: Optional[int] = None):
        """
        ProxmoxMachineSpec defines the desired state of ProxmoxMachine
        :param 'ProxmoxMachineSpecImageArgs' image: Image is the image to be provisioned
        :param 'ProxmoxMachineSpecCloudInitArgs' cloud_init: CloudInit defines options related to the bootstrapping systems where CloudInit is used.
        :param str failure_domain: FailureDomain is the failure domain unique identifier this Machine should be attached to, as defined in Cluster API.
        :param 'ProxmoxMachineSpecHardwareArgs' hardware: Hardware
        :param 'ProxmoxMachineSpecNetworkArgs' network: Network
        :param str node: Node is proxmox node hosting vm instance which used for ProxmoxMachine
        :param 'ProxmoxMachineSpecOptionsArgs' options: Options for QEMU instance
        :param str provider_id: ProviderID
        :param str storage: Storage is name of proxmox storage used by this node. The storage must support "images(VM Disks)" type of content. cappx will use random storage if empty
        :param int vm_id: VMID is proxmox qemu's id
        """
        pulumi.set(__self__, "image", image)
        if cloud_init is not None:
            pulumi.set(__self__, "cloud_init", cloud_init)
        if failure_domain is not None:
            pulumi.set(__self__, "failure_domain", failure_domain)
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if provider_id is not None:
            pulumi.set(__self__, "provider_id", provider_id)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter
    def image(self) -> 'outputs.ProxmoxMachineSpecImage':
        """
        Image is the image to be provisioned
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="cloudInit")
    def cloud_init(self) -> Optional['outputs.ProxmoxMachineSpecCloudInit']:
        """
        CloudInit defines options related to the bootstrapping systems where CloudInit is used.
        """
        return pulumi.get(self, "cloud_init")

    @property
    @pulumi.getter(name="failureDomain")
    def failure_domain(self) -> Optional[str]:
        """
        FailureDomain is the failure domain unique identifier this Machine should be attached to, as defined in Cluster API.
        """
        return pulumi.get(self, "failure_domain")

    @property
    @pulumi.getter
    def hardware(self) -> Optional['outputs.ProxmoxMachineSpecHardware']:
        """
        Hardware
        """
        return pulumi.get(self, "hardware")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ProxmoxMachineSpecNetwork']:
        """
        Network
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def node(self) -> Optional[str]:
        """
        Node is proxmox node hosting vm instance which used for ProxmoxMachine
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.ProxmoxMachineSpecOptions']:
        """
        Options for QEMU instance
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="providerID")
    def provider_id(self) -> Optional[str]:
        """
        ProviderID
        """
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter
    def storage(self) -> Optional[str]:
        """
        Storage is name of proxmox storage used by this node. The storage must support "images(VM Disks)" type of content. cappx will use random storage if empty
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="vmID")
    def vm_id(self) -> Optional[int]:
        """
        VMID is proxmox qemu's id
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class ProxmoxMachineSpecCloudInit(dict):
    """
    CloudInit defines options related to the bootstrapping systems where CloudInit is used.
    """
    def __init__(__self__, *,
                 user: Optional['outputs.ProxmoxMachineSpecCloudInitUser'] = None):
        """
        CloudInit defines options related to the bootstrapping systems where CloudInit is used.
        """
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.ProxmoxMachineSpecCloudInitUser']:
        return pulumi.get(self, "user")


@pulumi.output_type
class ProxmoxMachineSpecCloudInitUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runCmd":
            suggest = "run_cmd"
        elif key == "writeFiles":
            suggest = "write_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineSpecCloudInitUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineSpecCloudInitUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineSpecCloudInitUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bootcmd: Optional[Sequence[str]] = None,
                 ca_certs: Optional['outputs.ProxmoxMachineSpecCloudInitUserCaCerts'] = None,
                 chpasswd: Optional['outputs.ProxmoxMachineSpecCloudInitUserChpasswd'] = None,
                 manage_etc_hosts: Optional[bool] = None,
                 no_ssh_fingerprints: Optional[bool] = None,
                 package_update: Optional[bool] = None,
                 package_upgrade: Optional[bool] = None,
                 packages: Optional[Sequence[str]] = None,
                 password: Optional[str] = None,
                 run_cmd: Optional[Sequence[str]] = None,
                 ssh: Optional['outputs.ProxmoxMachineSpecCloudInitUserSsh'] = None,
                 ssh_authorized_keys: Optional[Sequence[str]] = None,
                 ssh_keys: Optional['outputs.ProxmoxMachineSpecCloudInitUserSshKeys'] = None,
                 ssh_pwauth: Optional[bool] = None,
                 user: Optional[str] = None,
                 users: Optional[Sequence['outputs.ProxmoxMachineSpecCloudInitUserUsers']] = None,
                 write_files: Optional[Sequence['outputs.ProxmoxMachineSpecCloudInitUserWriteFiles']] = None):
        if bootcmd is not None:
            pulumi.set(__self__, "bootcmd", bootcmd)
        if ca_certs is not None:
            pulumi.set(__self__, "ca_certs", ca_certs)
        if chpasswd is not None:
            pulumi.set(__self__, "chpasswd", chpasswd)
        if manage_etc_hosts is not None:
            pulumi.set(__self__, "manage_etc_hosts", manage_etc_hosts)
        if no_ssh_fingerprints is not None:
            pulumi.set(__self__, "no_ssh_fingerprints", no_ssh_fingerprints)
        if package_update is not None:
            pulumi.set(__self__, "package_update", package_update)
        if package_upgrade is not None:
            pulumi.set(__self__, "package_upgrade", package_upgrade)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if run_cmd is not None:
            pulumi.set(__self__, "run_cmd", run_cmd)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if ssh_authorized_keys is not None:
            pulumi.set(__self__, "ssh_authorized_keys", ssh_authorized_keys)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if ssh_pwauth is not None:
            pulumi.set(__self__, "ssh_pwauth", ssh_pwauth)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if write_files is not None:
            pulumi.set(__self__, "write_files", write_files)

    @property
    @pulumi.getter
    def bootcmd(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bootcmd")

    @property
    @pulumi.getter
    def ca_certs(self) -> Optional['outputs.ProxmoxMachineSpecCloudInitUserCaCerts']:
        return pulumi.get(self, "ca_certs")

    @property
    @pulumi.getter
    def chpasswd(self) -> Optional['outputs.ProxmoxMachineSpecCloudInitUserChpasswd']:
        return pulumi.get(self, "chpasswd")

    @property
    @pulumi.getter
    def manage_etc_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "manage_etc_hosts")

    @property
    @pulumi.getter
    def no_ssh_fingerprints(self) -> Optional[bool]:
        return pulumi.get(self, "no_ssh_fingerprints")

    @property
    @pulumi.getter
    def package_update(self) -> Optional[bool]:
        return pulumi.get(self, "package_update")

    @property
    @pulumi.getter
    def package_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "package_upgrade")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="runCmd")
    def run_cmd(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "run_cmd")

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.ProxmoxMachineSpecCloudInitUserSsh']:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter
    def ssh_authorized_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_authorized_keys")

    @property
    @pulumi.getter
    def ssh_keys(self) -> Optional['outputs.ProxmoxMachineSpecCloudInitUserSshKeys']:
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter
    def ssh_pwauth(self) -> Optional[bool]:
        return pulumi.get(self, "ssh_pwauth")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.ProxmoxMachineSpecCloudInitUserUsers']]:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="writeFiles")
    def write_files(self) -> Optional[Sequence['outputs.ProxmoxMachineSpecCloudInitUserWriteFiles']]:
        return pulumi.get(self, "write_files")


@pulumi.output_type
class ProxmoxMachineSpecCloudInitUserCaCerts(dict):
    def __init__(__self__, *,
                 remove_defaults: Optional[bool] = None,
                 trusted: Optional[Sequence[str]] = None):
        if remove_defaults is not None:
            pulumi.set(__self__, "remove_defaults", remove_defaults)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)

    @property
    @pulumi.getter
    def remove_defaults(self) -> Optional[bool]:
        return pulumi.get(self, "remove_defaults")

    @property
    @pulumi.getter
    def trusted(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "trusted")


@pulumi.output_type
class ProxmoxMachineSpecCloudInitUserChpasswd(dict):
    def __init__(__self__, *,
                 expire: Optional[str] = None):
        if expire is not None:
            pulumi.set(__self__, "expire", expire)

    @property
    @pulumi.getter
    def expire(self) -> Optional[str]:
        return pulumi.get(self, "expire")


@pulumi.output_type
class ProxmoxMachineSpecCloudInitUserSsh(dict):
    def __init__(__self__, *,
                 emit_keys_to_console: Optional[bool] = None):
        if emit_keys_to_console is not None:
            pulumi.set(__self__, "emit_keys_to_console", emit_keys_to_console)

    @property
    @pulumi.getter
    def emit_keys_to_console(self) -> Optional[bool]:
        return pulumi.get(self, "emit_keys_to_console")


@pulumi.output_type
class ProxmoxMachineSpecCloudInitUserSshKeys(dict):
    def __init__(__self__, *,
                 dsa_private: Optional[str] = None,
                 dsa_public: Optional[str] = None,
                 ecdsa_private: Optional[str] = None,
                 ecdsa_public: Optional[str] = None,
                 rsa_private: Optional[str] = None,
                 rsa_public: Optional[str] = None):
        if dsa_private is not None:
            pulumi.set(__self__, "dsa_private", dsa_private)
        if dsa_public is not None:
            pulumi.set(__self__, "dsa_public", dsa_public)
        if ecdsa_private is not None:
            pulumi.set(__self__, "ecdsa_private", ecdsa_private)
        if ecdsa_public is not None:
            pulumi.set(__self__, "ecdsa_public", ecdsa_public)
        if rsa_private is not None:
            pulumi.set(__self__, "rsa_private", rsa_private)
        if rsa_public is not None:
            pulumi.set(__self__, "rsa_public", rsa_public)

    @property
    @pulumi.getter
    def dsa_private(self) -> Optional[str]:
        return pulumi.get(self, "dsa_private")

    @property
    @pulumi.getter
    def dsa_public(self) -> Optional[str]:
        return pulumi.get(self, "dsa_public")

    @property
    @pulumi.getter
    def ecdsa_private(self) -> Optional[str]:
        return pulumi.get(self, "ecdsa_private")

    @property
    @pulumi.getter
    def ecdsa_public(self) -> Optional[str]:
        return pulumi.get(self, "ecdsa_public")

    @property
    @pulumi.getter
    def rsa_private(self) -> Optional[str]:
        return pulumi.get(self, "rsa_private")

    @property
    @pulumi.getter
    def rsa_public(self) -> Optional[str]:
        return pulumi.get(self, "rsa_public")


@pulumi.output_type
class ProxmoxMachineSpecCloudInitUserUsers(dict):
    def __init__(__self__, *,
                 name: str,
                 expiredate: Optional[str] = None,
                 gecos: Optional[str] = None,
                 groups: Optional[Sequence[str]] = None,
                 homedir: Optional[str] = None,
                 inactive: Optional[int] = None,
                 lock_passwd: Optional[bool] = None,
                 no_create_home: Optional[bool] = None,
                 no_log_init: Optional[bool] = None,
                 no_user_group: Optional[bool] = None,
                 passwd: Optional[str] = None,
                 primary_group: Optional[str] = None,
                 selinux_user: Optional[str] = None,
                 shell: Optional[str] = None,
                 snapuser: Optional[str] = None,
                 ssh_authorized_keys: Optional[Sequence[str]] = None,
                 ssh_import_id: Optional[Sequence[str]] = None,
                 ssh_redirect_user: Optional[bool] = None,
                 sudo: Optional[Sequence[str]] = None,
                 system: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if expiredate is not None:
            pulumi.set(__self__, "expiredate", expiredate)
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if homedir is not None:
            pulumi.set(__self__, "homedir", homedir)
        if inactive is not None:
            pulumi.set(__self__, "inactive", inactive)
        if lock_passwd is not None:
            pulumi.set(__self__, "lock_passwd", lock_passwd)
        if no_create_home is not None:
            pulumi.set(__self__, "no_create_home", no_create_home)
        if no_log_init is not None:
            pulumi.set(__self__, "no_log_init", no_log_init)
        if no_user_group is not None:
            pulumi.set(__self__, "no_user_group", no_user_group)
        if passwd is not None:
            pulumi.set(__self__, "passwd", passwd)
        if primary_group is not None:
            pulumi.set(__self__, "primary_group", primary_group)
        if selinux_user is not None:
            pulumi.set(__self__, "selinux_user", selinux_user)
        if shell is not None:
            pulumi.set(__self__, "shell", shell)
        if snapuser is not None:
            pulumi.set(__self__, "snapuser", snapuser)
        if ssh_authorized_keys is not None:
            pulumi.set(__self__, "ssh_authorized_keys", ssh_authorized_keys)
        if ssh_import_id is not None:
            pulumi.set(__self__, "ssh_import_id", ssh_import_id)
        if ssh_redirect_user is not None:
            pulumi.set(__self__, "ssh_redirect_user", ssh_redirect_user)
        if sudo is not None:
            pulumi.set(__self__, "sudo", sudo)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def expiredate(self) -> Optional[str]:
        return pulumi.get(self, "expiredate")

    @property
    @pulumi.getter
    def gecos(self) -> Optional[str]:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def homedir(self) -> Optional[str]:
        return pulumi.get(self, "homedir")

    @property
    @pulumi.getter
    def inactive(self) -> Optional[int]:
        return pulumi.get(self, "inactive")

    @property
    @pulumi.getter
    def lock_passwd(self) -> Optional[bool]:
        return pulumi.get(self, "lock_passwd")

    @property
    @pulumi.getter
    def no_create_home(self) -> Optional[bool]:
        return pulumi.get(self, "no_create_home")

    @property
    @pulumi.getter
    def no_log_init(self) -> Optional[bool]:
        return pulumi.get(self, "no_log_init")

    @property
    @pulumi.getter
    def no_user_group(self) -> Optional[bool]:
        return pulumi.get(self, "no_user_group")

    @property
    @pulumi.getter
    def passwd(self) -> Optional[str]:
        return pulumi.get(self, "passwd")

    @property
    @pulumi.getter
    def primary_group(self) -> Optional[str]:
        return pulumi.get(self, "primary_group")

    @property
    @pulumi.getter
    def selinux_user(self) -> Optional[str]:
        return pulumi.get(self, "selinux_user")

    @property
    @pulumi.getter
    def shell(self) -> Optional[str]:
        return pulumi.get(self, "shell")

    @property
    @pulumi.getter
    def snapuser(self) -> Optional[str]:
        return pulumi.get(self, "snapuser")

    @property
    @pulumi.getter
    def ssh_authorized_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_authorized_keys")

    @property
    @pulumi.getter
    def ssh_import_id(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_import_id")

    @property
    @pulumi.getter
    def ssh_redirect_user(self) -> Optional[bool]:
        return pulumi.get(self, "ssh_redirect_user")

    @property
    @pulumi.getter
    def sudo(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sudo")

    @property
    @pulumi.getter
    def system(self) -> Optional[bool]:
        return pulumi.get(self, "system")


@pulumi.output_type
class ProxmoxMachineSpecCloudInitUserWriteFiles(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 defer: Optional[bool] = None,
                 encoding: Optional[str] = None,
                 owner: Optional[str] = None,
                 path: Optional[str] = None,
                 permissions: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if defer is not None:
            pulumi.set(__self__, "defer", defer)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def defer(self) -> Optional[bool]:
        return pulumi.get(self, "defer")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[str]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class ProxmoxMachineSpecHardware(dict):
    """
    Hardware
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuLimit":
            suggest = "cpu_limit"
        elif key == "networkDevice":
            suggest = "network_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineSpecHardware. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineSpecHardware.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineSpecHardware.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bios: Optional[str] = None,
                 cpu: Optional[int] = None,
                 cpu_limit: Optional[int] = None,
                 disk: Optional[str] = None,
                 memory: Optional[int] = None,
                 network_device: Optional['outputs.ProxmoxMachineSpecHardwareNetworkDevice'] = None,
                 sockets: Optional[int] = None):
        """
        Hardware
        :param str bios: Select BIOS implementation. Defaults to seabios. seabios or ovmf. Defaults to seabios.
        :param int cpu: number of CPU cores : 1 ~
        :param int cpu_limit: Limit of CPU usage. If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit. Defaults to 0.
        :param str disk: hard disk size
        :param int memory: amount of RAM for the VM in MiB : 16 ~
        :param 'ProxmoxMachineSpecHardwareNetworkDeviceArgs' network_device: network devices to do: multiple devices
        :param int sockets: The number of CPU sockets. Defaults to 1.
        """
        if bios is not None:
            pulumi.set(__self__, "bios", bios)
        if cpu is None:
            cpu = 2
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if disk is None:
            disk = '50G'
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if memory is None:
            memory = 4096
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network_device is not None:
            pulumi.set(__self__, "network_device", network_device)
        if sockets is not None:
            pulumi.set(__self__, "sockets", sockets)

    @property
    @pulumi.getter
    def bios(self) -> Optional[str]:
        """
        Select BIOS implementation. Defaults to seabios. seabios or ovmf. Defaults to seabios.
        """
        return pulumi.get(self, "bios")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        """
        number of CPU cores : 1 ~
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[int]:
        """
        Limit of CPU usage. If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit. Defaults to 0.
        """
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter
    def disk(self) -> Optional[str]:
        """
        hard disk size
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def memory(self) -> Optional[int]:
        """
        amount of RAM for the VM in MiB : 16 ~
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="networkDevice")
    def network_device(self) -> Optional['outputs.ProxmoxMachineSpecHardwareNetworkDevice']:
        """
        network devices to do: multiple devices
        """
        return pulumi.get(self, "network_device")

    @property
    @pulumi.getter
    def sockets(self) -> Optional[int]:
        """
        The number of CPU sockets. Defaults to 1.
        """
        return pulumi.get(self, "sockets")


@pulumi.output_type
class ProxmoxMachineSpecHardwareNetworkDevice(dict):
    """
    network devices to do: multiple devices
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkDown":
            suggest = "link_down"
        elif key == "macAddr":
            suggest = "mac_addr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineSpecHardwareNetworkDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineSpecHardwareNetworkDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineSpecHardwareNetworkDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bridge: Optional[str] = None,
                 firewall: Optional[bool] = None,
                 link_down: Optional[bool] = None,
                 mac_addr: Optional[str] = None,
                 model: Optional[str] = None,
                 mtu: Optional[int] = None,
                 queues: Optional[int] = None,
                 rate: Optional[str] = None,
                 tag: Optional[int] = None,
                 trunks: Optional[Sequence[int]] = None):
        """
        network devices to do: multiple devices
        :param str rate: since float is highly discouraged, use string instead
        :param Sequence[int] trunks: trunks: array of vlanid
        """
        if bridge is None:
            bridge = 'vmbr0'
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if firewall is None:
            firewall = True
        if firewall is not None:
            pulumi.set(__self__, "firewall", firewall)
        if link_down is not None:
            pulumi.set(__self__, "link_down", link_down)
        if mac_addr is not None:
            pulumi.set(__self__, "mac_addr", mac_addr)
        if model is None:
            model = 'virtio'
        if model is not None:
            pulumi.set(__self__, "model", model)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if queues is not None:
            pulumi.set(__self__, "queues", queues)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if trunks is not None:
            pulumi.set(__self__, "trunks", trunks)

    @property
    @pulumi.getter
    def bridge(self) -> Optional[str]:
        return pulumi.get(self, "bridge")

    @property
    @pulumi.getter
    def firewall(self) -> Optional[bool]:
        return pulumi.get(self, "firewall")

    @property
    @pulumi.getter(name="linkDown")
    def link_down(self) -> Optional[bool]:
        return pulumi.get(self, "link_down")

    @property
    @pulumi.getter(name="macAddr")
    def mac_addr(self) -> Optional[str]:
        return pulumi.get(self, "mac_addr")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def queues(self) -> Optional[int]:
        return pulumi.get(self, "queues")

    @property
    @pulumi.getter
    def rate(self) -> Optional[str]:
        """
        since float is highly discouraged, use string instead
        """
        return pulumi.get(self, "rate")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def trunks(self) -> Optional[Sequence[int]]:
        """
        trunks: array of vlanid
        """
        return pulumi.get(self, "trunks")


@pulumi.output_type
class ProxmoxMachineSpecImage(dict):
    """
    Image is the image to be provisioned
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checksumType":
            suggest = "checksum_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineSpecImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineSpecImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineSpecImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 checksum: Optional[str] = None,
                 checksum_type: Optional[str] = None):
        """
        Image is the image to be provisioned
        :param str url: URL is a location of an image to deploy. supported formats are iso/qcow2/qed/raw/vdi/vpc/vmdk.
        :param str checksum: Checksum Always better to specify checksum otherwise cappx will download same image for every time. If checksum is specified, cappx will try to avoid downloading existing image.
        :param str checksum_type: ChecksumType
        """
        pulumi.set(__self__, "url", url)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if checksum_type is not None:
            pulumi.set(__self__, "checksum_type", checksum_type)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL is a location of an image to deploy. supported formats are iso/qcow2/qed/raw/vdi/vpc/vmdk.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        """
        Checksum Always better to specify checksum otherwise cappx will download same image for every time. If checksum is specified, cappx will try to avoid downloading existing image.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> Optional[str]:
        """
        ChecksumType
        """
        return pulumi.get(self, "checksum_type")


@pulumi.output_type
class ProxmoxMachineSpecNetwork(dict):
    """
    Network
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipConfig":
            suggest = "ip_config"
        elif key == "nameServer":
            suggest = "name_server"
        elif key == "searchDomain":
            suggest = "search_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineSpecNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineSpecNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineSpecNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_config: Optional['outputs.ProxmoxMachineSpecNetworkIpConfig'] = None,
                 name_server: Optional[str] = None,
                 search_domain: Optional[str] = None):
        """
        Network
        :param 'ProxmoxMachineSpecNetworkIpConfigArgs' ip_config: to do : should accept multiple IPConfig
        :param str name_server: DNS server
        :param str search_domain: search domain
        """
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if name_server is not None:
            pulumi.set(__self__, "name_server", name_server)
        if search_domain is not None:
            pulumi.set(__self__, "search_domain", search_domain)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional['outputs.ProxmoxMachineSpecNetworkIpConfig']:
        """
        to do : should accept multiple IPConfig
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter(name="nameServer")
    def name_server(self) -> Optional[str]:
        """
        DNS server
        """
        return pulumi.get(self, "name_server")

    @property
    @pulumi.getter(name="searchDomain")
    def search_domain(self) -> Optional[str]:
        """
        search domain
        """
        return pulumi.get(self, "search_domain")


@pulumi.output_type
class ProxmoxMachineSpecNetworkIpConfig(dict):
    """
    to do : should accept multiple IPConfig
    """
    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 ip: Optional[str] = None,
                 ip6: Optional[str] = None):
        """
        to do : should accept multiple IPConfig
        :param str gateway: gateway IPv4
        :param str gateway6: gateway IPv6
        :param str ip: IPv4 with CIDR
        :param str ip6: IPv6 with CIDR
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        gateway IPv4
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        """
        gateway IPv6
        """
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IPv4 with CIDR
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        """
        IPv6 with CIDR
        """
        return pulumi.get(self, "ip6")


@pulumi.output_type
class ProxmoxMachineSpecOptions(dict):
    """
    Options for QEMU instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hugePages":
            suggest = "huge_pages"
        elif key == "keepHugePages":
            suggest = "keep_huge_pages"
        elif key == "localTime":
            suggest = "local_time"
        elif key == "onBoot":
            suggest = "on_boot"
        elif key == "osType":
            suggest = "os_type"
        elif key == "timeDriftFix":
            suggest = "time_drift_fix"
        elif key == "vmGenerationID":
            suggest = "vm_generation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineSpecOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineSpecOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineSpecOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acpi: Optional[bool] = None,
                 arch: Optional[str] = None,
                 balloon: Optional[int] = None,
                 description: Optional[str] = None,
                 huge_pages: Optional[int] = None,
                 keep_huge_pages: Optional[bool] = None,
                 kvm: Optional[bool] = None,
                 local_time: Optional[bool] = None,
                 lock: Optional[str] = None,
                 numa: Optional[bool] = None,
                 on_boot: Optional[bool] = None,
                 os_type: Optional[str] = None,
                 protection: Optional[bool] = None,
                 reboot: Optional[bool] = None,
                 shares: Optional[int] = None,
                 tablet: Optional[bool] = None,
                 tags: Optional[Sequence[str]] = None,
                 template: Optional[bool] = None,
                 time_drift_fix: Optional[bool] = None,
                 vcpus: Optional[int] = None,
                 vm_generation_id: Optional[str] = None):
        """
        Options for QEMU instance
        :param bool acpi: Enable/Disable ACPI. Defaults to true.
        :param str arch: Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
        :param int balloon: Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
        :param str description: Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
        :param int huge_pages: enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
        :param bool keep_huge_pages: Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
        :param bool kvm: Enable/disable KVM hardware virtualization. Defaults to true.
        :param bool local_time: Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
        :param str lock: Lock/unlock the VM.
        :param bool numa: Enable/disable NUMA.
        :param bool on_boot: Specifies whether a VM will be started during system bootup.
        :param str os_type: Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
        :param bool protection: Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
        :param bool reboot: Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
        :param int shares: Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
        :param bool tablet: Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`). Defaults to true.
        :param Sequence[str] tags: Tags of the VM. This is only meta information.
        :param bool template: Enable/disable Template. Defaults to false.
        :param bool time_drift_fix: Enable/disable time drift fix. Defaults to false.
        :param int vcpus: Number of hotplugged vcpus. Defaults to 0.
        :param str vm_generation_id: The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
        """
        if acpi is not None:
            pulumi.set(__self__, "acpi", acpi)
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if balloon is not None:
            pulumi.set(__self__, "balloon", balloon)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if huge_pages is not None:
            pulumi.set(__self__, "huge_pages", huge_pages)
        if keep_huge_pages is not None:
            pulumi.set(__self__, "keep_huge_pages", keep_huge_pages)
        if kvm is not None:
            pulumi.set(__self__, "kvm", kvm)
        if local_time is not None:
            pulumi.set(__self__, "local_time", local_time)
        if lock is not None:
            pulumi.set(__self__, "lock", lock)
        if numa is not None:
            pulumi.set(__self__, "numa", numa)
        if on_boot is not None:
            pulumi.set(__self__, "on_boot", on_boot)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if protection is not None:
            pulumi.set(__self__, "protection", protection)
        if reboot is not None:
            pulumi.set(__self__, "reboot", reboot)
        if shares is not None:
            pulumi.set(__self__, "shares", shares)
        if tablet is not None:
            pulumi.set(__self__, "tablet", tablet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if time_drift_fix is not None:
            pulumi.set(__self__, "time_drift_fix", time_drift_fix)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)
        if vm_generation_id is not None:
            pulumi.set(__self__, "vm_generation_id", vm_generation_id)

    @property
    @pulumi.getter
    def acpi(self) -> Optional[bool]:
        """
        Enable/Disable ACPI. Defaults to true.
        """
        return pulumi.get(self, "acpi")

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        """
        Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
        """
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def balloon(self) -> Optional[int]:
        """
        Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
        """
        return pulumi.get(self, "balloon")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hugePages")
    def huge_pages(self) -> Optional[int]:
        """
        enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
        """
        return pulumi.get(self, "huge_pages")

    @property
    @pulumi.getter(name="keepHugePages")
    def keep_huge_pages(self) -> Optional[bool]:
        """
        Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
        """
        return pulumi.get(self, "keep_huge_pages")

    @property
    @pulumi.getter
    def kvm(self) -> Optional[bool]:
        """
        Enable/disable KVM hardware virtualization. Defaults to true.
        """
        return pulumi.get(self, "kvm")

    @property
    @pulumi.getter(name="localTime")
    def local_time(self) -> Optional[bool]:
        """
        Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
        """
        return pulumi.get(self, "local_time")

    @property
    @pulumi.getter
    def lock(self) -> Optional[str]:
        """
        Lock/unlock the VM.
        """
        return pulumi.get(self, "lock")

    @property
    @pulumi.getter
    def numa(self) -> Optional[bool]:
        """
        Enable/disable NUMA.
        """
        return pulumi.get(self, "numa")

    @property
    @pulumi.getter(name="onBoot")
    def on_boot(self) -> Optional[bool]:
        """
        Specifies whether a VM will be started during system bootup.
        """
        return pulumi.get(self, "on_boot")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def protection(self) -> Optional[bool]:
        """
        Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
        """
        return pulumi.get(self, "protection")

    @property
    @pulumi.getter
    def reboot(self) -> Optional[bool]:
        """
        Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
        """
        return pulumi.get(self, "reboot")

    @property
    @pulumi.getter
    def shares(self) -> Optional[int]:
        """
        Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
        """
        return pulumi.get(self, "shares")

    @property
    @pulumi.getter
    def tablet(self) -> Optional[bool]:
        """
        Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`). Defaults to true.
        """
        return pulumi.get(self, "tablet")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        Tags of the VM. This is only meta information.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def template(self) -> Optional[bool]:
        """
        Enable/disable Template. Defaults to false.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="timeDriftFix")
    def time_drift_fix(self) -> Optional[bool]:
        """
        Enable/disable time drift fix. Defaults to false.
        """
        return pulumi.get(self, "time_drift_fix")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        """
        Number of hotplugged vcpus. Defaults to 0.
        """
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter(name="vmGenerationID")
    def vm_generation_id(self) -> Optional[str]:
        """
        The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
        """
        return pulumi.get(self, "vm_generation_id")


@pulumi.output_type
class ProxmoxMachineStatus(dict):
    """
    ProxmoxMachineStatus defines the observed state of ProxmoxMachine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureMessage":
            suggest = "failure_message"
        elif key == "failureReason":
            suggest = "failure_reason"
        elif key == "instanceStatus":
            suggest = "instance_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addresses: Optional[Sequence['outputs.ProxmoxMachineStatusAddresses']] = None,
                 conditions: Optional[Sequence['outputs.ProxmoxMachineStatusConditions']] = None,
                 config: Optional['outputs.ProxmoxMachineStatusConfig'] = None,
                 failure_message: Optional[str] = None,
                 failure_reason: Optional[str] = None,
                 instance_status: Optional[str] = None,
                 ready: Optional[bool] = None):
        """
        ProxmoxMachineStatus defines the observed state of ProxmoxMachine
        :param Sequence['ProxmoxMachineStatusAddressesArgs'] addresses: Addresses
        :param Sequence['ProxmoxMachineStatusConditionsArgs'] conditions: Conditions
        :param 'ProxmoxMachineStatusConfigArgs' config: Configuration
        :param str failure_message: FailureMessage
        :param str failure_reason: FailureReason
        :param str instance_status: InstanceStatus is the status of the proxmox instance for this machine.
        :param bool ready: Ready is true when the provider resource is ready.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if instance_status is not None:
            pulumi.set(__self__, "instance_status", instance_status)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence['outputs.ProxmoxMachineStatusAddresses']]:
        """
        Addresses
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ProxmoxMachineStatusConditions']]:
        """
        Conditions
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.ProxmoxMachineStatusConfig']:
        """
        Configuration
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[str]:
        """
        FailureMessage
        """
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[str]:
        """
        FailureReason
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[str]:
        """
        InstanceStatus is the status of the proxmox instance for this machine.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter
    def ready(self) -> Optional[bool]:
        """
        Ready is true when the provider resource is ready.
        """
        return pulumi.get(self, "ready")


@pulumi.output_type
class ProxmoxMachineStatusAddresses(dict):
    """
    MachineAddress contains information for the node's address.
    """
    def __init__(__self__, *,
                 address: str,
                 type: str):
        """
        MachineAddress contains information for the node's address.
        :param str address: The machine address.
        :param str type: Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The machine address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ProxmoxMachineStatusConditions(dict):
    """
    Condition defines an observation of a Cluster API resource operational state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_transition_time: str,
                 status: str,
                 type: str,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param str last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param str message: A human readable message indicating details about the transition. This field may be empty.
        :param str reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        :param str severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class ProxmoxMachineStatusConfig(dict):
    """
    Configuration
    """
    def __init__(__self__, *,
                 acpi: Optional[int] = None,
                 affinity: Optional[str] = None,
                 agent: Optional[str] = None,
                 arch: Optional[str] = None,
                 args: Optional[str] = None,
                 audio0: Optional[str] = None,
                 autostart: Optional[int] = None,
                 balloon: Optional[int] = None,
                 bios: Optional[str] = None,
                 boot: Optional[str] = None,
                 cdrom: Optional[str] = None,
                 cicustom: Optional[str] = None,
                 cipassword: Optional[str] = None,
                 citype: Optional[str] = None,
                 ciuser: Optional[str] = None,
                 cores: Optional[int] = None,
                 cpu: Optional[str] = None,
                 cpulimit: Optional[int] = None,
                 cpuunits: Optional[int] = None,
                 description: Optional[str] = None,
                 efidisk0: Optional[int] = None,
                 freeze: Optional[int] = None,
                 hookscript: Optional[str] = None,
                 hostpci0: Optional[str] = None,
                 hostpci1: Optional[str] = None,
                 hostpci2: Optional[str] = None,
                 hostpci3: Optional[str] = None,
                 hotplug: Optional[str] = None,
                 hugepages: Optional[str] = None,
                 ide0: Optional[str] = None,
                 ide1: Optional[str] = None,
                 ide2: Optional[str] = None,
                 ide3: Optional[str] = None,
                 ipconfig0: Optional[str] = None,
                 ipconfig1: Optional[str] = None,
                 ipconfig10: Optional[str] = None,
                 ipconfig11: Optional[str] = None,
                 ipconfig12: Optional[str] = None,
                 ipconfig13: Optional[str] = None,
                 ipconfig14: Optional[str] = None,
                 ipconfig15: Optional[str] = None,
                 ipconfig16: Optional[str] = None,
                 ipconfig17: Optional[str] = None,
                 ipconfig18: Optional[str] = None,
                 ipconfig19: Optional[str] = None,
                 ipconfig2: Optional[str] = None,
                 ipconfig20: Optional[str] = None,
                 ipconfig21: Optional[str] = None,
                 ipconfig22: Optional[str] = None,
                 ipconfig23: Optional[str] = None,
                 ipconfig24: Optional[str] = None,
                 ipconfig25: Optional[str] = None,
                 ipconfig26: Optional[str] = None,
                 ipconfig27: Optional[str] = None,
                 ipconfig28: Optional[str] = None,
                 ipconfig29: Optional[str] = None,
                 ipconfig3: Optional[str] = None,
                 ipconfig30: Optional[str] = None,
                 ipconfig31: Optional[str] = None,
                 ipconfig4: Optional[str] = None,
                 ipconfig5: Optional[str] = None,
                 ipconfig6: Optional[str] = None,
                 ipconfig7: Optional[str] = None,
                 ipconfig8: Optional[str] = None,
                 ipconfig9: Optional[str] = None,
                 ivshmem: Optional[str] = None,
                 keephugepages: Optional[int] = None,
                 keyboard: Optional[str] = None,
                 kvm: Optional[int] = None,
                 localtime: Optional[int] = None,
                 lock: Optional[str] = None,
                 machine: Optional[str] = None,
                 memory: Optional[int] = None,
                 migrate_downtime: Optional[str] = None,
                 migrate_speed: Optional[int] = None,
                 name: Optional[str] = None,
                 nameserver: Optional[str] = None,
                 net0: Optional[str] = None,
                 net1: Optional[str] = None,
                 net10: Optional[str] = None,
                 net11: Optional[str] = None,
                 net12: Optional[str] = None,
                 net13: Optional[str] = None,
                 net14: Optional[str] = None,
                 net15: Optional[str] = None,
                 net16: Optional[str] = None,
                 net17: Optional[str] = None,
                 net18: Optional[str] = None,
                 net19: Optional[str] = None,
                 net2: Optional[str] = None,
                 net20: Optional[str] = None,
                 net21: Optional[str] = None,
                 net22: Optional[str] = None,
                 net23: Optional[str] = None,
                 net24: Optional[str] = None,
                 net25: Optional[str] = None,
                 net26: Optional[str] = None,
                 net27: Optional[str] = None,
                 net28: Optional[str] = None,
                 net29: Optional[str] = None,
                 net3: Optional[str] = None,
                 net30: Optional[str] = None,
                 net31: Optional[str] = None,
                 net4: Optional[str] = None,
                 net5: Optional[str] = None,
                 net6: Optional[str] = None,
                 net7: Optional[str] = None,
                 net8: Optional[str] = None,
                 net9: Optional[str] = None,
                 numa: Optional[int] = None,
                 numa0: Optional[str] = None,
                 numa1: Optional[str] = None,
                 numa2: Optional[str] = None,
                 numa3: Optional[str] = None,
                 numa4: Optional[str] = None,
                 numa5: Optional[str] = None,
                 numa6: Optional[str] = None,
                 numa7: Optional[str] = None,
                 onboot: Optional[int] = None,
                 ostype: Optional[str] = None,
                 parallel0: Optional[str] = None,
                 parallel1: Optional[str] = None,
                 parallel2: Optional[str] = None,
                 protection: Optional[int] = None,
                 reboot: Optional[int] = None,
                 rng0: Optional[str] = None,
                 sata0: Optional[str] = None,
                 sata1: Optional[str] = None,
                 sata2: Optional[str] = None,
                 sata3: Optional[str] = None,
                 sata4: Optional[str] = None,
                 sata5: Optional[str] = None,
                 scsi0: Optional[str] = None,
                 scsi1: Optional[str] = None,
                 scsi10: Optional[str] = None,
                 scsi11: Optional[str] = None,
                 scsi12: Optional[str] = None,
                 scsi13: Optional[str] = None,
                 scsi14: Optional[str] = None,
                 scsi15: Optional[str] = None,
                 scsi16: Optional[str] = None,
                 scsi17: Optional[str] = None,
                 scsi18: Optional[str] = None,
                 scsi19: Optional[str] = None,
                 scsi2: Optional[str] = None,
                 scsi20: Optional[str] = None,
                 scsi21: Optional[str] = None,
                 scsi22: Optional[str] = None,
                 scsi23: Optional[str] = None,
                 scsi24: Optional[str] = None,
                 scsi25: Optional[str] = None,
                 scsi26: Optional[str] = None,
                 scsi27: Optional[str] = None,
                 scsi28: Optional[str] = None,
                 scsi29: Optional[str] = None,
                 scsi3: Optional[str] = None,
                 scsi30: Optional[str] = None,
                 scsi4: Optional[str] = None,
                 scsi5: Optional[str] = None,
                 scsi6: Optional[str] = None,
                 scsi7: Optional[str] = None,
                 scsi8: Optional[str] = None,
                 scsi9: Optional[str] = None,
                 scsihw: Optional[str] = None,
                 searchdomain: Optional[str] = None,
                 serial0: Optional[str] = None,
                 serial1: Optional[str] = None,
                 serial2: Optional[str] = None,
                 serial3: Optional[str] = None,
                 shares: Optional[int] = None,
                 smbios1: Optional[str] = None,
                 smp: Optional[int] = None,
                 sockets: Optional[int] = None,
                 spice_enhancements: Optional[str] = None,
                 sshkeys: Optional[str] = None,
                 startdate: Optional[str] = None,
                 startup: Optional[int] = None,
                 tablet: Optional[int] = None,
                 tags: Optional[str] = None,
                 tdf: Optional[int] = None,
                 template: Optional[int] = None,
                 tpmstate: Optional[str] = None,
                 unused0: Optional[str] = None,
                 unused1: Optional[str] = None,
                 unused2: Optional[str] = None,
                 unused3: Optional[str] = None,
                 unused4: Optional[str] = None,
                 unused5: Optional[str] = None,
                 unused6: Optional[str] = None,
                 unused7: Optional[str] = None,
                 vcpus: Optional[int] = None,
                 vga: Optional[str] = None,
                 virtio0: Optional[str] = None,
                 virtio1: Optional[str] = None,
                 virtio10: Optional[str] = None,
                 virtio11: Optional[str] = None,
                 virtio12: Optional[str] = None,
                 virtio13: Optional[str] = None,
                 virtio14: Optional[str] = None,
                 virtio15: Optional[str] = None,
                 virtio2: Optional[str] = None,
                 virtio3: Optional[str] = None,
                 virtio4: Optional[str] = None,
                 virtio5: Optional[str] = None,
                 virtio6: Optional[str] = None,
                 virtio7: Optional[str] = None,
                 virtio8: Optional[str] = None,
                 virtio9: Optional[str] = None,
                 vmgenid: Optional[str] = None,
                 vmstatestorage: Optional[str] = None,
                 watchdog: Optional[str] = None):
        """
        Configuration
        :param int acpi: Enable/disable ACPI.
        :param str affinity: List of host cores used to execute guest processes, for example: 0,5,8-11
        :param str agent: Enable/disable communication with the QEMU Guest Agent and its properties.
        :param str arch: Virtual processor architecture. Defaults to the host.
        :param str args: Arbitrary arguments passed to kvm, for example: args: -no-reboot -no-hpet NOTE: this option is for experts only.
        :param str audio0: Configure a audio device, useful in combination with QXL/Spice.
        :param int autostart: Automatic restart after crash (currently ignored).
        :param int balloon: Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
        :param str bios: Select BIOS implementation.
        :param str boot: boot order. ";" separated. : 'order=device1;device2;device3'
        :param str cdrom: This is an alias for option -ide2
        :param str cicustom: cloud-init: Specify custom files to replace the automatically generated ones at start.
        :param str cipassword: cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords.
        :param str citype: Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows.
        :param str ciuser: cloud-init: User name to change ssh keys and password for instead of the image's configured default user.
        :param int cores: The number of cores per socket. : 1 ~
        :param str cpu: emulated cpu type
        :param int cpulimit: Limit of CPU usage. NOTE: If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit.
        :param int cpuunits: CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
        :param int kvm: enable/disable KVM hardware virtualization
        :param str machine: specifies the QEMU machine type
        :param int memory: amount of RAM for the VM in MiB : 16 ~
        :param str migrate_downtime: A Number represents a JSON number literal.
        :param str name: name for VM. Only used on the configuration web interface
        :param str nameserver: cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.
        :param int onboot: specifies whether a VM will be started during system bootup
        :param str ostype: quest OS
        :param int reboot: Allow reboot. if set to '0' the VM exit on reboot
        :param str scsihw: SCSI controller model
        :param str searchdomain: cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.
        :param int sockets: number of sockets
        :param str sshkeys: cloud-init setup public ssh keys (one key per line, OpenSSH format)
        :param str tags: tags of the VM. only for meta information
        :param int template: enable/disable template
        """
        if acpi is not None:
            pulumi.set(__self__, "acpi", acpi)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if audio0 is not None:
            pulumi.set(__self__, "audio0", audio0)
        if autostart is not None:
            pulumi.set(__self__, "autostart", autostart)
        if balloon is not None:
            pulumi.set(__self__, "balloon", balloon)
        if bios is not None:
            pulumi.set(__self__, "bios", bios)
        if boot is not None:
            pulumi.set(__self__, "boot", boot)
        if cdrom is not None:
            pulumi.set(__self__, "cdrom", cdrom)
        if cicustom is not None:
            pulumi.set(__self__, "cicustom", cicustom)
        if cipassword is not None:
            pulumi.set(__self__, "cipassword", cipassword)
        if citype is not None:
            pulumi.set(__self__, "citype", citype)
        if ciuser is not None:
            pulumi.set(__self__, "ciuser", ciuser)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if cpulimit is not None:
            pulumi.set(__self__, "cpulimit", cpulimit)
        if cpuunits is not None:
            pulumi.set(__self__, "cpuunits", cpuunits)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if efidisk0 is not None:
            pulumi.set(__self__, "efidisk0", efidisk0)
        if freeze is not None:
            pulumi.set(__self__, "freeze", freeze)
        if hookscript is not None:
            pulumi.set(__self__, "hookscript", hookscript)
        if hostpci0 is not None:
            pulumi.set(__self__, "hostpci0", hostpci0)
        if hostpci1 is not None:
            pulumi.set(__self__, "hostpci1", hostpci1)
        if hostpci2 is not None:
            pulumi.set(__self__, "hostpci2", hostpci2)
        if hostpci3 is not None:
            pulumi.set(__self__, "hostpci3", hostpci3)
        if hotplug is not None:
            pulumi.set(__self__, "hotplug", hotplug)
        if hugepages is not None:
            pulumi.set(__self__, "hugepages", hugepages)
        if ide0 is not None:
            pulumi.set(__self__, "ide0", ide0)
        if ide1 is not None:
            pulumi.set(__self__, "ide1", ide1)
        if ide2 is not None:
            pulumi.set(__self__, "ide2", ide2)
        if ide3 is not None:
            pulumi.set(__self__, "ide3", ide3)
        if ipconfig0 is not None:
            pulumi.set(__self__, "ipconfig0", ipconfig0)
        if ipconfig1 is not None:
            pulumi.set(__self__, "ipconfig1", ipconfig1)
        if ipconfig10 is not None:
            pulumi.set(__self__, "ipconfig10", ipconfig10)
        if ipconfig11 is not None:
            pulumi.set(__self__, "ipconfig11", ipconfig11)
        if ipconfig12 is not None:
            pulumi.set(__self__, "ipconfig12", ipconfig12)
        if ipconfig13 is not None:
            pulumi.set(__self__, "ipconfig13", ipconfig13)
        if ipconfig14 is not None:
            pulumi.set(__self__, "ipconfig14", ipconfig14)
        if ipconfig15 is not None:
            pulumi.set(__self__, "ipconfig15", ipconfig15)
        if ipconfig16 is not None:
            pulumi.set(__self__, "ipconfig16", ipconfig16)
        if ipconfig17 is not None:
            pulumi.set(__self__, "ipconfig17", ipconfig17)
        if ipconfig18 is not None:
            pulumi.set(__self__, "ipconfig18", ipconfig18)
        if ipconfig19 is not None:
            pulumi.set(__self__, "ipconfig19", ipconfig19)
        if ipconfig2 is not None:
            pulumi.set(__self__, "ipconfig2", ipconfig2)
        if ipconfig20 is not None:
            pulumi.set(__self__, "ipconfig20", ipconfig20)
        if ipconfig21 is not None:
            pulumi.set(__self__, "ipconfig21", ipconfig21)
        if ipconfig22 is not None:
            pulumi.set(__self__, "ipconfig22", ipconfig22)
        if ipconfig23 is not None:
            pulumi.set(__self__, "ipconfig23", ipconfig23)
        if ipconfig24 is not None:
            pulumi.set(__self__, "ipconfig24", ipconfig24)
        if ipconfig25 is not None:
            pulumi.set(__self__, "ipconfig25", ipconfig25)
        if ipconfig26 is not None:
            pulumi.set(__self__, "ipconfig26", ipconfig26)
        if ipconfig27 is not None:
            pulumi.set(__self__, "ipconfig27", ipconfig27)
        if ipconfig28 is not None:
            pulumi.set(__self__, "ipconfig28", ipconfig28)
        if ipconfig29 is not None:
            pulumi.set(__self__, "ipconfig29", ipconfig29)
        if ipconfig3 is not None:
            pulumi.set(__self__, "ipconfig3", ipconfig3)
        if ipconfig30 is not None:
            pulumi.set(__self__, "ipconfig30", ipconfig30)
        if ipconfig31 is not None:
            pulumi.set(__self__, "ipconfig31", ipconfig31)
        if ipconfig4 is not None:
            pulumi.set(__self__, "ipconfig4", ipconfig4)
        if ipconfig5 is not None:
            pulumi.set(__self__, "ipconfig5", ipconfig5)
        if ipconfig6 is not None:
            pulumi.set(__self__, "ipconfig6", ipconfig6)
        if ipconfig7 is not None:
            pulumi.set(__self__, "ipconfig7", ipconfig7)
        if ipconfig8 is not None:
            pulumi.set(__self__, "ipconfig8", ipconfig8)
        if ipconfig9 is not None:
            pulumi.set(__self__, "ipconfig9", ipconfig9)
        if ivshmem is not None:
            pulumi.set(__self__, "ivshmem", ivshmem)
        if keephugepages is not None:
            pulumi.set(__self__, "keephugepages", keephugepages)
        if keyboard is not None:
            pulumi.set(__self__, "keyboard", keyboard)
        if kvm is not None:
            pulumi.set(__self__, "kvm", kvm)
        if localtime is not None:
            pulumi.set(__self__, "localtime", localtime)
        if lock is not None:
            pulumi.set(__self__, "lock", lock)
        if machine is not None:
            pulumi.set(__self__, "machine", machine)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if migrate_downtime is not None:
            pulumi.set(__self__, "migrate_downtime", migrate_downtime)
        if migrate_speed is not None:
            pulumi.set(__self__, "migrate_speed", migrate_speed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nameserver is not None:
            pulumi.set(__self__, "nameserver", nameserver)
        if net0 is not None:
            pulumi.set(__self__, "net0", net0)
        if net1 is not None:
            pulumi.set(__self__, "net1", net1)
        if net10 is not None:
            pulumi.set(__self__, "net10", net10)
        if net11 is not None:
            pulumi.set(__self__, "net11", net11)
        if net12 is not None:
            pulumi.set(__self__, "net12", net12)
        if net13 is not None:
            pulumi.set(__self__, "net13", net13)
        if net14 is not None:
            pulumi.set(__self__, "net14", net14)
        if net15 is not None:
            pulumi.set(__self__, "net15", net15)
        if net16 is not None:
            pulumi.set(__self__, "net16", net16)
        if net17 is not None:
            pulumi.set(__self__, "net17", net17)
        if net18 is not None:
            pulumi.set(__self__, "net18", net18)
        if net19 is not None:
            pulumi.set(__self__, "net19", net19)
        if net2 is not None:
            pulumi.set(__self__, "net2", net2)
        if net20 is not None:
            pulumi.set(__self__, "net20", net20)
        if net21 is not None:
            pulumi.set(__self__, "net21", net21)
        if net22 is not None:
            pulumi.set(__self__, "net22", net22)
        if net23 is not None:
            pulumi.set(__self__, "net23", net23)
        if net24 is not None:
            pulumi.set(__self__, "net24", net24)
        if net25 is not None:
            pulumi.set(__self__, "net25", net25)
        if net26 is not None:
            pulumi.set(__self__, "net26", net26)
        if net27 is not None:
            pulumi.set(__self__, "net27", net27)
        if net28 is not None:
            pulumi.set(__self__, "net28", net28)
        if net29 is not None:
            pulumi.set(__self__, "net29", net29)
        if net3 is not None:
            pulumi.set(__self__, "net3", net3)
        if net30 is not None:
            pulumi.set(__self__, "net30", net30)
        if net31 is not None:
            pulumi.set(__self__, "net31", net31)
        if net4 is not None:
            pulumi.set(__self__, "net4", net4)
        if net5 is not None:
            pulumi.set(__self__, "net5", net5)
        if net6 is not None:
            pulumi.set(__self__, "net6", net6)
        if net7 is not None:
            pulumi.set(__self__, "net7", net7)
        if net8 is not None:
            pulumi.set(__self__, "net8", net8)
        if net9 is not None:
            pulumi.set(__self__, "net9", net9)
        if numa is not None:
            pulumi.set(__self__, "numa", numa)
        if numa0 is not None:
            pulumi.set(__self__, "numa0", numa0)
        if numa1 is not None:
            pulumi.set(__self__, "numa1", numa1)
        if numa2 is not None:
            pulumi.set(__self__, "numa2", numa2)
        if numa3 is not None:
            pulumi.set(__self__, "numa3", numa3)
        if numa4 is not None:
            pulumi.set(__self__, "numa4", numa4)
        if numa5 is not None:
            pulumi.set(__self__, "numa5", numa5)
        if numa6 is not None:
            pulumi.set(__self__, "numa6", numa6)
        if numa7 is not None:
            pulumi.set(__self__, "numa7", numa7)
        if onboot is not None:
            pulumi.set(__self__, "onboot", onboot)
        if ostype is not None:
            pulumi.set(__self__, "ostype", ostype)
        if parallel0 is not None:
            pulumi.set(__self__, "parallel0", parallel0)
        if parallel1 is not None:
            pulumi.set(__self__, "parallel1", parallel1)
        if parallel2 is not None:
            pulumi.set(__self__, "parallel2", parallel2)
        if protection is not None:
            pulumi.set(__self__, "protection", protection)
        if reboot is not None:
            pulumi.set(__self__, "reboot", reboot)
        if rng0 is not None:
            pulumi.set(__self__, "rng0", rng0)
        if sata0 is not None:
            pulumi.set(__self__, "sata0", sata0)
        if sata1 is not None:
            pulumi.set(__self__, "sata1", sata1)
        if sata2 is not None:
            pulumi.set(__self__, "sata2", sata2)
        if sata3 is not None:
            pulumi.set(__self__, "sata3", sata3)
        if sata4 is not None:
            pulumi.set(__self__, "sata4", sata4)
        if sata5 is not None:
            pulumi.set(__self__, "sata5", sata5)
        if scsi0 is not None:
            pulumi.set(__self__, "scsi0", scsi0)
        if scsi1 is not None:
            pulumi.set(__self__, "scsi1", scsi1)
        if scsi10 is not None:
            pulumi.set(__self__, "scsi10", scsi10)
        if scsi11 is not None:
            pulumi.set(__self__, "scsi11", scsi11)
        if scsi12 is not None:
            pulumi.set(__self__, "scsi12", scsi12)
        if scsi13 is not None:
            pulumi.set(__self__, "scsi13", scsi13)
        if scsi14 is not None:
            pulumi.set(__self__, "scsi14", scsi14)
        if scsi15 is not None:
            pulumi.set(__self__, "scsi15", scsi15)
        if scsi16 is not None:
            pulumi.set(__self__, "scsi16", scsi16)
        if scsi17 is not None:
            pulumi.set(__self__, "scsi17", scsi17)
        if scsi18 is not None:
            pulumi.set(__self__, "scsi18", scsi18)
        if scsi19 is not None:
            pulumi.set(__self__, "scsi19", scsi19)
        if scsi2 is not None:
            pulumi.set(__self__, "scsi2", scsi2)
        if scsi20 is not None:
            pulumi.set(__self__, "scsi20", scsi20)
        if scsi21 is not None:
            pulumi.set(__self__, "scsi21", scsi21)
        if scsi22 is not None:
            pulumi.set(__self__, "scsi22", scsi22)
        if scsi23 is not None:
            pulumi.set(__self__, "scsi23", scsi23)
        if scsi24 is not None:
            pulumi.set(__self__, "scsi24", scsi24)
        if scsi25 is not None:
            pulumi.set(__self__, "scsi25", scsi25)
        if scsi26 is not None:
            pulumi.set(__self__, "scsi26", scsi26)
        if scsi27 is not None:
            pulumi.set(__self__, "scsi27", scsi27)
        if scsi28 is not None:
            pulumi.set(__self__, "scsi28", scsi28)
        if scsi29 is not None:
            pulumi.set(__self__, "scsi29", scsi29)
        if scsi3 is not None:
            pulumi.set(__self__, "scsi3", scsi3)
        if scsi30 is not None:
            pulumi.set(__self__, "scsi30", scsi30)
        if scsi4 is not None:
            pulumi.set(__self__, "scsi4", scsi4)
        if scsi5 is not None:
            pulumi.set(__self__, "scsi5", scsi5)
        if scsi6 is not None:
            pulumi.set(__self__, "scsi6", scsi6)
        if scsi7 is not None:
            pulumi.set(__self__, "scsi7", scsi7)
        if scsi8 is not None:
            pulumi.set(__self__, "scsi8", scsi8)
        if scsi9 is not None:
            pulumi.set(__self__, "scsi9", scsi9)
        if scsihw is not None:
            pulumi.set(__self__, "scsihw", scsihw)
        if searchdomain is not None:
            pulumi.set(__self__, "searchdomain", searchdomain)
        if serial0 is not None:
            pulumi.set(__self__, "serial0", serial0)
        if serial1 is not None:
            pulumi.set(__self__, "serial1", serial1)
        if serial2 is not None:
            pulumi.set(__self__, "serial2", serial2)
        if serial3 is not None:
            pulumi.set(__self__, "serial3", serial3)
        if shares is not None:
            pulumi.set(__self__, "shares", shares)
        if smbios1 is not None:
            pulumi.set(__self__, "smbios1", smbios1)
        if smp is not None:
            pulumi.set(__self__, "smp", smp)
        if sockets is not None:
            pulumi.set(__self__, "sockets", sockets)
        if spice_enhancements is not None:
            pulumi.set(__self__, "spice_enhancements", spice_enhancements)
        if sshkeys is not None:
            pulumi.set(__self__, "sshkeys", sshkeys)
        if startdate is not None:
            pulumi.set(__self__, "startdate", startdate)
        if startup is not None:
            pulumi.set(__self__, "startup", startup)
        if tablet is not None:
            pulumi.set(__self__, "tablet", tablet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tdf is not None:
            pulumi.set(__self__, "tdf", tdf)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if tpmstate is not None:
            pulumi.set(__self__, "tpmstate", tpmstate)
        if unused0 is not None:
            pulumi.set(__self__, "unused0", unused0)
        if unused1 is not None:
            pulumi.set(__self__, "unused1", unused1)
        if unused2 is not None:
            pulumi.set(__self__, "unused2", unused2)
        if unused3 is not None:
            pulumi.set(__self__, "unused3", unused3)
        if unused4 is not None:
            pulumi.set(__self__, "unused4", unused4)
        if unused5 is not None:
            pulumi.set(__self__, "unused5", unused5)
        if unused6 is not None:
            pulumi.set(__self__, "unused6", unused6)
        if unused7 is not None:
            pulumi.set(__self__, "unused7", unused7)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)
        if vga is not None:
            pulumi.set(__self__, "vga", vga)
        if virtio0 is not None:
            pulumi.set(__self__, "virtio0", virtio0)
        if virtio1 is not None:
            pulumi.set(__self__, "virtio1", virtio1)
        if virtio10 is not None:
            pulumi.set(__self__, "virtio10", virtio10)
        if virtio11 is not None:
            pulumi.set(__self__, "virtio11", virtio11)
        if virtio12 is not None:
            pulumi.set(__self__, "virtio12", virtio12)
        if virtio13 is not None:
            pulumi.set(__self__, "virtio13", virtio13)
        if virtio14 is not None:
            pulumi.set(__self__, "virtio14", virtio14)
        if virtio15 is not None:
            pulumi.set(__self__, "virtio15", virtio15)
        if virtio2 is not None:
            pulumi.set(__self__, "virtio2", virtio2)
        if virtio3 is not None:
            pulumi.set(__self__, "virtio3", virtio3)
        if virtio4 is not None:
            pulumi.set(__self__, "virtio4", virtio4)
        if virtio5 is not None:
            pulumi.set(__self__, "virtio5", virtio5)
        if virtio6 is not None:
            pulumi.set(__self__, "virtio6", virtio6)
        if virtio7 is not None:
            pulumi.set(__self__, "virtio7", virtio7)
        if virtio8 is not None:
            pulumi.set(__self__, "virtio8", virtio8)
        if virtio9 is not None:
            pulumi.set(__self__, "virtio9", virtio9)
        if vmgenid is not None:
            pulumi.set(__self__, "vmgenid", vmgenid)
        if vmstatestorage is not None:
            pulumi.set(__self__, "vmstatestorage", vmstatestorage)
        if watchdog is not None:
            pulumi.set(__self__, "watchdog", watchdog)

    @property
    @pulumi.getter
    def acpi(self) -> Optional[int]:
        """
        Enable/disable ACPI.
        """
        return pulumi.get(self, "acpi")

    @property
    @pulumi.getter
    def affinity(self) -> Optional[str]:
        """
        List of host cores used to execute guest processes, for example: 0,5,8-11
        """
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter
    def agent(self) -> Optional[str]:
        """
        Enable/disable communication with the QEMU Guest Agent and its properties.
        """
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        """
        Virtual processor architecture. Defaults to the host.
        """
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def args(self) -> Optional[str]:
        """
        Arbitrary arguments passed to kvm, for example: args: -no-reboot -no-hpet NOTE: this option is for experts only.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def audio0(self) -> Optional[str]:
        """
        Configure a audio device, useful in combination with QXL/Spice.
        """
        return pulumi.get(self, "audio0")

    @property
    @pulumi.getter
    def autostart(self) -> Optional[int]:
        """
        Automatic restart after crash (currently ignored).
        """
        return pulumi.get(self, "autostart")

    @property
    @pulumi.getter
    def balloon(self) -> Optional[int]:
        """
        Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
        """
        return pulumi.get(self, "balloon")

    @property
    @pulumi.getter
    def bios(self) -> Optional[str]:
        """
        Select BIOS implementation.
        """
        return pulumi.get(self, "bios")

    @property
    @pulumi.getter
    def boot(self) -> Optional[str]:
        """
        boot order. ";" separated. : 'order=device1;device2;device3'
        """
        return pulumi.get(self, "boot")

    @property
    @pulumi.getter
    def cdrom(self) -> Optional[str]:
        """
        This is an alias for option -ide2
        """
        return pulumi.get(self, "cdrom")

    @property
    @pulumi.getter
    def cicustom(self) -> Optional[str]:
        """
        cloud-init: Specify custom files to replace the automatically generated ones at start.
        """
        return pulumi.get(self, "cicustom")

    @property
    @pulumi.getter
    def cipassword(self) -> Optional[str]:
        """
        cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords.
        """
        return pulumi.get(self, "cipassword")

    @property
    @pulumi.getter
    def citype(self) -> Optional[str]:
        """
        Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows.
        """
        return pulumi.get(self, "citype")

    @property
    @pulumi.getter
    def ciuser(self) -> Optional[str]:
        """
        cloud-init: User name to change ssh keys and password for instead of the image's configured default user.
        """
        return pulumi.get(self, "ciuser")

    @property
    @pulumi.getter
    def cores(self) -> Optional[int]:
        """
        The number of cores per socket. : 1 ~
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        """
        emulated cpu type
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def cpulimit(self) -> Optional[int]:
        """
        Limit of CPU usage. NOTE: If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit.
        """
        return pulumi.get(self, "cpulimit")

    @property
    @pulumi.getter
    def cpuunits(self) -> Optional[int]:
        """
        CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs.
        """
        return pulumi.get(self, "cpuunits")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def efidisk0(self) -> Optional[int]:
        return pulumi.get(self, "efidisk0")

    @property
    @pulumi.getter
    def freeze(self) -> Optional[int]:
        return pulumi.get(self, "freeze")

    @property
    @pulumi.getter
    def hookscript(self) -> Optional[str]:
        return pulumi.get(self, "hookscript")

    @property
    @pulumi.getter
    def hostpci0(self) -> Optional[str]:
        return pulumi.get(self, "hostpci0")

    @property
    @pulumi.getter
    def hostpci1(self) -> Optional[str]:
        return pulumi.get(self, "hostpci1")

    @property
    @pulumi.getter
    def hostpci2(self) -> Optional[str]:
        return pulumi.get(self, "hostpci2")

    @property
    @pulumi.getter
    def hostpci3(self) -> Optional[str]:
        return pulumi.get(self, "hostpci3")

    @property
    @pulumi.getter
    def hotplug(self) -> Optional[str]:
        return pulumi.get(self, "hotplug")

    @property
    @pulumi.getter
    def hugepages(self) -> Optional[str]:
        return pulumi.get(self, "hugepages")

    @property
    @pulumi.getter
    def ide0(self) -> Optional[str]:
        return pulumi.get(self, "ide0")

    @property
    @pulumi.getter
    def ide1(self) -> Optional[str]:
        return pulumi.get(self, "ide1")

    @property
    @pulumi.getter
    def ide2(self) -> Optional[str]:
        return pulumi.get(self, "ide2")

    @property
    @pulumi.getter
    def ide3(self) -> Optional[str]:
        return pulumi.get(self, "ide3")

    @property
    @pulumi.getter
    def ipconfig0(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig0")

    @property
    @pulumi.getter
    def ipconfig1(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig1")

    @property
    @pulumi.getter
    def ipconfig10(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig10")

    @property
    @pulumi.getter
    def ipconfig11(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig11")

    @property
    @pulumi.getter
    def ipconfig12(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig12")

    @property
    @pulumi.getter
    def ipconfig13(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig13")

    @property
    @pulumi.getter
    def ipconfig14(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig14")

    @property
    @pulumi.getter
    def ipconfig15(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig15")

    @property
    @pulumi.getter
    def ipconfig16(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig16")

    @property
    @pulumi.getter
    def ipconfig17(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig17")

    @property
    @pulumi.getter
    def ipconfig18(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig18")

    @property
    @pulumi.getter
    def ipconfig19(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig19")

    @property
    @pulumi.getter
    def ipconfig2(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig2")

    @property
    @pulumi.getter
    def ipconfig20(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig20")

    @property
    @pulumi.getter
    def ipconfig21(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig21")

    @property
    @pulumi.getter
    def ipconfig22(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig22")

    @property
    @pulumi.getter
    def ipconfig23(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig23")

    @property
    @pulumi.getter
    def ipconfig24(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig24")

    @property
    @pulumi.getter
    def ipconfig25(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig25")

    @property
    @pulumi.getter
    def ipconfig26(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig26")

    @property
    @pulumi.getter
    def ipconfig27(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig27")

    @property
    @pulumi.getter
    def ipconfig28(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig28")

    @property
    @pulumi.getter
    def ipconfig29(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig29")

    @property
    @pulumi.getter
    def ipconfig3(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig3")

    @property
    @pulumi.getter
    def ipconfig30(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig30")

    @property
    @pulumi.getter
    def ipconfig31(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig31")

    @property
    @pulumi.getter
    def ipconfig4(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig4")

    @property
    @pulumi.getter
    def ipconfig5(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig5")

    @property
    @pulumi.getter
    def ipconfig6(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig6")

    @property
    @pulumi.getter
    def ipconfig7(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig7")

    @property
    @pulumi.getter
    def ipconfig8(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig8")

    @property
    @pulumi.getter
    def ipconfig9(self) -> Optional[str]:
        return pulumi.get(self, "ipconfig9")

    @property
    @pulumi.getter
    def ivshmem(self) -> Optional[str]:
        return pulumi.get(self, "ivshmem")

    @property
    @pulumi.getter
    def keephugepages(self) -> Optional[int]:
        return pulumi.get(self, "keephugepages")

    @property
    @pulumi.getter
    def keyboard(self) -> Optional[str]:
        return pulumi.get(self, "keyboard")

    @property
    @pulumi.getter
    def kvm(self) -> Optional[int]:
        """
        enable/disable KVM hardware virtualization
        """
        return pulumi.get(self, "kvm")

    @property
    @pulumi.getter
    def localtime(self) -> Optional[int]:
        return pulumi.get(self, "localtime")

    @property
    @pulumi.getter
    def lock(self) -> Optional[str]:
        return pulumi.get(self, "lock")

    @property
    @pulumi.getter
    def machine(self) -> Optional[str]:
        """
        specifies the QEMU machine type
        """
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter
    def memory(self) -> Optional[int]:
        """
        amount of RAM for the VM in MiB : 16 ~
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def migrate_downtime(self) -> Optional[str]:
        """
        A Number represents a JSON number literal.
        """
        return pulumi.get(self, "migrate_downtime")

    @property
    @pulumi.getter
    def migrate_speed(self) -> Optional[int]:
        return pulumi.get(self, "migrate_speed")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name for VM. Only used on the configuration web interface
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nameserver(self) -> Optional[str]:
        """
        cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.
        """
        return pulumi.get(self, "nameserver")

    @property
    @pulumi.getter
    def net0(self) -> Optional[str]:
        return pulumi.get(self, "net0")

    @property
    @pulumi.getter
    def net1(self) -> Optional[str]:
        return pulumi.get(self, "net1")

    @property
    @pulumi.getter
    def net10(self) -> Optional[str]:
        return pulumi.get(self, "net10")

    @property
    @pulumi.getter
    def net11(self) -> Optional[str]:
        return pulumi.get(self, "net11")

    @property
    @pulumi.getter
    def net12(self) -> Optional[str]:
        return pulumi.get(self, "net12")

    @property
    @pulumi.getter
    def net13(self) -> Optional[str]:
        return pulumi.get(self, "net13")

    @property
    @pulumi.getter
    def net14(self) -> Optional[str]:
        return pulumi.get(self, "net14")

    @property
    @pulumi.getter
    def net15(self) -> Optional[str]:
        return pulumi.get(self, "net15")

    @property
    @pulumi.getter
    def net16(self) -> Optional[str]:
        return pulumi.get(self, "net16")

    @property
    @pulumi.getter
    def net17(self) -> Optional[str]:
        return pulumi.get(self, "net17")

    @property
    @pulumi.getter
    def net18(self) -> Optional[str]:
        return pulumi.get(self, "net18")

    @property
    @pulumi.getter
    def net19(self) -> Optional[str]:
        return pulumi.get(self, "net19")

    @property
    @pulumi.getter
    def net2(self) -> Optional[str]:
        return pulumi.get(self, "net2")

    @property
    @pulumi.getter
    def net20(self) -> Optional[str]:
        return pulumi.get(self, "net20")

    @property
    @pulumi.getter
    def net21(self) -> Optional[str]:
        return pulumi.get(self, "net21")

    @property
    @pulumi.getter
    def net22(self) -> Optional[str]:
        return pulumi.get(self, "net22")

    @property
    @pulumi.getter
    def net23(self) -> Optional[str]:
        return pulumi.get(self, "net23")

    @property
    @pulumi.getter
    def net24(self) -> Optional[str]:
        return pulumi.get(self, "net24")

    @property
    @pulumi.getter
    def net25(self) -> Optional[str]:
        return pulumi.get(self, "net25")

    @property
    @pulumi.getter
    def net26(self) -> Optional[str]:
        return pulumi.get(self, "net26")

    @property
    @pulumi.getter
    def net27(self) -> Optional[str]:
        return pulumi.get(self, "net27")

    @property
    @pulumi.getter
    def net28(self) -> Optional[str]:
        return pulumi.get(self, "net28")

    @property
    @pulumi.getter
    def net29(self) -> Optional[str]:
        return pulumi.get(self, "net29")

    @property
    @pulumi.getter
    def net3(self) -> Optional[str]:
        return pulumi.get(self, "net3")

    @property
    @pulumi.getter
    def net30(self) -> Optional[str]:
        return pulumi.get(self, "net30")

    @property
    @pulumi.getter
    def net31(self) -> Optional[str]:
        return pulumi.get(self, "net31")

    @property
    @pulumi.getter
    def net4(self) -> Optional[str]:
        return pulumi.get(self, "net4")

    @property
    @pulumi.getter
    def net5(self) -> Optional[str]:
        return pulumi.get(self, "net5")

    @property
    @pulumi.getter
    def net6(self) -> Optional[str]:
        return pulumi.get(self, "net6")

    @property
    @pulumi.getter
    def net7(self) -> Optional[str]:
        return pulumi.get(self, "net7")

    @property
    @pulumi.getter
    def net8(self) -> Optional[str]:
        return pulumi.get(self, "net8")

    @property
    @pulumi.getter
    def net9(self) -> Optional[str]:
        return pulumi.get(self, "net9")

    @property
    @pulumi.getter
    def numa(self) -> Optional[int]:
        return pulumi.get(self, "numa")

    @property
    @pulumi.getter
    def numa0(self) -> Optional[str]:
        return pulumi.get(self, "numa0")

    @property
    @pulumi.getter
    def numa1(self) -> Optional[str]:
        return pulumi.get(self, "numa1")

    @property
    @pulumi.getter
    def numa2(self) -> Optional[str]:
        return pulumi.get(self, "numa2")

    @property
    @pulumi.getter
    def numa3(self) -> Optional[str]:
        return pulumi.get(self, "numa3")

    @property
    @pulumi.getter
    def numa4(self) -> Optional[str]:
        return pulumi.get(self, "numa4")

    @property
    @pulumi.getter
    def numa5(self) -> Optional[str]:
        return pulumi.get(self, "numa5")

    @property
    @pulumi.getter
    def numa6(self) -> Optional[str]:
        return pulumi.get(self, "numa6")

    @property
    @pulumi.getter
    def numa7(self) -> Optional[str]:
        return pulumi.get(self, "numa7")

    @property
    @pulumi.getter
    def onboot(self) -> Optional[int]:
        """
        specifies whether a VM will be started during system bootup
        """
        return pulumi.get(self, "onboot")

    @property
    @pulumi.getter
    def ostype(self) -> Optional[str]:
        """
        quest OS
        """
        return pulumi.get(self, "ostype")

    @property
    @pulumi.getter
    def parallel0(self) -> Optional[str]:
        return pulumi.get(self, "parallel0")

    @property
    @pulumi.getter
    def parallel1(self) -> Optional[str]:
        return pulumi.get(self, "parallel1")

    @property
    @pulumi.getter
    def parallel2(self) -> Optional[str]:
        return pulumi.get(self, "parallel2")

    @property
    @pulumi.getter
    def protection(self) -> Optional[int]:
        return pulumi.get(self, "protection")

    @property
    @pulumi.getter
    def reboot(self) -> Optional[int]:
        """
        Allow reboot. if set to '0' the VM exit on reboot
        """
        return pulumi.get(self, "reboot")

    @property
    @pulumi.getter
    def rng0(self) -> Optional[str]:
        return pulumi.get(self, "rng0")

    @property
    @pulumi.getter
    def sata0(self) -> Optional[str]:
        return pulumi.get(self, "sata0")

    @property
    @pulumi.getter
    def sata1(self) -> Optional[str]:
        return pulumi.get(self, "sata1")

    @property
    @pulumi.getter
    def sata2(self) -> Optional[str]:
        return pulumi.get(self, "sata2")

    @property
    @pulumi.getter
    def sata3(self) -> Optional[str]:
        return pulumi.get(self, "sata3")

    @property
    @pulumi.getter
    def sata4(self) -> Optional[str]:
        return pulumi.get(self, "sata4")

    @property
    @pulumi.getter
    def sata5(self) -> Optional[str]:
        return pulumi.get(self, "sata5")

    @property
    @pulumi.getter
    def scsi0(self) -> Optional[str]:
        return pulumi.get(self, "scsi0")

    @property
    @pulumi.getter
    def scsi1(self) -> Optional[str]:
        return pulumi.get(self, "scsi1")

    @property
    @pulumi.getter
    def scsi10(self) -> Optional[str]:
        return pulumi.get(self, "scsi10")

    @property
    @pulumi.getter
    def scsi11(self) -> Optional[str]:
        return pulumi.get(self, "scsi11")

    @property
    @pulumi.getter
    def scsi12(self) -> Optional[str]:
        return pulumi.get(self, "scsi12")

    @property
    @pulumi.getter
    def scsi13(self) -> Optional[str]:
        return pulumi.get(self, "scsi13")

    @property
    @pulumi.getter
    def scsi14(self) -> Optional[str]:
        return pulumi.get(self, "scsi14")

    @property
    @pulumi.getter
    def scsi15(self) -> Optional[str]:
        return pulumi.get(self, "scsi15")

    @property
    @pulumi.getter
    def scsi16(self) -> Optional[str]:
        return pulumi.get(self, "scsi16")

    @property
    @pulumi.getter
    def scsi17(self) -> Optional[str]:
        return pulumi.get(self, "scsi17")

    @property
    @pulumi.getter
    def scsi18(self) -> Optional[str]:
        return pulumi.get(self, "scsi18")

    @property
    @pulumi.getter
    def scsi19(self) -> Optional[str]:
        return pulumi.get(self, "scsi19")

    @property
    @pulumi.getter
    def scsi2(self) -> Optional[str]:
        return pulumi.get(self, "scsi2")

    @property
    @pulumi.getter
    def scsi20(self) -> Optional[str]:
        return pulumi.get(self, "scsi20")

    @property
    @pulumi.getter
    def scsi21(self) -> Optional[str]:
        return pulumi.get(self, "scsi21")

    @property
    @pulumi.getter
    def scsi22(self) -> Optional[str]:
        return pulumi.get(self, "scsi22")

    @property
    @pulumi.getter
    def scsi23(self) -> Optional[str]:
        return pulumi.get(self, "scsi23")

    @property
    @pulumi.getter
    def scsi24(self) -> Optional[str]:
        return pulumi.get(self, "scsi24")

    @property
    @pulumi.getter
    def scsi25(self) -> Optional[str]:
        return pulumi.get(self, "scsi25")

    @property
    @pulumi.getter
    def scsi26(self) -> Optional[str]:
        return pulumi.get(self, "scsi26")

    @property
    @pulumi.getter
    def scsi27(self) -> Optional[str]:
        return pulumi.get(self, "scsi27")

    @property
    @pulumi.getter
    def scsi28(self) -> Optional[str]:
        return pulumi.get(self, "scsi28")

    @property
    @pulumi.getter
    def scsi29(self) -> Optional[str]:
        return pulumi.get(self, "scsi29")

    @property
    @pulumi.getter
    def scsi3(self) -> Optional[str]:
        return pulumi.get(self, "scsi3")

    @property
    @pulumi.getter
    def scsi30(self) -> Optional[str]:
        return pulumi.get(self, "scsi30")

    @property
    @pulumi.getter
    def scsi4(self) -> Optional[str]:
        return pulumi.get(self, "scsi4")

    @property
    @pulumi.getter
    def scsi5(self) -> Optional[str]:
        return pulumi.get(self, "scsi5")

    @property
    @pulumi.getter
    def scsi6(self) -> Optional[str]:
        return pulumi.get(self, "scsi6")

    @property
    @pulumi.getter
    def scsi7(self) -> Optional[str]:
        return pulumi.get(self, "scsi7")

    @property
    @pulumi.getter
    def scsi8(self) -> Optional[str]:
        return pulumi.get(self, "scsi8")

    @property
    @pulumi.getter
    def scsi9(self) -> Optional[str]:
        return pulumi.get(self, "scsi9")

    @property
    @pulumi.getter
    def scsihw(self) -> Optional[str]:
        """
        SCSI controller model
        """
        return pulumi.get(self, "scsihw")

    @property
    @pulumi.getter
    def searchdomain(self) -> Optional[str]:
        """
        cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.
        """
        return pulumi.get(self, "searchdomain")

    @property
    @pulumi.getter
    def serial0(self) -> Optional[str]:
        return pulumi.get(self, "serial0")

    @property
    @pulumi.getter
    def serial1(self) -> Optional[str]:
        return pulumi.get(self, "serial1")

    @property
    @pulumi.getter
    def serial2(self) -> Optional[str]:
        return pulumi.get(self, "serial2")

    @property
    @pulumi.getter
    def serial3(self) -> Optional[str]:
        return pulumi.get(self, "serial3")

    @property
    @pulumi.getter
    def shares(self) -> Optional[int]:
        return pulumi.get(self, "shares")

    @property
    @pulumi.getter
    def smbios1(self) -> Optional[str]:
        return pulumi.get(self, "smbios1")

    @property
    @pulumi.getter
    def smp(self) -> Optional[int]:
        return pulumi.get(self, "smp")

    @property
    @pulumi.getter
    def sockets(self) -> Optional[int]:
        """
        number of sockets
        """
        return pulumi.get(self, "sockets")

    @property
    @pulumi.getter
    def spice_enhancements(self) -> Optional[str]:
        return pulumi.get(self, "spice_enhancements")

    @property
    @pulumi.getter
    def sshkeys(self) -> Optional[str]:
        """
        cloud-init setup public ssh keys (one key per line, OpenSSH format)
        """
        return pulumi.get(self, "sshkeys")

    @property
    @pulumi.getter
    def startdate(self) -> Optional[str]:
        return pulumi.get(self, "startdate")

    @property
    @pulumi.getter
    def startup(self) -> Optional[int]:
        return pulumi.get(self, "startup")

    @property
    @pulumi.getter
    def tablet(self) -> Optional[int]:
        return pulumi.get(self, "tablet")

    @property
    @pulumi.getter
    def tags(self) -> Optional[str]:
        """
        tags of the VM. only for meta information
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tdf(self) -> Optional[int]:
        return pulumi.get(self, "tdf")

    @property
    @pulumi.getter
    def template(self) -> Optional[int]:
        """
        enable/disable template
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def tpmstate(self) -> Optional[str]:
        return pulumi.get(self, "tpmstate")

    @property
    @pulumi.getter
    def unused0(self) -> Optional[str]:
        return pulumi.get(self, "unused0")

    @property
    @pulumi.getter
    def unused1(self) -> Optional[str]:
        return pulumi.get(self, "unused1")

    @property
    @pulumi.getter
    def unused2(self) -> Optional[str]:
        return pulumi.get(self, "unused2")

    @property
    @pulumi.getter
    def unused3(self) -> Optional[str]:
        return pulumi.get(self, "unused3")

    @property
    @pulumi.getter
    def unused4(self) -> Optional[str]:
        return pulumi.get(self, "unused4")

    @property
    @pulumi.getter
    def unused5(self) -> Optional[str]:
        return pulumi.get(self, "unused5")

    @property
    @pulumi.getter
    def unused6(self) -> Optional[str]:
        return pulumi.get(self, "unused6")

    @property
    @pulumi.getter
    def unused7(self) -> Optional[str]:
        return pulumi.get(self, "unused7")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter
    def vga(self) -> Optional[str]:
        return pulumi.get(self, "vga")

    @property
    @pulumi.getter
    def virtio0(self) -> Optional[str]:
        return pulumi.get(self, "virtio0")

    @property
    @pulumi.getter
    def virtio1(self) -> Optional[str]:
        return pulumi.get(self, "virtio1")

    @property
    @pulumi.getter
    def virtio10(self) -> Optional[str]:
        return pulumi.get(self, "virtio10")

    @property
    @pulumi.getter
    def virtio11(self) -> Optional[str]:
        return pulumi.get(self, "virtio11")

    @property
    @pulumi.getter
    def virtio12(self) -> Optional[str]:
        return pulumi.get(self, "virtio12")

    @property
    @pulumi.getter
    def virtio13(self) -> Optional[str]:
        return pulumi.get(self, "virtio13")

    @property
    @pulumi.getter
    def virtio14(self) -> Optional[str]:
        return pulumi.get(self, "virtio14")

    @property
    @pulumi.getter
    def virtio15(self) -> Optional[str]:
        return pulumi.get(self, "virtio15")

    @property
    @pulumi.getter
    def virtio2(self) -> Optional[str]:
        return pulumi.get(self, "virtio2")

    @property
    @pulumi.getter
    def virtio3(self) -> Optional[str]:
        return pulumi.get(self, "virtio3")

    @property
    @pulumi.getter
    def virtio4(self) -> Optional[str]:
        return pulumi.get(self, "virtio4")

    @property
    @pulumi.getter
    def virtio5(self) -> Optional[str]:
        return pulumi.get(self, "virtio5")

    @property
    @pulumi.getter
    def virtio6(self) -> Optional[str]:
        return pulumi.get(self, "virtio6")

    @property
    @pulumi.getter
    def virtio7(self) -> Optional[str]:
        return pulumi.get(self, "virtio7")

    @property
    @pulumi.getter
    def virtio8(self) -> Optional[str]:
        return pulumi.get(self, "virtio8")

    @property
    @pulumi.getter
    def virtio9(self) -> Optional[str]:
        return pulumi.get(self, "virtio9")

    @property
    @pulumi.getter
    def vmgenid(self) -> Optional[str]:
        return pulumi.get(self, "vmgenid")

    @property
    @pulumi.getter
    def vmstatestorage(self) -> Optional[str]:
        return pulumi.get(self, "vmstatestorage")

    @property
    @pulumi.getter
    def watchdog(self) -> Optional[str]:
        return pulumi.get(self, "watchdog")


@pulumi.output_type
class ProxmoxMachineTemplateSpec(dict):
    """
    ProxmoxMachineTemplateSpec defines the desired state of ProxmoxMachineTemplate
    """
    def __init__(__self__, *,
                 template: 'outputs.ProxmoxMachineTemplateSpecTemplate'):
        """
        ProxmoxMachineTemplateSpec defines the desired state of ProxmoxMachineTemplate
        """
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def template(self) -> 'outputs.ProxmoxMachineTemplateSpecTemplate':
        return pulumi.get(self, "template")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metadata.omitempty":
            suggest = "metadata_omitempty"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineTemplateSpecTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineTemplateSpecTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineTemplateSpecTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 spec: 'outputs.ProxmoxMachineTemplateSpecTemplateSpec',
                 metadata_omitempty: Optional['outputs.ProxmoxMachineTemplateSpecTemplateMetadataOmitempty'] = None):
        """
        :param 'ProxmoxMachineTemplateSpecTemplateSpecArgs' spec: ProxmoxMachineSpec defines the desired state of ProxmoxMachine
        :param 'ProxmoxMachineTemplateSpecTemplateMetadataOmitemptyArgs' metadata_omitempty: ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta. 
                ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience. 
                During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package. 
                In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable. 
                In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
        """
        pulumi.set(__self__, "spec", spec)
        if metadata_omitempty is not None:
            pulumi.set(__self__, "metadata_omitempty", metadata_omitempty)

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.ProxmoxMachineTemplateSpecTemplateSpec':
        """
        ProxmoxMachineSpec defines the desired state of ProxmoxMachine
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="metadata.omitempty")
    def metadata_omitempty(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateMetadataOmitempty']:
        """
        ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta. 
         ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience. 
         During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package. 
         In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable. 
         In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
        """
        return pulumi.get(self, "metadata_omitempty")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateMetadataOmitempty(dict):
    """
    ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta. 
     ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience. 
     During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package. 
     In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable. 
     In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
    """
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. This is a copy of customizable fields from metav1.ObjectMeta. 
         ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`, which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases and read-only fields which end up in the generated CRD validation, having it as a subset simplifies the API and some issues that can impact user experience. 
         During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054) for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs, specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`. The investigation showed that `controller-tools@v2` behaves differently than its previous version when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package. 
         In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta` had validation properties, including for `creationTimestamp` (metav1.Time). The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null` which breaks validation because the field isn't marked as nullable. 
         In future versions, controller-tools@v2 might allow overriding the type and validation for embedded types. When that happens, this hack should be revisited.
        :param Mapping[str, str] annotations: Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpec(dict):
    """
    ProxmoxMachineSpec defines the desired state of ProxmoxMachine
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudInit":
            suggest = "cloud_init"
        elif key == "failureDomain":
            suggest = "failure_domain"
        elif key == "providerID":
            suggest = "provider_id"
        elif key == "vmID":
            suggest = "vm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineTemplateSpecTemplateSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: 'outputs.ProxmoxMachineTemplateSpecTemplateSpecImage',
                 cloud_init: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInit'] = None,
                 failure_domain: Optional[str] = None,
                 hardware: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecHardware'] = None,
                 network: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecNetwork'] = None,
                 node: Optional[str] = None,
                 options: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecOptions'] = None,
                 provider_id: Optional[str] = None,
                 storage: Optional[str] = None,
                 vm_id: Optional[int] = None):
        """
        ProxmoxMachineSpec defines the desired state of ProxmoxMachine
        :param 'ProxmoxMachineTemplateSpecTemplateSpecImageArgs' image: Image is the image to be provisioned
        :param 'ProxmoxMachineTemplateSpecTemplateSpecCloudInitArgs' cloud_init: CloudInit defines options related to the bootstrapping systems where CloudInit is used.
        :param str failure_domain: FailureDomain is the failure domain unique identifier this Machine should be attached to, as defined in Cluster API.
        :param 'ProxmoxMachineTemplateSpecTemplateSpecHardwareArgs' hardware: Hardware
        :param 'ProxmoxMachineTemplateSpecTemplateSpecNetworkArgs' network: Network
        :param str node: Node is proxmox node hosting vm instance which used for ProxmoxMachine
        :param 'ProxmoxMachineTemplateSpecTemplateSpecOptionsArgs' options: Options for QEMU instance
        :param str provider_id: ProviderID
        :param str storage: Storage is name of proxmox storage used by this node. The storage must support "images(VM Disks)" type of content. cappx will use random storage if empty
        :param int vm_id: VMID is proxmox qemu's id
        """
        pulumi.set(__self__, "image", image)
        if cloud_init is not None:
            pulumi.set(__self__, "cloud_init", cloud_init)
        if failure_domain is not None:
            pulumi.set(__self__, "failure_domain", failure_domain)
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if provider_id is not None:
            pulumi.set(__self__, "provider_id", provider_id)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter
    def image(self) -> 'outputs.ProxmoxMachineTemplateSpecTemplateSpecImage':
        """
        Image is the image to be provisioned
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="cloudInit")
    def cloud_init(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInit']:
        """
        CloudInit defines options related to the bootstrapping systems where CloudInit is used.
        """
        return pulumi.get(self, "cloud_init")

    @property
    @pulumi.getter(name="failureDomain")
    def failure_domain(self) -> Optional[str]:
        """
        FailureDomain is the failure domain unique identifier this Machine should be attached to, as defined in Cluster API.
        """
        return pulumi.get(self, "failure_domain")

    @property
    @pulumi.getter
    def hardware(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecHardware']:
        """
        Hardware
        """
        return pulumi.get(self, "hardware")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecNetwork']:
        """
        Network
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def node(self) -> Optional[str]:
        """
        Node is proxmox node hosting vm instance which used for ProxmoxMachine
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecOptions']:
        """
        Options for QEMU instance
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="providerID")
    def provider_id(self) -> Optional[str]:
        """
        ProviderID
        """
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter
    def storage(self) -> Optional[str]:
        """
        Storage is name of proxmox storage used by this node. The storage must support "images(VM Disks)" type of content. cappx will use random storage if empty
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="vmID")
    def vm_id(self) -> Optional[int]:
        """
        VMID is proxmox qemu's id
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecCloudInit(dict):
    """
    CloudInit defines options related to the bootstrapping systems where CloudInit is used.
    """
    def __init__(__self__, *,
                 user: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser'] = None):
        """
        CloudInit defines options related to the bootstrapping systems where CloudInit is used.
        """
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def user(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser']:
        return pulumi.get(self, "user")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runCmd":
            suggest = "run_cmd"
        elif key == "writeFiles":
            suggest = "write_files"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecCloudInitUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bootcmd: Optional[Sequence[str]] = None,
                 ca_certs: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserCaCerts'] = None,
                 chpasswd: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserChpasswd'] = None,
                 manage_etc_hosts: Optional[bool] = None,
                 no_ssh_fingerprints: Optional[bool] = None,
                 package_update: Optional[bool] = None,
                 package_upgrade: Optional[bool] = None,
                 packages: Optional[Sequence[str]] = None,
                 password: Optional[str] = None,
                 run_cmd: Optional[Sequence[str]] = None,
                 ssh: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSsh'] = None,
                 ssh_authorized_keys: Optional[Sequence[str]] = None,
                 ssh_keys: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshKeys'] = None,
                 ssh_pwauth: Optional[bool] = None,
                 user: Optional[str] = None,
                 users: Optional[Sequence['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserUsers']] = None,
                 write_files: Optional[Sequence['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserWriteFiles']] = None):
        if bootcmd is not None:
            pulumi.set(__self__, "bootcmd", bootcmd)
        if ca_certs is not None:
            pulumi.set(__self__, "ca_certs", ca_certs)
        if chpasswd is not None:
            pulumi.set(__self__, "chpasswd", chpasswd)
        if manage_etc_hosts is not None:
            pulumi.set(__self__, "manage_etc_hosts", manage_etc_hosts)
        if no_ssh_fingerprints is not None:
            pulumi.set(__self__, "no_ssh_fingerprints", no_ssh_fingerprints)
        if package_update is not None:
            pulumi.set(__self__, "package_update", package_update)
        if package_upgrade is not None:
            pulumi.set(__self__, "package_upgrade", package_upgrade)
        if packages is not None:
            pulumi.set(__self__, "packages", packages)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if run_cmd is not None:
            pulumi.set(__self__, "run_cmd", run_cmd)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if ssh_authorized_keys is not None:
            pulumi.set(__self__, "ssh_authorized_keys", ssh_authorized_keys)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if ssh_pwauth is not None:
            pulumi.set(__self__, "ssh_pwauth", ssh_pwauth)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if write_files is not None:
            pulumi.set(__self__, "write_files", write_files)

    @property
    @pulumi.getter
    def bootcmd(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bootcmd")

    @property
    @pulumi.getter
    def ca_certs(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserCaCerts']:
        return pulumi.get(self, "ca_certs")

    @property
    @pulumi.getter
    def chpasswd(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserChpasswd']:
        return pulumi.get(self, "chpasswd")

    @property
    @pulumi.getter
    def manage_etc_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "manage_etc_hosts")

    @property
    @pulumi.getter
    def no_ssh_fingerprints(self) -> Optional[bool]:
        return pulumi.get(self, "no_ssh_fingerprints")

    @property
    @pulumi.getter
    def package_update(self) -> Optional[bool]:
        return pulumi.get(self, "package_update")

    @property
    @pulumi.getter
    def package_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "package_upgrade")

    @property
    @pulumi.getter
    def packages(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="runCmd")
    def run_cmd(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "run_cmd")

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSsh']:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter
    def ssh_authorized_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_authorized_keys")

    @property
    @pulumi.getter
    def ssh_keys(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshKeys']:
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter
    def ssh_pwauth(self) -> Optional[bool]:
        return pulumi.get(self, "ssh_pwauth")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserUsers']]:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="writeFiles")
    def write_files(self) -> Optional[Sequence['outputs.ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserWriteFiles']]:
        return pulumi.get(self, "write_files")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserCaCerts(dict):
    def __init__(__self__, *,
                 remove_defaults: Optional[bool] = None,
                 trusted: Optional[Sequence[str]] = None):
        if remove_defaults is not None:
            pulumi.set(__self__, "remove_defaults", remove_defaults)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)

    @property
    @pulumi.getter
    def remove_defaults(self) -> Optional[bool]:
        return pulumi.get(self, "remove_defaults")

    @property
    @pulumi.getter
    def trusted(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "trusted")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserChpasswd(dict):
    def __init__(__self__, *,
                 expire: Optional[str] = None):
        if expire is not None:
            pulumi.set(__self__, "expire", expire)

    @property
    @pulumi.getter
    def expire(self) -> Optional[str]:
        return pulumi.get(self, "expire")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSsh(dict):
    def __init__(__self__, *,
                 emit_keys_to_console: Optional[bool] = None):
        if emit_keys_to_console is not None:
            pulumi.set(__self__, "emit_keys_to_console", emit_keys_to_console)

    @property
    @pulumi.getter
    def emit_keys_to_console(self) -> Optional[bool]:
        return pulumi.get(self, "emit_keys_to_console")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserSshKeys(dict):
    def __init__(__self__, *,
                 dsa_private: Optional[str] = None,
                 dsa_public: Optional[str] = None,
                 ecdsa_private: Optional[str] = None,
                 ecdsa_public: Optional[str] = None,
                 rsa_private: Optional[str] = None,
                 rsa_public: Optional[str] = None):
        if dsa_private is not None:
            pulumi.set(__self__, "dsa_private", dsa_private)
        if dsa_public is not None:
            pulumi.set(__self__, "dsa_public", dsa_public)
        if ecdsa_private is not None:
            pulumi.set(__self__, "ecdsa_private", ecdsa_private)
        if ecdsa_public is not None:
            pulumi.set(__self__, "ecdsa_public", ecdsa_public)
        if rsa_private is not None:
            pulumi.set(__self__, "rsa_private", rsa_private)
        if rsa_public is not None:
            pulumi.set(__self__, "rsa_public", rsa_public)

    @property
    @pulumi.getter
    def dsa_private(self) -> Optional[str]:
        return pulumi.get(self, "dsa_private")

    @property
    @pulumi.getter
    def dsa_public(self) -> Optional[str]:
        return pulumi.get(self, "dsa_public")

    @property
    @pulumi.getter
    def ecdsa_private(self) -> Optional[str]:
        return pulumi.get(self, "ecdsa_private")

    @property
    @pulumi.getter
    def ecdsa_public(self) -> Optional[str]:
        return pulumi.get(self, "ecdsa_public")

    @property
    @pulumi.getter
    def rsa_private(self) -> Optional[str]:
        return pulumi.get(self, "rsa_private")

    @property
    @pulumi.getter
    def rsa_public(self) -> Optional[str]:
        return pulumi.get(self, "rsa_public")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserUsers(dict):
    def __init__(__self__, *,
                 name: str,
                 expiredate: Optional[str] = None,
                 gecos: Optional[str] = None,
                 groups: Optional[Sequence[str]] = None,
                 homedir: Optional[str] = None,
                 inactive: Optional[int] = None,
                 lock_passwd: Optional[bool] = None,
                 no_create_home: Optional[bool] = None,
                 no_log_init: Optional[bool] = None,
                 no_user_group: Optional[bool] = None,
                 passwd: Optional[str] = None,
                 primary_group: Optional[str] = None,
                 selinux_user: Optional[str] = None,
                 shell: Optional[str] = None,
                 snapuser: Optional[str] = None,
                 ssh_authorized_keys: Optional[Sequence[str]] = None,
                 ssh_import_id: Optional[Sequence[str]] = None,
                 ssh_redirect_user: Optional[bool] = None,
                 sudo: Optional[Sequence[str]] = None,
                 system: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if expiredate is not None:
            pulumi.set(__self__, "expiredate", expiredate)
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if homedir is not None:
            pulumi.set(__self__, "homedir", homedir)
        if inactive is not None:
            pulumi.set(__self__, "inactive", inactive)
        if lock_passwd is not None:
            pulumi.set(__self__, "lock_passwd", lock_passwd)
        if no_create_home is not None:
            pulumi.set(__self__, "no_create_home", no_create_home)
        if no_log_init is not None:
            pulumi.set(__self__, "no_log_init", no_log_init)
        if no_user_group is not None:
            pulumi.set(__self__, "no_user_group", no_user_group)
        if passwd is not None:
            pulumi.set(__self__, "passwd", passwd)
        if primary_group is not None:
            pulumi.set(__self__, "primary_group", primary_group)
        if selinux_user is not None:
            pulumi.set(__self__, "selinux_user", selinux_user)
        if shell is not None:
            pulumi.set(__self__, "shell", shell)
        if snapuser is not None:
            pulumi.set(__self__, "snapuser", snapuser)
        if ssh_authorized_keys is not None:
            pulumi.set(__self__, "ssh_authorized_keys", ssh_authorized_keys)
        if ssh_import_id is not None:
            pulumi.set(__self__, "ssh_import_id", ssh_import_id)
        if ssh_redirect_user is not None:
            pulumi.set(__self__, "ssh_redirect_user", ssh_redirect_user)
        if sudo is not None:
            pulumi.set(__self__, "sudo", sudo)
        if system is not None:
            pulumi.set(__self__, "system", system)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def expiredate(self) -> Optional[str]:
        return pulumi.get(self, "expiredate")

    @property
    @pulumi.getter
    def gecos(self) -> Optional[str]:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def homedir(self) -> Optional[str]:
        return pulumi.get(self, "homedir")

    @property
    @pulumi.getter
    def inactive(self) -> Optional[int]:
        return pulumi.get(self, "inactive")

    @property
    @pulumi.getter
    def lock_passwd(self) -> Optional[bool]:
        return pulumi.get(self, "lock_passwd")

    @property
    @pulumi.getter
    def no_create_home(self) -> Optional[bool]:
        return pulumi.get(self, "no_create_home")

    @property
    @pulumi.getter
    def no_log_init(self) -> Optional[bool]:
        return pulumi.get(self, "no_log_init")

    @property
    @pulumi.getter
    def no_user_group(self) -> Optional[bool]:
        return pulumi.get(self, "no_user_group")

    @property
    @pulumi.getter
    def passwd(self) -> Optional[str]:
        return pulumi.get(self, "passwd")

    @property
    @pulumi.getter
    def primary_group(self) -> Optional[str]:
        return pulumi.get(self, "primary_group")

    @property
    @pulumi.getter
    def selinux_user(self) -> Optional[str]:
        return pulumi.get(self, "selinux_user")

    @property
    @pulumi.getter
    def shell(self) -> Optional[str]:
        return pulumi.get(self, "shell")

    @property
    @pulumi.getter
    def snapuser(self) -> Optional[str]:
        return pulumi.get(self, "snapuser")

    @property
    @pulumi.getter
    def ssh_authorized_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_authorized_keys")

    @property
    @pulumi.getter
    def ssh_import_id(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssh_import_id")

    @property
    @pulumi.getter
    def ssh_redirect_user(self) -> Optional[bool]:
        return pulumi.get(self, "ssh_redirect_user")

    @property
    @pulumi.getter
    def sudo(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sudo")

    @property
    @pulumi.getter
    def system(self) -> Optional[bool]:
        return pulumi.get(self, "system")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecCloudInitUserWriteFiles(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 defer: Optional[bool] = None,
                 encoding: Optional[str] = None,
                 owner: Optional[str] = None,
                 path: Optional[str] = None,
                 permissions: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if defer is not None:
            pulumi.set(__self__, "defer", defer)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def defer(self) -> Optional[bool]:
        return pulumi.get(self, "defer")

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[str]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecHardware(dict):
    """
    Hardware
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuLimit":
            suggest = "cpu_limit"
        elif key == "networkDevice":
            suggest = "network_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineTemplateSpecTemplateSpecHardware. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecHardware.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecHardware.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bios: Optional[str] = None,
                 cpu: Optional[int] = None,
                 cpu_limit: Optional[int] = None,
                 disk: Optional[str] = None,
                 memory: Optional[int] = None,
                 network_device: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDevice'] = None,
                 sockets: Optional[int] = None):
        """
        Hardware
        :param str bios: Select BIOS implementation. Defaults to seabios. seabios or ovmf. Defaults to seabios.
        :param int cpu: number of CPU cores : 1 ~
        :param int cpu_limit: Limit of CPU usage. If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit. Defaults to 0.
        :param str disk: hard disk size
        :param int memory: amount of RAM for the VM in MiB : 16 ~
        :param 'ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDeviceArgs' network_device: network devices to do: multiple devices
        :param int sockets: The number of CPU sockets. Defaults to 1.
        """
        if bios is not None:
            pulumi.set(__self__, "bios", bios)
        if cpu is None:
            cpu = 2
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if disk is None:
            disk = '50G'
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if memory is None:
            memory = 4096
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network_device is not None:
            pulumi.set(__self__, "network_device", network_device)
        if sockets is not None:
            pulumi.set(__self__, "sockets", sockets)

    @property
    @pulumi.getter
    def bios(self) -> Optional[str]:
        """
        Select BIOS implementation. Defaults to seabios. seabios or ovmf. Defaults to seabios.
        """
        return pulumi.get(self, "bios")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        """
        number of CPU cores : 1 ~
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[int]:
        """
        Limit of CPU usage. If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit. Defaults to 0.
        """
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter
    def disk(self) -> Optional[str]:
        """
        hard disk size
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def memory(self) -> Optional[int]:
        """
        amount of RAM for the VM in MiB : 16 ~
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="networkDevice")
    def network_device(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDevice']:
        """
        network devices to do: multiple devices
        """
        return pulumi.get(self, "network_device")

    @property
    @pulumi.getter
    def sockets(self) -> Optional[int]:
        """
        The number of CPU sockets. Defaults to 1.
        """
        return pulumi.get(self, "sockets")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDevice(dict):
    """
    network devices to do: multiple devices
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkDown":
            suggest = "link_down"
        elif key == "macAddr":
            suggest = "mac_addr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecHardwareNetworkDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bridge: Optional[str] = None,
                 firewall: Optional[bool] = None,
                 link_down: Optional[bool] = None,
                 mac_addr: Optional[str] = None,
                 model: Optional[str] = None,
                 mtu: Optional[int] = None,
                 queues: Optional[int] = None,
                 rate: Optional[str] = None,
                 tag: Optional[int] = None,
                 trunks: Optional[Sequence[int]] = None):
        """
        network devices to do: multiple devices
        :param str rate: since float is highly discouraged, use string instead
        :param Sequence[int] trunks: trunks: array of vlanid
        """
        if bridge is None:
            bridge = 'vmbr0'
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if firewall is None:
            firewall = True
        if firewall is not None:
            pulumi.set(__self__, "firewall", firewall)
        if link_down is not None:
            pulumi.set(__self__, "link_down", link_down)
        if mac_addr is not None:
            pulumi.set(__self__, "mac_addr", mac_addr)
        if model is None:
            model = 'virtio'
        if model is not None:
            pulumi.set(__self__, "model", model)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if queues is not None:
            pulumi.set(__self__, "queues", queues)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if trunks is not None:
            pulumi.set(__self__, "trunks", trunks)

    @property
    @pulumi.getter
    def bridge(self) -> Optional[str]:
        return pulumi.get(self, "bridge")

    @property
    @pulumi.getter
    def firewall(self) -> Optional[bool]:
        return pulumi.get(self, "firewall")

    @property
    @pulumi.getter(name="linkDown")
    def link_down(self) -> Optional[bool]:
        return pulumi.get(self, "link_down")

    @property
    @pulumi.getter(name="macAddr")
    def mac_addr(self) -> Optional[str]:
        return pulumi.get(self, "mac_addr")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def queues(self) -> Optional[int]:
        return pulumi.get(self, "queues")

    @property
    @pulumi.getter
    def rate(self) -> Optional[str]:
        """
        since float is highly discouraged, use string instead
        """
        return pulumi.get(self, "rate")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def trunks(self) -> Optional[Sequence[int]]:
        """
        trunks: array of vlanid
        """
        return pulumi.get(self, "trunks")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecImage(dict):
    """
    Image is the image to be provisioned
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checksumType":
            suggest = "checksum_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineTemplateSpecTemplateSpecImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 checksum: Optional[str] = None,
                 checksum_type: Optional[str] = None):
        """
        Image is the image to be provisioned
        :param str url: URL is a location of an image to deploy. supported formats are iso/qcow2/qed/raw/vdi/vpc/vmdk.
        :param str checksum: Checksum Always better to specify checksum otherwise cappx will download same image for every time. If checksum is specified, cappx will try to avoid downloading existing image.
        :param str checksum_type: ChecksumType
        """
        pulumi.set(__self__, "url", url)
        if checksum is not None:
            pulumi.set(__self__, "checksum", checksum)
        if checksum_type is not None:
            pulumi.set(__self__, "checksum_type", checksum_type)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL is a location of an image to deploy. supported formats are iso/qcow2/qed/raw/vdi/vpc/vmdk.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def checksum(self) -> Optional[str]:
        """
        Checksum Always better to specify checksum otherwise cappx will download same image for every time. If checksum is specified, cappx will try to avoid downloading existing image.
        """
        return pulumi.get(self, "checksum")

    @property
    @pulumi.getter(name="checksumType")
    def checksum_type(self) -> Optional[str]:
        """
        ChecksumType
        """
        return pulumi.get(self, "checksum_type")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecNetwork(dict):
    """
    Network
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipConfig":
            suggest = "ip_config"
        elif key == "nameServer":
            suggest = "name_server"
        elif key == "searchDomain":
            suggest = "search_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineTemplateSpecTemplateSpecNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_config: Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfig'] = None,
                 name_server: Optional[str] = None,
                 search_domain: Optional[str] = None):
        """
        Network
        :param 'ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfigArgs' ip_config: to do : should accept multiple IPConfig
        :param str name_server: DNS server
        :param str search_domain: search domain
        """
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if name_server is not None:
            pulumi.set(__self__, "name_server", name_server)
        if search_domain is not None:
            pulumi.set(__self__, "search_domain", search_domain)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional['outputs.ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfig']:
        """
        to do : should accept multiple IPConfig
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter(name="nameServer")
    def name_server(self) -> Optional[str]:
        """
        DNS server
        """
        return pulumi.get(self, "name_server")

    @property
    @pulumi.getter(name="searchDomain")
    def search_domain(self) -> Optional[str]:
        """
        search domain
        """
        return pulumi.get(self, "search_domain")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecNetworkIpConfig(dict):
    """
    to do : should accept multiple IPConfig
    """
    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 ip: Optional[str] = None,
                 ip6: Optional[str] = None):
        """
        to do : should accept multiple IPConfig
        :param str gateway: gateway IPv4
        :param str gateway6: gateway IPv6
        :param str ip: IPv4 with CIDR
        :param str ip6: IPv6 with CIDR
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        gateway IPv4
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        """
        gateway IPv6
        """
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IPv4 with CIDR
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        """
        IPv6 with CIDR
        """
        return pulumi.get(self, "ip6")


@pulumi.output_type
class ProxmoxMachineTemplateSpecTemplateSpecOptions(dict):
    """
    Options for QEMU instance
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hugePages":
            suggest = "huge_pages"
        elif key == "keepHugePages":
            suggest = "keep_huge_pages"
        elif key == "localTime":
            suggest = "local_time"
        elif key == "onBoot":
            suggest = "on_boot"
        elif key == "osType":
            suggest = "os_type"
        elif key == "timeDriftFix":
            suggest = "time_drift_fix"
        elif key == "vmGenerationID":
            suggest = "vm_generation_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxmoxMachineTemplateSpecTemplateSpecOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxmoxMachineTemplateSpecTemplateSpecOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acpi: Optional[bool] = None,
                 arch: Optional[str] = None,
                 balloon: Optional[int] = None,
                 description: Optional[str] = None,
                 huge_pages: Optional[int] = None,
                 keep_huge_pages: Optional[bool] = None,
                 kvm: Optional[bool] = None,
                 local_time: Optional[bool] = None,
                 lock: Optional[str] = None,
                 numa: Optional[bool] = None,
                 on_boot: Optional[bool] = None,
                 os_type: Optional[str] = None,
                 protection: Optional[bool] = None,
                 reboot: Optional[bool] = None,
                 shares: Optional[int] = None,
                 tablet: Optional[bool] = None,
                 tags: Optional[Sequence[str]] = None,
                 template: Optional[bool] = None,
                 time_drift_fix: Optional[bool] = None,
                 vcpus: Optional[int] = None,
                 vm_generation_id: Optional[str] = None):
        """
        Options for QEMU instance
        :param bool acpi: Enable/Disable ACPI. Defaults to true.
        :param str arch: Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
        :param int balloon: Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
        :param str description: Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
        :param int huge_pages: enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
        :param bool keep_huge_pages: Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
        :param bool kvm: Enable/disable KVM hardware virtualization. Defaults to true.
        :param bool local_time: Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
        :param str lock: Lock/unlock the VM.
        :param bool numa: Enable/disable NUMA.
        :param bool on_boot: Specifies whether a VM will be started during system bootup.
        :param str os_type: Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
        :param bool protection: Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
        :param bool reboot: Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
        :param int shares: Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
        :param bool tablet: Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`). Defaults to true.
        :param Sequence[str] tags: Tags of the VM. This is only meta information.
        :param bool template: Enable/disable Template. Defaults to false.
        :param bool time_drift_fix: Enable/disable time drift fix. Defaults to false.
        :param int vcpus: Number of hotplugged vcpus. Defaults to 0.
        :param str vm_generation_id: The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
        """
        if acpi is not None:
            pulumi.set(__self__, "acpi", acpi)
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if balloon is not None:
            pulumi.set(__self__, "balloon", balloon)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if huge_pages is not None:
            pulumi.set(__self__, "huge_pages", huge_pages)
        if keep_huge_pages is not None:
            pulumi.set(__self__, "keep_huge_pages", keep_huge_pages)
        if kvm is not None:
            pulumi.set(__self__, "kvm", kvm)
        if local_time is not None:
            pulumi.set(__self__, "local_time", local_time)
        if lock is not None:
            pulumi.set(__self__, "lock", lock)
        if numa is not None:
            pulumi.set(__self__, "numa", numa)
        if on_boot is not None:
            pulumi.set(__self__, "on_boot", on_boot)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if protection is not None:
            pulumi.set(__self__, "protection", protection)
        if reboot is not None:
            pulumi.set(__self__, "reboot", reboot)
        if shares is not None:
            pulumi.set(__self__, "shares", shares)
        if tablet is not None:
            pulumi.set(__self__, "tablet", tablet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if time_drift_fix is not None:
            pulumi.set(__self__, "time_drift_fix", time_drift_fix)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)
        if vm_generation_id is not None:
            pulumi.set(__self__, "vm_generation_id", vm_generation_id)

    @property
    @pulumi.getter
    def acpi(self) -> Optional[bool]:
        """
        Enable/Disable ACPI. Defaults to true.
        """
        return pulumi.get(self, "acpi")

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        """
        Virtual processor architecture. Defaults to the host. x86_64 or aarch64.
        """
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def balloon(self) -> Optional[int]:
        """
        Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.
        """
        return pulumi.get(self, "balloon")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hugePages")
    def huge_pages(self) -> Optional[int]:
        """
        enable/disable hugepages memory. 0 or 2 or 1024. 0 indicated 'any'
        """
        return pulumi.get(self, "huge_pages")

    @property
    @pulumi.getter(name="keepHugePages")
    def keep_huge_pages(self) -> Optional[bool]:
        """
        Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts. Defaults to false.
        """
        return pulumi.get(self, "keep_huge_pages")

    @property
    @pulumi.getter
    def kvm(self) -> Optional[bool]:
        """
        Enable/disable KVM hardware virtualization. Defaults to true.
        """
        return pulumi.get(self, "kvm")

    @property
    @pulumi.getter(name="localTime")
    def local_time(self) -> Optional[bool]:
        """
        Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.
        """
        return pulumi.get(self, "local_time")

    @property
    @pulumi.getter
    def lock(self) -> Optional[str]:
        """
        Lock/unlock the VM.
        """
        return pulumi.get(self, "lock")

    @property
    @pulumi.getter
    def numa(self) -> Optional[bool]:
        """
        Enable/disable NUMA.
        """
        return pulumi.get(self, "numa")

    @property
    @pulumi.getter(name="onBoot")
    def on_boot(self) -> Optional[bool]:
        """
        Specifies whether a VM will be started during system bootup.
        """
        return pulumi.get(self, "on_boot")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[str]:
        """
        Specify guest operating system. This is used to enable special optimization/features for specific operating systems.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def protection(self) -> Optional[bool]:
        """
        Sets the protection flag of the VM. This will disable the remove VM and remove disk operations. Defaults to false.
        """
        return pulumi.get(self, "protection")

    @property
    @pulumi.getter
    def reboot(self) -> Optional[bool]:
        """
        Allow reboot. If set to 'false' the VM exit on reboot. Defaults to true.
        """
        return pulumi.get(self, "reboot")

    @property
    @pulumi.getter
    def shares(self) -> Optional[int]:
        """
        Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd. 0 ~ 5000. Defaults to 1000.
        """
        return pulumi.get(self, "shares")

    @property
    @pulumi.getter
    def tablet(self) -> Optional[bool]:
        """
        Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`). Defaults to true.
        """
        return pulumi.get(self, "tablet")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        Tags of the VM. This is only meta information.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def template(self) -> Optional[bool]:
        """
        Enable/disable Template. Defaults to false.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="timeDriftFix")
    def time_drift_fix(self) -> Optional[bool]:
        """
        Enable/disable time drift fix. Defaults to false.
        """
        return pulumi.get(self, "time_drift_fix")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        """
        Number of hotplugged vcpus. Defaults to 0.
        """
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter(name="vmGenerationID")
    def vm_generation_id(self) -> Optional[str]:
        """
        The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc. Note that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file. regex: (?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01]). Defaults to 1 (autogenerated)
        """
        return pulumi.get(self, "vm_generation_id")


