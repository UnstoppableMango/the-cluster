# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'VClusterSpec',
    'VClusterSpecControlPlaneEndpoint',
    'VClusterSpecHelmRelease',
    'VClusterSpecHelmReleaseChart',
    'VClusterStatus',
    'VClusterStatusConditions',
]

@pulumi.output_type
class VClusterSpec(dict):
    """
    VClusterSpec defines the desired state of VCluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlPlaneEndpoint":
            suggest = "control_plane_endpoint"
        elif key == "helmRelease":
            suggest = "helm_release"
        elif key == "kubernetesVersion":
            suggest = "kubernetes_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VClusterSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VClusterSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VClusterSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_plane_endpoint: Optional['outputs.VClusterSpecControlPlaneEndpoint'] = None,
                 helm_release: Optional['outputs.VClusterSpecHelmRelease'] = None,
                 kubernetes_version: Optional[str] = None):
        """
        VClusterSpec defines the desired state of VCluster
        :param 'VClusterSpecControlPlaneEndpointArgs' control_plane_endpoint: ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        :param 'VClusterSpecHelmReleaseArgs' helm_release: The helm release configuration for the virtual cluster. This is optional, but when filled, specified chart will be deployed.
        :param str kubernetes_version: Kubernetes version that should be used in this vcluster instance, e.g. "1.23". Versions out of the supported range will be ignored, and earliest/latest supported version will be used instead.
        """
        if control_plane_endpoint is not None:
            pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if helm_release is not None:
            pulumi.set(__self__, "helm_release", helm_release)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> Optional['outputs.VClusterSpecControlPlaneEndpoint']:
        """
        ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        """
        return pulumi.get(self, "control_plane_endpoint")

    @property
    @pulumi.getter(name="helmRelease")
    def helm_release(self) -> Optional['outputs.VClusterSpecHelmRelease']:
        """
        The helm release configuration for the virtual cluster. This is optional, but when filled, specified chart will be deployed.
        """
        return pulumi.get(self, "helm_release")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[str]:
        """
        Kubernetes version that should be used in this vcluster instance, e.g. "1.23". Versions out of the supported range will be ignored, and earliest/latest supported version will be used instead.
        """
        return pulumi.get(self, "kubernetes_version")


@pulumi.output_type
class VClusterSpecControlPlaneEndpoint(dict):
    """
    ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
    """
    def __init__(__self__, *,
                 host: str,
                 port: int):
        """
        ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        :param str host: The hostname on which the API server is serving.
        :param int port: The port on which the API server is serving.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The hostname on which the API server is serving.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port on which the API server is serving.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class VClusterSpecHelmRelease(dict):
    """
    The helm release configuration for the virtual cluster. This is optional, but when filled, specified chart will be deployed.
    """
    def __init__(__self__, *,
                 chart: Optional['outputs.VClusterSpecHelmReleaseChart'] = None,
                 values: Optional[str] = None):
        """
        The helm release configuration for the virtual cluster. This is optional, but when filled, specified chart will be deployed.
        :param 'VClusterSpecHelmReleaseChartArgs' chart: infos about what chart to deploy
        :param str values: the values for the given chart
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def chart(self) -> Optional['outputs.VClusterSpecHelmReleaseChart']:
        """
        infos about what chart to deploy
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def values(self) -> Optional[str]:
        """
        the values for the given chart
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class VClusterSpecHelmReleaseChart(dict):
    """
    infos about what chart to deploy
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 repo: Optional[str] = None,
                 version: Optional[str] = None):
        """
        infos about what chart to deploy
        :param str name: the name of the helm chart
        :param str repo: the repo of the helm chart
        :param str version: the version of the helm chart to use
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        the name of the helm chart
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def repo(self) -> Optional[str]:
        """
        the repo of the helm chart
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        the version of the helm chart to use
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class VClusterStatus(dict):
    """
    VClusterStatus defines the observed state of VCluster
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "observedGeneration":
            suggest = "observed_generation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VClusterStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VClusterStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VClusterStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.VClusterStatusConditions']] = None,
                 initialized: Optional[bool] = None,
                 message: Optional[str] = None,
                 observed_generation: Optional[int] = None,
                 phase: Optional[str] = None,
                 ready: Optional[bool] = None,
                 reason: Optional[str] = None):
        """
        VClusterStatus defines the observed state of VCluster
        :param Sequence['VClusterStatusConditionsArgs'] conditions: Conditions holds several conditions the vcluster might be in
        :param bool initialized: Initialized defines if the virtual cluster control plane was initialized.
        :param str message: Message describes the reason in human readable form why the cluster is in the currrent phase
        :param int observed_generation: ObservedGeneration is the latest generation observed by the controller.
        :param str phase: Phase describes the current phase the virtual cluster is in
        :param bool ready: Ready defines if the virtual cluster control plane is ready.
        :param str reason: Reason describes the reason in machine readable form why the cluster is in the current phase
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if initialized is not None:
            pulumi.set(__self__, "initialized", initialized)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.VClusterStatusConditions']]:
        """
        Conditions holds several conditions the vcluster might be in
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def initialized(self) -> Optional[bool]:
        """
        Initialized defines if the virtual cluster control plane was initialized.
        """
        return pulumi.get(self, "initialized")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message describes the reason in human readable form why the cluster is in the currrent phase
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration is the latest generation observed by the controller.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        Phase describes the current phase the virtual cluster is in
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def ready(self) -> Optional[bool]:
        """
        Ready defines if the virtual cluster control plane is ready.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason describes the reason in machine readable form why the cluster is in the current phase
        """
        return pulumi.get(self, "reason")


@pulumi.output_type
class VClusterStatusConditions(dict):
    """
    Condition defines an observation of a Cluster API resource operational state.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastTransitionTime":
            suggest = "last_transition_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VClusterStatusConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VClusterStatusConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VClusterStatusConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param str last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param str message: A human readable message indicating details about the transition. This field may be empty.
        :param str reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether this field is considered a guaranteed API. This field may not be empty.
        :param str severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")


