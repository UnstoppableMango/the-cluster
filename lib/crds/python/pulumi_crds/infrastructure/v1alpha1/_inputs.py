# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'VClusterSpecControlPlaneEndpointArgs',
    'VClusterSpecHelmReleaseChartArgs',
    'VClusterSpecHelmReleaseArgs',
    'VClusterSpecArgs',
    'VClusterStatusConditionsArgs',
    'VClusterStatusArgs',
]

@pulumi.input_type
class VClusterSpecControlPlaneEndpointArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        :param pulumi.Input[str] host: The hostname on which the API server is serving.
        :param pulumi.Input[int] port: The port on which the API server is serving.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The hostname on which the API server is serving.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port on which the API server is serving.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class VClusterSpecHelmReleaseChartArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        infos about what chart to deploy
        :param pulumi.Input[str] name: the name of the helm chart
        :param pulumi.Input[str] repo: the repo of the helm chart
        :param pulumi.Input[str] version: the version of the helm chart to use
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        the name of the helm chart
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        the repo of the helm chart
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        the version of the helm chart to use
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class VClusterSpecHelmReleaseArgs:
    def __init__(__self__, *,
                 chart: Optional[pulumi.Input['VClusterSpecHelmReleaseChartArgs']] = None,
                 values: Optional[pulumi.Input[str]] = None):
        """
        The helm release configuration for the virtual cluster. This is optional, but when filled, specified chart will be deployed.
        :param pulumi.Input['VClusterSpecHelmReleaseChartArgs'] chart: infos about what chart to deploy
        :param pulumi.Input[str] values: the values for the given chart
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input['VClusterSpecHelmReleaseChartArgs']]:
        """
        infos about what chart to deploy
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input['VClusterSpecHelmReleaseChartArgs']]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[str]]:
        """
        the values for the given chart
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class VClusterSpecArgs:
    def __init__(__self__, *,
                 control_plane_endpoint: Optional[pulumi.Input['VClusterSpecControlPlaneEndpointArgs']] = None,
                 helm_release: Optional[pulumi.Input['VClusterSpecHelmReleaseArgs']] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None):
        """
        VClusterSpec defines the desired state of VCluster
        :param pulumi.Input['VClusterSpecControlPlaneEndpointArgs'] control_plane_endpoint: ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        :param pulumi.Input['VClusterSpecHelmReleaseArgs'] helm_release: The helm release configuration for the virtual cluster. This is optional, but when filled, specified chart will be deployed.
        :param pulumi.Input[str] kubernetes_version: Kubernetes version that should be used in this vcluster instance, e.g. "1.23". Versions out of the supported range will be ignored, and earliest/latest supported version will be used instead.
        """
        if control_plane_endpoint is not None:
            pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if helm_release is not None:
            pulumi.set(__self__, "helm_release", helm_release)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> Optional[pulumi.Input['VClusterSpecControlPlaneEndpointArgs']]:
        """
        ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
        """
        return pulumi.get(self, "control_plane_endpoint")

    @control_plane_endpoint.setter
    def control_plane_endpoint(self, value: Optional[pulumi.Input['VClusterSpecControlPlaneEndpointArgs']]):
        pulumi.set(self, "control_plane_endpoint", value)

    @property
    @pulumi.getter(name="helmRelease")
    def helm_release(self) -> Optional[pulumi.Input['VClusterSpecHelmReleaseArgs']]:
        """
        The helm release configuration for the virtual cluster. This is optional, but when filled, specified chart will be deployed.
        """
        return pulumi.get(self, "helm_release")

    @helm_release.setter
    def helm_release(self, value: Optional[pulumi.Input['VClusterSpecHelmReleaseArgs']]):
        pulumi.set(self, "helm_release", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes version that should be used in this vcluster instance, e.g. "1.23". Versions out of the supported range will be ignored, and earliest/latest supported version will be used instead.
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)


@pulumi.input_type
class VClusterStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        Condition defines an observation of a Cluster API resource operational state.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition. This field may be empty.
        :param pulumi.Input[str] reason: The reason for the condition's last transition in CamelCase. The specific API may choose whether this field is considered a guaranteed API. This field may not be empty.
        :param pulumi.Input[str] severity: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition. This field may be empty.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition in CamelCase. The specific API may choose whether this field is considered a guaranteed API. This field may not be empty.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class VClusterStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['VClusterStatusConditionsArgs']]]] = None,
                 initialized: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 ready: Optional[pulumi.Input[bool]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        VClusterStatus defines the observed state of VCluster
        :param pulumi.Input[Sequence[pulumi.Input['VClusterStatusConditionsArgs']]] conditions: Conditions holds several conditions the vcluster might be in
        :param pulumi.Input[bool] initialized: Initialized defines if the virtual cluster control plane was initialized.
        :param pulumi.Input[str] message: Message describes the reason in human readable form why the cluster is in the currrent phase
        :param pulumi.Input[int] observed_generation: ObservedGeneration is the latest generation observed by the controller.
        :param pulumi.Input[str] phase: Phase describes the current phase the virtual cluster is in
        :param pulumi.Input[bool] ready: Ready defines if the virtual cluster control plane is ready.
        :param pulumi.Input[str] reason: Reason describes the reason in machine readable form why the cluster is in the current phase
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if initialized is not None:
            pulumi.set(__self__, "initialized", initialized)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VClusterStatusConditionsArgs']]]]:
        """
        Conditions holds several conditions the vcluster might be in
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VClusterStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def initialized(self) -> Optional[pulumi.Input[bool]]:
        """
        Initialized defines if the virtual cluster control plane was initialized.
        """
        return pulumi.get(self, "initialized")

    @initialized.setter
    def initialized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "initialized", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message describes the reason in human readable form why the cluster is in the currrent phase
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        ObservedGeneration is the latest generation observed by the controller.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        """
        Phase describes the current phase the virtual cluster is in
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def ready(self) -> Optional[pulumi.Input[bool]]:
        """
        Ready defines if the virtual cluster control plane is ready.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason describes the reason in machine readable form why the cluster is in the current phase
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


